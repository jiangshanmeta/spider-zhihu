[
    {
        "content": {
            "id": 3074538715,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/384673958/answer/3074538715",
            "created_time": 1686793065,
            "updated_time": 1686793065,
            "question": {
                "type": "question",
                "id": 384673958,
                "title": "请问您见过最惊艳的sql查询语句是什么？",
                "question_type": "normal",
                "created": 1585837746,
                "updated_time": 1585837746,
                "url": "https://www.zhihu.com/question/384673958",
                "is_deleted": false
            },
            "author": {
                "id": "95a3b0e4de4dd47aa79ed9df8208bb54",
                "url_token": "chunwei1978",
                "name": "chunwei1978",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/95a3b0e4de4dd47aa79ed9df8208bb54",
                "user_type": "people",
                "headline": "曾经的程序员",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1543459053
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 83,
            "comment_count": 1,
            "thanks_count": 36,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"qwjvUaA0\">推荐两本书：</p><ul><li data-pid=\"0wr1ER3f\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/3007085/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SQL解惑</a></li><li data-pid=\"9Xd6UJgQ\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/3012601/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SQL语言艺术</a></li></ul><p data-pid=\"uiqvnHtg\">里边全是令人惊艳的SQL语句。</p>",
            "excerpt": "推荐两本书： SQL解惑 SQL语言艺术 里边全是令人惊艳的SQL语句。",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjb+Ya6CyCBjeMWkgIlCgk1ODkwOTIyMzUSCjMwNzQ1Mzg3MTUYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-06-15T09:37:45+08:00"
    },
    {
        "content": {
            "id": 675264820,
            "title": "有什么提高数学能力的书籍推荐吗？",
            "type": "article",
            "excerpt_title": "1.《线性代数》 by Gilbert Strang Gilbert Strang 是麻省理工学院（MIT）的数学教授，以其在线性代数领域的杰出贡献而著称。 这本书提供了线性代数的全面介绍，涵盖了矩阵、向量空间、特征值、线性变换等主题。书中以实例引导，介绍了线性方程组的解法，包括高斯消元法和其他求解技巧。同时，作者从几何、代数和分析的角度阐述了线性代数的核心思想，使读者能够深入理解其应用。此外，书中还包括了大量实际问题的案例分析，以及…",
            "url": "https://zhuanlan.zhihu.com/p/675264820",
            "image_url": "",
            "created": 1703898736,
            "updated": 1703898736,
            "author": {
                "id": "f39be966bcf2ab49020380ca9032aece",
                "url_token": "69-91-1-20-22",
                "name": "成年人的裤衩",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-e1b6192aa0d8dcf140ba189dea518a4c_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-e1b6192aa0d8dcf140ba189dea518a4c.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/f39be966bcf2ab49020380ca9032aece",
                "user_type": "people",
                "headline": "",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1702957410
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"ywkjN3SU\">1.《线性代数》 by Gilbert Strang <br/>Gilbert Strang 是麻省理工学院（MIT）的数学教授，以其在线性代数领域的杰出贡献而著称。 <br/>这本书提供了线性代数的全面介绍，涵盖了矩阵、向量空间、特征值、线性变换等主题。书中以实例引导，介绍了线性方程组的解法，包括高斯消元法和其他求解技巧。同时，作者从几何、代数和分析的角度阐述了线性代数的核心思想，使读者能够深入理解其应用。此外，书中还包括了大量实际问题的案例分析，以及丰富的练习题，有助于巩固和提高读者的理解和运用能力。<br/> Strang 用通俗易懂的语言讲解了线性代数的核心概念，是线性代数学习的不二之选。<br/>2.《微积分学》 by James Stewart <br/>James Stewart 是加拿大数学家，因其撰写的微积分教材而广受欢迎。 <br/>这本书详细介绍了微积分的基本概念，包括极限、导数、积分和无穷级数，以及多元微积分。书中强调了实际问题的求解，运用丰富的例子和练习题来帮助学生掌握微积分的应用。同时，通过对函数、图像和几何的深入讨论，使读者能够形象地理解微积分的概念。此外，书中还介绍了一些高级主题，如矢量分析和微分方程，为读者进一步学习打下坚实的基础。 <br/>Stewart 的书为初学者提供了清晰的微积分教学，实例丰富，易于理解。<br/>3.《抽象代数》 by Dummit &amp; Foote <br/>David S. Dummit 和 Richard M. Foote 是著名的数学家，专注于抽象代数领域的研究。 <br/>这本书详细讨论了抽象代数的核心主题，如群、环、域、向量空间、模等，以及它们在数学、物理和计算机科学等领域的应用。书中对每个概念都给出了直观的解释，并通过丰富的例子和练习题加深读者的理解。同时，书中也介绍了一些高级主题，如伽罗华理论、多项式理论和代数几何，帮助读者建立起对抽象代数全面的认识。这本书适合数学专业的本科生和研究生以及对抽象代数感兴趣的读者。 <br/>Dummit 和 Foote 的《抽象代数》深入浅出，实例丰富，为学习抽象代数的理论与应用提供了极佳指南。<br/>4.《数学分析》 by Tom Apostol <br/>Tom M. Apostol 是美国加州理工学院（Caltech）的数学教授，以其在数学教育领域的贡献而著称。 <br/>这本书全面介绍了实数和复数分析的基础知识，包括极限、连续性、导数、积分、级数、泰勒展开等。书中对每个概念都给出了严密的定义和证明，并通过大量的例子和练习题来帮助读者巩固理解。此外，本书还涉及了一些高级主题，如多元函数分析、Fourier 分析和复分析。这本书既适合数学专业的本科生，也适合研究生和自学者。 <br/>Apostol 的《数学分析》严谨细致，将理论和实践相结合，是数学分析学习的经典教材。<br/>5.《数学思想》 by Morris Kline <br/>Morris Kline 是美国纽约大学的数学教授，因其在数学历史和哲学领域的贡献而知名。 <br/>这本书以历史的角度回顾了数学的发展，从古希腊时期到现代，涵盖了代数、几何、微积分等多个领域。书中详细探讨了数学家们是如何解决难题的，以及这些难题是如何推动数学的发展的。同时，作者还讨论了数学在科学、技术和艺术中的应用，展示了数学的美丽和力量。这本书适合广大数学爱好者和学生。<br/> Kline 的《数学思想》让读者领略数学的历史与魅力，深入浅出，令人叹为观止。<br/>6.《数学分析定理与证明》 by Roger A. Johnson <br/>Roger A. Johnson 是美国罗格斯大学的数学教授，具有丰富的数学教学经验。 <br/>这本书专注于数学分析的定理和证明，涵盖了实数系统、极限、连续性、导数、积分、级数等基本概念。通过详细的证明过程，书中揭示了数学分析的严密性和逻辑结构，帮助读者掌握数学分析的核心思想。此外，书中还提供了大量的练习题和解答，使读者能够通过实际操作来巩固所学的知识。这本书适合数学专业的本科生和自学者。 <br/>Johnson 的《数学分析定理与证明》深入讲解数学分析的证明技巧，严谨而实用，是学习数学分析的好帮手。<br/>7.《数学竞赛入门经典》 by Richard Rusczyk <br/>Richard Rusczyk 是美国数学家和教育家，曾获得全美数学竞赛冠军，创办了在线数学学习平台 AoPS。<br/> 这本书为数学竞赛初学者提供了全面的指南，包括代数、几何、组合和数论等主题。书中提供了大量典型的竞赛题目及其解法，以及实用的解题技巧和策略。此外，作者还分享了自己的数学竞赛经验，鼓励读者在学习过程中保持积极的心态。这本书适合广大数学竞赛爱好者和备战数学竞赛的学生。 <br/>Rusczyk 的《数学竞赛入门经典》为读者提供了丰富的题库和实用的解题技巧，是备战数学竞赛的必备教材。<br/>8.《计算机科学中的数学》 by Ian Parberry <br/>Ian Parberry 是美国北德克萨斯大学计算机科学与工程系的教授，拥有丰富的教学和研究经验。<br/> 这本书探讨了计算机科学中的数学基础，包括集合论、逻辑、图论、算法、数论和概率等。书中通过详细的例子和应用，阐述了这些数学概念在计算机科学中的重要性。同时，作者还介绍了一些计算机科学领域的经典问题，如排序、搜索和最短路径等，帮助读者建立对计算机科学的全面认识。这本书适合计算机科学专业的学生和对计算机科学感兴趣的读者。 <br/>Parberry 的《计算机科学中的数学》将数学与计算机科学紧密结合，通俗易懂，为学习计算机科学提供了坚实的数学基础。<br/>9.《数学小百科》 by Timothy Gowers <br/>Timothy Gowers 是英国剑桥大学的数学教授，2000年因其在泛函分析领域的杰出贡献荣获菲尔兹奖。 <br/>这本书涵盖了数学的各个分支，如代数、几何、分析、拓扑、概率等。书中以百科全书的形式，对各个领域的基本概念和定理进行了详细的解释和示例。同时，作者以轻松的笔触展示了数学在科学、技术和生活中的应用，激发读者对数学的兴趣。这本书适合广大数学爱好者和学生。 <br/>Gowers 的《数学小百科》内容丰富，条理清晰，是一本既实用又有趣的数学工具书。<br/>10.《数学的乐趣》 by Paul J. Nahin <br/>Paul J. Nahin 是美国新罕布什尔大学的电气工程教授，同时也是多本数学通俗读物的作者。 <br/>这本书通过一系列有趣的数学问题和奇思妙想，引导读者探索数学的美丽和趣味。书中涉及了代数、几何、概率、数论等多个领域，旨在激发读者的数学兴趣和思考能力。每个问题都配有详细的解答过程和相关背景知识，使读者在娱乐中学习。这本书适合数学爱好者和希望增强数学思维能力的读者。<br/> Nahin 的《数学的乐趣》寓教于乐，激发了读者对数学的热爱，是一本难以抗拒的数学佳作。<br/>以上就是我为您推荐的提高数学能力的书籍。这些书籍涵盖了各个数学领域的基本概念和应用，既适合初学者入门，也适合有一定数学基础的读者深入学习。</p>",
            "voteup_count": 3,
            "comment_count": 0
        },
        "created": "2023-12-30T09:12:16+08:00"
    },
    {
        "content": {
            "id": 3263994984,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/47623616/answer/3263994984",
            "created_time": 1698219960,
            "updated_time": 1698219960,
            "question": {
                "type": "question",
                "id": 47623616,
                "title": "信息学竞赛能自学吗？",
                "question_type": "normal",
                "created": 1466397893,
                "updated_time": 1466397893,
                "url": "https://www.zhihu.com/question/47623616",
                "is_deleted": false
            },
            "author": {
                "id": "dd5411e8c4eb08e4150ba40f6958e328",
                "url_token": "welcome-world",
                "name": "哇咔咔",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-856d774b9889e7582f08cd473fb8bc2d_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-856d774b9889e7582f08cd473fb8bc2d.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/dd5411e8c4eb08e4150ba40f6958e328",
                "user_type": "people",
                "headline": "",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1572524496
            },
            "thumbnail": "https://pic1.zhimg.com/v2-0fa5e9ba796c53b56347c8d0ce3c208d_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 13,
            "comment_count": 0,
            "thanks_count": 20,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<h2>信息学竞赛维基：OI Wiki</h2><a href=\"https://link.zhihu.com/?target=https%3A//oi-wiki.org/contest/resources/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">学习资源 - OI Wiki</a><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-0fa5e9ba796c53b56347c8d0ce3c208d_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1434\" data-rawheight=\"9355\" data-original-token=\"v2-0fa5e9ba796c53b56347c8d0ce3c208d\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-49cfeda335c1f13a198e59372accc5d9_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1434\" data-original=\"https://picx.zhimg.com/v2-0fa5e9ba796c53b56347c8d0ce3c208d_r.jpg?source=2c26e567\"/></figure><h2>一、算法竞赛入门经典 第1版、第2版 (刘汝佳)</h2><h3>1.1.算法竞赛入门经典 第1版 (刘汝佳)</h3><p data-pid=\"Jpw9BCWC\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963725985-838b4c%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">算法竞赛入门经典 第1版 (刘汝佳).pdf</a><p data-pid=\"JAkH3FIt\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-297f626100c9cca53a5a240caf704f42_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"895\" data-rawheight=\"825\" data-original-token=\"v2-297f626100c9cca53a5a240caf704f42\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-60553de0beeead9e8d3e3ea3774c43d9_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"895\" data-original=\"https://pic1.zhimg.com/v2-297f626100c9cca53a5a240caf704f42_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-367092fecaf1eee35093332ec6c0368a_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1194\" data-rawheight=\"830\" data-original-token=\"v2-367092fecaf1eee35093332ec6c0368a\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-deeb17e1c519a74f2efe10dc9bd33abf_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1194\" data-original=\"https://pica.zhimg.com/v2-367092fecaf1eee35093332ec6c0368a_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-dfc8a216000e28829ea3d906f01fd17a_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1189\" data-rawheight=\"821\" data-original-token=\"v2-dfc8a216000e28829ea3d906f01fd17a\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-e1220910648d728902c2f37033d8771a_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1189\" data-original=\"https://picx.zhimg.com/v2-dfc8a216000e28829ea3d906f01fd17a_r.jpg?source=2c26e567\"/></figure><h3>1.2.算法竞赛入门经典 第2版 (刘汝佳)</h3><p data-pid=\"WbO9pBSR\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963726048-67e943%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">算法竞赛入门经典 第2版 (刘汝佳).pdf</a><p data-pid=\"o4b9JoCj\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-d8164e5ad6e43d7471782491672823b9_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"825\" data-original-token=\"v2-d8164e5ad6e43d7471782491672823b9\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-21279b51bbd54ef7bf52e79dd2d7af3a_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://pica.zhimg.com/v2-d8164e5ad6e43d7471782491672823b9_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-68f9f3aa6896e7e2277c900645b50639_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1177\" data-rawheight=\"820\" data-original-token=\"v2-68f9f3aa6896e7e2277c900645b50639\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-5b7431f9ba0bebb68b508213cfa2d0e2_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1177\" data-original=\"https://pica.zhimg.com/v2-68f9f3aa6896e7e2277c900645b50639_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-6a5a64905574a477e57e737040c0eb8d_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"827\" data-original-token=\"v2-6a5a64905574a477e57e737040c0eb8d\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-24ae38dcac0af0842181dc65730ac70a_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://picx.zhimg.com/v2-6a5a64905574a477e57e737040c0eb8d_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-7ac79dcd82b57ea852b1731539c168c0_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"820\" data-original-token=\"v2-7ac79dcd82b57ea852b1731539c168c0\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-21dcab43f9c5588808575af43b3f4737_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://picx.zhimg.com/v2-7ac79dcd82b57ea852b1731539c168c0_r.jpg?source=2c26e567\"/></figure><h2>二、挑战程序设计竞赛 第2版 (巫泽俊)</h2><p data-pid=\"J5jAhH1e\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-893976609-511629%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">挑战程序设计竞赛 第2版 (巫泽俊).pdf</a><p data-pid=\"IzuoIAeM\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-0e7034e99aac8120ec89ae7431e02a8e_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1303\" data-rawheight=\"806\" data-original-token=\"v2-0e7034e99aac8120ec89ae7431e02a8e\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-af6cc15fba154d012c45418a706e6320_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1303\" data-original=\"https://picx.zhimg.com/v2-0e7034e99aac8120ec89ae7431e02a8e_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-1bacf0e3bbb896c9421097ae7f52ff76_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1339\" data-rawheight=\"816\" data-original-token=\"v2-1bacf0e3bbb896c9421097ae7f52ff76\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-a000d5742170f0bc7e0d5dbf23395267_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1339\" data-original=\"https://picx.zhimg.com/v2-1bacf0e3bbb896c9421097ae7f52ff76_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-2474e9ab61791081886a8ee99f70b17c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1343\" data-rawheight=\"825\" data-original-token=\"v2-2474e9ab61791081886a8ee99f70b17c\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-a33a35bc44e1c69b883b994f6b0c835b_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1343\" data-original=\"https://picx.zhimg.com/v2-2474e9ab61791081886a8ee99f70b17c_r.jpg?source=2c26e567\"/></figure><h2>三、ACM国际大学生程序设计竞赛 知识与入门、题目与解读、算法与实现 (俞勇)</h2><h3>3.1.ACM国际大学生程序设计竞赛 知识与入门 (俞勇)</h3><p data-pid=\"dyVmxyCy\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-887945853-54fe64%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM国际大学生程序设计竞赛 知识与入门 (俞勇).pdf</a><p data-pid=\"QNxsLyib\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-ad1bf3d89d5d99f94bbe42a47a7568b4_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1340\" data-rawheight=\"779\" data-original-token=\"v2-ad1bf3d89d5d99f94bbe42a47a7568b4\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-590f249fbd5937e30c4e05d3c7f74cbc_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1340\" data-original=\"https://pica.zhimg.com/v2-ad1bf3d89d5d99f94bbe42a47a7568b4_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-643c15cc29e7d1820213eb0e8a97a452_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1335\" data-rawheight=\"774\" data-original-token=\"v2-643c15cc29e7d1820213eb0e8a97a452\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-d339c34cb8eef6bfc1879f05ab578e7e_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1335\" data-original=\"https://picx.zhimg.com/v2-643c15cc29e7d1820213eb0e8a97a452_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-351e63c30a2bfa205d5fc74e17d1126b_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1332\" data-rawheight=\"771\" data-original-token=\"v2-351e63c30a2bfa205d5fc74e17d1126b\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-2d42c93d99ccce6ce70ee6e839558894_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1332\" data-original=\"https://picx.zhimg.com/v2-351e63c30a2bfa205d5fc74e17d1126b_r.jpg?source=2c26e567\"/></figure><h3>3.2.ACM国际大学生程序设计竞赛 题目与解读 (俞勇)</h3><p data-pid=\"sTQpHwWv\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-887945847-36a52c%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM国际大学生程序设计竞赛 题目与解读 (俞勇).pdf</a><p data-pid=\"PtHtNW9c\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-1ce2824fb63160b98cc5f0c765a61ec0_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1277\" data-rawheight=\"749\" data-original-token=\"v2-1ce2824fb63160b98cc5f0c765a61ec0\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-9809c36257f9e5b7c754987666e19db9_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1277\" data-original=\"https://picx.zhimg.com/v2-1ce2824fb63160b98cc5f0c765a61ec0_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-49d17888e2dc17f7114a94a35a9cd115_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1276\" data-rawheight=\"769\" data-original-token=\"v2-49d17888e2dc17f7114a94a35a9cd115\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-e7af5e4ddd9048684c2491d0d61d68d1_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1276\" data-original=\"https://picx.zhimg.com/v2-49d17888e2dc17f7114a94a35a9cd115_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-48e0d43de9fd7cd2a83a59a6531f7a6d_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1279\" data-rawheight=\"771\" data-original-token=\"v2-48e0d43de9fd7cd2a83a59a6531f7a6d\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-c0da7371e4c2e5861c2f8abf3b2eef8a_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1279\" data-original=\"https://picx.zhimg.com/v2-48e0d43de9fd7cd2a83a59a6531f7a6d_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-51e5b5324a1c9138f37f6623ee3e0d56_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1275\" data-rawheight=\"771\" data-original-token=\"v2-51e5b5324a1c9138f37f6623ee3e0d56\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-1762a34b9eeacaea6fd60ae428da5a1b_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1275\" data-original=\"https://picx.zhimg.com/v2-51e5b5324a1c9138f37f6623ee3e0d56_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-a58d5539dfb61952ab69b75d0bce7f1b_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1277\" data-rawheight=\"770\" data-original-token=\"v2-a58d5539dfb61952ab69b75d0bce7f1b\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-18cfb1ca1d40e73618d649382087a3d1_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1277\" data-original=\"https://picx.zhimg.com/v2-a58d5539dfb61952ab69b75d0bce7f1b_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-6894081e2b22db215b8bf33d0f72fa79_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"772\" data-original-token=\"v2-6894081e2b22db215b8bf33d0f72fa79\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-2ef15c42e86582900236071d3e4175b8_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://picx.zhimg.com/v2-6894081e2b22db215b8bf33d0f72fa79_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-d11999598cb5c51e5f8b951f50d89f21_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1276\" data-rawheight=\"775\" data-original-token=\"v2-d11999598cb5c51e5f8b951f50d89f21\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-56648fb6288cade740ab5cb642eeb37d_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1276\" data-original=\"https://picx.zhimg.com/v2-d11999598cb5c51e5f8b951f50d89f21_r.jpg?source=2c26e567\"/></figure><h3>3.3.ACM国际大学生程序设计竞赛 算法与实现 (俞勇)</h3><p data-pid=\"R9NIB9n8\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-887945652-bab5c9%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ACM国际大学生程序设计竞赛 算法与实现 (俞勇).pdf</a><p data-pid=\"b36UM-Mr\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-45301eb4fc443fd4710f2c0966efb557_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1365\" data-rawheight=\"831\" data-original-token=\"v2-45301eb4fc443fd4710f2c0966efb557\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-57823bf854a352defd15e939303084bb_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1365\" data-original=\"https://picx.zhimg.com/v2-45301eb4fc443fd4710f2c0966efb557_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-141dd3decca062fc9500d8651b34521b_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1360\" data-rawheight=\"827\" data-original-token=\"v2-141dd3decca062fc9500d8651b34521b\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-8a714ce7ba1d2bba9e573a739e7c71e7_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1360\" data-original=\"https://picx.zhimg.com/v2-141dd3decca062fc9500d8651b34521b_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-62e40ddaf0fc0b690d8a0f09833d7d69_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"830\" data-original-token=\"v2-62e40ddaf0fc0b690d8a0f09833d7d69\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-746579c78fceb27da369f49f6410f67d_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://picx.zhimg.com/v2-62e40ddaf0fc0b690d8a0f09833d7d69_r.jpg?source=2c26e567\"/></figure><h2>四、信息学奥赛之数学一本通 (林厚从)</h2><p data-pid=\"BTA8DkMk\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963429213-914c7b%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">信息学奥赛之数学一本通 (林厚从).pdf</a><p data-pid=\"nPNmaV8j\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-3b4d9975e48e09803cd947dee64a57e4_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1104\" data-rawheight=\"805\" data-original-token=\"v2-3b4d9975e48e09803cd947dee64a57e4\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-29beab2c9470b9c66aed0a38493ce17c_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1104\" data-original=\"https://picx.zhimg.com/v2-3b4d9975e48e09803cd947dee64a57e4_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-8a26ddcda46ba94327278acbee620291_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1100\" data-rawheight=\"821\" data-original-token=\"v2-8a26ddcda46ba94327278acbee620291\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-a6d33587824ef3f51c627be33ba6664f_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1100\" data-original=\"https://picx.zhimg.com/v2-8a26ddcda46ba94327278acbee620291_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-981b66ed80e31882ac224c12a4b7802c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1101\" data-rawheight=\"825\" data-original-token=\"v2-981b66ed80e31882ac224c12a4b7802c\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-72b7e6219e84aa3a8196115dd3b9061e_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1101\" data-original=\"https://pic1.zhimg.com/v2-981b66ed80e31882ac224c12a4b7802c_r.jpg?source=2c26e567\"/></figure><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963428844-ccea81%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">信息学奥赛之数学一本通 (林厚从).epub</a><p data-pid=\"XXjDEbAl\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-68a830ac5f9d3ec8e4af7d213c12a905_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1762\" data-rawheight=\"1021\" data-original-token=\"v2-68a830ac5f9d3ec8e4af7d213c12a905\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-9f70ca10d8d0a18f86f1388bd35246c6_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1762\" data-original=\"https://pic1.zhimg.com/v2-68a830ac5f9d3ec8e4af7d213c12a905_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-515c367dc09d10cf945d882238e7bada_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1762\" data-rawheight=\"1026\" data-original-token=\"v2-515c367dc09d10cf945d882238e7bada\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-ea009933bdfc5d0538224410205a705c_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1762\" data-original=\"https://pic1.zhimg.com/v2-515c367dc09d10cf945d882238e7bada_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-3d5d33b88974548e8d0be53c5224ecfb_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1760\" data-rawheight=\"1020\" data-original-token=\"v2-3d5d33b88974548e8d0be53c5224ecfb\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-ffdfc53e48a832ff0fa146d6fd37f098_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1760\" data-original=\"https://pic1.zhimg.com/v2-3d5d33b88974548e8d0be53c5224ecfb_r.jpg?source=2c26e567\"/></figure><h2>五、信息学竞赛国家集训队2013-2020论文集</h2><h3>5.1.信息学竞赛国家集训队2013论文集</h3><p data-pid=\"_cHztEnn\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963429279-a18a2f%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">信息学竞赛国家集训队2013论文集.pdf</a><p data-pid=\"raBh23Ex\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-8679f36d4f44fdbaa8e6824fdcf862a3_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"821\" data-original-token=\"v2-8679f36d4f44fdbaa8e6824fdcf862a3\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-f8fccb57a059a5d9149443e821d55263_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://picx.zhimg.com/v2-8679f36d4f44fdbaa8e6824fdcf862a3_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-ef6225d24ad74ed01dd5fe4ede76928e_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1185\" data-rawheight=\"825\" data-original-token=\"v2-ef6225d24ad74ed01dd5fe4ede76928e\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-2db2cabbd5b296ea2b09e5dc9cac5f55_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1185\" data-original=\"https://picx.zhimg.com/v2-ef6225d24ad74ed01dd5fe4ede76928e_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-1967394ad6667f0d2957e021083ed37f_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1186\" data-rawheight=\"831\" data-original-token=\"v2-1967394ad6667f0d2957e021083ed37f\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-9134e235314c6356625a8efe93164dd2_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1186\" data-original=\"https://pic1.zhimg.com/v2-1967394ad6667f0d2957e021083ed37f_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-c816937da56fbf733445f2a379aab6f8_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1186\" data-rawheight=\"825\" data-original-token=\"v2-c816937da56fbf733445f2a379aab6f8\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-67be75aefeff8a20ab41db8c75e3666f_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1186\" data-original=\"https://pica.zhimg.com/v2-c816937da56fbf733445f2a379aab6f8_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-7182c39ef2e9dcfba68d086950efdc42_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"822\" data-original-token=\"v2-7182c39ef2e9dcfba68d086950efdc42\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-bfcb266830e38335410abb831c50b8c7_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://pic1.zhimg.com/v2-7182c39ef2e9dcfba68d086950efdc42_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-2dde868f5e8b78b4046d2f850f44b02a_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1185\" data-rawheight=\"821\" data-original-token=\"v2-2dde868f5e8b78b4046d2f850f44b02a\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-6855ac07609c1d66821797717483f207_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1185\" data-original=\"https://picx.zhimg.com/v2-2dde868f5e8b78b4046d2f850f44b02a_r.jpg?source=2c26e567\"/></figure><h3>5.2.信息学竞赛国家集训队2014论文集</h3><p data-pid=\"hAsY5g3W\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963429315-f560fc%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">信息学竞赛国家集训队2014论文集.pdf</a><p data-pid=\"ZpAWaWAD\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-497e958b2ce912de1120c487952d7da3_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1187\" data-rawheight=\"824\" data-original-token=\"v2-497e958b2ce912de1120c487952d7da3\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-ce50ae0a8331677bc6a42a16e4456edc_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1187\" data-original=\"https://picx.zhimg.com/v2-497e958b2ce912de1120c487952d7da3_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-7c3bf3ce191883d3fdfeccf9f8d427de_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"820\" data-original-token=\"v2-7c3bf3ce191883d3fdfeccf9f8d427de\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-5e3e6ce2c9a42eff9525a48fd4fbb690_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://picx.zhimg.com/v2-7c3bf3ce191883d3fdfeccf9f8d427de_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-ff34ad06bb7860b8444b8f554c8fa93f_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1186\" data-rawheight=\"825\" data-original-token=\"v2-ff34ad06bb7860b8444b8f554c8fa93f\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-6d99f4973b2a7cc1f3212fb4ff87f9f3_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1186\" data-original=\"https://picx.zhimg.com/v2-ff34ad06bb7860b8444b8f554c8fa93f_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-756a9f9a19903ff79bf0bc973e225fb5_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1186\" data-rawheight=\"827\" data-original-token=\"v2-756a9f9a19903ff79bf0bc973e225fb5\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-69c164e429a354d2bcd1f919235a15ab_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1186\" data-original=\"https://pica.zhimg.com/v2-756a9f9a19903ff79bf0bc973e225fb5_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-d3f4120a000a8b0f717678d6c79d398a_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"820\" data-original-token=\"v2-d3f4120a000a8b0f717678d6c79d398a\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-4069bc27bb382512280fda8f5deb6af6_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://pic1.zhimg.com/v2-d3f4120a000a8b0f717678d6c79d398a_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-454532e0299d52c03dee3792ea256fc1_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1185\" data-rawheight=\"824\" data-original-token=\"v2-454532e0299d52c03dee3792ea256fc1\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-2df7a30cb2731bd4f264092ac2700e8b_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1185\" data-original=\"https://picx.zhimg.com/v2-454532e0299d52c03dee3792ea256fc1_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-67860150b683fa5a2a0bfe643f3e7a6f_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"820\" data-original-token=\"v2-67860150b683fa5a2a0bfe643f3e7a6f\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-8851e2f756404319a88267b12e080255_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://picx.zhimg.com/v2-67860150b683fa5a2a0bfe643f3e7a6f_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-b272d5d65e9ba18bdd45cab0c4ecacab_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"821\" data-original-token=\"v2-b272d5d65e9ba18bdd45cab0c4ecacab\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-058a5081071015f0293f46acce8731e5_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://pic1.zhimg.com/v2-b272d5d65e9ba18bdd45cab0c4ecacab_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-ef4aa38e60370a6b22d0be9aea0c7086_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"821\" data-original-token=\"v2-ef4aa38e60370a6b22d0be9aea0c7086\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-67c91708efee34234eec3d9ec4a5748c_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://picx.zhimg.com/v2-ef4aa38e60370a6b22d0be9aea0c7086_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-819897d4453e50987cfc35317ba01344_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"824\" data-original-token=\"v2-819897d4453e50987cfc35317ba01344\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-43a934a7a0f4a2ade9b6d51f318dd97c_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://picx.zhimg.com/v2-819897d4453e50987cfc35317ba01344_r.jpg?source=2c26e567\"/></figure><h3>5.3.信息学竞赛国家集训队2015论文集</h3><p data-pid=\"a_9ayblj\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963429396-d93ec0%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">信息学竞赛国家集训队2015论文集.pdf</a><p data-pid=\"QQET-Mfw\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-763b2aa0848c4dbe3d96827f6c1dae94_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1296\" data-rawheight=\"825\" data-original-token=\"v2-763b2aa0848c4dbe3d96827f6c1dae94\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-a4f700985df558718173c0c44ad0f45d_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1296\" data-original=\"https://picx.zhimg.com/v2-763b2aa0848c4dbe3d96827f6c1dae94_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-d7b0b1ce675420bd8b7b920a7ed69565_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1292\" data-rawheight=\"820\" data-original-token=\"v2-d7b0b1ce675420bd8b7b920a7ed69565\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-44041192aae2d85f0615ac1d3820546f_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1292\" data-original=\"https://pic1.zhimg.com/v2-d7b0b1ce675420bd8b7b920a7ed69565_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-1eca51620a008431d1f02fdea51d4de4_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1295\" data-rawheight=\"822\" data-original-token=\"v2-1eca51620a008431d1f02fdea51d4de4\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-19e33d20367ee038a722e2d8690cecc1_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1295\" data-original=\"https://picx.zhimg.com/v2-1eca51620a008431d1f02fdea51d4de4_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-7d90de70e9f96871e694528865d1912f_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1297\" data-rawheight=\"824\" data-original-token=\"v2-7d90de70e9f96871e694528865d1912f\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-01de78e1988dd8e79932e534d4a15d60_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1297\" data-original=\"https://picx.zhimg.com/v2-7d90de70e9f96871e694528865d1912f_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-788dd5abafe7a492453d63084ffa2d41_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1292\" data-rawheight=\"821\" data-original-token=\"v2-788dd5abafe7a492453d63084ffa2d41\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-e2af910235818b47c673437fcea54f3c_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1292\" data-original=\"https://pica.zhimg.com/v2-788dd5abafe7a492453d63084ffa2d41_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-84ea97a6b578572a37ef582f942aafe0_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1294\" data-rawheight=\"819\" data-original-token=\"v2-84ea97a6b578572a37ef582f942aafe0\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-abb6007c747f052559fb31dd52158669_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1294\" data-original=\"https://pica.zhimg.com/v2-84ea97a6b578572a37ef582f942aafe0_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-91886d4ca95436bc276cbc84cde5c8ab_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1290\" data-rawheight=\"821\" data-original-token=\"v2-91886d4ca95436bc276cbc84cde5c8ab\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-c8e59f77590735893eccfdd62c9044c3_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1290\" data-original=\"https://pic1.zhimg.com/v2-91886d4ca95436bc276cbc84cde5c8ab_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-eeeb5afc65dc5c7704de01a8f51f244c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1292\" data-rawheight=\"821\" data-original-token=\"v2-eeeb5afc65dc5c7704de01a8f51f244c\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-6102eb49b7b2da86c3913dd6e09b12d7_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1292\" data-original=\"https://pic1.zhimg.com/v2-eeeb5afc65dc5c7704de01a8f51f244c_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-4db77b55f21f4e595a3ef4849ee5339b_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1295\" data-rawheight=\"822\" data-original-token=\"v2-4db77b55f21f4e595a3ef4849ee5339b\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-66dcd16191d3a272b9a0635696a68cd0_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1295\" data-original=\"https://picx.zhimg.com/v2-4db77b55f21f4e595a3ef4849ee5339b_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-26c0dfb0763146124ded9496b02c07b6_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1294\" data-rawheight=\"822\" data-original-token=\"v2-26c0dfb0763146124ded9496b02c07b6\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-bf8069e4a55eeb96609f029950a49e86_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1294\" data-original=\"https://picx.zhimg.com/v2-26c0dfb0763146124ded9496b02c07b6_r.jpg?source=2c26e567\"/></figure><h3>5.4.信息学竞赛国家集训队2016论文集</h3><p data-pid=\"-21jrBpq\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963429462-ef7fb2%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">信息学竞赛国家集训队2016论文集.pdf</a><p data-pid=\"RkM-0eQe\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-60c7eff7f5ddb437982f789cb0491de0_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1185\" data-rawheight=\"825\" data-original-token=\"v2-60c7eff7f5ddb437982f789cb0491de0\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-d8afeefbbe4e0a74b5916cc56e669b5a_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1185\" data-original=\"https://pic1.zhimg.com/v2-60c7eff7f5ddb437982f789cb0491de0_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-709a093236e021e9a39df646b33f3904_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1186\" data-rawheight=\"829\" data-original-token=\"v2-709a093236e021e9a39df646b33f3904\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-bb0b23e1396cb124942e9f3b28e37df9_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1186\" data-original=\"https://picx.zhimg.com/v2-709a093236e021e9a39df646b33f3904_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-d333e35e9b94518030dd1c0e93e3455b_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"821\" data-original-token=\"v2-d333e35e9b94518030dd1c0e93e3455b\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-bbe2210ad0951a06771a53c52cbcd9a3_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://picx.zhimg.com/v2-d333e35e9b94518030dd1c0e93e3455b_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-4bd7870474d674d1093c108dc4789a7d_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"820\" data-original-token=\"v2-4bd7870474d674d1093c108dc4789a7d\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-05ff6ee38e8b9ff69da3e10c74838a0e_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://pic1.zhimg.com/v2-4bd7870474d674d1093c108dc4789a7d_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-0a150eec83ddd9a7d1a3966c6b495865_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"824\" data-original-token=\"v2-0a150eec83ddd9a7d1a3966c6b495865\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-766a3b69ac372740a24a2be59a42831a_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://picx.zhimg.com/v2-0a150eec83ddd9a7d1a3966c6b495865_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-4f622f011e5c7de01dd0d2dad0bb9196_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"822\" data-original-token=\"v2-4f622f011e5c7de01dd0d2dad0bb9196\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-52d978528a6146f6b401b3dba4325d15_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://picx.zhimg.com/v2-4f622f011e5c7de01dd0d2dad0bb9196_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-561ceb268c91192b70087c9178f1b35f_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"824\" data-original-token=\"v2-561ceb268c91192b70087c9178f1b35f\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-55ccfa7376b3da4c7d9271800b1220ef_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://picx.zhimg.com/v2-561ceb268c91192b70087c9178f1b35f_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-5a3e0784de831f62c9b49ff676fd7a48_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"822\" data-original-token=\"v2-5a3e0784de831f62c9b49ff676fd7a48\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-2f1d4de202354021901cbda193096797_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://pica.zhimg.com/v2-5a3e0784de831f62c9b49ff676fd7a48_r.jpg?source=2c26e567\"/></figure><h3>5.5.信息学竞赛国家集训队2017论文集</h3><p data-pid=\"3w7pD6bx\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963429465-709a88%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">信息学竞赛国家集训队2017论文集.pdf</a><p data-pid=\"usDuHvC0\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-ea2e77eabd77342576a53700d1631a8c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"824\" data-original-token=\"v2-ea2e77eabd77342576a53700d1631a8c\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-fc708b32428cda1fd9c0ed9c007909ee_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://pica.zhimg.com/v2-ea2e77eabd77342576a53700d1631a8c_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-4096fbe3ad0d23b2ca260051e5930539_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"821\" data-original-token=\"v2-4096fbe3ad0d23b2ca260051e5930539\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-745414c7997f4a9c9dc0596f9643aad1_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://pica.zhimg.com/v2-4096fbe3ad0d23b2ca260051e5930539_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-138a82d3c2f284ef67ce99f7af433310_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1186\" data-rawheight=\"824\" data-original-token=\"v2-138a82d3c2f284ef67ce99f7af433310\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-72195b3e9798b82e3a5ef949974d63f3_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1186\" data-original=\"https://picx.zhimg.com/v2-138a82d3c2f284ef67ce99f7af433310_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-d6a36b45697b77b5b1d1ea563cee10d4_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"819\" data-original-token=\"v2-d6a36b45697b77b5b1d1ea563cee10d4\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-73f695f2d8a8e0017d4579a0e47e6cc9_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://pic1.zhimg.com/v2-d6a36b45697b77b5b1d1ea563cee10d4_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-4187dc3b9fc006bb53fbb5045b81dfa8_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"820\" data-original-token=\"v2-4187dc3b9fc006bb53fbb5045b81dfa8\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-8819f1f1c02e75f9cbfae06ac33ee568_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://picx.zhimg.com/v2-4187dc3b9fc006bb53fbb5045b81dfa8_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-6363a72f4225df262f8c17fd5a318b21_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"816\" data-original-token=\"v2-6363a72f4225df262f8c17fd5a318b21\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-1ecfa671830579702418cd0fa0a73753_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://pica.zhimg.com/v2-6363a72f4225df262f8c17fd5a318b21_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-fb38a347de448336ab125c9cd429cd7c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"820\" data-original-token=\"v2-fb38a347de448336ab125c9cd429cd7c\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-daf2c017e01b9643402afe80608af320_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://pic1.zhimg.com/v2-fb38a347de448336ab125c9cd429cd7c_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-eaa471749a026557abd553f72ac70786_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"821\" data-original-token=\"v2-eaa471749a026557abd553f72ac70786\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-784fd9ee8fe0a413c65e912e295a9e88_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://pica.zhimg.com/v2-eaa471749a026557abd553f72ac70786_r.jpg?source=2c26e567\"/></figure><h3>5.6.信息学竞赛国家集训队2018论文集</h3><p data-pid=\"88UJl4Dq\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963429492-69b0df%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">信息学竞赛国家集训队2018论文集.pdf</a><p data-pid=\"SRhP-QOM\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-73b926fd7d7341bf715ccadb0b72f1eb_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"822\" data-original-token=\"v2-73b926fd7d7341bf715ccadb0b72f1eb\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-4172136e1293abe4c7491ed03b92f83f_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://picx.zhimg.com/v2-73b926fd7d7341bf715ccadb0b72f1eb_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-5bd8d23869fdeea1a7ea9a6ca2c6ff1e_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"824\" data-original-token=\"v2-5bd8d23869fdeea1a7ea9a6ca2c6ff1e\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-8bd711793d95d43c397184382ae31244_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://picx.zhimg.com/v2-5bd8d23869fdeea1a7ea9a6ca2c6ff1e_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-ee59e2f38c29de298f208dac8092210a_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"821\" data-original-token=\"v2-ee59e2f38c29de298f208dac8092210a\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-4d9536cb255e1d3db1c3540ff656f5a7_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://picx.zhimg.com/v2-ee59e2f38c29de298f208dac8092210a_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-2e05182766f8414629970a0186211d59_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"822\" data-original-token=\"v2-2e05182766f8414629970a0186211d59\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-0846f878faa5a3a3db4df8d52ca45a95_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://pica.zhimg.com/v2-2e05182766f8414629970a0186211d59_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-46c7ec99d37b1f9d3697d96c8485869e_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"822\" data-original-token=\"v2-46c7ec99d37b1f9d3697d96c8485869e\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-3e798a5f1bb46670c5bd0123521d0f11_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://pica.zhimg.com/v2-46c7ec99d37b1f9d3697d96c8485869e_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-2643fdda1d98a586545fdfcdb04262d5_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"825\" data-original-token=\"v2-2643fdda1d98a586545fdfcdb04262d5\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-c8553aa593670cfc56eacfbebf035c62_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://pic1.zhimg.com/v2-2643fdda1d98a586545fdfcdb04262d5_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-75656b97faf6e0fa98a0a4676bf1d74a_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"824\" data-original-token=\"v2-75656b97faf6e0fa98a0a4676bf1d74a\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-7fc8e82c203eb5ff11bfef7d943cb917_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://picx.zhimg.com/v2-75656b97faf6e0fa98a0a4676bf1d74a_r.jpg?source=2c26e567\"/></figure><h3>5.7.信息学竞赛国家集训队2019论文集</h3><p data-pid=\"28zBj951\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963429522-d4bee2%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">信息学竞赛国家集训队2019论文集.pdf</a><p data-pid=\"oszYfGJa\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-8131520c49cd6f7dfc13a8996a625eea_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1185\" data-rawheight=\"830\" data-original-token=\"v2-8131520c49cd6f7dfc13a8996a625eea\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-7692c26f68922536b7a4167f87de7a8b_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1185\" data-original=\"https://picx.zhimg.com/v2-8131520c49cd6f7dfc13a8996a625eea_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-0f487ec115f1bb862a15a91e6d7a5a1a_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"821\" data-original-token=\"v2-0f487ec115f1bb862a15a91e6d7a5a1a\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-36e9f944c1ebb31452e5526a6a57fb7d_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://pica.zhimg.com/v2-0f487ec115f1bb862a15a91e6d7a5a1a_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-b1e6865353df49eb8098b33975d504b8_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1185\" data-rawheight=\"819\" data-original-token=\"v2-b1e6865353df49eb8098b33975d504b8\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-d889a833b129176a03ce13555afa924e_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1185\" data-original=\"https://pic1.zhimg.com/v2-b1e6865353df49eb8098b33975d504b8_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-ed4a5a314fc1c3296b51164a54aff1b3_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1179\" data-rawheight=\"817\" data-original-token=\"v2-ed4a5a314fc1c3296b51164a54aff1b3\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-173806efcd8112c5f6fd5db908c50924_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1179\" data-original=\"https://picx.zhimg.com/v2-ed4a5a314fc1c3296b51164a54aff1b3_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-388f194b1310c8383b7506856a448eb1_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"822\" data-original-token=\"v2-388f194b1310c8383b7506856a448eb1\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-73f2180d082af262d935ac4e421072cd_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://picx.zhimg.com/v2-388f194b1310c8383b7506856a448eb1_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-571031996bd48fcf23bf6e032ab2e3cd_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"821\" data-original-token=\"v2-571031996bd48fcf23bf6e032ab2e3cd\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-ee9c2f215a3d74f3395fddb5205d001d_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://pic1.zhimg.com/v2-571031996bd48fcf23bf6e032ab2e3cd_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-2aa6157f35672b76f751bcfb842d75e3_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1179\" data-rawheight=\"819\" data-original-token=\"v2-2aa6157f35672b76f751bcfb842d75e3\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-88c08acdc99ca11d13652a99bbde0d41_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1179\" data-original=\"https://picx.zhimg.com/v2-2aa6157f35672b76f751bcfb842d75e3_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-153a3222d87980d93e174fcb25df9b48_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1185\" data-rawheight=\"821\" data-original-token=\"v2-153a3222d87980d93e174fcb25df9b48\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-45d52e3561f4cad1ec5ba9907c88ee52_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1185\" data-original=\"https://pic1.zhimg.com/v2-153a3222d87980d93e174fcb25df9b48_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-689765765f1c03c589d0a20c85452fba_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"822\" data-original-token=\"v2-689765765f1c03c589d0a20c85452fba\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-5730b1d018befecaeb0ec9100348ad18_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://pic1.zhimg.com/v2-689765765f1c03c589d0a20c85452fba_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-6b2f8242bcca3cf1f73a73e236253e94_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"824\" data-original-token=\"v2-6b2f8242bcca3cf1f73a73e236253e94\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-a272652fd7ac3acba3e25e5c9a5e03cf_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://pic1.zhimg.com/v2-6b2f8242bcca3cf1f73a73e236253e94_r.jpg?source=2c26e567\"/></figure><h3>5.8.信息学竞赛国家集训队2020论文集</h3><p data-pid=\"cCZ7uBUF\">下载链接：</p><a href=\"https://link.zhihu.com/?target=https%3A//url86.ctfile.com/f/32005086-963429573-7132dd%3Fp%3D5422\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">信息学竞赛国家集训队2020论文集.pdf</a><p data-pid=\"_G4XP_Yp\">访问密码：5422</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-13198d10a29ead942d04db8b60ffc6c4_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"822\" data-original-token=\"v2-13198d10a29ead942d04db8b60ffc6c4\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-912ff30a7093d1bbaadf57473afd9f95_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://picx.zhimg.com/v2-13198d10a29ead942d04db8b60ffc6c4_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-f37f437eca0484d0fba58c1fc0e27adf_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"825\" data-original-token=\"v2-f37f437eca0484d0fba58c1fc0e27adf\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-ae21123e48eb43b8cebe9d24f99d43e3_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://picx.zhimg.com/v2-f37f437eca0484d0fba58c1fc0e27adf_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-b64e4736678889fceda1eb7904f2b65c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"819\" data-original-token=\"v2-b64e4736678889fceda1eb7904f2b65c\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-9182c42778d3dd9069df4ac8e2ca2313_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://picx.zhimg.com/v2-b64e4736678889fceda1eb7904f2b65c_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-fa2aeab5c53412feddf5e518e4b4191a_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"820\" data-original-token=\"v2-fa2aeab5c53412feddf5e518e4b4191a\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-ab8c55b3ad6a339c7019284b3a6c137c_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://picx.zhimg.com/v2-fa2aeab5c53412feddf5e518e4b4191a_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-8760837c50921ca3b942fbd992d09a45_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1179\" data-rawheight=\"819\" data-original-token=\"v2-8760837c50921ca3b942fbd992d09a45\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-03ac3689423826ad9aa7188c6ba1c314_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1179\" data-original=\"https://pica.zhimg.com/v2-8760837c50921ca3b942fbd992d09a45_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-10e2c9ae232caf8eca0f7ce5dd7bc908_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"821\" data-original-token=\"v2-10e2c9ae232caf8eca0f7ce5dd7bc908\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-b5982e1a321cc99748b54359ece8fd23_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://picx.zhimg.com/v2-10e2c9ae232caf8eca0f7ce5dd7bc908_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-119b3d50bf83df7b613edfd9b7830a6a_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"821\" data-original-token=\"v2-119b3d50bf83df7b613edfd9b7830a6a\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-189f3e29b37c445c199313551c097729_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://picx.zhimg.com/v2-119b3d50bf83df7b613edfd9b7830a6a_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-f879e9420234fc9b86359f4dbaa2fe84_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"817\" data-original-token=\"v2-f879e9420234fc9b86359f4dbaa2fe84\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-0c0bd253f2c173008561d825f85ebdfd_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://picx.zhimg.com/v2-f879e9420234fc9b86359f4dbaa2fe84_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-86c4afa16f9b44f63ca55c4bbed2243c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1177\" data-rawheight=\"821\" data-original-token=\"v2-86c4afa16f9b44f63ca55c4bbed2243c\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-2bb6f90a15242fc65b002e1e4a1185ed_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1177\" data-original=\"https://picx.zhimg.com/v2-86c4afa16f9b44f63ca55c4bbed2243c_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-82eedad50de04cffff2be4153590e90d_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"821\" data-original-token=\"v2-82eedad50de04cffff2be4153590e90d\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-cdee10325e126917af0076f915023b38_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://picx.zhimg.com/v2-82eedad50de04cffff2be4153590e90d_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-7802903be64aebfa60677b7b03d00684_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1182\" data-rawheight=\"822\" data-original-token=\"v2-7802903be64aebfa60677b7b03d00684\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-af831542eaf4b39fb4f46deab0e38407_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1182\" data-original=\"https://pic1.zhimg.com/v2-7802903be64aebfa60677b7b03d00684_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-51f27c709008b6b8196a3a61006265f3_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1181\" data-rawheight=\"824\" data-original-token=\"v2-51f27c709008b6b8196a3a61006265f3\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-f129be7e44d4a80fde7b49f65de4ad44_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1181\" data-original=\"https://pic1.zhimg.com/v2-51f27c709008b6b8196a3a61006265f3_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-0e046609d9852b064dd950a1684247d2_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1177\" data-rawheight=\"817\" data-original-token=\"v2-0e046609d9852b064dd950a1684247d2\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-79b708a27d5d6f4f6027f39f6978f2f8_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1177\" data-original=\"https://picx.zhimg.com/v2-0e046609d9852b064dd950a1684247d2_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-4e8e213f49b50b9ebc6cb78986655c44_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"819\" data-original-token=\"v2-4e8e213f49b50b9ebc6cb78986655c44\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-63cc3c228ab2b0141313775d7dbb1f04_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://pica.zhimg.com/v2-4e8e213f49b50b9ebc6cb78986655c44_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-7948e49d7065d309e150fe14d75c4b56_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1176\" data-rawheight=\"820\" data-original-token=\"v2-7948e49d7065d309e150fe14d75c4b56\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-e08f34e916cb0d02a5f03da68aaf957c_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1176\" data-original=\"https://pica.zhimg.com/v2-7948e49d7065d309e150fe14d75c4b56_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-28e6fd7bf0c7f62694057aa00bf1470b_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1176\" data-rawheight=\"820\" data-original-token=\"v2-28e6fd7bf0c7f62694057aa00bf1470b\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-9d345d8f589e8b9ab54a968b7337bd51_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1176\" data-original=\"https://picx.zhimg.com/v2-28e6fd7bf0c7f62694057aa00bf1470b_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-33c09288492dd8af184c4a7bad8e755e_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1175\" data-rawheight=\"812\" data-original-token=\"v2-33c09288492dd8af184c4a7bad8e755e\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-7250c1ab41e5724eb2d9379352171d97_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1175\" data-original=\"https://picx.zhimg.com/v2-33c09288492dd8af184c4a7bad8e755e_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-295016291fb251d9499d5643ca6c9660_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1185\" data-rawheight=\"821\" data-original-token=\"v2-295016291fb251d9499d5643ca6c9660\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-86847f20648355fc2fc864ce2c7fec97_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1185\" data-original=\"https://picx.zhimg.com/v2-295016291fb251d9499d5643ca6c9660_r.jpg?source=2c26e567\"/></figure><p></p>",
            "excerpt": "信息学竞赛维基：OI Wiki学习资源 - OI Wiki [图片] 一、算法竞赛入门经典 第1版、第2版 (刘汝佳)1.1.算法竞赛入门经典 第1版 (刘汝佳)下载链接： 算法竞赛入门经典 第1版 (刘汝佳).pdf 访问密码：5422 [图片] [图片] [图片] 1.2.算法竞赛入门经典 第2版 (刘汝佳)下载链接： 算法竞赛入门经典 第2版 (刘汝佳).pdf 访问密码：5422 [图片] [图片] [图片] [图片] 二、挑战程序设计竞赛 第2版 (巫泽俊)下载链接： 挑战程序设计竞赛 第2版 (巫泽俊).pdf 访问密码：5422 [图片] [图片] [图片] 三、ACM国际大学生程序设计竞…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 107,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-0fa5e9ba796c53b56347c8d0ce3c208d_720w.jpg?source=7e7ef6e2",
                        "width": 1434,
                        "height": 9355,
                        "token": "v2-0fa5e9ba796c53b56347c8d0ce3c208d",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-297f626100c9cca53a5a240caf704f42_720w.jpg?source=7e7ef6e2",
                        "width": 895,
                        "height": 825,
                        "token": "v2-297f626100c9cca53a5a240caf704f42",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-367092fecaf1eee35093332ec6c0368a_720w.jpg?source=7e7ef6e2",
                        "width": 1194,
                        "height": 830,
                        "token": "v2-367092fecaf1eee35093332ec6c0368a",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxjouLKUDCCQxK8FkgIlCgk2MjM1MzI4NzYSCjMyNjM5OTQ5ODQYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-10-25T15:46:00+08:00"
    },
    {
        "content": {
            "id": 665616962,
            "title": "Haskell的类型体操指北",
            "type": "article",
            "excerpt_title": "更好的阅读体验 Haskell的类型体操指北 作为类型系统最复杂的非DT语言之一, Haskell有着强大的类型编程能力. 我们将从最简单的构造开始展示这些能力, 本文假定读者了解Haskell的基本语法. 本文使用的版本是GHC 9.0.2, 但在较旧的版本上这些代码也能运行. 首先我们需要打开以下拓展 {-# LANGUAGE MultiParamTypeClasses #-} {-# LANGUAGE FlexibleInstances #-} {-# LANGUAGE TypeApplications #-} {-# LANGUAGE DataKinds #-} {-#…",
            "url": "https://zhuanlan.zhihu.com/p/665616962",
            "image_url": "https://picx.zhimg.com/v2-21fcc21cc964bf940f0862c106401c6c_r.jpg?source=172ae18b",
            "created": 1699379078,
            "updated": 1699414394,
            "author": {
                "id": "90f376ff82194906b61dbd6041c8d13e",
                "url_token": "shi-ni-94-69",
                "name": "蒟蒻源",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-00d52b581dd64f8a46ddf83b92c40855_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-00d52b581dd64f8a46ddf83b92c40855.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/90f376ff82194906b61dbd6041c8d13e",
                "user_type": "people",
                "headline": "灵长类",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1501824163
            },
            "comment_permission": "all",
            "content": "<p></p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//konjacsource.github.io/2023/11/08/Haskell/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">更好的阅读体验</a><h2>Haskell的类型体操指北 </h2><p data-pid=\"8gHWGFUx\">作为类型系统最复杂的非DT语言之一, Haskell有着强大的类型编程能力. 我们将从最简单的构造开始展示这些能力, 本文假定读者了解Haskell的基本语法. 本文使用的版本是GHC 9.0.2, 但在较旧的版本上这些代码也能运行.</p><p data-pid=\"1B1Hvkza\">首先我们需要打开以下拓展</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"cm\">{-# LANGUAGE MultiParamTypeClasses #-}</span>\n<span class=\"cm\">{-# LANGUAGE FlexibleInstances  #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeApplications #-}</span>\n<span class=\"cm\">{-# LANGUAGE DataKinds #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeFamilies #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeOperators #-}</span>\n<span class=\"cm\">{-# LANGUAGE KindSignatures #-}</span>\n<span class=\"cm\">{-# LANGUAGE GADTs #-}</span>\n<span class=\"cm\">{-# LANGUAGE UndecidableInstances #-}</span>\n<span class=\"cm\">{-# LANGUAGE AllowAmbiguousTypes #-}</span></code></pre></div><p data-pid=\"CDkacq2j\">并导入</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">import</span> <span class=\"nn\">Data.Kind</span><span class=\"p\">(</span><span class=\"kt\">Type</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"Ya2oiqQ3\">读者不必完全熟悉这些拓展, 我们会慢慢介绍一些特别的语法.</p><h3>Value, Type, Kind</h3><p data-pid=\"sYWyJrW4\">我们已经很熟悉Haskell中的一系列值(value), 比如 <code>2,3,True,(\\x -&gt; x * 2)</code>. 它们有各自所属的类型(type)</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"mi\">2</span>             <span class=\"ow\">::</span> <span class=\"kt\">Num</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">a</span> \n<span class=\"mi\">3</span>             <span class=\"ow\">::</span> <span class=\"kt\">Num</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">a</span>\n<span class=\"kt\">True</span>          <span class=\"ow\">::</span> <span class=\"kt\">Bool</span>\n<span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"n\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"kt\">Num</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span></code></pre></div><p data-pid=\"Y6uR-tzd\">一个自然的想法是把类型也看作另一种值, 它们也有自己所属的类型, 此时这个类型就可以称为 Kind. 比如我们会这样记</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kt\">Num</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">a</span>                <span class=\"ow\">::</span> <span class=\"kt\">Type</span>\n<span class=\"kt\">Bool</span>                      <span class=\"ow\">::</span> <span class=\"kt\">Type</span> \n<span class=\"nf\">forall</span> <span class=\"n\">a</span><span class=\"o\">.</span> <span class=\"kt\">Num</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span></code></pre></div><p data-pid=\"7qgoLNEz\">其中 <code>Type</code> 是这样一种&#34;类型&#34;, 它的元素是所有类型, 比如 <code>Int</code>, <code>Int -&gt; Int</code>, <code>forall a. Num a =&gt; a</code>.</p><p data-pid=\"h5DEmcon\"><code>Maybe</code> 是 <code>Type</code> 的元素吗? 不是, 但 <code>Maybe Int</code> 是, 所以 <code>Maybe</code> 实际是一个 <code>Type</code> 到 <code>Type</code> 的函数.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kt\">Int</span>    <span class=\"ow\">::</span> <span class=\"kt\">Type</span>\n<span class=\"kt\">Maybe</span>  <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"kt\">[]</span>     <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"p\">(</span><span class=\"ow\">-&gt;</span><span class=\"p\">)</span>   <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span>\n<span class=\"kt\">Either</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span></code></pre></div><blockquote data-pid=\"MIdFRT9y\"> 在 ghci 中使用 <code>:k t</code> 查看类型<code>t</code>所属的kind, 输出结果中 <code>Type</code> 被记作 *.</blockquote><p data-pid=\"8KfMcqr_\">我不知道 Kind 有什么好翻译, 所以干脆不翻译.</p><h3>类型层面的ADT</h3><p data-pid=\"OIUL6uTe\">读者一定很熟悉一些Haskell中的ADT, 比如</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">data</span> <span class=\"kt\">Bool</span> <span class=\"ow\">=</span> <span class=\"kt\">True</span> <span class=\"o\">|</span> <span class=\"kt\">False</span></code></pre></div><p data-pid=\"x8sRPpGO\">其中 <code>Bool</code> 是类型, <code>True</code> 和 <code>False</code> 是值, 我们希望把它们统一提高一层, 这样我们就能在类型编程时用上它们. <code>DataKinds</code> 拓展允许我们这样做. 只要开启这个拓展, Haskell就会自动为所有的ADT(包括自定义的和其他模块里的)创建一个高一层的副本. 以 <code>Bool</code> 为例, 打开 <code>DataKinds</code> 时, Haskell自动创建一个Kind <code>Bool</code>, 两个类型 <code>&#39;True &#39;False :: Bool</code>, 这里单引号是用于区分值<code>True</code>值<code>False</code>和类型<code>&#39;True</code>和类型<code>&#39;False</code>(另一方面你永远不用担心类型<code>Bool</code>和Kind<code>Bool</code>会混淆). 这样就有,</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kt\">&#39;True</span>                <span class=\"ow\">::</span> <span class=\"kt\">Bool</span>\n<span class=\"kt\">&#39;False</span>               <span class=\"ow\">::</span> <span class=\"kt\">Bool</span>\n<span class=\"kt\">&#39;[]</span>                  <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n<span class=\"kt\">&#39;[ &#39;True, &#39;False ]</span>   <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Bool</span><span class=\"p\">]</span>\n<span class=\"kt\">&#39;True</span> <span class=\"sc\">&#39;</span><span class=\"err\">:</span><span class=\"sc\"> &#39;</span><span class=\"kt\">[]</span>         <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Bool</span><span class=\"p\">]</span> <span class=\"c1\">-- 这里需要打开 TypeOperators</span>\n<span class=\"kt\">&#39;Just</span> <span class=\"kt\">True</span>           <span class=\"ow\">::</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Bool</span> \n<span class=\"kt\">&#39;Just</span> <span class=\"kt\">&#39;True</span>          <span class=\"ow\">::</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Bool</span> <span class=\"c1\">-- 注意这两个 Maybe Bool 实际上不同</span>\n<span class=\"kt\">&#39;Just</span> <span class=\"kt\">Bool</span>           <span class=\"ow\">::</span> <span class=\"kt\">Maybe</span> <span class=\"kt\">Type</span>\n<span class=\"kt\">&#39;( &#39;True, &#39;Nothing )</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Maybe</span> <span class=\"n\">a</span><span class=\"p\">)</span></code></pre></div><h3>自然数</h3><p data-pid=\"pmz2eO5d\">我们熟悉的数字类型 <code>Int, Integer, Float, Double</code> 都不是ADT, 无法被 <code>DataKinds</code> 提升, 我们自然的需求是搞一个能用的数字类型. 最简单的当然是我们的自然数.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">data</span> <span class=\"kt\">Nat</span> <span class=\"ow\">=</span> <span class=\"kt\">Z</span> <span class=\"o\">|</span> <span class=\"kt\">S</span> <span class=\"kt\">Nat</span> <span class=\"kr\">deriving</span> <span class=\"kt\">Show</span></code></pre></div><p data-pid=\"0oXDpCXi\">其中 <code>Z</code> 代表数字 <img src=\"https://www.zhihu.com/equation?tex=0\" alt=\"0\" eeimg=\"1\"/> , <code>S k</code> 代表自然数 <img src=\"https://www.zhihu.com/equation?tex=k%2B1\" alt=\"k+1\" eeimg=\"1\"/> , 其中这样我们可以用 <code>S (S (S Z))</code> 代表数字 <img src=\"https://www.zhihu.com/equation?tex=3\" alt=\"3\" eeimg=\"1\"/> . 读者可以尝试自行实现自然数上的加法和乘法以作练习.</p><h3>类型层面的数据结构</h3><h3>异构列表(Heterogeneous List)</h3><p data-pid=\"GriPH5DW\">类型列表, Haskell 中的列表类型 <code>[]</code> 就是 ADT, 所以它可以被自然提高到类型层面. 我们非常关注Kind <code>[Type]</code> , 它实际是一个由类型构成的列表. 有了这个它, 我们可以在 Haskell 中实现异构列表(Heterogeneous List).</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">infixr</span> <span class=\"mi\">4</span> <span class=\"kt\">:+:</span>\n<span class=\"kr\">data</span> <span class=\"kt\">HList</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span> <span class=\"c1\">-- 这里需要打开 GADTs 和 KindSignatures</span>\n  <span class=\"kt\">HNil</span>  <span class=\"ow\">::</span> <span class=\"kt\">HList</span> <span class=\"kt\">&#39;[]</span>\n  <span class=\"p\">(</span><span class=\"kt\">:+:</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"n\">ts</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"sc\">&#39;</span><span class=\"err\">: ts)</span></code></pre></div><p data-pid=\"cqWBxT-j\">这里给不熟悉 GADT 拓展的朋友们解释一下, 第一行是声明运算符的运算级, 没什么好说的; 第二行声明了 <code>HList</code> 的 Kind, 接受一个类型列表, 返回一个类型; <code>where</code> 之后的两行给出两个构造器, <code>HNil</code> 相当于一个空列表, <code>:+:</code> 相当于将一个元素添加到列表头. 重点在于构造器的类型, GADT 拓展的用途就是允许我们更精细地控制类型, <code>:+:</code> 的类型告诉我们, 它接受两个参数, 一个是任意类型 <code>t</code> 的元素, 一个是 <code>HList ts</code> 的元素(其中 <code>ts</code> 是任意类型列表), 然后返回一个 <code>HList (t &#39;: ts)</code>.</p><p data-pid=\"Ege7fex1\">于是,</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"mi\">1</span> <span class=\"kt\">:+:</span> <span class=\"kt\">True</span> <span class=\"kt\">:+:</span> <span class=\"kt\">Just</span> <span class=\"mi\">2</span> <span class=\"kt\">:+:</span> <span class=\"kt\">Nothing</span> <span class=\"kt\">:+:</span> <span class=\"kt\">HNil</span>\n  <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Num</span> <span class=\"n\">n1</span><span class=\"p\">,</span> <span class=\"kt\">Num</span> <span class=\"n\">n2</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">HList</span> <span class=\"kt\">&#39;[n1, Bool, Maybe n2, Maybe a]</span></code></pre></div><p data-pid=\"Nz9PHbtT\">为了让我们的 <code>HList</code> 能够正常使用, 我们先来定义一些常用函数. 首先是 <code>show</code>,</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">instance</span> <span class=\"kt\">Show</span> <span class=\"p\">(</span><span class=\"kt\">HList</span> <span class=\"kt\">&#39;[]</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">show</span> <span class=\"kt\">HNil</span> <span class=\"ow\">=</span> <span class=\"s\">&#34;HNil&#34;</span>\n\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Show</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">Show</span> <span class=\"p\">(</span><span class=\"kt\">HList</span> <span class=\"n\">ts</span><span class=\"p\">))</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Show</span> <span class=\"p\">(</span><span class=\"kt\">HList</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"sc\">&#39;</span><span class=\"err\">: ts)) where</span>\n  <span class=\"n\">show</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:+:</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">show</span> <span class=\"n\">x</span> <span class=\"o\">++</span> <span class=\"s\">&#34; :+: &#34;</span> <span class=\"o\">++</span> <span class=\"n\">show</span> <span class=\"n\">xs</span></code></pre></div><p data-pid=\"qU2KsN-S\">这段代码实质上是利用 Haskell 的类型类机制在类型上进行模式匹配, 每一个模式都要提供一个instance, 注意这里 Haskell 不会提供模式完整性检查, 请自己确保自己定义的instance能覆盖所有可能的情况.</p><p data-pid=\"1r7acs0i\">现在我们试着来做一下<code>HList</code>的拼接, 首先考虑类型要怎么变化, 显然链表拼接的类型为</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">hAppend</span> <span class=\"ow\">::</span> <span class=\"kt\">HList</span> <span class=\"n\">ls1</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"n\">ls2</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"p\">(</span><span class=\"n\">ls1</span> <span class=\"o\">++</span> <span class=\"n\">ls2</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"A2s73RSI\">其中 <code>++</code> 是普通列表的拼接, 但是 <code>DataKinds</code> 不会帮我们把一般的函数提升到类型层面, 我们需要手动实现类型列表的拼接.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"kt\">TAppend</span> <span class=\"p\">(</span><span class=\"n\">xs</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"n\">ys</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">])</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">]</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">TAppend</span> <span class=\"kt\">&#39;[]</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">ys</span>\n  <span class=\"kt\">TAppend</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"sc\">&#39;</span><span class=\"err\">: xs) ys = x</span><span class=\"sc\"> &#39;</span><span class=\"kt\">:</span> <span class=\"kt\">TAppend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span></code></pre></div><p data-pid=\"3LbQYFAI\">这里毫无疑问要使用 <code>TypeFamilies</code> 拓展, 这个拓展允许我们来写类型层面的函数. 一些语言(比如C++, Scala3)有type family类似物, 这些语言的类型系统往往都是图灵完备的.</p><p data-pid=\"D2u4iK1x\">有了 <code>TAppend</code> , 我们再使用先前的技巧在类型上进行模式匹配</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">class</span> <span class=\"kt\">HAppend</span> <span class=\"p\">(</span><span class=\"n\">ts1</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">])</span> <span class=\"kr\">where</span>\n  <span class=\"n\">hAppend</span> <span class=\"ow\">::</span> <span class=\"kt\">HList</span> <span class=\"n\">ts1</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"n\">ts2</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"p\">(</span><span class=\"kt\">TAppend</span> <span class=\"n\">ts1</span> <span class=\"n\">ts2</span><span class=\"p\">)</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">HAppend</span> <span class=\"kt\">&#39;[]</span> <span class=\"kr\">where</span>\n  <span class=\"n\">hAppend</span> <span class=\"kt\">HNil</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">ys</span>\n\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">HAppend</span> <span class=\"n\">ts</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">HAppend</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"sc\">&#39;</span><span class=\"err\">: ts) where</span>\n  <span class=\"n\">hAppend</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:+:</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:+:</span> <span class=\"n\">hAppend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span></code></pre></div><p data-pid=\"JgtWeLx6\">这里 <code>class</code> 起到了标注类型的作用, <code>instance</code> 相当于按模式依次进行实现.</p><p data-pid=\"2ruWD0CJ\">现在使用一个例子来展示异构列表的作用.</p><p data-pid=\"6G1C2DkS\">众所周知, Haskell中的 <code>sequence</code> 非常常用, 它的类型是 <code>sequence :: Monad m =&gt; [m a] -&gt; m [a]</code>(这不是最一般的类型, 但我们现在只考虑这个特化版本). 形象一点说就是把列表里的<code>m</code>&#34;翻&#34;出来. 这里用的是一般列表, 我们实际可以写一个异构列表版本的 <code>sequence</code>, 这里称为 <code>hSequence</code>. 先考虑<code>hSequence</code>的类型是什么, 一个自然的想法是</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">hSequence</span> <span class=\"ow\">::</span> <span class=\"kt\">Moand</span> <span class=\"n\">m</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">HList</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">m</span> <span class=\"n\">ts</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"kt\">HList</span> <span class=\"n\">ts</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"P5gyniU4\">同样我们需要把 <code>map</code> 提到类型层面</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"kt\">Map</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">ts</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">])</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">]</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"kt\">&#39;[]</span> <span class=\"ow\">=</span> <span class=\"kt\">&#39;[]</span>\n  <span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"sc\">&#39;</span><span class=\"err\">: ts) = f t</span><span class=\"sc\"> &#39;</span><span class=\"kt\">:</span> <span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"n\">ts</span></code></pre></div><p data-pid=\"qhYekrQF\">然后定义函数</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">hAppend</span> <span class=\"ow\">::</span> <span class=\"kt\">HList</span> <span class=\"n\">ts1</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"n\">ts2</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"p\">(</span><span class=\"kt\">TAppend</span> <span class=\"n\">ts1</span> <span class=\"n\">ts2</span><span class=\"p\">)</span>\n<span class=\"nf\">hAppend</span> <span class=\"kt\">HNil</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">ys</span>\n<span class=\"nf\">hAppend</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:+:</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:+:</span> <span class=\"n\">hAppend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span></code></pre></div><p data-pid=\"ZXpunYbW\">大功告成.</p><h3>定长列表(Vector)</h3><p data-pid=\"JWbQnIqq\">我们经常面对下标越界异常, 是否有办法可以在编译期完全杜绝下标越界呢? 答案是肯定的, 这首先需要我们构造一个类型, 这个类型能携带列表的长度信息.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">infixr</span> <span class=\"mi\">4</span> <span class=\"kt\">:::</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Vect</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">VNil</span> <span class=\"ow\">::</span> <span class=\"kt\">Vect</span> <span class=\"kt\">&#39;Z</span> <span class=\"n\">a</span>\n  <span class=\"p\">(</span><span class=\"kt\">:::</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">a</span></code></pre></div><p data-pid=\"lRt8TIU8\">这里我们用到了之前DataTypes帮我们提升的自然数Kind.</p><p data-pid=\"vryKf6ss\">用自然语言翻译一下:</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"err\">类型</span> <span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"err\">代表长度为</span> <span class=\"n\">n</span> <span class=\"err\">元素类型为</span> <span class=\"n\">a</span> <span class=\"err\">的列表构成的类型</span>\n  <span class=\"kt\">VNil</span> <span class=\"err\">是空列表</span><span class=\"p\">,</span> <span class=\"err\">所以它的类型是</span> <span class=\"kt\">Vect</span> <span class=\"kt\">&#39;Z</span> <span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"err\">记得我们之前把</span> <span class=\"kt\">&#39;Z</span> <span class=\"err\">定作</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:::</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"err\">相当于把元素</span> <span class=\"n\">x</span> <span class=\"err\">拼到列表</span> <span class=\"n\">xs</span> <span class=\"err\">前面</span><span class=\"p\">,</span> <span class=\"err\">并且这里列表的长度增长了一</span></code></pre></div><p data-pid=\"40PqSY7l\">同样按照上面的例子, 溜一下列表拼接</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"p\">(</span><span class=\"kt\">:+</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">&#39;Z</span>     <span class=\"kt\">:+</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span>\n  <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"kt\">:+</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:+</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"nf\">vAppend</span> <span class=\"ow\">::</span> <span class=\"kt\">Vect</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:+</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">a</span>\n<span class=\"nf\">vAppend</span> <span class=\"kt\">VNil</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">ys</span>\n<span class=\"nf\">vAppend</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:::</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:::</span> <span class=\"n\">vAppend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span></code></pre></div><p data-pid=\"H08mzqRn\">这里顺便定义了类型层面的自然数加法, 这个定义我们之后还要用.</p><p data-pid=\"evJs6y_L\">在详细叙述使用Vector的正确姿势前, 我们先介绍一下依值类型.</p><h3>依值类型(Dependent Type)</h3><p data-pid=\"fZ5TsL4n\">免责声明: 本文仅简单介绍一点依值类型(DT), 并解释如何在Haskell中&#34;模拟&#34;依值类型的写法, 实质上Haskell并不支持真正的依值类型. 并且如果你对依值类型在编程和数学中的应用感兴趣, Haskell以及本文也不是一个好的入门工具, 你应该去学习类型论并掌握一门真正的依值类型语言. 如果你对Haskell比较熟悉, Idris和Agda是不错的入门选择, 除此之外, Lean4也十分值得学习.</p><blockquote data-pid=\"zbsEsUfG\"> 我们关注一个被称为依值函数的类型(也称作Pi类型), 直接的理解就是一个返回值类型依赖于参数值的函数. 这个类型可以记作 <code>(x :: T) -&gt; A</code> 其中 <code>T</code> 是一个普通类型, <code>A</code> 是一个(可以)含有 <code>x</code> 的类型 Haskell目前不支持这样写法, 我们现在需要思考如何在Haskell中模仿这种函数.</blockquote><p data-pid=\"hvT9fThp\">在Haskell中模拟DT的技巧被称为 Singletons (好像有人叫单体类型), 实质上是构造一个代理类型将类型 (通常是 <code>&#39;Z, &#39;True</code> 这种) 和值联系起来.</p><p data-pid=\"74Ld3_y3\">我们来构造一个 <code>Bool</code> 的Singleton.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">data</span> <span class=\"kt\">SBool</span> <span class=\"ow\">::</span> <span class=\"kt\">Bool</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">STrue</span>  <span class=\"ow\">::</span> <span class=\"kt\">SBool</span> <span class=\"kt\">&#39;True</span>\n  <span class=\"kt\">SFalse</span> <span class=\"ow\">::</span> <span class=\"kt\">SBool</span> <span class=\"kt\">&#39;False</span></code></pre></div><p data-pid=\"URvC0OGX\">称此为&#34;单体&#34;的原因显而易见, 类型<code>SBool &#39;True</code>有且只有一个元素<code>STrue</code>, <code>SBool &#39;False</code>也只有一个元素<code>SFalse</code>. 这就将 <code>b :: Bool</code> 和 <code>SBool b</code> 联系了起来.</p><p data-pid=\"zUz1U3NC\">定义Singleton上的函数时要同时定义类型层面和值层面, 比如</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"kt\">Not</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"ow\">::</span> <span class=\"kt\">Bool</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Bool</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">Not</span> <span class=\"kt\">&#39;True</span> <span class=\"ow\">=</span> <span class=\"kt\">&#39;False</span>\n  <span class=\"kt\">Not</span> <span class=\"kt\">&#39;False</span> <span class=\"ow\">=</span> <span class=\"kt\">&#39;True</span>\n\n<span class=\"nf\">sNot</span> <span class=\"ow\">::</span> <span class=\"kt\">SBool</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SBool</span> <span class=\"p\">(</span><span class=\"kt\">Not</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"nf\">sNot</span> <span class=\"kt\">STrue</span>  <span class=\"ow\">=</span> <span class=\"kt\">SFalse</span>\n<span class=\"nf\">sNot</span> <span class=\"kt\">SFalse</span> <span class=\"ow\">=</span> <span class=\"kt\">STrue</span></code></pre></div><p data-pid=\"wJOW8cmw\"><code>sNot</code> 就是一个Singleton风格的依值函数, 它相当于 <code>(b :: Bool) -&gt; SBool (not b)</code>.</p><p data-pid=\"kXC68vg9\">现在考虑自然数的Singleton类型, 类似<code>SBool</code>, 我们可以流畅的写出来.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">data</span> <span class=\"kt\">SNat</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">SZ</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"kt\">&#39;Z</span>\n  <span class=\"kt\">SS</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">n</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"ssc3CZzP\">显然,</p><p data-pid=\"Xy5xMKVt\">1) <code>SNat &#39;Z</code> 只有一个元素 <code>SZ</code>, </p><p data-pid=\"Xz3xtjkI\">2) 对于任何一个自然数<code>k :: Nat</code>, 并且 <code>SNat k</code> 只有一个元素 <code>sk</code>, 那么 <code>SNat (&#39;S k)</code> 也只有一个元素 <code>&#39;SS sk</code>.</p><p data-pid=\"0FeVNXW8\">这样数学归纳告诉我们对于任何自然数 <code>n</code> , <code>SNat n</code> 只有唯一一个元素. 可见 <code>SNat</code> 定义得很正确.</p><p data-pid=\"QdXwaf5W\">我们来定义一下加法和乘法,</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"p\">(</span><span class=\"kt\">:+:</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">&#39;Z</span>     <span class=\"kt\">:+:</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span>\n  <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"kt\">:+:</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:+:</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"p\">(</span><span class=\"kt\">:*:</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">&#39;Z</span>     <span class=\"kt\">:*:</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"kt\">&#39;Z</span>\n  <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"kt\">:*:</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span> <span class=\"kt\">:+:</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:*:</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"kr\">infixl</span> <span class=\"mi\">6</span> <span class=\"o\">|+|</span>\n<span class=\"p\">(</span><span class=\"o\">|+|</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"n\">m</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:+:</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"kt\">SZ</span>   <span class=\"o\">|+|</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span>\n<span class=\"kt\">SS</span> <span class=\"n\">m</span> <span class=\"o\">|+|</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">SS</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">|+|</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"kr\">infixl</span> <span class=\"mi\">7</span> <span class=\"o\">|*|</span>\n<span class=\"p\">(</span><span class=\"o\">|*|</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"n\">m</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:*:</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"kt\">SZ</span>   <span class=\"o\">|*|</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"kt\">SZ</span>\n<span class=\"kt\">SS</span> <span class=\"n\">m</span> <span class=\"o\">|*|</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span> <span class=\"o\">|+|</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">|*|</span> <span class=\"n\">n</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"JnhiPPCE\">我们用 <code>:+:</code>, <code>:*:</code> 表示类型层面得加和乘, 用 <code>|+|</code>, <code>|*|</code> 表示值层面的加和乘.</p><p data-pid=\"2WMtyaBx\">为了方便从类型层面的 <code>Nat</code> 向值层面的 <code>SNat</code> 进行转换, 我们可以这样做, 注意这里又用到了之前对类型进行模式匹配的技巧</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">data</span> <span class=\"kt\">Proxy</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"kt\">Proxy</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">ToSNat</span> <span class=\"p\">(</span><span class=\"n\">nat</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">toSNat</span> <span class=\"ow\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"n\">nat</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">ToSNat</span> <span class=\"kt\">&#39;Z</span> <span class=\"kr\">where</span>\n  <span class=\"n\">toSNat</span> <span class=\"kt\">Proxy</span> <span class=\"ow\">=</span> <span class=\"kt\">SZ</span>\n<span class=\"kr\">instance</span> <span class=\"kt\">ToSNat</span> <span class=\"n\">n</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">ToSNat</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">toSNat</span> <span class=\"kt\">Proxy</span> <span class=\"ow\">=</span> <span class=\"kt\">SS</span> <span class=\"p\">(</span><span class=\"n\">toSNat</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"ow\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">n</span><span class=\"p\">))</span></code></pre></div><p data-pid=\"r9iKD82t\"><code>Proxy</code> 实际上就是一个携带类型信息的 <code>()</code>, 所以说是类型的代理. 然后可以这样使用:</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">toSNat</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"ow\">::</span> <span class=\"kt\">Proxy</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)))</span> <span class=\"c1\">-- =&gt; SS (SS SZ)</span></code></pre></div><p data-pid=\"jjZtMmuY\">这里类型标注起到了输入类型参数的作用.</p><h3>以Vector为例</h3><p data-pid=\"N0BVmDdh\">我们继续定义一些 Vector 上的函数来展示我们 Singleton 的强大力量. 首先是从列表转换到Vector</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">fromList</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n<span class=\"nf\">fromList</span> <span class=\"kt\">SZ</span>     <span class=\"kr\">_</span>        <span class=\"ow\">=</span> <span class=\"kt\">VNil</span>\n<span class=\"nf\">fromList</span> <span class=\"p\">(</span><span class=\"kt\">SS</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:::</span> <span class=\"n\">fromList</span> <span class=\"n\">n</span> <span class=\"n\">xs</span>\n<span class=\"nf\">fromList</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">&#34;Index out of range&#34;</span></code></pre></div><p data-pid=\"5bXDMmVD\">这个函数需要预先给定长度, 这揭示Haskell里模拟DT的根本性不足, 就是不能依赖于运行时的值.</p><p data-pid=\"Lhbb8rCX\">然后是 <code>replicateV</code>, 它生成一个由重复元素组成的Vector.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">replicateV</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n<span class=\"nf\">replicateV</span> <span class=\"kt\">SZ</span>     <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"kt\">VNil</span>\n<span class=\"nf\">replicateV</span> <span class=\"p\">(</span><span class=\"kt\">SS</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:::</span> <span class=\"n\">replicateV</span> <span class=\"n\">n</span> <span class=\"n\">x</span></code></pre></div><h3>安全的下标</h3><p data-pid=\"FkAlR3dN\">即便安全如 Haskell, 它的列表类型仍是下标不安全的, 你可以写 <code>[1,2] !! 2</code> 来触发一个无法被类型系统发现的越界异常. 我们尝试用 <code>Vect</code> 改进这一点.</p><p data-pid=\"e9AtoYu4\">我们先定义一个可以限定上界的自然数类型</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">data</span> <span class=\"kt\">Fin</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">FZ</span> <span class=\"ow\">::</span> <span class=\"kt\">Fin</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n  <span class=\"kt\">FS</span> <span class=\"ow\">::</span> <span class=\"kt\">Fin</span> <span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Fin</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">k</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"yUPhlyyJ\"><code>Fin n</code> 是一个以 <code>n</code> 为上界的类型, 它有 <code>n</code> 个元素. 以实例来看:</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kt\">FZ</span> <span class=\"ow\">::</span> <span class=\"kt\">Fin</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">))</span>\n<span class=\"kt\">FS</span> <span class=\"p\">(</span><span class=\"kt\">FZ</span> <span class=\"ow\">::</span> <span class=\"kt\">Fin</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">))</span> <span class=\"ow\">::</span> <span class=\"kt\">Fin</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">))</span></code></pre></div><p data-pid=\"AsJTECw0\">果然只有两个元素, 读者可以自行尝试写一个 <code>FS (FS (FZ :: ???)))</code> 并尝试写出 <code>???</code>的内容来验证这一点(剧透: 你写不出来).</p><p data-pid=\"rdwYwX0F\">这个类型恰好可以被用来当作 <code>Vect</code> 的下标类型.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">infixl</span> <span class=\"mi\">9</span> <span class=\"o\">!</span>\n<span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Fin</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:::</span> <span class=\"kr\">_</span><span class=\"p\">)</span>  <span class=\"o\">!</span> <span class=\"kt\">FZ</span>     <span class=\"ow\">=</span> <span class=\"n\">x</span>\n<span class=\"p\">(</span><span class=\"kr\">_</span> <span class=\"kt\">:::</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"o\">!</span> <span class=\"p\">(</span><span class=\"kt\">FS</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">xs</span> <span class=\"o\">!</span> <span class=\"n\">f</span>\n<span class=\"c1\">-- 写这个函数的时候 GHC 可能会犯二告诉你 pattern non-exhaustive,</span>\n<span class=\"c1\">-- 但是你把全部模式补上之后又会告诉你 pattern inaccessible. </span>\n<span class=\"c1\">-- 我在较新版的 GHC 里遇到了这个问题, 老版里没遇到.</span></code></pre></div><p data-pid=\"i7F0PJ3P\">现在我们的的确确可以在编译期保证不会有人写出这样的代码 <code>(1:::2:::VNil) ! (FS (FS FZ))</code>.</p><h3>定长矩阵</h3><p data-pid=\"cJyiETF1\">一个矩阵当然可以像向量那样定下长度</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">type</span> <span class=\"kt\">Mat</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Vect</span> <span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"QM90X-Ej\">矩阵上也能做很多操作, 笔者在学线代时写了一系列矩阵相关函数, 详情请见(<a href=\"https://link.zhihu.com/?target=https%3A//github.com/KonjacSource/DependentMat\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/KonjacSource</span><span class=\"invisible\">/DependentMat</span><span class=\"ellipsis\"></span></a>), 此处不多赘述.</p><h3>定理证明</h3><p data-pid=\"JCwag52r\">免责声明: 我们只能在Haskell里装模做样地做一些定理证明, 本文也仅供娱乐, 如果你对定理证明感兴趣, 还请学习Agda/Lean4/Coq, 对Haskell熟悉的读者可以快速上手Agda, 这里推荐PLFA(<a href=\"https://link.zhihu.com/?target=https%3A//plfa.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://plfa.github.io</a>), 并且此书有非常棒的中文翻译(<a href=\"https://zhuanlan.zhihu.com/p/77442536\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/77</span><span class=\"invisible\">442536</span><span class=\"ellipsis\"></span></a>, <a href=\"https://link.zhihu.com/?target=https%3A//agda-zh.github.io/PLFA-zh/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">agda-zh.github.io/PLFA-</span><span class=\"invisible\">zh/</span><span class=\"ellipsis\"></span></a>), ; Lean4也是一个体验非常优秀的定理证明器, 很有拿来做通用编程的潜力, 有着非常丰富的数学定理库Mathlib; 然后笔者不会Coq, 不知道怎么安利.</p><p data-pid=\"CU6B-diu\">实际上用Haskell的来写定理证明会有大量的语法噪音, 本文甚至可能成为劝退文, 所以如果你对这方面内容真的感兴趣, 不妨学会一门定理证明器之后再来阅读.</p><p data-pid=\"EGS36lbL\">用编程语言(定理证明器实际也是编程语言)做定理证明的基础是Curry-Howard对应(下文称CH对应), 该对应指出: 命题对应类型, 证明对应类型的项. 我们以一个例子来阐述.</p><p data-pid=\"cNZ2oWdp\">定义如下类型:</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">data</span> <span class=\"p\">(</span><span class=\"kt\">:&lt;:</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">LZ</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;Z</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">n</span>\n  <span class=\"kt\">LS</span> <span class=\"ow\">::</span> <span class=\"n\">m</span> <span class=\"kt\">:&lt;:</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">m</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">n</span></code></pre></div><p data-pid=\"DlLWASPU\">这个类型对应了小于关系, 在数学上, 小于关系可以看作依赖于两个自然数(我们可以不考虑其它数上的小于关系)的命题, 借助CH对应(类型⇔命题), 我们将它写作依赖于两个自然数的类型. 然后给出构造器(项), 借助CH对应(证明⇔项), 我们将其理解为证明小于关系的方式, 将其写作数学语言就可以说</p><ul><li data-pid=\"LdC6oHgc\"><code>LZ</code> 可以证明 <img src=\"https://www.zhihu.com/equation?tex=%5Cforall+n+%5Cin+%5Cmathbb%7BN%7D%2C+0+%3C+n+%2B+1\" alt=\"\\forall n \\in \\mathbb{N}, 0 &lt; n + 1\" eeimg=\"1\"/> </li><li data-pid=\"2aaiIIDq\">给 <code>LS</code> 一个 <img src=\"https://www.zhihu.com/equation?tex=m+%3C+n\" alt=\"m &lt; n\" eeimg=\"1\"/> 的证明, <code>LS</code> 还你一个 <code>m + 1 &lt; n + 1</code> 的证明.</li></ul><p data-pid=\"-9GkWqGM\">这就是我们对小于关系的定义, <b>通过指明如何证明一个关系成立来定义这个关系</b>.</p><p data-pid=\"OnLb233D\">假如我们想要证明 <img src=\"https://www.zhihu.com/equation?tex=2+%3C+4\" alt=\"2 &lt; 4\" eeimg=\"1\"/> 该如何证明呢?</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">twoLtfour</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)))</span>\n<span class=\"nf\">twoLtfour</span> <span class=\"ow\">=</span> <span class=\"kt\">LS</span> <span class=\"p\">(</span><span class=\"kt\">LS</span> <span class=\"p\">(</span><span class=\"kt\">LZ</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;Z</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)))</span></code></pre></div><p data-pid=\"xJp269ae\">这里为了读者看得清晰标出了 <code>LZ</code> 的类型, 实际上Haskell可以自己推出来. 我们看一下这是怎么证明出来的, 请把下面代码块中的<code>::</code>读作&#34;证明了&#34;.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"c1\">-- 首先</span>\n<span class=\"kt\">LZ</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;Z</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)</span>\n<span class=\"c1\">-- 然后, 回忆 LS 的类型签名, 它相当于在不等式两边同时加了一</span>\n<span class=\"kt\">LS</span> <span class=\"kt\">LZ</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)</span>\n<span class=\"c1\">-- 最后</span>\n<span class=\"kt\">LS</span> <span class=\"p\">(</span><span class=\"kt\">LS</span> <span class=\"kt\">LZ</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)))</span>\n<span class=\"c1\">-- Q.E.D.</span></code></pre></div><h3>相等性</h3><p data-pid=\"1ZcMP5_d\">我们以证明加法交换律作为本文的结束, 在此之前, 先定义相等性.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">infixl</span> <span class=\"mi\">4</span> <span class=\"kt\">:~:</span>\n<span class=\"kr\">data</span> <span class=\"p\">(</span><span class=\"kt\">:~:</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">Refl</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">a</span></code></pre></div><p data-pid=\"gCD5DbmH\">相等性可以作用在任何两个项上(当然我们这里只用到自然数, 所以你把 <code>k</code> 换成 <code>Nat</code> 也不打紧), 它唯一的构造器 <code>Refl</code> (自反性) 精准地捕捉了两个事物相等的条件, 即, 它俩就是一个东西.</p><p data-pid=\"50Pr9JKm\">我们定义三个常用操作</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">sym</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"kt\">:~:</span> <span class=\"n\">a</span>\n<span class=\"nf\">sym</span> <span class=\"kt\">Refl</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"nf\">trans</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"kt\">:~:</span> <span class=\"n\">c</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">c</span>\n<span class=\"nf\">trans</span> <span class=\"kt\">Refl</span> <span class=\"kt\">Refl</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"nf\">cong</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n<span class=\"nf\">cong</span> <span class=\"kt\">Refl</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span></code></pre></div><p data-pid=\"bPN75BmV\">它们的名字依次是对称性, 传递性, 合同性.</p><p data-pid=\"4idTnBsN\">对称性 <code>sym</code> 的类型是 <code>a :~: b -&gt; b :~: a</code> 即, 你给它一个 <img src=\"https://www.zhihu.com/equation?tex=a+%3D+b\" alt=\"a = b\" eeimg=\"1\"/> 的证明, 它给你一个 <img src=\"https://www.zhihu.com/equation?tex=b+%3D+a\" alt=\"b = a\" eeimg=\"1\"/> 的证明, 这就是所谓的蕴含(现在你知道函数对应蕴含了). 我们来看一下对称性是如何被证明的,</p><p data-pid=\"MKdoPsgD\">当你写下如下代码时</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">sym</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"kr\">_</span></code></pre></div><p data-pid=\"UtRdekif\">Haskell 会期望下划线处的类型是 <code>b :~: a</code>; 但当你把 <code>x</code> 换成 <code>Refl</code> 时, 期望的类型就变成了 <code>a :~: a</code>, 这时候就可以直接把 <code>Refl</code> 填进去了. 这中间发生了什么? 其实是当你用 <code>Refl</code> 做模式匹配的时候, Haskell就会化简类型, 它会看到 <code>Refl</code> 的类型是 <code>a :~: a</code>, 这时候它就知道该把变元 <code>b</code> 换成 <code>a</code>, 于是最终的结果类型就变成了 <code>a :~: a</code>.</p><p data-pid=\"hPjmmewj\"><code>trans</code> 和 <code>cong</code> 的原理也是同样的, 读者可自行验证.</p><h3>结合律</h3><p data-pid=\"vxM2t3pD\">加法结合律是 <img src=\"https://www.zhihu.com/equation?tex=%5Cforall+%28a%2C+b%2C+c+%5Cin+%5Cmathbb%7BN%7D%29%2C+%28a+%2B+b%29+%2B+c+%3D+a+%2B+%28b+%2B+c%29\" alt=\"\\forall (a, b, c \\in \\mathbb{N}), (a + b) + c = a + (b + c)\" eeimg=\"1\"/> , 写成类型就是</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">assoc</span> <span class=\"ow\">::</span> <span class=\"p\">((</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"kt\">:+:</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:+:</span> <span class=\"n\">c</span><span class=\"p\">))</span> <span class=\"c1\">-- Haskell帮我们写了前面的&#34;forall&#34;</span></code></pre></div><p data-pid=\"sGLjIujh\">由于我们需要在类型上进行模式匹配, 所以开一个类型类,</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">class</span> <span class=\"kt\">Assoc</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"ow\">::</span> <span class=\"p\">((</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:+:</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:+:</span> <span class=\"n\">c</span><span class=\"p\">))</span></code></pre></div><p data-pid=\"17XMPphr\">然后在 <code>a</code> 上做归纳(递归)来证明,</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">instance</span> <span class=\"kt\">Assoc</span> <span class=\"kt\">&#39;Z</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"kr\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Assoc</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"kr\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"ow\">=</span> <span class=\"n\">cong</span> <span class=\"o\">@</span><span class=\"kr\">_</span> <span class=\"o\">@</span><span class=\"kr\">_</span> <span class=\"o\">@</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">assoc</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span> <span class=\"o\">@</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"c1\">-- 这里要开 TypeApplications</span></code></pre></div><p data-pid=\"LdyKLw0L\">TypeApplications拓展允许我们使用<code>@</code>来把类型参数显式地应用过去.</p><p data-pid=\"FIC5buyE\">首先看第一个情况, <code>Assoc &#39;Z b c</code>, 这个情况下 <code>a = &#39;Z</code>, 然后Haskell可以计算出 <code>((a :+: b) :+: c) = b :+: c</code> 和 <code>(a :+: (b :+: c)) = b :+: c</code>, 所以 <code>assoc</code> 的类型就化简成了 <code>(b :+: c) :~: (b :+: c)</code>, 用 <code>Refl</code> 就直接证明了.</p><p data-pid=\"lA3w2C3C\">第二个情况做了归纳, instance的声明表明 &#34;要有 <code>Assoc (&#39;S a) b c</code> 的类型类, 就要现有 <code>Assoc a b c</code> 的类型类&#34;翻译一下就是&#34;要证明对 <code>(&#39;S a) b c</code> 的结合律, 需要先证明 <code>a b c</code> 的结合律&#34;, 这意味着我们可以安全地(不会死循环地)调用 <code>assoc @a @b @c</code> , 这实质就是在<code>a</code>上做数学归纳的过程.</p><p data-pid=\"CBJ-Q0oX\">先来看目标类型,</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">instance</span> <span class=\"kt\">Assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Assoc</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"kr\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"ow\">=</span> <span class=\"kr\">_</span></code></pre></div><p data-pid=\"x9SKA0os\">下划线处的类型应该是 <code>(((&#39;S a) :+: b) :+: c) :~: ((&#39;S a) :+: (b :+: c))</code>, 由 <code>:+:</code> 的定义, Haskell可以将其化为最简形式 <code>&#39;S ((a :+: b) :+: c) :~: &#39;S (a :+: (b :+: c))</code>.</p><p data-pid=\"_7ZPbuUm\">来看一下是如何归纳的,</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"p\">(</span><span class=\"n\">assoc</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span> <span class=\"o\">@</span><span class=\"n\">c</span><span class=\"p\">)</span>                <span class=\"ow\">::</span> <span class=\"p\">((</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:+:</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:+:</span> <span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"nf\">cong</span> <span class=\"o\">@</span><span class=\"kr\">_</span> <span class=\"o\">@</span><span class=\"kr\">_</span> <span class=\"o\">@</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">assoc</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span> <span class=\"o\">@</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">((</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:+:</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:+:</span> <span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"c1\">-- 回忆 cong 的类型, 有 (cong @_ @_ @f (xxx :: x :~: y) :: f x :~: f y)</span>\n<span class=\"c1\">-- 相当于在等式两边同时作用一个函数, 以后我们会不写这些参数, 而直接写 cong (assoc @a @b @c)</span>\n<span class=\"c1\">-- Haskell可以推导出来这些参数, 在下面的例子里 f 都是 &#39;S</span></code></pre></div><p data-pid=\"pXgJR8aZ\">这恰好和上面的最简形式一致, 所以我们直接填进去得到</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">instance</span> <span class=\"kt\">Assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Assoc</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"kr\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"ow\">=</span> <span class=\"n\">cong</span> <span class=\"o\">@</span><span class=\"kr\">_</span> <span class=\"o\">@</span><span class=\"kr\">_</span> <span class=\"o\">@</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">assoc</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span> <span class=\"o\">@</span><span class=\"n\">c</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"111givgA\">就像先前提到的, Haskell无法自动检查 <code>Assoc</code> 的定义是否覆盖了所有的 <code>Nat</code>, 我们只能人工检查, 我们的定义显然是完整覆盖了的, 这是Haskell不能作为定理证明器的一个重要原因. 定理证明器可以像检查模式匹配完整性那样检查结合律的完整性. 另一个重要原因是Haskell不会进行停机检查, 你可以轻易地写出无限递归来通过类型检查, 这实际对应了循环论证, 定理证明器会确保你的函数一定在有限步内结束.</p><h3>交换律</h3><p data-pid=\"1U5Snhbi\">证明交换律之前先证明这样一个小引理: <img src=\"https://www.zhihu.com/equation?tex=%5Cforall+n+%5Cin+%5Cmathbb%7BN%7D%2C+n+%2B+0+%3D+n\" alt=\"\\forall n \\in \\mathbb{N}, n + 0 = n\" eeimg=\"1\"/> , 翻译成类型,</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">class</span> <span class=\"kt\">Idr</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">idr</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"kt\">:+:</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"n\">n</span></code></pre></div><p data-pid=\"HIDcxbPO\">证明也非常简单, 鼓励读者自行尝试, 答案如下:</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">instance</span> <span class=\"kt\">Idr</span> <span class=\"kt\">&#39;Z</span> <span class=\"kr\">where</span>\n  <span class=\"n\">idr</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Idr</span> <span class=\"n\">n</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Idr</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">idr</span> <span class=\"ow\">=</span> <span class=\"n\">cong</span> <span class=\"n\">idr</span> <span class=\"c1\">-- 完整形式是 cong @(n:+:&#39;Z) @n @&#39;S (idr @n), Haskell替我们填写了这些参数</span></code></pre></div><p data-pid=\"GsHwS9Jq\">然后是另外一个引理: <img src=\"https://www.zhihu.com/equation?tex=%5Cforall+%28a%2C+b+%5Cin+%5Cmathbb%7BN%7D%29%2C+a+%2B+%28b+%2B+1%29+%3D+%28a+%2B+b%29+%2B+1\" alt=\"\\forall (a, b \\in \\mathbb{N}), a + (b + 1) = (a + b) + 1\" eeimg=\"1\"/> , 翻译成类型</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">class</span> <span class=\"kt\">SuccR</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">succR</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"nGH6v81U\">对 <code>a</code> 归纳, 有</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">instance</span> <span class=\"kt\">SuccR</span> <span class=\"kt\">&#39;Z</span> <span class=\"n\">b</span> <span class=\"kr\">where</span>\n  <span class=\"n\">succR</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">SuccR</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">SuccR</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">b</span> <span class=\"kr\">where</span>\n  <span class=\"n\">succR</span> <span class=\"ow\">=</span> <span class=\"n\">cong</span> <span class=\"p\">(</span><span class=\"n\">succR</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"nDLv5pGm\">现在来证明交换律: <img src=\"https://www.zhihu.com/equation?tex=%5Cforall+%28a%2C+b+%5Cin+%5Cmathbb%7BN%7D%29%2C+a+%2B+b+%3D+b+%2B+a\" alt=\"\\forall (a, b \\in \\mathbb{N}), a + b = b + a\" eeimg=\"1\"/> , 翻译成类型</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">class</span> <span class=\"kt\">Comm</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">comm</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:+:</span> <span class=\"n\">a</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"_cJ-q3PQ\">对 <code>b</code> 做归纳</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">instance</span> <span class=\"kt\">Idr</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Comm</span> <span class=\"n\">a</span> <span class=\"kt\">&#39;Z</span> <span class=\"kr\">where</span>\n  <span class=\"n\">comm</span> <span class=\"ow\">=</span> <span class=\"n\">idr</span>\n\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">SuccR</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kt\">Comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Comm</span> <span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">comm</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span> <span class=\"n\">eq1</span> <span class=\"ow\">=</span> <span class=\"n\">succR</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span> \n             <span class=\"n\">eq2</span> <span class=\"ow\">=</span> <span class=\"n\">cong</span> <span class=\"p\">(</span><span class=\"n\">comm</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span><span class=\"p\">)</span> \n         <span class=\"kr\">in</span> <span class=\"n\">trans</span> <span class=\"n\">eq1</span> <span class=\"n\">eq2</span></code></pre></div><p data-pid=\"wKwqBg-R\">先看 <code>b</code> 为 <code>&#39;Z</code> 的情况, 此时Haskell能直接把目标类型化简为 <code>a :+: &#39;Z = a</code>, 这就是我们的第一个引理<code>idr</code>, 直接填上就能证明.</p><p data-pid=\"Ew8JAmty\">比较复杂的是 <code>b</code> 为 <code>&#39;S b</code> 的情况, 我们把目标 <code>(a :+: &#39;S b) :~: &#39;S (b :+: a)</code> 分成两个式子: </p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:+:</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"err\">分成</span>\n<span class=\"nf\">eq1</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"nf\">eq2</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:+:</span> <span class=\"n\">a</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"6Hg7LeKq\">第一个式子就是我们证明的第二个引理 <code>succR</code>, 所以我们在约束上写<code>SuccR a b</code>; 第二个式子两边都去掉 <code>&#39;S</code> 就是 <code>comm @a @b</code>, 所以我们在约束上写<code>Comm a b</code>, 然后再在<code>comm @a @b</code>类型的等式两边同时用<code>cong</code>加上<code>&#39;S</code>函数, 就能得到 <code>eq2</code>.</p><p data-pid=\"HAGWIzGm\">最后再用等式的传递性连接 <code>eq1</code> 和 <code>eq2</code> 就能得到最终的结果:</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">trans</span> <span class=\"n\">eq1</span> <span class=\"n\">eq2</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:+:</span> <span class=\"n\">a</span><span class=\"p\">)</span></code></pre></div><h3>完整代码</h3><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"cm\">{-# LANGUAGE MultiParamTypeClasses #-}</span>\n<span class=\"cm\">{-# LANGUAGE FlexibleInstances  #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeApplications #-}</span>\n<span class=\"cm\">{-# LANGUAGE DataKinds #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeFamilies #-}</span>\n<span class=\"cm\">{-# LANGUAGE TypeOperators #-}</span>\n<span class=\"cm\">{-# LANGUAGE KindSignatures #-}</span>\n<span class=\"cm\">{-# LANGUAGE GADTs #-}</span>\n<span class=\"cm\">{-# LANGUAGE UndecidableInstances #-}</span>\n<span class=\"cm\">{-# LANGUAGE AllowAmbiguousTypes #-}</span>\n<span class=\"cm\">{-# OPTIONS_GHC -Wno-missing-export-lists #-}</span>\n\n<span class=\"kr\">module</span> <span class=\"nn\">Test</span> <span class=\"kr\">where</span>\n\n<span class=\"kr\">import</span> <span class=\"nn\">Data.Kind</span> <span class=\"p\">(</span><span class=\"kt\">Type</span><span class=\"p\">)</span>\n\n<span class=\"kr\">infixr</span> <span class=\"mi\">4</span> <span class=\"kt\">:+:</span>\n<span class=\"kr\">data</span> <span class=\"kt\">HList</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">HNil</span>  <span class=\"ow\">::</span> <span class=\"kt\">HList</span> <span class=\"kt\">&#39;[]</span>\n  <span class=\"p\">(</span><span class=\"kt\">:+:</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"n\">t</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"n\">ts</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"sc\">&#39;</span><span class=\"err\">: ts)</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Show</span> <span class=\"p\">(</span><span class=\"kt\">HList</span> <span class=\"kt\">&#39;[]</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">show</span> <span class=\"kt\">HNil</span> <span class=\"ow\">=</span> <span class=\"s\">&#34;HNil&#34;</span>\n\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">Show</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"kt\">Show</span> <span class=\"p\">(</span><span class=\"kt\">HList</span> <span class=\"n\">ts</span><span class=\"p\">))</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Show</span> <span class=\"p\">(</span><span class=\"kt\">HList</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"sc\">&#39;</span><span class=\"err\">: ts)) where</span>\n  <span class=\"n\">show</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:+:</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">show</span> <span class=\"n\">x</span> <span class=\"o\">++</span> <span class=\"s\">&#34;:+:&#34;</span> <span class=\"o\">++</span> <span class=\"n\">show</span> <span class=\"n\">xs</span>\n\n<span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"kt\">TAppend</span> <span class=\"p\">(</span><span class=\"n\">ls1</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">])</span> <span class=\"p\">(</span><span class=\"n\">ls2</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">])</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">]</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">TAppend</span> <span class=\"kt\">&#39;[]</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">ys</span>\n  <span class=\"kt\">TAppend</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"sc\">&#39;</span><span class=\"err\">: xs) ys = x</span><span class=\"sc\"> &#39;</span><span class=\"kt\">:</span> <span class=\"kt\">TAppend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span>\n\n<span class=\"nf\">hAppend</span> <span class=\"ow\">::</span> <span class=\"kt\">HList</span> <span class=\"n\">ts1</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"n\">ts2</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">HList</span> <span class=\"p\">(</span><span class=\"kt\">TAppend</span> <span class=\"n\">ts1</span> <span class=\"n\">ts2</span><span class=\"p\">)</span>\n<span class=\"nf\">hAppend</span> <span class=\"kt\">HNil</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">ys</span>\n<span class=\"nf\">hAppend</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:+:</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:+:</span> <span class=\"n\">hAppend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span>\n\n<span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"kt\">Map</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"ow\">::</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">ts</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">])</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">]</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"kt\">&#39;[]</span> <span class=\"ow\">=</span> <span class=\"kt\">&#39;[]</span>\n  <span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"sc\">&#39;</span><span class=\"err\">: ts) = f t</span><span class=\"sc\"> &#39;</span><span class=\"kt\">:</span> <span class=\"kt\">Map</span> <span class=\"n\">f</span> <span class=\"n\">ts</span>\n\n<span class=\"c1\">-- hSequence :: forall (m :: Type -&gt; Type) (ts :: [Type]) . Monad m =&gt; HList (Map m ts) -&gt; m (HList ts)</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">HSeq</span> <span class=\"p\">(</span><span class=\"n\">ts</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Type</span><span class=\"p\">])</span> <span class=\"kr\">where</span>\n  <span class=\"n\">hSequence</span> <span class=\"ow\">::</span> <span class=\"kt\">Monad</span> <span class=\"n\">m</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">HList</span> <span class=\"p\">(</span><span class=\"kt\">Map</span> <span class=\"n\">m</span> <span class=\"n\">ts</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"kt\">HList</span> <span class=\"n\">ts</span><span class=\"p\">)</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">HSeq</span> <span class=\"kt\">&#39;[]</span> <span class=\"kr\">where</span>\n  <span class=\"n\">hSequence</span> <span class=\"kt\">HNil</span> <span class=\"ow\">=</span> <span class=\"n\">return</span> <span class=\"kt\">HNil</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">HSeq</span> <span class=\"n\">ts</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">HSeq</span> <span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"sc\">&#39;</span><span class=\"err\">: ts) where</span>\n  <span class=\"n\">hSequence</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:+:</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kr\">do</span>\n    <span class=\"n\">xr</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">x</span>\n    <span class=\"n\">xsr</span> <span class=\"ow\">&lt;-</span> <span class=\"n\">hSequence</span> <span class=\"n\">xs</span>\n    <span class=\"n\">return</span> <span class=\"p\">(</span><span class=\"n\">xr</span> <span class=\"kt\">:+:</span> <span class=\"n\">xsr</span><span class=\"p\">)</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Nat</span> <span class=\"ow\">=</span> <span class=\"kt\">Z</span> <span class=\"o\">|</span> <span class=\"kt\">S</span> <span class=\"kt\">Nat</span>\n\n<span class=\"kr\">infixr</span> <span class=\"mi\">4</span> <span class=\"kt\">:::</span>\n<span class=\"kr\">data</span> <span class=\"kt\">Vect</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">VNil</span> <span class=\"ow\">::</span> <span class=\"kt\">Vect</span> <span class=\"kt\">&#39;Z</span> <span class=\"n\">a</span>\n  <span class=\"p\">(</span><span class=\"kt\">:::</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">a</span>\n\n<span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"p\">(</span><span class=\"kt\">:+</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">&#39;Z</span>     <span class=\"kt\">:+</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span>\n  <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"kt\">:+</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:+</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"nf\">vAppend</span> <span class=\"ow\">::</span> <span class=\"kt\">Vect</span> <span class=\"n\">m</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:+</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"n\">a</span>\n<span class=\"nf\">vAppend</span> <span class=\"kt\">VNil</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">ys</span>\n<span class=\"nf\">vAppend</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:::</span><span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:::</span> <span class=\"n\">vAppend</span> <span class=\"n\">xs</span> <span class=\"n\">ys</span>\n\n\n\n<span class=\"nf\">nat2Int</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Int</span>\n<span class=\"nf\">nat2Int</span> <span class=\"kt\">Z</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n<span class=\"nf\">nat2Int</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">nat2Int</span> <span class=\"n\">n</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Show</span> <span class=\"kt\">Nat</span> <span class=\"kr\">where</span>\n  <span class=\"n\">show</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"s\">&#34;n&#34;</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"n\">show</span> <span class=\"o\">.</span> <span class=\"n\">nat2Int</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Num</span> <span class=\"kt\">Nat</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">Z</span>     <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span>\n  <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n  <span class=\"kt\">Z</span>     <span class=\"o\">-</span> <span class=\"kr\">_</span>     <span class=\"ow\">=</span> <span class=\"kt\">Z</span>\n  <span class=\"n\">m</span>     <span class=\"o\">-</span> <span class=\"kt\">Z</span>     <span class=\"ow\">=</span> <span class=\"n\">m</span>\n  <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">m</span> <span class=\"o\">-</span> <span class=\"n\">n</span>\n\n  <span class=\"kt\">Z</span>     <span class=\"o\">*</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"kt\">Z</span>\n  <span class=\"p\">(</span><span class=\"kt\">S</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">*</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n  <span class=\"n\">fromInteger</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"kt\">Z</span>\n  <span class=\"n\">fromInteger</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"o\">$</span> <span class=\"n\">fromInteger</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n  <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"ow\">=</span> <span class=\"n\">x</span>\n  <span class=\"n\">signum</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">SNat</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">SZ</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"kt\">&#39;Z</span>\n  <span class=\"kt\">SS</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"kr\">infixl</span> <span class=\"mi\">6</span> <span class=\"o\">|+|</span>\n<span class=\"p\">(</span><span class=\"o\">|+|</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"n\">m</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:+:</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"kt\">SZ</span>   <span class=\"o\">|+|</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span>\n<span class=\"kt\">SS</span> <span class=\"n\">m</span> <span class=\"o\">|+|</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">SS</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">|+|</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"kr\">infixl</span> <span class=\"mi\">7</span> <span class=\"o\">|*|</span>\n<span class=\"p\">(</span><span class=\"o\">|*|</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"n\">m</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:*:</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"kt\">SZ</span>   <span class=\"o\">|*|</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"kt\">SZ</span>\n<span class=\"kt\">SS</span> <span class=\"n\">m</span> <span class=\"o\">|*|</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span> <span class=\"o\">|+|</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"o\">|*|</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n\n<span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"p\">(</span><span class=\"kt\">:+:</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">&#39;Z</span>     <span class=\"kt\">:+:</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span>\n  <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"kt\">:+:</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:+:</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"kr\">type</span> <span class=\"kr\">family</span> <span class=\"p\">(</span><span class=\"kt\">:*:</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">&#39;Z</span>     <span class=\"kt\">:*:</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"kt\">&#39;Z</span>\n  <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">m</span><span class=\"p\">)</span> <span class=\"kt\">:*:</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">n</span> <span class=\"kt\">:+:</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:*:</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n\n<span class=\"kr\">data</span> <span class=\"kt\">Proxy</span> <span class=\"n\">t</span> <span class=\"ow\">=</span> <span class=\"kt\">Proxy</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">FromNat</span> <span class=\"p\">(</span><span class=\"n\">nat</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">fromNat</span> <span class=\"ow\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">FromNat</span> <span class=\"kt\">&#39;Z</span> <span class=\"kr\">where</span>\n  <span class=\"n\">fromNat</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">FromNat</span> <span class=\"n\">n</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">FromNat</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">fromNat</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"kt\">S</span> <span class=\"o\">$</span> <span class=\"n\">fromNat</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"ow\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">ToSNat</span> <span class=\"p\">(</span><span class=\"n\">nat</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">toSNat</span> <span class=\"ow\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">SNat</span> <span class=\"n\">nat</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">ToSNat</span> <span class=\"kt\">&#39;Z</span> <span class=\"kr\">where</span>\n  <span class=\"n\">toSNat</span> <span class=\"kt\">Proxy</span> <span class=\"ow\">=</span> <span class=\"kt\">SZ</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">ToSNat</span> <span class=\"n\">n</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">ToSNat</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">toSNat</span> <span class=\"kt\">Proxy</span> <span class=\"ow\">=</span> <span class=\"kt\">SS</span> <span class=\"p\">(</span><span class=\"n\">toSNat</span> <span class=\"p\">(</span><span class=\"kt\">Proxy</span> <span class=\"ow\">::</span> <span class=\"kt\">Proxy</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"nf\">fromList</span> <span class=\"ow\">::</span> <span class=\"kt\">SNat</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span>\n<span class=\"nf\">fromList</span> <span class=\"kt\">SZ</span>     <span class=\"kr\">_</span>        <span class=\"ow\">=</span> <span class=\"kt\">VNil</span>\n<span class=\"nf\">fromList</span> <span class=\"p\">(</span><span class=\"kt\">SS</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:::</span> <span class=\"n\">fromList</span> <span class=\"n\">n</span> <span class=\"n\">xs</span>\n<span class=\"nf\">fromList</span> <span class=\"kr\">_</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span> <span class=\"ne\">error</span> <span class=\"s\">&#34;Index out of range&#34;</span>\n\n<span class=\"kr\">data</span> <span class=\"kt\">Fin</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">FZ</span> <span class=\"ow\">::</span> <span class=\"kt\">Fin</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n  <span class=\"kt\">FS</span> <span class=\"ow\">::</span> <span class=\"kt\">Fin</span> <span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Fin</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n\n<span class=\"kr\">infixl</span> <span class=\"mi\">9</span> <span class=\"o\">!</span>\n<span class=\"p\">(</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Vect</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Fin</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span>\n<span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:::</span> <span class=\"kr\">_</span><span class=\"p\">)</span>  <span class=\"o\">!</span> <span class=\"kt\">FZ</span>     <span class=\"ow\">=</span> <span class=\"n\">x</span>\n<span class=\"p\">(</span><span class=\"kr\">_</span> <span class=\"kt\">:::</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"o\">!</span> <span class=\"p\">(</span><span class=\"kt\">FS</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">xs</span> <span class=\"o\">!</span> <span class=\"n\">f</span>\n\n\n<span class=\"kr\">data</span> <span class=\"p\">(</span><span class=\"kt\">:&lt;:</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nat</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">LZ</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;Z</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">n</span>\n  <span class=\"kt\">LS</span> <span class=\"ow\">::</span> <span class=\"n\">m</span> <span class=\"kt\">:&lt;:</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">m</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">n</span>\n\n<span class=\"nf\">twoLtfour</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)))</span>\n<span class=\"nf\">twoLtfour</span> <span class=\"ow\">=</span> <span class=\"kt\">LS</span> <span class=\"p\">(</span><span class=\"kt\">LS</span> <span class=\"p\">(</span><span class=\"kt\">LZ</span> <span class=\"ow\">::</span> <span class=\"kt\">&#39;Z</span> <span class=\"kt\">:&lt;:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)))</span>\n\n\n<span class=\"kr\">infixl</span> <span class=\"mi\">4</span> <span class=\"kt\">:~:</span>\n<span class=\"kr\">data</span> <span class=\"p\">(</span><span class=\"kt\">:~:</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Type</span> <span class=\"kr\">where</span>\n  <span class=\"kt\">Refl</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">a</span>\n\n<span class=\"nf\">cong</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n<span class=\"nf\">cong</span> <span class=\"kt\">Refl</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"nf\">sym</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"kt\">:~:</span> <span class=\"n\">a</span>\n<span class=\"nf\">sym</span> <span class=\"kt\">Refl</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"nf\">trans</span> <span class=\"ow\">::</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"kt\">:~:</span> <span class=\"n\">c</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"kt\">:~:</span> <span class=\"n\">c</span>\n<span class=\"nf\">trans</span> <span class=\"kt\">Refl</span> <span class=\"kt\">Refl</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">Assoc</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"ow\">::</span> <span class=\"p\">((</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:+:</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:+:</span> <span class=\"n\">c</span><span class=\"p\">))</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Assoc</span> <span class=\"kt\">&#39;Z</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"kr\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Assoc</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"kr\">where</span>\n  <span class=\"n\">assoc</span> <span class=\"ow\">=</span> <span class=\"n\">cong</span> <span class=\"o\">@</span><span class=\"kr\">_</span> <span class=\"o\">@</span><span class=\"kr\">_</span> <span class=\"o\">@</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">assoc</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span> <span class=\"o\">@</span><span class=\"n\">c</span><span class=\"p\">)</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">Idr</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">idr</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"kt\">:+:</span> <span class=\"kt\">&#39;Z</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"n\">n</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Idr</span> <span class=\"kt\">&#39;Z</span> <span class=\"kr\">where</span>\n  <span class=\"n\">idr</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Idr</span> <span class=\"n\">n</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Idr</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">idr</span> <span class=\"ow\">=</span> <span class=\"n\">cong</span> <span class=\"o\">@</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"kt\">:+:&#39;Z</span><span class=\"p\">)</span> <span class=\"o\">@</span><span class=\"n\">n</span> <span class=\"o\">@</span><span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">idr</span> <span class=\"o\">@</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">SuccR</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">succR</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"kt\">&#39;S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"kt\">&#39;S</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">SuccR</span> <span class=\"kt\">&#39;Z</span> <span class=\"n\">b</span> <span class=\"kr\">where</span>\n  <span class=\"n\">succR</span> <span class=\"ow\">=</span> <span class=\"kt\">Refl</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">SuccR</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">SuccR</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"n\">b</span> <span class=\"kr\">where</span>\n  <span class=\"n\">succR</span> <span class=\"ow\">=</span> <span class=\"n\">cong</span> <span class=\"p\">(</span><span class=\"n\">succR</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"kr\">class</span> <span class=\"kt\">Comm</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"ow\">::</span> <span class=\"kt\">Nat</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">comm</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"kt\">:+:</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kt\">:~:</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"kt\">:+:</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n\n<span class=\"kr\">instance</span> <span class=\"kt\">Idr</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Comm</span> <span class=\"n\">a</span> <span class=\"kt\">&#39;Z</span> <span class=\"kr\">where</span>\n  <span class=\"n\">comm</span> <span class=\"ow\">=</span> <span class=\"n\">idr</span>\n\n<span class=\"kr\">instance</span> <span class=\"p\">(</span><span class=\"kt\">SuccR</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kt\">Comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Comm</span> <span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"kt\">&#39;S</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">comm</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span> <span class=\"n\">eq1</span> <span class=\"ow\">=</span> <span class=\"n\">succR</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span> \n             <span class=\"n\">eq2</span> <span class=\"ow\">=</span> <span class=\"n\">cong</span> <span class=\"p\">(</span><span class=\"n\">comm</span> <span class=\"o\">@</span><span class=\"n\">a</span> <span class=\"o\">@</span><span class=\"n\">b</span><span class=\"p\">)</span> \n         <span class=\"kr\">in</span> <span class=\"n\">trans</span> <span class=\"n\">eq1</span> <span class=\"n\">eq2</span></code></pre></div>",
            "voteup_count": 60,
            "comment_count": 6
        },
        "created": "2023-11-08T01:44:38+08:00"
    },
    {
        "content": {
            "id": 228710416,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/65155704/answer/228710416",
            "created_time": 1505153457,
            "updated_time": 1537154653,
            "question": {
                "type": "question",
                "id": 65155704,
                "title": "Tarjan（自己/合作）创造了哪些算法和数据结构？",
                "question_type": "normal",
                "created": 1505032987,
                "updated_time": 1505452399,
                "url": "https://www.zhihu.com/question/65155704",
                "is_deleted": false
            },
            "author": {
                "id": "1adaa92bf934b2436a1f4d62a9ab037d",
                "url_token": "zhao-yu-yang-23-57",
                "name": "Ann(FR)",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-4621cd9f0d8d506b70ecd88015c768ca_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-4621cd9f0d8d506b70ecd88015c768ca.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/1adaa92bf934b2436a1f4d62a9ab037d",
                "user_type": "people",
                "headline": "alias negiizhao",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1463242622
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 103,
            "comment_count": 5,
            "thanks_count": 7,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"MFqWXjpD\">显然，要全部写出来实在是太多了。。就说几个有名的吧。</p><p data-pid=\"kHYOzO7d\">按照相关论文最早在会议或期刊上发表的时间排序。</p><ul><li data-pid=\"4Dyzm_xQ\"><b>Tarjan&#39;s SCCs algorithm (Tarjan强连通分量算法).</b></li><ul><li data-pid=\"N8TS8wSt\">Tarjan, Robert Endre (1971). &#34;Depth-first search and linear graph algorithms&#34;.</li></ul><li data-pid=\"F9vQFCIu\"><b>Tarjan&#39;s BCCs algorithm (Tarjan双连通分量算法).</b></li><ul><li data-pid=\"-26xLMYI\">Hopcroft, John Edward; Tarjan, R. E. (1973). &#34;Algorithm 447: efficient algorithms for graph manipulation&#34;.</li></ul><li data-pid=\"7eZixIwp\"><b>线性时间找出图的桥.</b></li><ul><li data-pid=\"j1RKptJk\">Tarjan, R. E. (1974). &#34;A note on finding the bridges of a graph&#34;.</li></ul><li data-pid=\"f2xempwu\"><b>Link/cut tree.</b></li><ul><li data-pid=\"6wWTWkEP\">Sleator, Daniel Dominic; Tarjan, R. E. (1981). &#34;A data structure for dynamic trees&#34;.</li></ul><li data-pid=\"06rC77WF\"><b>Fibonacci heap (Fibonacci堆).</b></li><ul><li data-pid=\"kWtQGQam\">Fredman, Michael Lawrence; Tarjan, R. E. (1984). &#34;Fibonacci heaps and their uses in improved network optimization algorithms&#34;.</li></ul><li data-pid=\"881KIHsr\"><b>Splay tree (伸展树).</b></li><ul><li data-pid=\"0Jpm_kTz\">Sleator, D. D.; Tarjan, R. E. (1985). &#34;Self-adjusting binary search trees&#34;.</li></ul><li data-pid=\"av4Hu2G_\"><b>Persistent data structure (持久化数据结构).</b></li><ul><li data-pid=\"_-QS9NAz\">Sarnak, Neil; Tarjan, R. E.: (1986). &#34;Planar point location using persistent search trees&#34;.</li><li data-pid=\"yXZB15u5\">Driscoll, James R.; Sarnak, N.; Sleator, D. D.; Tarjan, R. E. (1986). &#34;Making data structures persistent&#34;.</li><li data-pid=\"a78A37mS\">术语“persistent”最早出现在这两篇论文中。然而，相关的工作可以追溯到1980年。</li><ul><li data-pid=\"nZziD4xY\">Dobkin, David P.; Munro, J. Ian (1980). &#34;Efficient uses of the past&#34;.</li><li data-pid=\"n0eHy78w\">更多文献参见论文的 Reference 。</li></ul></ul><li data-pid=\"W1SUMxXr\"><b>Skew heap (斜堆).</b></li><ul><li data-pid=\"ajWuMZrB\">Sleator, D. D.; Tarjan, R. E. (1986). &#34;Self-adjusting heaps&#34;.</li></ul><li data-pid=\"sOhj-oY8\"><b>Pairing heap (配对堆).</b></li><ul><li data-pid=\"wSUpjJ2L\">Fredman, M. L.; Sedgewick, Robert; Sleator, D. D.; Tarjan, R. E. (1986). &#34;The pairing heap: a new form of self-adjusting heap&#34;.</li></ul><li data-pid=\"dpQLMIpm\"><b>Self-adjusting top trees.</b></li><ul><li data-pid=\"nIdI_m8z\">Tarjan, R. E.; Werneck, Renato Fonseca Furquim (2005). &#34;Self-adjusting top trees&#34;.</li></ul></ul><p data-pid=\"Wfq5DqRK\"><a href=\"https://link.zhihu.com/?target=http%3A//dblp.dagstuhl.de/pers/hd/t/Tarjan%3ARobert_E%3D\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>收录了Tarjan所有公开发表的论文，有兴趣的话可以看看。</p><ul><li data-pid=\"LH8gBhwW\"><b>“Tarjan&#39;s off-line LCA algorithm (Tarjan离线LCA算法) ”并不是Tarjan的。</b></li><ul><li data-pid=\"KW5V8LT4\">Aho, Alfred Vaino; Hopcroft, J. E.; Ullman, Jeffrey David (1973). &#34;On Finding Lowest Common Ancestors in Trees&#34;.</li></ul></ul>",
            "excerpt": "显然，要全部写出来实在是太多了。。就说几个有名的吧。 按照相关论文最早在会议或期刊上发表的时间排序。 Tarjan&#39;s SCCs algorithm (Tarjan强连通分量算法).Tarjan, Robert Endre (1971). &#34;Depth-first search and linear graph algorithms&#34;.Tarjan&#39;s BCCs algorithm (Tarjan双连通分量算法).Hopcroft, John Edward; Tarjan, R. E. (1973). &#34;Algorithm 447: efficient algorithms for graph manipulation&#34;.线性时间找出图的桥.T…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxiQsIdtIK6h3AiSAiMKCDcxNjU0NDM5EgkyMjg3MTA0MTYYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2017-09-12T02:10:57+08:00"
    },
    {
        "content": {
            "id": 3307583890,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/632021320/answer/3307583890",
            "created_time": 1701276365,
            "updated_time": 1701276365,
            "question": {
                "type": "question",
                "id": 632021320,
                "title": "用于完成 SICP 学习的最佳 Scheme 实现和 IDE 是什么？",
                "question_type": "normal",
                "created": 1701013600,
                "updated_time": 1701859935,
                "url": "https://www.zhihu.com/question/632021320",
                "is_deleted": false
            },
            "author": {
                "id": "57d8a1785f38f868bb601fef22d1da3a",
                "url_token": "yi-zhi-61-29",
                "name": "杨逸之",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-3d83f0113109a0e68ca83a8311d83a12_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-3d83f0113109a0e68ca83a8311d83a12.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/57d8a1785f38f868bb601fef22d1da3a",
                "user_type": "people",
                "headline": "热爱编程",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1476694477
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 7,
            "comment_count": 2,
            "thanks_count": 1,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"u3VGb_ha\">最佳哪必须js版本sicp, web版本新加坡做的很棒，还有配套练习</p>",
            "excerpt": "最佳哪必须js版本sicp, web版本新加坡做的很棒，还有配套练习",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxiS85apDCCIgv4wkgIlCgk2MzE0NTgxODgSCjMzMDc1ODM4OTAYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-11-30T00:46:05+08:00"
    },
    {
        "content": {
            "id": 3324902960,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/26731218/answer/3324902960",
            "created_time": 1702513535,
            "updated_time": 1702594774,
            "question": {
                "type": "question",
                "id": 26731218,
                "title": "为什么高质量计算机书籍几乎都是外国人写的？",
                "question_type": "normal",
                "created": 1416644968,
                "updated_time": 1523107160,
                "url": "https://www.zhihu.com/question/26731218",
                "is_deleted": false
            },
            "author": {
                "id": "a19ae109d127ec8dacde6bdaa3e83c7a",
                "url_token": "dai-shu-bin-13",
                "name": "程序员大彬",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-538e37e852d80eec52bcf41dedace768_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-538e37e852d80eec52bcf41dedace768.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/a19ae109d127ec8dacde6bdaa3e83c7a",
                "user_type": "people",
                "headline": "分享自学编程经验，微信：i_am_dabin",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic3.zhimg.com/v2-4fa161a01a3aa7e3d76aaf2ff93b37a4.png?source=6a64a727",
                        "night_mode_url": "https://pic1.zhimg.com/v2-4fa161a01a3aa7e3d76aaf2ff93b37a4.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1449382881
            },
            "thumbnail": "https://picx.zhimg.com/v2-e476f1db0929622482cbef9e8f221b01_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 170,
            "comment_count": 9,
            "thanks_count": 115,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"6l160q4K\">推荐一本<b>日本网友Kenji Hiranabe</b>写的《线性代数的艺术》。不得不说，外国人写的教材质量是真的高。。</p><blockquote data-pid=\"MhewvZaJ\">原文完整版PDF: <a href=\"https://link.zhihu.com/?target=https%3A//pan.quark.cn/s/a17b0252603b\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pan.quark.cn/s/a17b0252</span><span class=\"invisible\">603b</span><span class=\"ellipsis\"></span></a></blockquote><p data-pid=\"OQvxdOEo\">这本书是基于MIT大牛Gilbert Strang教授的《每个人的线性代数》制作的，通过可视化的、图形化的方式理解和学习线性代数。</p><p data-pid=\"0sQSf0p5\">全书内容不长，算上封面再带图一共也就12页。书中内容都是<b>图解</b>形式呈现，尤其矩阵这一块，描述很清楚，小白也能轻松看懂。</p><p data-pid=\"TMBtI71f\">书中内容是从理解矩阵开始的，在这一环节一共展示了4个视角。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-e476f1db0929622482cbef9e8f221b01_720w.jpg?source=2c26e567\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-e476f1db0929622482cbef9e8f221b01\" class=\"content_image\"/></figure><p data-pid=\"UeqDp-DV\">有了矩阵的概念之后，作者接着由浅入深地介绍了一些运算方式。</p><p data-pid=\"eM1xaYGB\">作者依旧是用图的形式讲解，并从不同的视角进行分析，具体包括：</p><ul><li data-pid=\"ybxv89oq\">向量乘向量</li><li data-pid=\"inifHBFB\">矩阵乘向量</li><li data-pid=\"HcV1Sgzl\">矩阵乘矩阵</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-44738309cccfeebbe4ba4824f32e17ae_720w.jpg?source=2c26e567\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-44738309cccfeebbe4ba4824f32e17ae\" class=\"content_image\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-7f54a6bda28bdfc741ab12d51615ddc0_720w.jpg?source=2c26e567\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-7f54a6bda28bdfc741ab12d51615ddc0\" class=\"content_image\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-d5bfbcb8e16a7b497eed9f909291e10b_720w.jpg?source=2c26e567\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-d5bfbcb8e16a7b497eed9f909291e10b\" class=\"content_image\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-0ea4b287b90bb1d7121a835b003b0361_720w.jpg?source=2c26e567\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-0ea4b287b90bb1d7121a835b003b0361\" class=\"content_image\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-ed031577f67aae421b6f4ca6b8ccc671_720w.jpg?source=2c26e567\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-ed031577f67aae421b6f4ca6b8ccc671\" class=\"content_image\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-3d8b192ebddcbd6c383b1e991376d008_720w.jpg?source=2c26e567\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-3d8b192ebddcbd6c383b1e991376d008\" class=\"content_image\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-3e59076954d656fc6d562a6100b213a6_720w.jpg?source=2c26e567\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-3e59076954d656fc6d562a6100b213a6\" class=\"content_image\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"9LCix9nF\">笔记的最后，作者还附上了一张矩阵的特征值映射图。</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-6131365009dfe4ba1ccf6a1352b3f18f_720w.jpg?source=2c26e567\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-6131365009dfe4ba1ccf6a1352b3f18f\" class=\"content_image\"/></figure><p data-pid=\"JkDjMY1-\">原文内容干货很多，这里只是节选了其中一部分，完整版PDF已整理好了（在文章开头)，感兴趣的小伙伴可以去看看。</p>",
            "excerpt": "推荐一本 日本网友Kenji Hiranabe写的《线性代数的艺术》。不得不说，外国人写的教材质量是真的高。。原文完整版PDF: https://pan.quark.cn/s/a17b0252603b 这本书是基于MIT大牛Gilbert Strang教授的《每个人的线性代数》制作的，通过可视化的、图形化的方式理解和学习线性代数。 全书内容不长，算上封面再带图一共也就12页。书中内容都是 图解形式呈现，尤其矩阵这一块，描述很清楚，小白也能轻松看懂。书中内容是从理解矩阵开始的，在这一环节…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 9,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-e476f1db0929622482cbef9e8f221b01_720w.jpg?source=7e7ef6e2",
                        "width": 691,
                        "height": 875,
                        "token": "v2-e476f1db0929622482cbef9e8f221b01",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-44738309cccfeebbe4ba4824f32e17ae_720w.jpg?source=7e7ef6e2",
                        "width": 706,
                        "height": 864,
                        "token": "v2-44738309cccfeebbe4ba4824f32e17ae",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-7f54a6bda28bdfc741ab12d51615ddc0_720w.jpg?source=7e7ef6e2",
                        "width": 645,
                        "height": 880,
                        "token": "v2-7f54a6bda28bdfc741ab12d51615ddc0",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxiw/LexDCC7wK8BkgIlCgk2MzQ2MDY0MTgSCjMzMjQ5MDI5NjAYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-12-14T08:25:35+08:00"
    },
    {
        "content": {
            "id": 263672738,
            "title": "【得到App】前端监控实践",
            "type": "article",
            "excerpt_title": "[图片] 今天给大家带来的分享是《得到前端监控实践》。 [图片] 会从以下四个方向给大家带来本次分享： 性能监控发展的趋势。如何拿到更真实的首屏时间？数据说我慢！我到底慢在了哪里？异常采集与上报。性能监控发展的趋势 [图片] 首先是上古时代——这是前端性能监控的最初形态。 这个时期使用手动打点的方式，开发人员会分别在页头处记录一个时间戳，再去在首屏的DOM节点后打上一个时间戳，计算差值，来作为首屏时间。 然后再加上一个事件循环，就可…",
            "url": "https://zhuanlan.zhihu.com/p/263672738",
            "image_url": "https://picx.zhimg.com/v2-43b050833a5d08a7dd3a03052b4ce22a_r.jpg?source=172ae18b",
            "created": 1602243962,
            "updated": 1602244300,
            "author": {
                "id": "e059ea725833a4fbd32b7c6716c137c7",
                "url_token": "li-hao-nan-56-71",
                "name": "Harlan",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-763add56b819c6091da3d8046b3c9f9b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-763add56b819c6091da3d8046b3c9f9b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/e059ea725833a4fbd32b7c6716c137c7",
                "user_type": "people",
                "headline": "小小攻城狮 ️",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p></p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c3930d521776635c54ebd82a39820a85_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-c3930d521776635c54ebd82a39820a85_r.jpg\" data-original-token=\"v2-857a3129d39e41e4a95eafdef3d25334\"/></figure><p data-pid=\"8grsQPCD\">今天给大家带来的分享是《得到前端监控实践》。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-75993b9044f1d81dc37d64f862d59587_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-75993b9044f1d81dc37d64f862d59587_r.jpg\" data-original-token=\"v2-753b91fd1e3ee14f5c8cfb6d773652f0\"/></figure><p data-pid=\"2x8LN8nz\">会从以下四个方向给大家带来本次分享：</p><ul><li data-pid=\"GRaPWUIr\">性能监控发展的趋势。</li><li data-pid=\"FKb88I5b\">如何拿到更真实的首屏时间？</li><li data-pid=\"FxcNCMAw\">数据说我慢！我到底慢在了哪里？</li><li data-pid=\"SdB8QQYp\">异常采集与上报。</li></ul><h3>性能监控发展的趋势</h3><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-174266c1206d06ce4b9d5a716ba73103_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-174266c1206d06ce4b9d5a716ba73103_r.jpg\" data-original-token=\"v2-064f1bad56b83ea9bb3ed77854730fc5\"/></figure><p data-pid=\"W6zAOqYL\">首先是上古时代——这是前端性能监控的最初形态。</p><p data-pid=\"RF2N7ZLF\">这个时期使用手动打点的方式，开发人员会分别在页头处记录一个时间戳，再去在首屏的DOM节点后打上一个时间戳，计算差值，来作为首屏时间。</p><p data-pid=\"jJihN2-S\">然后再加上一个事件循环，就可以记录为首屏可交互时间。因为那个时期的页面比较简单，所以性能统计上虽然有些繁琐但也是比较简单准确的。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-032334503d1955781d485f239ad6688f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-032334503d1955781d485f239ad6688f_r.jpg\" data-original-token=\"v2-f25dd6c88cef79a4033f011dae636f19\"/></figure><p data-pid=\"hYI6BfGV\">很快随着Performance Timing成为标准，很快就进入了仅仅使用浏览器提供的API，就可以轻松拿到丰富且准确的页面加载过程的时代。</p><p data-pid=\"49EXcC2G\">Performance Timing 直接就给我们了，页面打开过程的完整信息。</p><p data-pid=\"3sjZHmwO\">从 重定向 DNS TCP的耗时 发起请求 接收数据的过程，还包括了DOM解析的详细过程。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3c4358e3530158772389995c24566c05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-3c4358e3530158772389995c24566c05_r.jpg\" data-original-token=\"v2-41cc881d93508d4e7d182c751a463629\"/></figure><p data-pid=\"fr0BKXQs\">通过Performance Timing 我们就可以很容易的拿到一些如白屏时间，页面完全加载的关键指标</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cd59814a3f9a527b30bb4906a7c0e9ff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-cd59814a3f9a527b30bb4906a7c0e9ff_r.jpg\" data-original-token=\"v2-5971eaf851d98cd4e6202e5fac4750e4\"/></figure><p data-pid=\"kKCtyMS8\">我们基于这一套performanceTiming 也实现了我们的第一版性能分析</p><p data-pid=\"jDDjf-WP\">对关键指标进行统计</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e137c33a847442def5064d316e25505e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-e137c33a847442def5064d316e25505e_r.jpg\" data-original-token=\"v2-25db02af8c9f36840403a6c625b78c31\"/></figure><p data-pid=\"E3lmczmR\">以及对页面加载的瀑布图进行分析</p><p data-pid=\"wrYe0GbI\">但随后很快我们就发现我们统计到的“建立连接”、“内容传输”这样的数据是准确的，但从DOM解析开始就变得不准了，和实际情况好像不太一样的样子。</p><p data-pid=\"e9vyyO7P\">这样看来前一页的 关键指标当然也存在同样的问题。</p><p data-pid=\"o0-X37nT\">所以这套Performance Timing统计服务端渲染的页面还行，对于现在大量的单页应用就是这个表情。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8305e1874a21703cebfd658ff51ba171_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-8305e1874a21703cebfd658ff51ba171_r.jpg\" data-original-token=\"v2-5a895bcd31ac43d2cc1c19c63e45cf40\"/></figure><p data-pid=\"GsQVOaZz\">在很长一段时间里，我们都享受着performance API带来的便利, 但随着SPA模式的盛行，我们再来看一下这套W3C标准在现在的页面中是否有些不合适？</p><p data-pid=\"6K8qdJ9w\">问题一：</p><p data-pid=\"l8g4uyoD\">对于一些复杂单页应用，performance API测量出来的首屏时间会比我们体验到的首屏时间快上很多？这是为什么呢？</p><p data-pid=\"I_uR9r1d\">在现在的各种框架下，我们加载一个页面大概是这个样子的</p><p data-pid=\"XAfZ6014\">加载一个初始的空壳页面 =&gt; 加载JS资源并且去发起异步请求数据 =&gt; 框架又再次渲染中间的主体部分</p><p data-pid=\"V1feClcl\">所以 这里domReady就真的是ready了么？</p><p data-pid=\"XskytyyS\">问题二：</p><p data-pid=\"2Oi5Up6j\">单页应用将路由处理放在浏览器端，就是直接在浏览器端去响应地址发生的变化，然后分发到对应的路由，向用户呈现对应的界面。这时的单页应用页面跳转都不会触发Performance TIming变化。</p><p data-pid=\"NY12EKEy\">到这里我们已经遇到了Performance Timing的局限性，以及造成的瓶颈了</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5505f053f769ceeb382270834aafed14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-5505f053f769ceeb382270834aafed14_r.jpg\" data-original-token=\"v2-e3eb4b0c6333f787597501248506a962\"/></figure><p data-pid=\"QuclabEj\">好在谷歌的一直乐于推动关键性指标的迭代，这是Chrome浏览器在Performance工具中体现出来的一些新指标。</p><p data-pid=\"DXhfQvdk\">过去的指标是在描述浏览器发生了什么，到现在去用一些指标来表达用户的感受。</p><p data-pid=\"gEZGwDMu\">从一个第一人称，“我告诉大家我自己发生了什么”，向 “用户看到了我发生了什么” 做演变，可以更客观更贴近于用户的感受。</p><p data-pid=\"tHbfMoxN\">这些指标有的已经成为标准，有的还只是草案。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e0553871cabc152d8fd9db8aa5918b0d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-e0553871cabc152d8fd9db8aa5918b0d_r.jpg\" data-original-token=\"v2-78739dfc4f697909df0c03ce9649a5fb\"/></figure><p data-pid=\"dOBaWaad\">这是最早支持的两个关键节点，因为这两个事件和用户所看到的无法对应起来所以有时候我们感觉不准也是有原因的。</p><p data-pid=\"nTRnvjg7\">他俩大家应该都很熟悉我就不多介绍了，在network中的一个蓝线和红线分别就是他们俩。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-11342be3a90819347dc8dbca77378ff7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-11342be3a90819347dc8dbca77378ff7_r.jpg\" data-original-token=\"v2-9f576ae0cec255cfd433647e95e99b1e\"/></figure><p data-pid=\"0hhjkrxp\">这两个事件定义在 W3C Paint Timing 草案中</p><p data-pid=\"0sAoIw_X\">在Chrome中，我们可以通过performance.getEntriesByType(&#39;paint&#39;) 获取两个时间点的值。两个具体的区别看官方文档的下图就清楚了。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-32deadfe5a6ac3150807a7a2fe3bb2c3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-32deadfe5a6ac3150807a7a2fe3bb2c3_r.jpg\" data-original-token=\"v2-c0f8757d73d00bd7ef032e0a2f393bfe\"/></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-deae6514ec7f344eb4a9c1b53ffcd71a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-deae6514ec7f344eb4a9c1b53ffcd71a_r.jpg\" data-original-token=\"v2-f324a80f8cea631a808ba82632e292d5\"/></figure><p data-pid=\"7hyNYqTy\">FMP出现蛮久了，但是它的算法本身比较复杂，也没有开源，还不够精确，Google 工程师研究发现了另一种能更精确更简单的测量页面何时“有意义”的方法，那就是查看页面何时渲染最大的元素。这里的大就是单纯的size大。</p><p data-pid=\"za6QYfFM\">LCP目前还不是W3C正式规范 同样只有在新版chrome中支持并且可以直接获取到</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-281212a947ffc9b51a54b161baf6e0e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-281212a947ffc9b51a54b161baf6e0e3_r.jpg\" data-original-token=\"v2-64c51db02e7593da58191fb54170c198\"/></figure><p data-pid=\"MmNrTe96\">与LCP同时提出 还处于草案状态的还有TBT和CLS。</p><p data-pid=\"MfOtFNN9\">展望一下，未来某天，我们可以直接通过API拿这些指标的时候，前端性能监控就能变得简单许多，我们现在做的很多事情只是在尽可能的计算出贴近于这些指标的值。</p><h3>如何拿到更真实的首屏时间</h3><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-240e3dbedd172e17a4e543cf5eb2d5fa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-240e3dbedd172e17a4e543cf5eb2d5fa_r.jpg\" data-original-token=\"v2-574ede5123cfcc96f05ee121252b438d\"/></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fb5aead66b76ecbc07840b9ce312a571_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-fb5aead66b76ecbc07840b9ce312a571_r.jpg\" data-original-token=\"v2-4b7b712dc2ebbab2d8caf615564d0128\"/></figure><p data-pid=\"GWbzHaRl\">监控前端性能的方式分为用户实际情况监控和使用工具进行模拟监控，我们这里主要讨论对用户实际情况的监控，使用工具的监控我们就不多做赘述</p><p data-pid=\"LmA_jM14\">关于首屏时间业内有很多实现，但能够直接拿来就能用的，还真没有，必须要自己实现一套</p><p data-pid=\"qWNC3vvU\"><b>思路一：</b>我们通常认为图片的加载相较于DOM的加载是更慢的，并且图片占据视觉中的重要地位，所以形成了一种方案，通过统计首屏内加载最慢的图片来作为首屏时间。</p><p data-pid=\"ErKid4RN\">这种方案实现比较简单，并且思路本身没有任何问题，我们只需要监听首屏内所有图片的 onload 事件，获取图片 onload 时间的最大值，即可获得近似的首屏时间。但是，是不是所有的页面都适合用图片加载完成的时间来表达页面完成的时间？如果有的页面就是没有图片呢？还有有的页面虽然有图片，但是那个图片就是个小icon真的很不重要但是碰巧它加载的很慢呢？</p><p data-pid=\"ylUQ_0tb\"><b>思路二： </b>页面的DOM树第一次稳定了是不是就近似意味着完成首屏了，然而这个寻找DOM稳定的方案本身就极其不稳定，“什么叫【第一次】稳定？这个第一次如何界定”，“又怎么去界定最后一次变化？如果有个计时器一直在极小规模的操作DOM怎么办，虽然这样很不规范，但真遇到了就懵逼了么？这个方案想要比较好的实现比较有难度，并且精确度值得商榷。</p><p data-pid=\"HbKRO9Am\"><b>思路三：</b>模仿还处于草案中的LCP指标，统计变化的最大元素（这里的大指的是大小的大），其实这个方案就已经解决了，前面两个方案不够稳定的问题，这个方案已经没什么问题了，但总觉得不够丰满，纬度不够丰富，这么粗暴单纯通过“大”是不是还可以更好。</p><p data-pid=\"4wdQmE_x\"><b>思路四：</b>我们最终采取的就是这个思路，在之前只通过大小一个维度来描述首屏的基础上，又衍生出了，计算最大的一次变化，通过层级、标签权重、元素面积等因素，通过计分的方式，记录下最大的一次变化。其中会包含一些小细节，例如隐藏的元素不会计分，又或者是即使元素自身很大，但是百分之九十都在屏幕外，我们也只会统计屏幕内的百分之十，还有写了一个字的div肯定比一个空div的得分要高。最终通过计分的形式，计算出最大的一次变化发生的时间点，近似为我们首屏的时间。</p><p data-pid=\"8keI2UgD\">我们这边采用的就是最后一种方案，接下来我们说一下他的具体实现。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0f8d8c42ef1c095ce354ab77dcff87b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-0f8d8c42ef1c095ce354ab77dcff87b3_r.jpg\" data-original-token=\"v2-dcac4fcc23246fdb56f772bb9e3e7366\"/></figure><p data-pid=\"FjG6Vmuz\">首先刚刚提到的几个方案的实现都依赖于MutationObserver API用于监听DOM 变动</p><p data-pid=\"ds-hP7zd\">在页面加载中 初始化MutationObserver, 当每一次页面发生变化时，</p><p data-pid=\"1K0Y2MVq\">会去判断页面是不是一次有意义的变化，例如变化的标签是不是一些有意义需要统计的标签，例如meta link script这类标签就认为这一次变动是无意义的，无需后面的步骤。</p><p data-pid=\"kivY7soo\">然后会记录下发生变化的时间，以及通过setTag给此次变化的DOM打上标记。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4f13a8c1ef86d0098561d690eec0f865_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-4f13a8c1ef86d0098561d690eec0f865_r.jpg\" data-original-token=\"v2-b8c10c225721405ac638362a2185b31a\"/></figure><p data-pid=\"bjJXz1iE\">这就是setTag的核心代码，其实就是一个简单的递归DOM树，为每一个在屏幕范围内具有大小的可见元素进行标记，一旦发现父级不满足要求就不会向下递归。</p><p data-pid=\"plpdE6mL\">在业内有很多实现是在dom变化的时候就将此次变化所造成的影响力记录下来，类似于实时算分，每一次都在立即计算此次变化的得分。</p><p data-pid=\"D9zj3GjV\">由于算分的部分计算量挺大的，我们在这里做了一点优化，在dom发生变化的时候我们只做标记不进行任何计算，之后再在空闲的时候才会进行计算，得到首屏时间，尽可能占用更小的资源以免影响页面正常的加载。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f99306be249c2eaa0b767733d7a771c6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-f99306be249c2eaa0b767733d7a771c6_r.jpg\" data-original-token=\"v2-04188c5f2bdda6d3308cdfd02bd7801a\"/></figure><p data-pid=\"6VNQKUJP\">我们来排查一下该算法是否存在性能问题，不能影响业务是基本底线。</p><p data-pid=\"cEg_wESd\">首先最简单的我们直接将算法接入项目去跑Performance，发现并不会引起重排重绘，最长的一次耗时不超过1ms。</p><p data-pid=\"YyYgoy2f\">然后算法中最可能造成性能问题的就是getBoundingClientRect，网上很多文章都在说“getBoundingClientRect的性能存在问题，会导致页面强制重排，慎用。”我们先简单的测试一下，我们找了一个feed流页面，刷了20+屏后，累积了5k个DOM节点后，遍历5K个DOM取他们的getBoundingClientRect，耗时4ms同样没有引起重排重绘。</p><p data-pid=\"vH9Enxtz\">这里 为什么一直在担心getBoundingClientRect有没有引起重排呢？</p><p data-pid=\"nZrARAn5\">其实是因为他 访问了页面布局 会导致页面强制重排 然后引发重绘。对于渲染，浏览器其实是有一些优化的，例如连续多次改变布局，其实是会被浏览器合并只出现一次重排。然而如果在多次改变布局的中间，夹杂了访问页面布局的命令，那么浏览器为了正确返回页面此刻的布局信息，将会强制立即触发重排，随之引起重绘。所以我们提防getBoundingClientRect更应该小心的是，对页面布局的边写边读。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-44677801d982d679ea94a77dcd3d75b7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-44677801d982d679ea94a77dcd3d75b7_r.jpg\" data-original-token=\"v2-5f15d2746760a5ee85af9afdc8bfe0f9\"/></figure><p data-pid=\"RGXK_kVP\">下面就是最后进行算分的部分了。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a71f00ec173cb344de027338942c9a0b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-a71f00ec173cb344de027338942c9a0b_r.jpg\" data-original-token=\"v2-a57fa4c69b3b224a6fdede1b2fed23f5\"/></figure><p data-pid=\"KZhgE4ff\">这是一个事例，一个页面，分为了：Header、MainContent、ErrorPage、Footer四个部分。我们通过这个事例，来和大家感受一下算分这部分的细节。</p><p data-pid=\"VXddvz0J\">首先Header模块内部，又一个HeaderLeft模块，内部是一个icon和一个Text，我们从内往外进行算分：</p><p data-pid=\"n1Ixo9uh\">小icon：宽60 高60 可视100% 又因为是图片权重2，60 * 60 * 100% * 2 = 7200</p><p data-pid=\"oXVZx8IY\">Text：宽200 高60 可视100% 权重1，200 * 60 * 100% * 1 = 12000</p><p data-pid=\"D3yFBq_w\">HeaderLeft：自身 宽260 高60 可视100% 权重1，260 * 60 * 100% * 1 = 15600，由于15600小于它的两个子节点的得分之和（7200 + 12000 = 19200），所以该模块得分19200，导致它得分19200的元素是 小icon和Text，他的得分以及导致它得分的因素都会被记录下来。</p><p data-pid=\"_nU4puER\">Header：宽500 高60 可视100% 权重1，500 * 60 * 100% * 1 = 30000，header自身得分大于子节点得分之和，所以Header得分30000，导致他得分的因素就是他自己本身和子节点无关。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3468ab6e5555f62084e1864be1747d37_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-3468ab6e5555f62084e1864be1747d37_r.jpg\" data-original-token=\"v2-0bc1b2374dcb868126b5b25a5d1a2881\"/></figure><p data-pid=\"hUrel9EH\">用前面header算分的方案，可以得到MainContent得分649500，导致他得分的元素有：IMG、DIV1、DIV2、DIV3、Complex Div</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-021c07f985f43002b29189ca1f2dd6bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-021c07f985f43002b29189ca1f2dd6bf_r.jpg\" data-original-token=\"v2-c21d607deb7f468379c8288b9cb7fe22\"/></figure><p data-pid=\"7gsvghOk\">错误页模块不可见，故得分0，完全不关心其内部元素有多复杂。</p><p data-pid=\"0L5DhjjW\">Footer只有50%在可视区域中，故得分是 宽300 高200 可视50% 权重1，300 * 200 * 50% * 1 = 30000</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-03710f12f73fc09b750197128038b909_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-03710f12f73fc09b750197128038b909_r.jpg\" data-original-token=\"v2-622bbbf5f4664401f63e669fd3be843e\"/></figure><p data-pid=\"mYhURDh6\">Body中四个模块得分最高的为MainContent，导致他得高分的是蓝色的五个元素。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-34acb006f4b0a16cd3e530b8821e827c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-34acb006f4b0a16cd3e530b8821e827c_r.jpg\" data-original-token=\"v2-b4b1a62e623107c3b3c28a6421bb00ce\"/></figure><p data-pid=\"83wGESXQ\">为了防止某个得分相对低的混子，影响最终近似首屏时间，这里会去除平均值以下的模块，到了这里导致页面得高分的因素就是两个绿色的模块，取这两个模块加载完成时间更慢的一个，这里刚好遇到了IMG标签，图片dom出现的时间当然不是图片加载完成的时间，这里需要去取这张图片资源加载完成的时间，与这两个节点相比较，最后加载完成的时间点就近似为自定义的首屏时间。</p><p data-pid=\"2En5KD_B\">下面我们来进行一下实际测试。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ecca5d8e303ed71ec7fae46f44fab917_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-ecca5d8e303ed71ec7fae46f44fab917_r.jpg\" data-original-token=\"v2-a7a33da9ff1f4d6f35f57a9eaf40dba5\"/></figure><p data-pid=\"1bGfKXw-\">这是得到web版本页面刚开始渲染时的样子，只是出来了个架子，什么都还没有</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2cbf333494e4c378d4199b08a3e903e9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-2cbf333494e4c378d4199b08a3e903e9_r.jpg\" data-original-token=\"v2-af5e39686d715c60715720ef8728be9e\"/></figure><p data-pid=\"bRhTBgHp\">到这时 图片加载出来了，页面底部信息也加载出来了</p><p data-pid=\"4AVlZXg-\">如果通过performance Timing来统计的话首屏大概就会在700+ms这里，但是其实我们能看到页面主体部分起码有一半的内容还没出来</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7c8ef40e13afc0b758391f99298007d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-7c8ef40e13afc0b758391f99298007d9_r.jpg\" data-original-token=\"v2-c838b214b9c7f4f6bdd4bce40ffed5ae\"/></figure><p data-pid=\"qdP2cxPZ\">到了938ms 最终完成了我们视觉上的首屏</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-72b5a122f5eb93487e116a4e6c6cb91d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-72b5a122f5eb93487e116a4e6c6cb91d_r.jpg\" data-original-token=\"v2-50099a88381a17781f0f7d7044578237\"/></figure><p data-pid=\"vv2CgJhG\">谷歌浏览器的LCP和我们自己实现的首屏算法都在900ms左右，误差在50ms以内，符合我们的预期</p><p data-pid=\"ru2XAoK-\">对于单页应用的子路由也同样适用，在路由跳转前开始监听DOM变化，标记变化，页面加载完成后，统计得分，取首屏时间即可。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fd87dbd1e79a8a9b8d28a1e11706def4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-fd87dbd1e79a8a9b8d28a1e11706def4_r.jpg\" data-original-token=\"v2-0f7eb68189e69317687606037e5b1ae6\"/></figure><p data-pid=\"3K8bYzG0\">这样前面SPA单页应用的三大难题</p><ol><li data-pid=\"Ov6BZxzz\">不准 2. 不稳 3. 无法对子路由跳转进行统计</li></ol><p data-pid=\"Js97-_Dz\">都得到了解决</p><h3>数据说我慢！我到底慢在了哪里？</h3><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-686b6941bbb95e1910bfa062cf097277_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-686b6941bbb95e1910bfa062cf097277_r.jpg\" data-original-token=\"v2-5d9f8f4c20a4cc712e3e538c376bdee3\"/></figure><p data-pid=\"pZv3KUHX\">然后下一个话题，说完了首屏算法的实现</p><p data-pid=\"2g6wwtuU\">再来分享一个，我们做性能监控的时候，最常遇到的一个问题，一个很难受的点</p><p data-pid=\"025hCstK\">“我这边性能数据都收集上来了”</p><p data-pid=\"Msebw_uu\">数据有了，随便一聚合统计，自然就会有满意度，自然各个项目间各个Path间就会有排名</p><p data-pid=\"d1mjOGqx\">这时候我就会去找到成绩不好的项目，成绩不好的页面去说：“你的页面慢呀，有问题呀，赶快优化优化。”</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-74b66e745dd97ae70012a44d8589bacd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-74b66e745dd97ae70012a44d8589bacd_r.jpg\" data-original-token=\"v2-8ac29d41abfc0556a0d4f2861062291b\"/></figure><p data-pid=\"TXHvJWNN\">然后业务回去看着自己的项目，看着我这几张所谓的性能图，抓耳挠腮的苦想。最后还是回答不上：是哪里慢啊？到底怎么优化啊？这两个问题。</p><p data-pid=\"_K37D6wR\">我们从Performance Timing里能看出一些问题，但那些东西就像面试或者考试一样。</p><p data-pid=\"FaP7Z9pa\">重定向慢了，【避免不必要的重定向】</p><p data-pid=\"z-_77jj8\">DNS慢了，【减少页面唯一域名，从而减少DNS查询次数】【 使用dns prefetch做预解析】</p><p data-pid=\"C9_780n4\">TCP慢了， 【上http2.0】</p><p data-pid=\"uCv0EvNH\">TTFB慢了 ，【服务端有问题】</p><p data-pid=\"yzTNgTpW\">到后面就是 【上缓存】【上SSR】【减小bundle体积】 【lazyLoad】</p><p data-pid=\"LEg4Ywnh\">不可否认，这些都很有用，可能把这些做完了，问题就解决了 。</p><p data-pid=\"2DorS8CO\">当然，也可能一点用都没有，因为不具体，他们解决的都是一个通用的问题我的页面慢了该怎么办？</p><p data-pid=\"EG15VRL5\">这时我们吃进去的都是抗生素，能暂时解决问题，但没有真正找到病因 ，去根治问题。</p><p data-pid=\"gxaUlQ4u\">下面我们就要开始寻找我们的特效药了</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8bb7eeac4ac2d3f44720be79fe6cf05d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-8bb7eeac4ac2d3f44720be79fe6cf05d_r.jpg\" data-original-token=\"v2-a61f86661e8ad4a3d3f2142e9b251788\"/></figure><p data-pid=\"X-5wW_-r\">对症下药就是要找病症，之前收集的数据都很飘，多少有些虚，我们需要一些贴近自身框架，贴近自身业务的数据。</p><p data-pid=\"waA3IuGY\">我们的性能收集SDK会提供一个，自定义打点的方法，背后其实就是借助 Performance Measure在一些关键时间打上标记做好记录，针对不同业务业务，不同框架，来进行自定义打点，最后我们可以统计到一些很细或者很业务但你又觉得很关键的时间点。</p><p data-pid=\"wntHGmZk\">我们会从框架层统一通过扩展插件来做一些自定义点，业务也可以针对自己的业务去打一些业务最需要的点，让我们原本飘着的比较虚的数据，落得实在起来。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4505ca9b2ba8cbe69bac15af2208e77b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-4505ca9b2ba8cbe69bac15af2208e77b_r.jpg\" data-original-token=\"v2-7bd33bad7d10d6ead51ddb898ce89177\"/></figure><p data-pid=\"lCq_rbVj\">这是我们曾经遇到过的一个案例，页面很简单，该用缓存的地方也使用缓存了，页面本身又比较简单，可是体验起来，页面的打开速度就是不快，差不多要接近两秒。 如果是以前依然用那些“抗生素”一样的优化方案，肯定也有效果，但是效果就不大了，这个业务是一个APP内嵌H5的页面，通过框架的自定义打点发现，初始化webview完成的这个时间点就花费了一秒钟，剩下的页面就很正常取完缓存，就直接首屏了 也就耗了500毫秒的样子，像这种问题完全没出在业务身上，如果让业务不能对症下药的找到病因，可能永远无法真正解决问题。</p><h3>总结</h3><p data-pid=\"5ifJziyv\">关于页面快慢的监控，我们期望可以多纬度的，丰富的去考察这个问题，基础服务和框架层，去做通用的处理及采集，在业务层同样也可以针对自身，去寻找病因，多维度的去对性能问题进行打击 。关于异常监控相关我后面有机会再具体和大家聊一下。</p>",
            "voteup_count": 22,
            "column": {
                "id": "luojilabfe",
                "type": "column",
                "url_token": "luojilabfe",
                "title": "前端知识库",
                "url": "https://zhuanlan.zhihu.com/luojilabfe",
                "created": 1524736001,
                "updated": 1668054885,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 5
        },
        "created": "2020-10-09T19:46:02+08:00"
    },
    {
        "content": {
            "id": 672172699,
            "title": "探讨 TypeScript 中 interface 与 type 的求值区别",
            "type": "article",
            "excerpt_title": "前言这真的是一件无比诡异的事，全网有关 TS 中这俩关键字的区别全都集中在语义上，基本都是从 TS 文档中直接抄来的，而对这俩关键字的求值机制却一概不谈。实际上这也并不复杂，只需要搞明白一点—— interface 是真实地给你定义了一个类型，它在编译求值时是惰性的，只在必要时去展开，而 type 定义的完全就是个类型别名，TS 在求值时会直接把它展开。利用 interface 的惰性避免循环引用自身问题说来抽象，让我们看个例子： ty…",
            "url": "https://zhuanlan.zhihu.com/p/672172699",
            "image_url": "https://pica.zhimg.com/v2-b15d6fff9e4020abda3d2be70525cc7f_r.jpg?source=172ae18b",
            "created": 1702532699,
            "updated": 1702536862,
            "author": {
                "id": "7b0ef8d0ab32d664a36fd98e8f377302",
                "url_token": "wo-mo-mo-kan-ni-zhuang-bi",
                "name": "Snowflyt",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-d72d00a6b84b6e3ac5befc958ec12145_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-d72d00a6b84b6e3ac5befc958ec12145.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/7b0ef8d0ab32d664a36fd98e8f377302",
                "user_type": "people",
                "headline": "22 岁，学生，苏州大学软件工程在读",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1534327519
            },
            "comment_permission": "all",
            "content": "<h2><b>前言</b></h2><p data-pid=\"Zs6Sos8R\">这真的是一件无比诡异的事，全网有关 TS 中这俩关键字的区别全都集中在语义上，基本都是从 TS 文档中直接抄来的，而对这俩关键字的求值机制却一概不谈。实际上这也并不复杂，只需要搞明白一点——<code>interface</code> 是真实地给你定义了一个类型，它在编译求值时是<b>惰性</b>的，只在必要时去展开，而 <code>type</code> 定义的完全就是个类型别名，TS 在求值时会直接把它展开。</p><h2><b>利用 <code>interface</code> 的惰性避免循环引用自身问题</b></h2><p data-pid=\"Zp8VsO7n\">说来抽象，让我们看个例子：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">type</span> <span class=\"nx\">LSPAny</span> <span class=\"o\">=</span> <span class=\"nx\">Record</span><span class=\"p\">&lt;</span><span class=\"nt\">string</span><span class=\"err\">,</span> <span class=\"na\">LSPAny</span><span class=\"p\">&gt;</span> <span class=\"o\">|</span> <span class=\"nx\">LSPAny</span><span class=\"p\">[]</span> <span class=\"o\">|</span> <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"kt\">number</span> <span class=\"o\">|</span> <span class=\"kr\">boolean</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"XFOgAGML\">上面定义的 <code>LSPAny</code> 类型用于表示 LSP 协议中的 <code>any</code> 类型，它是一个递归类型，可以是任意的 JSON 类型。这个类型的定义是有问题的，因为它在编译时会尝试不断展开自身，以尝试得到一个“最基本”的展开式。但这东西的定义是递归的，也就是说 TS 会尝试无限展开这东西，最终导致爆栈，于是你在实际定义这类型时会发现它被推导为了 <code>any</code>，并且 TS 会给你个报错：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e3b8a88984c28e0887c8e9c72332180d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1621\" data-rawheight=\"312\" class=\"origin_image zh-lightbox-thumb\" width=\"1621\" data-original=\"https://pic2.zhimg.com/v2-e3b8a88984c28e0887c8e9c72332180d_r.jpg\" data-original-token=\"v2-e3b8a88984c28e0887c8e9c72332180d\"/></figure><p data-pid=\"uxSdEEPW\">但这并不是说 TS 没办法定义这种东西——这只是因为你在这里使用了 <code>type</code> 关键字定义的是<b>类型别名</b>，如果其中有 <code>interface</code> 所定义的实际的<b>类型</b>，TS 就不会这么弱智地无限展开。比如说你可能经常定义这种东西：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">interface</span> <span class=\"nx\">Node</span> <span class=\"p\">{</span>\n   <span class=\"nx\">value</span>: <span class=\"kt\">unknown</span><span class=\"p\">;</span>\n   <span class=\"nx\">children</span>: <span class=\"kt\">Node</span><span class=\"p\">[];</span>\n <span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"zdqlnrc0\">TS 不也没报错吗？现在你可能会好奇了，按我这么说，在这里把这个 <code>interface Node</code> 替换为 <code>type Node = { value: unknown; children: Node[] }</code> 也会报个循环引用自身的错误喽？答案是完全不会——因为 TS 对于对象字面量类型的求值也是“惰性”的，求值到对象字面量那一层就不会继续尝试往下求值了，但这并不意味着使用了对象字面量的 <code>type</code> 本身也是惰性的，你往下看就明白了。</p><p data-pid=\"3bY3Wbeh\">但是对于 <code>interface</code>——相信我，你永远可以信任它是惰性的。比如上面这个 <code>LSPAny</code> 的定义，我们就可以利用 <code>interface</code> 的性质通过某种扭曲的方式绕开这个循环引用自身的错误：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">interface</span> <span class=\"nx\">Lazy</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span> <span class=\"err\">=</span> <span class=\"na\">unknown</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n   <span class=\"nx\">__value</span>: <span class=\"kt\">T</span><span class=\"p\">;</span>\n <span class=\"p\">};</span>\n <span class=\"kr\">type</span> <span class=\"nx\">UnpackLazy</span><span class=\"p\">&lt;</span><span class=\"nt\">L</span> <span class=\"na\">extends</span> <span class=\"na\">Lazy</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">L</span><span class=\"p\">[</span><span class=\"s2\">&#34;__value&#34;</span><span class=\"p\">];</span>\n <span class=\"err\">​</span>\n <span class=\"cm\">/**\n</span><span class=\"cm\">  * Lazy version of `Record`, to avoid circular type references error.\n</span><span class=\"cm\">  */</span>\n <span class=\"kr\">type</span> <span class=\"nx\">RecordL</span><span class=\"p\">&lt;</span><span class=\"nt\">K</span> <span class=\"na\">extends</span> <span class=\"na\">PropertyKey</span><span class=\"err\">,</span> <span class=\"na\">L</span> <span class=\"na\">extends</span> <span class=\"na\">Lazy</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">P</span> <span class=\"k\">in</span> <span class=\"nx\">K</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">UnpackLazy</span><span class=\"p\">&lt;</span><span class=\"nt\">L</span><span class=\"p\">&gt;;</span> <span class=\"p\">}</span>\n <span class=\"err\">​</span>\n <span class=\"kr\">type</span> <span class=\"nx\">LSPAny</span> <span class=\"o\">=</span> <span class=\"nx\">RecordL</span><span class=\"p\">&lt;</span><span class=\"nt\">string</span><span class=\"err\">,</span> <span class=\"na\">Lazy</span><span class=\"err\">&lt;</span><span class=\"na\">LSPAny</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"o\">|</span> <span class=\"nx\">LSPAny</span><span class=\"p\">[]</span> <span class=\"o\">|</span> <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"kt\">number</span> <span class=\"o\">|</span> <span class=\"kr\">boolean</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8789e42a7825c97700927d8749ec47a1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1173\" data-rawheight=\"129\" class=\"origin_image zh-lightbox-thumb\" width=\"1173\" data-original=\"https://pic2.zhimg.com/v2-8789e42a7825c97700927d8749ec47a1_r.jpg\" data-original-token=\"v2-8789e42a7825c97700927d8749ec47a1\"/></figure><p data-pid=\"8aYQoiVV\">——在这里我们实际上没有做任何改动，只是定义了一对 <code>Lazy</code> 和 <code>UnpackLazy</code> 类型，它们做的只是把某个类型包装进一个 <code>interface</code> 里边，然后再给它提取出来。相应的，我们也定义了一个 <code>RecordL</code>，不同于 <code>Record</code>，它接受一个 <code>Lazy</code> 作为值的类型，然后再把它通过 <code>UnpackLazy</code> 提取出来。我们可以看到这里的 <code>LSPAny</code> 与之前的定义本质上是完全等价的，但就是神奇地避免了循环引用自身的问题。</p><p data-pid=\"AV9sP4Sf\">这里实际上涉及了两个惰性——<code>Lazy</code> 本身是通过 <code>interface</code> 定义的，因此基本可以确保是惰性的；<code>RecordL</code> 是一个很直接的对象字面量类型定义，因此也是部分惰性的。TS 在尝试求值 <code>LSPAny</code> 时，首先遇到 <code>RecordL&lt;string, Lazy&lt;LSPAny&gt;&gt;</code>，发觉 <code>RecordL</code> 是个 <code>type</code>（此时 TS 还没查看 <code>RecordL</code> 本身的定义，不知道它是个对象字面量类型），因此尝试展开 <code>RecordL&lt;string, Lazy&lt;LSPAny&gt;&gt;</code>，然后为了展开它，TS 需要传入它的两个类型参数，<code>string</code> 和 <code>Lazy&lt;LSPAny&gt;</code>，由于 <code>Lazy&lt;LSPAny&gt;</code> 是个 <code>interface</code>，TS 不会尝试在此时展开它，而是直接把它传进去，接下来 TS 就需要求值 <code>{ [P in string]: UnpackLazy&lt;Lazy&lt;LSPAny&gt;&gt; }</code> 了，不过 TS 此时发现它要求值的这东西是个对象字面量类型，于是也不进一步求值了。于是我们便巧妙地避免了无限递归然后爆栈。</p><p data-pid=\"WqS3YRfy\">你要是不放心，大可以测试一下：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">type</span> <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span> <span class=\"na\">extends</span> <span class=\"na\">true</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span><span class=\"p\">;</span>\n <span class=\"kr\">type</span> <span class=\"nx\">Extends</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"na\">U</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"nx\">U</span> <span class=\"o\">?</span> <span class=\"kc\">true</span> <span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n <span class=\"err\">​</span>\n <span class=\"kr\">type</span> <span class=\"nx\">Assertions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">LSPAny</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">number</span><span class=\"err\">[],</span> <span class=\"na\">LSPAny</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"p\">{</span> <span class=\"na\">foo</span><span class=\"err\">:</span> <span class=\"na\">string</span> <span class=\"p\">}</span><span class=\"err\">,</span> <span class=\"na\">LSPAny</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">Array</span><span class=\"err\">&lt;</span><span class=\"p\">{</span> <span class=\"na\">foo</span><span class=\"err\">:</span> <span class=\"na\">string</span><span class=\"err\">[]</span> <span class=\"p\">}&gt;,</span> <span class=\"nx\">LSPAny</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"p\">{</span> <span class=\"na\">foo</span><span class=\"err\">:</span> <span class=\"p\">{</span> <span class=\"na\">bar</span><span class=\"err\">:</span> <span class=\"na\">number</span> <span class=\"p\">}</span><span class=\"err\">;</span> <span class=\"na\">baz</span><span class=\"err\">:</span> <span class=\"na\">Array</span><span class=\"err\">&lt;</span><span class=\"p\">{</span> <span class=\"na\">qux</span><span class=\"err\">:</span> <span class=\"p\">{</span> <span class=\"na\">b</span><span class=\"err\">:</span> <span class=\"err\">(</span><span class=\"na\">null</span> <span class=\"err\">|</span> <span class=\"na\">number</span><span class=\"err\">)[]</span> <span class=\"p\">}</span> <span class=\"p\">}&gt;</span> <span class=\"p\">},</span> <span class=\"nx\">LSPAny</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n <span class=\"p\">];</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2d73d0d6ef16935c64a20bf1c1e2c06b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1180\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb\" width=\"1180\" data-original=\"https://pic4.zhimg.com/v2-2d73d0d6ef16935c64a20bf1c1e2c06b_r.jpg\" data-original-token=\"v2-2d73d0d6ef16935c64a20bf1c1e2c06b\"/></figure><p data-pid=\"nohE3SLD\">可以看到，递归类型显然被正确处理了。</p><p data-pid=\"9nUCrWiE\">让我们尝试修改一下之前的定义，看看做到什么程度会破坏这个惰性。从上面的分析来看，这里依赖于 <code>Lazy</code> 和 <code>RecordL</code> 两者的惰性，按理来说将它们任何一个用 <code>type</code> 替换掉都会破坏这个惰性：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-114cc35461e519f1174ad2cc9cd0d69f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1111\" data-rawheight=\"477\" class=\"origin_image zh-lightbox-thumb\" width=\"1111\" data-original=\"https://pic4.zhimg.com/v2-114cc35461e519f1174ad2cc9cd0d69f_r.jpg\" data-original-token=\"v2-114cc35461e519f1174ad2cc9cd0d69f\"/></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a44454344d60736d3c74faa58a75d217_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1124\" data-rawheight=\"490\" class=\"origin_image zh-lightbox-thumb\" width=\"1124\" data-original=\"https://pic4.zhimg.com/v2-a44454344d60736d3c74faa58a75d217_r.jpg\" data-original-token=\"v2-a44454344d60736d3c74faa58a75d217\"/></figure><p data-pid=\"H-Odx2pD\">一点没错。我们看到将 <code>Lazy</code> 替换为了 <code>type</code> 就把这种惰性破坏了，这很容易理解。而在 <code>RecordL</code> 这里，我们发现 TS 似乎还不够聪明，我们只是把直接的对象字面量类型定义替换为了一个间接的指向 <code>Record</code> 的定义，TS 就显然了循环引用自身的问题了——思考一下，这也没问题，TS 在展开 <code>RecordL</code> 时发现它指向的 <code>Record</code> 也是个 <code>type</code>，所以会继续尝试展开 <code>Record&lt;K, UnpackLazy&lt;L&gt;&gt;</code>，而为了展开它，TS 需要传入 <code>K</code> 和 <code>UnpackLazy&lt;L&gt;</code>，而 TS 发现 <code>UnpackLazy</code> 是个 <code>type</code>，因此就会直接展开 <code>UnpackLazy&lt;L&gt;</code>，在这里实际上就是 <code>UnpackLazy&lt;Lazy&lt;LSPAny&gt;&gt;</code>，于是它被 求值为 <code>LSPAny</code>——可以发现在这里 <code>Lazy</code> 没有起到它该有的作用，还是在中间被展开了，因此仍旧陷入了无限递归的问题。</p><p data-pid=\"rXL5xy3A\">当然，如果你很聪明，肯定已经发现了这个 <code>LSPAny</code> 本来就不需要什么 <code>Lazy</code>，你可以直接这么定义：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">type</span> <span class=\"nx\">LSPAny</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">P</span> <span class=\"k\">in</span> <span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">LSPAny</span> <span class=\"p\">}</span> <span class=\"o\">|</span> <span class=\"nx\">LSPAny</span><span class=\"p\">[]</span> <span class=\"o\">|</span> <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"kt\">number</span> <span class=\"o\">|</span> <span class=\"kr\">boolean</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3eef70534104d53a98c39f0de8fc1525_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1031\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb\" width=\"1031\" data-original=\"https://pic2.zhimg.com/v2-3eef70534104d53a98c39f0de8fc1525_r.jpg\" data-original-token=\"v2-3eef70534104d53a98c39f0de8fc1525\"/></figure><p data-pid=\"7oj883u2\">——完全正确！因为这里你用了一个直接的对象字面量类型定义，TS 也把它认为是惰性的了。通过避免一个看起来完全等价的 <code>Record</code> 类型别名的使用，你成功避免了循环引用问题的发生。</p><p data-pid=\"FWiEfLcQ\">只是在这里事情还比较简单，我们可以这么做，如果问题比较复杂，你肯定就不乐意直接把类型都写在这一坨里了，可读性会很差，而且 TS 的缓存优化也很难起效。</p><p data-pid=\"Mvm72MNw\">例如考虑下面这个简单例子：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">type</span> <span class=\"nx\">Boxed</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">value</span>: <span class=\"kt\">T</span> <span class=\"p\">};</span>\n <span class=\"err\">​</span>\n <span class=\"kr\">type</span> <span class=\"nx\">LSPAny</span> <span class=\"o\">=</span> <span class=\"nx\">Boxed</span><span class=\"p\">&lt;</span><span class=\"nt\">LSPAny</span><span class=\"p\">&gt;</span> <span class=\"o\">|</span> <span class=\"nx\">LSPAny</span><span class=\"p\">[]</span> <span class=\"o\">|</span> <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"kt\">number</span> <span class=\"o\">|</span> <span class=\"kr\">boolean</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ae25dff49e44fa7fd9b6d3fa00d472fb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"892\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb\" width=\"892\" data-original=\"https://pic4.zhimg.com/v2-ae25dff49e44fa7fd9b6d3fa00d472fb_r.jpg\" data-original-token=\"v2-ae25dff49e44fa7fd9b6d3fa00d472fb\"/></figure><p data-pid=\"S4Dwe3g9\">事情是非常显然的——遇到 <code>Boxed&lt;LSPAny&gt;</code> 时，TS 发觉这是个 <code>type</code>（此时 TS 还没查询 <code>Boxed</code> 的具体定义，不知道它是个对象字面量类型），然后尝试展开它，为此，TS 需要尝试传入 <code>Boxed&lt;LSPAny&gt;</code> 中这个 <code>LSPAny</code> 的值，然后 TS 又发现 <code>LSPAny</code> 是个 <code>type</code>，于是要尝试展开 <code>LSPAny</code>……于是就陷入了循环套娃的问题，最终爆栈。</p><p data-pid=\"oplRSqCo\">解决办法非常简单，你只要把 <code>Boxed</code> 改成 <code>interface</code> 就好了：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">interface</span> <span class=\"nx\">Boxed</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span> <span class=\"nx\">value</span>: <span class=\"kt\">T</span> <span class=\"p\">};</span>\n <span class=\"err\">​</span>\n <span class=\"kr\">type</span> <span class=\"nx\">LSPAny</span> <span class=\"o\">=</span> <span class=\"nx\">Boxed</span><span class=\"p\">&lt;</span><span class=\"nt\">LSPAny</span><span class=\"p\">&gt;</span> <span class=\"o\">|</span> <span class=\"nx\">LSPAny</span><span class=\"p\">[]</span> <span class=\"o\">|</span> <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"kt\">number</span> <span class=\"o\">|</span> <span class=\"kr\">boolean</span> <span class=\"o\">|</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8884c51ec4834c34de9cfc0f6db9033c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"996\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb\" width=\"996\" data-original=\"https://pic1.zhimg.com/v2-8884c51ec4834c34de9cfc0f6db9033c_r.jpg\" data-original-token=\"v2-8884c51ec4834c34de9cfc0f6db9033c\"/></figure><p data-pid=\"w5qJAEMf\">TS 在尝试解析 <code>LSPAny</code> 时，看到了 <code>Boxed&lt;LSPAny&gt;</code>，然后发觉 <code>Boxed</code> 是个 <code>interface</code>，它便不尝试展开它了，因此当然也不会尝试求值 <code>Boxed&lt;LSPAny&gt;</code> 中的这个 <code>LSPAny</code>. 于是就避免了循环引用自身的问题。</p><p data-pid=\"BWt6NbRK\">这里只是用简单的情况举了个例子，因此看上去建议使用 <code>interface</code> 而非 <code>type</code> 似乎只是个颇有些钻牛角尖意味的建议。然而实际中这个 <code>Boxed</code> 类型的定义可能非常复杂，并且涉及了许多其它类型的引用，如果哪一天你突然打算加上一点递归引用进去，或者某个用了大量类型体操的库尝试使用递归方式解析你的类型，如果你全都用 <code>type</code> 就很可能遇到循环引用自身导致的问题。</p><p data-pid=\"Uyhyc4g7\">为了进一步展示 <code>Lazy</code> 的应用，我还可以举个例子，展示如何定义函数式编程中常见的 <code>Eq</code> 类型。这里就简单些，只考虑把 <code>Either</code> 和 <code>Maybe</code> 加进去：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">type</span> <span class=\"nx\">Either</span><span class=\"p\">&lt;</span><span class=\"nt\">L</span><span class=\"err\">,</span> <span class=\"na\">R</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">EitherL</span><span class=\"p\">&lt;</span><span class=\"nt\">Lazy</span><span class=\"err\">&lt;</span><span class=\"na\">L</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Lazy</span><span class=\"p\">&lt;</span><span class=\"nt\">R</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n <span class=\"kr\">type</span> <span class=\"nx\">EitherL</span><span class=\"p\">&lt;</span><span class=\"nt\">L</span> <span class=\"na\">extends</span> <span class=\"na\">Lazy</span><span class=\"err\">,</span> <span class=\"na\">R</span> <span class=\"na\">extends</span> <span class=\"na\">Lazy</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Left</span><span class=\"p\">&lt;</span><span class=\"nt\">UnpackLazy</span><span class=\"err\">&lt;</span><span class=\"na\">L</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"o\">|</span> <span class=\"nx\">Right</span><span class=\"p\">&lt;</span><span class=\"nt\">UnpackLazy</span><span class=\"err\">&lt;</span><span class=\"na\">R</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n <span class=\"kr\">interface</span> <span class=\"nx\">Left</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n   <span class=\"nx\">_tag</span><span class=\"o\">:</span> <span class=\"s2\">&#34;Left&#34;</span><span class=\"p\">;</span>\n   <span class=\"nx\">value</span>: <span class=\"kt\">T</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n <span class=\"kr\">interface</span> <span class=\"nx\">Right</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n   <span class=\"nx\">_tag</span><span class=\"o\">:</span> <span class=\"s2\">&#34;Right&#34;</span><span class=\"p\">;</span>\n   <span class=\"nx\">value</span>: <span class=\"kt\">T</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n <span class=\"err\">​</span>\n <span class=\"kr\">type</span> <span class=\"nx\">Maybe</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">MaybeL</span><span class=\"p\">&lt;</span><span class=\"nt\">Lazy</span><span class=\"err\">&lt;</span><span class=\"na\">T</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n <span class=\"kr\">type</span> <span class=\"nx\">MaybeL</span><span class=\"p\">&lt;</span><span class=\"nt\">L</span> <span class=\"na\">extends</span> <span class=\"na\">Lazy</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Just</span><span class=\"p\">&lt;</span><span class=\"nt\">UnpackLazy</span><span class=\"err\">&lt;</span><span class=\"na\">L</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"o\">|</span> <span class=\"nx\">Nothing</span><span class=\"p\">;</span>\n <span class=\"kr\">interface</span> <span class=\"nx\">Just</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n   <span class=\"nx\">_tag</span><span class=\"o\">:</span> <span class=\"s2\">&#34;Just&#34;</span><span class=\"p\">;</span>\n   <span class=\"nx\">value</span>: <span class=\"kt\">T</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n <span class=\"kr\">interface</span> <span class=\"nx\">Nothing</span> <span class=\"p\">{</span>\n   <span class=\"nx\">_tag</span><span class=\"o\">:</span> <span class=\"s2\">&#34;Nothing&#34;</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n <span class=\"err\">​</span>\n <span class=\"kr\">type</span> <span class=\"nx\">Eq</span> <span class=\"o\">=</span> <span class=\"kt\">number</span> <span class=\"o\">|</span> <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"nx\">MaybeL</span><span class=\"p\">&lt;</span><span class=\"nt\">Lazy</span><span class=\"err\">&lt;</span><span class=\"na\">Eq</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"o\">|</span> <span class=\"nx\">EitherL</span><span class=\"p\">&lt;</span><span class=\"nt\">Lazy</span><span class=\"err\">&lt;</span><span class=\"na\">Eq</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Lazy</span><span class=\"p\">&lt;</span><span class=\"nt\">Eq</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"o\">|</span> <span class=\"nx\">ReadonlyArray</span><span class=\"p\">&lt;</span><span class=\"nt\">Eq</span><span class=\"p\">&gt;;</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bfd3f937f7f911585a86378511eb4cc5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://pic2.zhimg.com/v2-bfd3f937f7f911585a86378511eb4cc5_r.jpg\" data-original-token=\"v2-bfd3f937f7f911585a86378511eb4cc5\"/></figure><p data-pid=\"k1wm_iUI\">可以看到，通过使用 <code>Lazy</code>，我们成功定义了递归的 <code>Eq</code> 类型，用于表示一个可比较的值，并且避免了循环引用自身的问题。</p><h2><b><code>interface</code> 在传递型变类型参数时的罕见问题</b></h2><blockquote data-pid=\"qT8-Ma3P\"><b>⚠️ 警告：</b>本节只是为了展示 <code>interface</code> 在某些特殊情况下无法正确传递型变参数的问题，事实上绝大多数人大概一辈子也遇不到这个问题。这一节涉及比较离谱的类型体操，可能视你的知识背景会看起来非常难懂——比如如果你现在连“型变”的概念都不明白，那么我就建议你不要读了。</blockquote><p data-pid=\"YEDHNCAS\">另外，还有一点很重要——<code>type</code> 因为是类型别名，所以能在传递时最大程度保留逆变和不变的类型参数，而 <code>interface</code> 若用于传递 <code>type</code> 会在 TS 疲于推导类型体操时把参数变为协变的（因为它本身创建了新类型，而类型参数在 TS 中默认为协变的）。这说着有点抽象，往下看你就明白了。</p><p data-pid=\"Ep5jpwDh\">你可能会奇怪 TS 中的类型参数不总是协变的吗？但是实际上你可以通过函数类型模拟逆变和不变：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">interface</span> <span class=\"nx\">Example</span><span class=\"p\">&lt;</span><span class=\"nt\">CoArg</span><span class=\"err\">,</span> <span class=\"na\">ContraArg</span><span class=\"err\">,</span> <span class=\"na\">InvariantArg</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n   <span class=\"nx\">co</span>: <span class=\"kt\">CoArg</span><span class=\"p\">;</span>\n   <span class=\"nx\">contra</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">ContraArg</span><span class=\"p\">])</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n   <span class=\"nx\">invariant</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">_</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">InvariantArg</span><span class=\"p\">])</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">InvariantArg</span><span class=\"p\">;</span>\n <span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"Vkshjl0a\">在这里，<code>CoArg</code> 是协变的常规类型参数，<code>ContraArg</code> 是逆变的，<code>InvariantArg</code> 是不变的。让我们写个 Assertion 看一下：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">type</span> <span class=\"nx\">Assertions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"c1\">// Covariant\n</span><span class=\"c1\"></span>   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">Example</span><span class=\"err\">&lt;&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Example</span><span class=\"p\">&lt;</span><span class=\"nt\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">Example</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Example</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;foo&#34;</span><span class=\"p\">,</span> <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"kt\">string</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"c1\">// Contravariant\n</span><span class=\"c1\"></span>   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">Example</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"err\">&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;,</span> <span class=\"na\">string</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Example</span><span class=\"p\">&lt;</span><span class=\"nt\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">Example</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Example</span><span class=\"p\">&lt;</span><span class=\"nt\">string</span><span class=\"err\">,</span> <span class=\"err\">&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;,</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"c1\">// Invariant\n</span><span class=\"c1\"></span>   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">Example</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"err\">&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Example</span><span class=\"p\">&lt;</span><span class=\"nt\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">Example</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Example</span><span class=\"p\">&lt;</span><span class=\"nt\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"err\">&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n <span class=\"p\">];</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-015513ee011e93d1238cc36038d5e88f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1655\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb\" width=\"1655\" data-original=\"https://pic4.zhimg.com/v2-015513ee011e93d1238cc36038d5e88f_r.jpg\" data-original-token=\"v2-015513ee011e93d1238cc36038d5e88f\"/></figure><p data-pid=\"VUqu-aA2\">……下面我将展示一段非常逆天的类型体操定义，如果你看不明白完全没有问题，这里只是为了展示在边界情况下 <code>interface</code> 会无法正确传递类型参数的型变性——原谅我暂时找不到一个更简单的示例：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">co</span>: <span class=\"kt\">unique</span> <span class=\"kt\">symbol</span><span class=\"p\">;</span>\n <span class=\"cm\">/**\n</span><span class=\"cm\">  * Used to mark a type lambda parameter as covariant.\n</span><span class=\"cm\">  */</span>\n <span class=\"kr\">export</span> <span class=\"kr\">type</span> <span class=\"nx\">Co</span><span class=\"p\">&lt;</span><span class=\"nt\">Arg</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">co</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">Arg</span> <span class=\"p\">};</span>\n <span class=\"err\">​</span>\n <span class=\"cm\">/**\n</span><span class=\"cm\">  * A type used to represent a type lambda (aka. type-level function, or higher-kinded type (HKT)).\n</span><span class=\"cm\">  *\n</span><span class=\"cm\">  * Covariant parameters and contravariant ones are split into two separate arrays.\n</span><span class=\"cm\">  */</span>\n <span class=\"kr\">interface</span> <span class=\"nx\">StrictTypeLambda</span><span class=\"o\">&lt;</span>\n   <span class=\"nx\">CoParams</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kt\">never</span><span class=\"p\">,</span>\n   <span class=\"nx\">ContraParams</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kt\">never</span><span class=\"p\">,</span>\n   <span class=\"nx\">Return</span> <span class=\"o\">=</span> <span class=\"kt\">unknown</span><span class=\"p\">,</span>\n <span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n   <span class=\"cm\">/**\n</span><span class=\"cm\">    * Used to store covariant parameters.\n</span><span class=\"cm\">    */</span>\n   <span class=\"kr\">readonly</span> <span class=\"nx\">CoParams</span>: <span class=\"kt\">CoParams</span><span class=\"p\">;</span>\n   <span class=\"cm\">/**\n</span><span class=\"cm\">    * Used to store contravariant parameters.\n</span><span class=\"cm\">    */</span>\n   <span class=\"kr\">readonly</span> <span class=\"nx\">Params</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">_</span>: <span class=\"kt\">ContraParams</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n   <span class=\"cm\">/**\n</span><span class=\"cm\">    * Used to store the return type.\n</span><span class=\"cm\">    */</span>\n   <span class=\"kr\">readonly</span> <span class=\"nx\">Return</span>: <span class=\"kt\">Return</span><span class=\"p\">;</span>\n   <span class=\"cm\">/**\n</span><span class=\"cm\">    * Used to store the position of covariant parameters. Use `readonly void[]` to represent a index,\n</span><span class=\"cm\">    * so it is actually a tuple indexes of covariant parameters.\n</span><span class=\"cm\">    */</span>\n   <span class=\"kr\">readonly</span> <span class=\"nx\">coInsertPos</span>: <span class=\"kt\">readonly</span> <span class=\"p\">(</span><span class=\"kr\">readonly</span> <span class=\"k\">void</span><span class=\"p\">[])[];</span>\n <span class=\"p\">}</span>\n <span class=\"err\">​</span>\n <span class=\"cm\">/**\n</span><span class=\"cm\">  * An easy-to-use version of `StrictTypeLambda`, parameters marked with `Co` will be automatically\n</span><span class=\"cm\">  * moved to `CoParams`, others will be moved to `ContraParams`.\n</span><span class=\"cm\">  */</span>\n <span class=\"kr\">export</span> <span class=\"kr\">type</span> <span class=\"nx\">TypeLambda</span><span class=\"o\">&lt;</span>\n   <span class=\"nx\">Params</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kt\">never</span><span class=\"p\">,</span>\n   <span class=\"nx\">Return</span> <span class=\"o\">=</span> <span class=\"kt\">unknown</span><span class=\"p\">,</span>\n <span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">StrictTypeLambda</span><span class=\"p\">&lt;</span><span class=\"nt\">ProcessArgs</span><span class=\"err\">&lt;</span><span class=\"na\">Params</span><span class=\"p\">&gt;[</span><span class=\"s2\">&#34;co&#34;</span><span class=\"p\">],</span> <span class=\"nx\">ProcessArgs</span><span class=\"p\">&lt;</span><span class=\"nt\">Params</span><span class=\"p\">&gt;[</span><span class=\"s2\">&#34;contra&#34;</span><span class=\"p\">],</span> <span class=\"nx\">Return</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span>\n   <span class=\"nx\">coInsertPos</span>: <span class=\"kt\">ProcessArgs</span><span class=\"p\">&lt;</span><span class=\"nt\">Params</span><span class=\"p\">&gt;[</span><span class=\"s2\">&#34;coInsertPos&#34;</span><span class=\"p\">];</span>\n <span class=\"p\">};</span>\n <span class=\"err\">​</span>\n <span class=\"cm\">/**\n</span><span class=\"cm\">  * Process type lambda parameters which may be marked with `Co` into `CoParams` and `ContraParams`.\n</span><span class=\"cm\">  */</span>\n <span class=\"kr\">type</span> <span class=\"nx\">ProcessArgs</span><span class=\"o\">&lt;</span>\n   <span class=\"nx\">Args</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[],</span>\n   <span class=\"nx\">ContraArgs</span> <span class=\"kr\">extends</span> <span class=\"kt\">unknown</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[],</span>\n   <span class=\"nx\">CoArgs</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kr\">readonly</span> <span class=\"p\">[],</span>\n   <span class=\"nx\">CoInsertPos</span> <span class=\"kr\">extends</span> <span class=\"nx\">ReadonlyArray</span><span class=\"p\">&lt;</span><span class=\"nt\">readonly</span> <span class=\"na\">void</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"kr\">readonly</span> <span class=\"p\">[],</span>\n   <span class=\"nx\">I</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"k\">void</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kr\">readonly</span> <span class=\"p\">[],</span>\n <span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nx\">Args</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"p\">[</span><span class=\"kt\">never</span><span class=\"p\">]</span>\n   <span class=\"o\">?</span> <span class=\"p\">{</span> <span class=\"nx\">contra</span>: <span class=\"kt\">never</span><span class=\"p\">;</span> <span class=\"nx\">co</span>: <span class=\"kt\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[];</span> <span class=\"nx\">coInsertPos</span>: <span class=\"kt\">ReadonlyArray</span><span class=\"p\">&lt;</span><span class=\"nt\">readonly</span> <span class=\"na\">void</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span> <span class=\"p\">}</span>\n   <span class=\"o\">:</span> <span class=\"kt\">number</span> <span class=\"kr\">extends</span> <span class=\"nx\">Args</span><span class=\"p\">[</span><span class=\"s2\">&#34;length&#34;</span><span class=\"p\">]</span>\n   <span class=\"o\">?</span> <span class=\"p\">{</span> <span class=\"nx\">contra</span>: <span class=\"kt\">never</span><span class=\"p\">;</span> <span class=\"nx\">co</span>: <span class=\"kt\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[];</span> <span class=\"nx\">coInsertPos</span>: <span class=\"kt\">ReadonlyArray</span><span class=\"p\">&lt;</span><span class=\"nt\">readonly</span> <span class=\"na\">void</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span> <span class=\"p\">}</span>\n   <span class=\"o\">:</span> <span class=\"nx\">Args</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"p\">[</span><span class=\"k\">infer</span> <span class=\"nx\">Head</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">]</span>\n   <span class=\"o\">?</span> <span class=\"p\">[</span><span class=\"nx\">Head</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"p\">[</span><span class=\"kt\">never</span><span class=\"p\">]</span>\n     <span class=\"o\">?</span> <span class=\"nx\">ProcessArgs</span><span class=\"p\">&lt;</span><span class=\"nt\">Tail</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">...ContraArgs</span><span class=\"err\">,</span> <span class=\"na\">Head</span><span class=\"err\">],</span> <span class=\"na\">CoArgs</span><span class=\"err\">,</span> <span class=\"na\">CoInsertPos</span><span class=\"err\">,</span> <span class=\"na\">readonly</span> <span class=\"err\">[</span><span class=\"na\">...I</span><span class=\"err\">,</span> <span class=\"na\">void</span><span class=\"err\">]</span><span class=\"p\">&gt;</span>\n     <span class=\"o\">:</span> <span class=\"nx\">Head</span> <span class=\"kr\">extends</span> <span class=\"nx\">Co</span><span class=\"p\">&lt;</span><span class=\"nt\">infer</span> <span class=\"na\">T</span><span class=\"p\">&gt;</span>\n     <span class=\"o\">?</span> <span class=\"nx\">ProcessArgs</span><span class=\"o\">&lt;</span>\n         <span class=\"nx\">Tail</span><span class=\"p\">,</span>\n         <span class=\"nx\">ContraArgs</span><span class=\"p\">,</span>\n         <span class=\"kr\">readonly</span> <span class=\"p\">[...</span><span class=\"nx\">CoArgs</span><span class=\"p\">,</span> <span class=\"nx\">T</span><span class=\"p\">],</span>\n         <span class=\"kr\">readonly</span> <span class=\"p\">[...</span><span class=\"nx\">CoInsertPos</span><span class=\"p\">,</span> <span class=\"nx\">I</span><span class=\"p\">],</span>\n         <span class=\"kr\">readonly</span> <span class=\"p\">[...</span><span class=\"nx\">I</span><span class=\"p\">,</span> <span class=\"k\">void</span><span class=\"p\">]</span>\n       <span class=\"o\">&gt;</span>\n     <span class=\"o\">:</span> <span class=\"nx\">ProcessArgs</span><span class=\"p\">&lt;</span><span class=\"nt\">Tail</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">...ContraArgs</span><span class=\"err\">,</span> <span class=\"na\">Head</span><span class=\"err\">],</span> <span class=\"na\">CoArgs</span><span class=\"err\">,</span> <span class=\"na\">CoInsertPos</span><span class=\"err\">,</span> <span class=\"na\">readonly</span> <span class=\"err\">[</span><span class=\"na\">...I</span><span class=\"err\">,</span> <span class=\"na\">void</span><span class=\"err\">]</span><span class=\"p\">&gt;</span>\n   <span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">contra</span>: <span class=\"kt\">ContraArgs</span><span class=\"p\">;</span> <span class=\"nx\">co</span>: <span class=\"kt\">CoArgs</span><span class=\"p\">;</span> <span class=\"nx\">coInsertPos</span>: <span class=\"kt\">CoInsertPos</span> <span class=\"p\">};</span>\n <span class=\"err\">​</span>\n <span class=\"cm\">/**\n</span><span class=\"cm\">  * An alias of `TypeLambda` with only one parameter.\n</span><span class=\"cm\">  */</span>\n <span class=\"kr\">type</span> <span class=\"nx\">TypeLambda1</span><span class=\"p\">&lt;</span><span class=\"nt\">Param1</span><span class=\"err\">,</span> <span class=\"na\">Return </span><span class=\"o\">=</span> <span class=\"na\">unknown</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">TypeLambda</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"nx\">Param1</span><span class=\"p\">],</span> <span class=\"nx\">Return</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n <span class=\"cm\">/**\n</span><span class=\"cm\">  * An alias of `TypeLambda` with only one parameter.\n</span><span class=\"cm\">  */</span>\n <span class=\"kr\">interface</span> <span class=\"nx\">TypeLambda1Wrong</span><span class=\"p\">&lt;</span><span class=\"nt\">Param1</span><span class=\"err\">,</span> <span class=\"na\">Return </span><span class=\"o\">=</span> <span class=\"na\">unknown</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"nx\">TypeLambda</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"nx\">Param1</span><span class=\"p\">],</span> <span class=\"nx\">Return</span><span class=\"o\">&gt;</span> <span class=\"p\">{}</span>\n</code></pre></div><p data-pid=\"eUThbKTp\">这是个非常神秘的东西，看不懂不要尝试去理解它的实现机制……我大概解释下这个 <code>TypeLambda</code> 是什么东西。简单来说它试图在类型层面表示一个模拟的“函数”，存储了参数和返回值，而且这参数和返回值还支持协变或逆变。这里的 <code>Co</code> 用于将一个“函数参数”标记为协变的，否则默认是逆变的。这东西在模拟 HKT 上比较有用。看下使用例就懂了：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">type</span> <span class=\"nx\">Assertions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda</span><span class=\"err\">&lt;[&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;]</span><span class=\"p\">&gt;,</span> <span class=\"nx\">TypeLambda</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda</span><span class=\"err\">&lt;[</span><span class=\"na\">string</span><span class=\"err\">]</span><span class=\"p\">&gt;,</span> <span class=\"nx\">TypeLambda</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"s2\">&#34;foo&#34;</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda</span><span class=\"err\">&lt;[</span><span class=\"na\">Co</span><span class=\"err\">&lt;&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">TypeLambda</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"nx\">Co</span><span class=\"p\">&lt;</span><span class=\"nt\">string</span><span class=\"p\">&gt;]</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda</span><span class=\"err\">&lt;[</span><span class=\"na\">Co</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"p\">&gt;]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">TypeLambda</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"nx\">Co</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;foo&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n <span class=\"p\">];</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2799cbfe91b607a5372690bac05b938b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1493\" data-rawheight=\"191\" class=\"origin_image zh-lightbox-thumb\" width=\"1493\" data-original=\"https://pic4.zhimg.com/v2-2799cbfe91b607a5372690bac05b938b_r.jpg\" data-original-token=\"v2-2799cbfe91b607a5372690bac05b938b\"/></figure><p data-pid=\"KsavagKP\">然后可以看到在最后，用 <code>TypeLambda1</code> 做了一个简化的 <code>TypeLambda</code> 类型别名，看一下用 <code>interface</code> 和 <code>type</code> 定义这个 <code>TypeLambda1</code> 分别有什么区别：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"kr\">type</span> <span class=\"nx\">Assertions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda1</span><span class=\"err\">&lt;&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;,</span> <span class=\"nx\">TypeLambda1</span><span class=\"p\">&lt;</span><span class=\"nt\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda1</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"p\">&gt;,</span> <span class=\"nx\">TypeLambda1</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;foo&#34;</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda1</span><span class=\"err\">&lt;</span><span class=\"na\">Co</span><span class=\"err\">&lt;&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">TypeLambda1</span><span class=\"p\">&lt;</span><span class=\"nt\">Co</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda1</span><span class=\"err\">&lt;</span><span class=\"na\">Co</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">TypeLambda1</span><span class=\"p\">&lt;</span><span class=\"nt\">Co</span><span class=\"err\">&lt;&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n <span class=\"err\">​</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda1Wrong</span><span class=\"err\">&lt;&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;,</span> <span class=\"nx\">TypeLambda1Wrong</span><span class=\"p\">&lt;</span><span class=\"nt\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda1Wrong</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"p\">&gt;,</span> <span class=\"nx\">TypeLambda1Wrong</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;foo&#34;</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda1Wrong</span><span class=\"err\">&lt;</span><span class=\"na\">Co</span><span class=\"err\">&lt;&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">TypeLambda1Wrong</span><span class=\"p\">&lt;</span><span class=\"nt\">Co</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n   <span class=\"nx\">Expect</span><span class=\"p\">&lt;</span><span class=\"nt\">Extends</span><span class=\"err\">&lt;</span><span class=\"na\">TypeLambda1Wrong</span><span class=\"err\">&lt;</span><span class=\"na\">Co</span><span class=\"err\">&lt;</span><span class=\"na\">string</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">TypeLambda1Wrong</span><span class=\"p\">&lt;</span><span class=\"nt\">Co</span><span class=\"err\">&lt;&#34;</span><span class=\"na\">foo</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">,</span>\n <span class=\"p\">];</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6a8efe673766b0a2c9265be1a09f4d2e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1461\" data-rawheight=\"329\" class=\"origin_image zh-lightbox-thumb\" width=\"1461\" data-original=\"https://pic3.zhimg.com/v2-6a8efe673766b0a2c9265be1a09f4d2e_r.jpg\" data-original-token=\"v2-6a8efe673766b0a2c9265be1a09f4d2e\"/></figure><p data-pid=\"gRIAVQO7\">可以看到 TS 在用 <code>type</code> 定义的 <code>TypeLambda1</code> 上还能保留正确的型变性，但在用 <code>interface</code> 定义的 <code>TypeLambda1Wrong</code> 上直接放弃治疗了，这类型参数诡异地变成了双变的。说实话，这里头的机理我至今没搞懂，我只能猜测对于 <code>type</code>，TS 只是将其认为是类型别名，所以类型体操整多复杂都没事，反正最后会完全展开来，而 <code>interface</code> 定义了新类型，在处理类型体操上可能有某种神秘的机制，我暂时还没想明白。</p><p data-pid=\"lJQOcpWM\">当然，这里是个非常复杂的神秘情况，对于常见和简单的类型我用下来不管是 <code>interface</code> 还是 <code>type</code> 实际上都能很正常地传递型变参数，只是在这种边界情况下 <code>interface</code> 会有问题——希望有人能帮忙研究一下这里到底是哪里出的问题导致 TS 无法正确推导 <code>interface</code> 上的类型参数的型变性，并给出一个更小的例子。</p><h2><b>总结</b></h2><p data-pid=\"5PLhfUrV\">可以看到，TS 中 <code>interface</code> 与 <code>type</code> 最核心的区别就是真实<b>类型</b>与<b>类型别名</b>的区别——这由此产生了 <code>interface</code> 的<b>惰性</b>特点，这在处理循环引用自身的问题上非常重要。</p><p data-pid=\"qAKcGs2I\">TS 的官方文档似乎没有明确提到这一点，只是强调尽量使用 <code>interface</code>，这可能是因为这涉及了太多的 TS 内部实现细节。不过，即使你认为你一辈子也碰不到这种循环引用自身的问题，你也应该尽量多地使用 <code>interface</code>，因为它的惰性特点可以帮助 TS 在处理复杂类型时更好地优化求值，从而提高编译速度。</p><p data-pid=\"JWinJidh\">——另外，我知道很多人喜欢用 <code>type</code> 是因为鼠标悬浮在这类型上时会显示它的详细定义……实际上你用个简单的类型展开它就行了：</p><div class=\"highlight\"><pre><code class=\"language-ts\"> <span class=\"cm\">/**\n</span><span class=\"cm\">  * Tell TS to evaluate an object type immediately. Actually does nothing, but\n</span><span class=\"cm\">  * it&#39;s useful for debugging or make type information more readable.\n</span><span class=\"cm\">  *\n</span><span class=\"cm\">  * Sometimes strange things happen when you try to use it with a *generic type*,\n</span><span class=\"cm\">  * so avoid that if possible.\n</span><span class=\"cm\">  */</span>\n <span class=\"kr\">export</span> <span class=\"kr\">type</span> <span class=\"nx\">_Id</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"k\">infer</span> <span class=\"nx\">U</span> <span class=\"o\">?</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"nx\">K</span> <span class=\"k\">in</span> <span class=\"k\">keyof</span> <span class=\"nx\">U</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">U</span><span class=\"p\">[</span><span class=\"nx\">K</span><span class=\"p\">]</span> <span class=\"p\">}</span> <span class=\"o\">:</span> <span class=\"kt\">never</span><span class=\"p\">;</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7bdf9e61014e033fb096c7d664c0ce9e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"372\" class=\"origin_image zh-lightbox-thumb\" width=\"1200\" data-original=\"https://pic3.zhimg.com/v2-7bdf9e61014e033fb096c7d664c0ce9e_r.jpg\" data-original-token=\"v2-7bdf9e61014e033fb096c7d664c0ce9e\"/></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-40c668e970814bb9ad0ac44722004671_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1226\" data-rawheight=\"362\" class=\"origin_image zh-lightbox-thumb\" width=\"1226\" data-original=\"https://pic2.zhimg.com/v2-40c668e970814bb9ad0ac44722004671_r.jpg\" data-original-token=\"v2-40c668e970814bb9ad0ac44722004671\"/></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-dff1aa955eba73b270849128daf9f7bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"982\" data-rawheight=\"328\" class=\"origin_image zh-lightbox-thumb\" width=\"982\" data-original=\"https://pic4.zhimg.com/v2-dff1aa955eba73b270849128daf9f7bb_r.jpg\" data-original-token=\"v2-dff1aa955eba73b270849128daf9f7bb\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-062618d8f9231c78cc297b6fb3833724_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1176\" data-rawheight=\"359\" class=\"origin_image zh-lightbox-thumb\" width=\"1176\" data-original=\"https://pic1.zhimg.com/v2-062618d8f9231c78cc297b6fb3833724_r.jpg\" data-original-token=\"v2-062618d8f9231c78cc297b6fb3833724\"/></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4346460724f366a195d937ffac3a5d63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"705\" data-rawheight=\"217\" class=\"origin_image zh-lightbox-thumb\" width=\"705\" data-original=\"https://pic4.zhimg.com/v2-4346460724f366a195d937ffac3a5d63_r.jpg\" data-original-token=\"v2-4346460724f366a195d937ffac3a5d63\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5996c4210064d68490b3e8d7b395b568_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"896\" data-rawheight=\"231\" class=\"origin_image zh-lightbox-thumb\" width=\"896\" data-original=\"https://pic1.zhimg.com/v2-5996c4210064d68490b3e8d7b395b568_r.jpg\" data-original-token=\"v2-5996c4210064d68490b3e8d7b395b568\"/></figure><p data-pid=\"7H59gK5C\">——不管怎么样，只要你暴力包个 <code>extends infer U ? U : never</code>，TS 总会帮你把类型展开来。我觉得这不应该是不用 <code>interface</code> 的借口。</p>",
            "voteup_count": 52,
            "comment_count": 5
        },
        "created": "2023-12-14T13:44:59+08:00"
    },
    {
        "content": {
            "id": 672010609,
            "title": "算法学习笔记（目录）",
            "type": "article",
            "excerpt_title": "设立本专栏的初衷，一方面因为自身记忆力确实不如常人，容易陷入多次学习一个算法的循环，相当浪费时间。 另一方面也受 Pecco：算法学习笔记 的影响，将其整理出来，分享给有需要的人。本专栏默认读者会使用基本的 C++语言且掌握基本的贪心、搜索、动态规划思想。每行最后一个 方括号里的编号，表示笔记中用到的前置算法（但不代表必须用到）。分类仅做参考，某些算法可能会被分到多个类中，因为交叉的特性（如生成函数）。 因为…",
            "url": "https://zhuanlan.zhihu.com/p/672010609",
            "image_url": "",
            "created": 1702452266,
            "updated": 1702885953,
            "author": {
                "id": "84cd10881b994fa7b89949a6e36b7a45",
                "url_token": "Myl520",
                "name": "GhostLX",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-bc19353b23bc6b6d98e943f2a4073381_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-bc19353b23bc6b6d98e943f2a4073381.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/84cd10881b994fa7b89949a6e36b7a45",
                "user_type": "people",
                "headline": "ACMer蒟蒻 / LLM",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1521357807
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"sGh5-UY-\">设立本专栏的初衷，一方面因为自身记忆力确实不如常人，容易陷入多次学习一个算法的循环，相当浪费时间。</p><p data-pid=\"ZF7NlTBz\">另一方面也受<a href=\"https://zhuanlan.zhihu.com/p/105467597\" class=\"internal\">Pecco：算法学习笔记</a>的影响，将其整理出来，分享给有需要的人。</p><p data-pid=\"WMJ5zcoI\">本专栏默认读者会使用基本的<b>C++语言</b>且掌握基本的<b>贪心、搜索、动态规划</b>思想。</p><hr/><p data-pid=\"FcBkSx6S\">每行最后一个<b>方括号里的编号</b>，表示笔记中用到的前置算法（但不代表必须用到）。</p><p data-pid=\"g10MTi2K\">分类仅做参考，某些算法可能会被分到多个类中，因为交叉的特性（如生成函数）。</p><p data-pid=\"vYpLDkLp\">因为笔者的主攻题型具有偏向性，所以各类型的笔记数量可能不平衡。</p><p data-pid=\"jZFGkWbx\">并且，因为笔者自身身份的原因，<b>笔记更偏向于做题，使得我能在算法竞赛中做出一类题目，而非单纯学习一个算法。</b></p><p data-pid=\"2Y6FU6tF\">【该专栏仍持续更新中】</p><p data-pid=\"1G-ep_0X\">因为本专栏创作时间跨度长，且部分学习笔记严格意义上，应该叫做“复习笔记”，这些文章的讲述方式可能对初学者不大恰当。若导致您阅读不畅请谅解。</p><h2>组合数学</h2><p data-pid=\"_x7xh_On\"><a href=\"https://zhuanlan.zhihu.com/p/600776343\" class=\"internal\">算法学习笔记(5)：生成函数</a>【8】</p><p data-pid=\"uUj6qubb\"><a href=\"https://zhuanlan.zhihu.com/p/601482420\" class=\"internal\">算法学习笔记(6)：指数生成函数（EGF）</a>【5、8】</p><p data-pid=\"LtS6dNXL\"><a href=\"https://zhuanlan.zhihu.com/p/602410836\" class=\"internal\">算法学习笔记(7)：球盒模型</a>【8】</p><p data-pid=\"9T-yQA9I\"><a href=\"https://zhuanlan.zhihu.com/p/602672505\" class=\"internal\">算法学习笔记(8)：组合数学基础</a></p><p data-pid=\"a8DjvVWe\"><a href=\"https://zhuanlan.zhihu.com/p/602675596\" class=\"internal\">算法学习笔记(9)：二项式反演</a>【8】</p><p data-pid=\"U6jqLmkD\"><a href=\"https://zhuanlan.zhihu.com/p/609104268\" class=\"internal\">算法学习笔记(11)：卡特兰数（Catalan）</a>【8】</p><p data-pid=\"CTE2hv4a\"><a href=\"https://zhuanlan.zhihu.com/p/609204765\" class=\"internal\">算法学习笔记(12)：组合数学：k-Dyck路（k阶卡特兰数）</a>【8、11】</p><p data-pid=\"ZnTTPtZh\"><a href=\"https://zhuanlan.zhihu.com/p/660929686\" class=\"internal\">算法学习笔记(24)：容斥原理</a>【8】</p><p data-pid=\"y1MiiUI_\"><a href=\"https://zhuanlan.zhihu.com/p/661206530\" class=\"internal\">算法学习笔记(25)：鸽巢原理（抽屉原理）</a>【8】</p><h2>数论</h2><p data-pid=\"VkwlbdxH\"><a href=\"https://zhuanlan.zhihu.com/p/599150938\" class=\"internal\">算法学习笔记(3)：数论基础</a></p><p data-pid=\"ekoFJRa_\"><a href=\"https://zhuanlan.zhihu.com/p/599151459\" class=\"internal\">算法学习笔记(4)：莫比乌斯反演</a>【3、27】</p><p data-pid=\"kNbozu-8\"><a href=\"https://zhuanlan.zhihu.com/p/609872964\" class=\"internal\">算法学习笔记(18)：原根</a>【3】</p><p data-pid=\"t4Uz0cNz\"><a href=\"https://zhuanlan.zhihu.com/p/612743839\" class=\"internal\">算法学习笔记(21)：二次剩余</a>【3】</p><p data-pid=\"UmMPK3Ki\"><a href=\"https://zhuanlan.zhihu.com/p/662432422\" class=\"internal\">算法学习笔记(27)：素数筛法【埃氏筛法、线性筛法</a>】【3】</p><p data-pid=\"_G3bnNQw\"><a href=\"https://zhuanlan.zhihu.com/p/672854555\" class=\"internal\">算法学习笔记(30)：思维专题【倍数、约数与筛法】</a>【3、27】</p><h2>动态规划</h2><p data-pid=\"Hnm5-UPx\"><a href=\"https://zhuanlan.zhihu.com/p/613107701\" class=\"internal\">算法学习笔记(22)：数位DP（数位动态规划）</a></p><p data-pid=\"01vvRyL_\"><a href=\"https://zhuanlan.zhihu.com/p/622041814\" class=\"internal\">算法学习笔记(23)：斜率优化DP</a></p><p data-pid=\"MZrYb7IS\"><a href=\"https://zhuanlan.zhihu.com/p/661868990\" class=\"internal\">算法学习笔记(26)：数位DP【进阶】</a>【22】</p><h2>多项式</h2><p data-pid=\"NUnCj488\"><a href=\"https://zhuanlan.zhihu.com/p/567738394\" class=\"internal\">算法学习笔记(1)：FFT(快速傅里叶变换)</a></p><p data-pid=\"69e_ZyyF\"><a href=\"https://zhuanlan.zhihu.com/p/600776343\" class=\"internal\">算法学习笔记(5)：生成函数</a>【8】</p><p data-pid=\"3EmjRVpq\"><a href=\"https://zhuanlan.zhihu.com/p/601482420\" class=\"internal\">算法学习笔记(6)：指数生成函数（EGF）</a>【5、8】</p><p data-pid=\"8ao7nsdT\"><a href=\"https://zhuanlan.zhihu.com/p/609248529\" class=\"internal\">算法学习笔记(13)：多项式牛顿迭代（求逆,开方,exp）</a></p><p data-pid=\"UgmNirtw\"><a href=\"https://zhuanlan.zhihu.com/p/609250161\" class=\"internal\">算法学习笔记(14)：多项式除法|取模</a>【13】</p><p data-pid=\"30RtKPcO\"><a href=\"https://zhuanlan.zhihu.com/p/609362916\" class=\"internal\">算法学习笔记(15)：多项式ln、exp</a>【20】</p><p data-pid=\"qZXja3Dh\"><a href=\"https://zhuanlan.zhihu.com/p/609414826\" class=\"internal\">算法学习笔记(16)：多项式三角函数</a></p><p data-pid=\"B1iwfHVt\"><a href=\"https://zhuanlan.zhihu.com/p/609476150\" class=\"internal\">算法学习笔记(17)：多项式反三角函数</a></p><p data-pid=\"2K3xq9M8\"><a href=\"https://zhuanlan.zhihu.com/p/610073504\" class=\"internal\">算法学习笔记(19)：NTT(快速数论变换)</a>【1、18】</p><p data-pid=\"XfecI6dg\"><a href=\"https://zhuanlan.zhihu.com/p/610538884\" class=\"internal\">算法学习笔记(20)：分治FFT</a></p><h2>博弈论 </h2><p data-pid=\"cckabtCx\"><a href=\"https://zhuanlan.zhihu.com/p/583442696\" class=\"internal\">算法学习笔记(2)：二分图博弈</a></p><h2>其他</h2><p data-pid=\"fO_HkMJG\"><a href=\"https://zhuanlan.zhihu.com/p/604377422\" class=\"internal\">算法学习笔记(10)：单位根反演</a>【3】</p><hr/><a href=\"https://www.zhihu.com/column/c_1575814114315915264\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-5e181f31b379b3be25fbc815f981afa0_l.jpg\" data-image-width=\"200\" data-image-height=\"200\" class=\"internal\">GhostLX：算法学习笔记【专栏】</a><p></p>",
            "voteup_count": 26,
            "column": {
                "id": "c_1575814114315915264",
                "type": "column",
                "url_token": "c_1575814114315915264",
                "title": "算法学习笔记",
                "url": "https://zhuanlan.zhihu.com/c_1575814114315915264",
                "created": 1668483362,
                "updated": 1668483362,
                "description": "",
                "image_url": "https://pica.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 5
        },
        "created": "2023-12-13T15:24:26+08:00"
    },
    {
        "content": {
            "id": 671315288,
            "title": "前端白屏检测：SDK的设计与实现",
            "type": "article",
            "excerpt_title": "前言 前端白屏指页面在加载过程中长时间无法正常展示内容，内容区空白，使用户无法进行查看、保存等一切操作，这是非常严重的问题。如果能尽早检测到白屏问题，就可以及时处理，避免或降低负面影响。 白屏的检测手段有两种。一是真实用户端的检测，通过接入白屏检测SDK实现，无法在用户端白屏报错前发现问题，是被动监控的方式；另一种是自动化检测，在团队内部通过自动化工具模拟用户行为主动检测，可以提前发现问题。 本文为前…",
            "url": "https://zhuanlan.zhihu.com/p/671315288",
            "image_url": "https://picx.zhimg.com/v2-3d7475c36ce08f3b3281815d75e89215_r.jpg?source=172ae18b",
            "created": 1702109871,
            "updated": 1702303827,
            "author": {
                "id": "ba896abc037185f6efe0b1b15f609a98",
                "url_token": "ugtopia",
                "name": "秋池",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-4cd36db4e9cccab47007c1f73c695111_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-4cd36db4e9cccab47007c1f73c695111.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/ba896abc037185f6efe0b1b15f609a98",
                "user_type": "people",
                "headline": "吾生也有涯，而知也无涯",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "网易 员工"
                    }
                ],
                "badge_v2": {
                    "title": "网易 员工",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "网易 员工",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "网易 员工",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<h2>前言</h2><p data-pid=\"7odewbaY\"><br/>前端白屏指页面在加载过程中长时间无法正常展示内容，内容区空白，使用户无法进行查看、保存等一切操作，这是非常严重的问题。如果能尽早检测到白屏问题，就可以及时处理，避免或降低负面影响。<br/>白屏的检测手段有两种。一是真实用户端的检测，通过接入白屏检测SDK实现，无法在用户端白屏报错前发现问题，是被动监控的方式；另一种是自动化检测，在团队内部通过自动化工具模拟用户行为主动检测，可以提前发现问题。<br/>本文为前端白屏检测的上篇，主要讲真实用户端的检测，即SDK的设计与实现。</p><h2><br/>白屏的表现与原因</h2><p data-pid=\"eJT49FE6\"><br/>白屏的通常表现为:</p><ol><li data-pid=\"bp_dH5AQ\">页面空白或仅显示背景色，没有实际内容</li><li data-pid=\"Zin5t3i0\">页面一直展示骨架屏，包括页面loading状态</li><li data-pid=\"ENz4vnLk\">页面只展示导航菜单，内容区空白，包括微前端或iframe嵌套子页面的场景</li></ol><p data-pid=\"ZPEwlHjS\"><br/><br/>导致白屏的原因分两种：资源加载错误、代码执行错误。</p><h2><br/>检测方案对比<br/></h2><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><td>方案</td><td>原理</td><td>优点</td><td>缺点</td></tr><tr><td>检测根节点是否渲染</td><td>SPA框架渲染的 DOM 一般挂载在一个根节点下，监听onload、onerror事件，检测根节点下是否挂载 DOM</td><td>开发成本低</td><td>通用性差，只兼容主流 SPA 框架</td></tr><tr><td>监听 DOM 变化</td><td>利用 Mutation Observer API 监听DOM变化</td><td>开发成本低</td><td>准确度低，无法检测未渲染、始终渲染骨架屏等情况，如果用户长时间未操作DOM可能会误判白屏</td></tr><tr><td>页面截图对比</td><td>对页面截图，将截图与纯白的图片做对比</td><td>技术栈无关，通用性好</td><td>准确度低，无法检测纯背景色、骨架屏的白屏场景</td></tr><tr><td>前端框架内置ErrorBoundary组件捕获异常</td><td>利用ErrorBoundary组件捕获JS执行异常检测白屏</td><td>开发成本低</td><td>无法检测资源异常导致的白屏，只兼容于特定框架应用，接入时对业务代码侵入大</td></tr><tr><td>页面关键点采样对比</td><td>在页面中垂直/交叉取多个采样点，用 elementsFromPoint API 获取采样点下的 HTML 元素，判断采样点元素是否与容器元素相同</td><td>准确度高，技术栈无关，通用性好</td><td>开发成本稍高</td></tr></tbody></table><p data-pid=\"YZczBVSs\"><br/>通过以上对比发现，采用「页面关键点采样对比」的实现方案较好。<br/>需要注意的是，对于主应用内嵌入的iframe的场景，因为每次采样取到的都是整个iframe元素，所以无法在主应用侧判断iframe是否白屏，需要在iframe应用内接入白屏检测SDK。</p><h2><br/>流程图</h2><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5734a4fbd98abd09efc4aabdffae4dae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1660\" data-rawheight=\"2480\" class=\"origin_image zh-lightbox-thumb\" width=\"1660\" data-original=\"https://pic3.zhimg.com/v2-5734a4fbd98abd09efc4aabdffae4dae_r.jpg\" data-original-token=\"v2-6819c9636ac27fb0f64137693fbbec79\"/></figure><h2>数据采集</h2><h3><br/>屏幕采样点选取</h3><p data-pid=\"0Hg7nclO\"><br/>采样点的选取有三种方式：垂直采样、交叉采样、垂直交叉采样。</p><h3><br/><br/>垂直采样</h3><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ab29a3013b07728332bccf8817f7d5b9_b.jpg\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"523\" class=\"origin_image zh-lightbox-thumb\" width=\"523\" data-original=\"https://pic2.zhimg.com/v2-ab29a3013b07728332bccf8817f7d5b9_r.jpg\" data-original-token=\"v2-0a2dd4bbfedb272405b9515901b96678\"/><figcaption>垂直采样时屏幕的采样点坐标</figcaption></figure><h3>交叉采样</h3><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-361f64a405d2cf49b31da4d9d57b093a_b.jpg\" data-size=\"normal\" data-rawwidth=\"523\" data-rawheight=\"523\" class=\"origin_image zh-lightbox-thumb\" width=\"523\" data-original=\"https://pic3.zhimg.com/v2-361f64a405d2cf49b31da4d9d57b093a_r.jpg\" data-original-token=\"v2-8ef66502f0fccf8306dfd67e897f6df6\"/><figcaption>交叉采样时屏幕的采样点坐标</figcaption></figure><h3>垂直交叉采样</h3><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-679ec9c52cfb4f8768a5bc5e8e6ec30d_b.jpg\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb\" width=\"522\" data-original=\"https://pic2.zhimg.com/v2-679ec9c52cfb4f8768a5bc5e8e6ec30d_r.jpg\" data-original-token=\"v2-141bfd8ed32f12128ed735e303759378\"/><figcaption>垂直交叉采样时屏幕的采样点坐标</figcaption></figure><p data-pid=\"5BbgPnh5\">很明显，采样点越多判断越准确，但计算量稍大一点，不过我们利用requestIdleCallback在浏览器空闲时计算。因此，我们选择垂直交叉的采样方式。</p><h3>白屏的判断标准与检测时机</h3><p data-pid=\"pYOuFSn6\"><br/>有骨架屏和无骨架屏应用的检测方式不一样，检测时机也有细微差别。</p><h3><br/>无骨架屏场景</h3><p data-pid=\"o0m0xKI-\"><br/><b>检测时机</b></p><ol><li data-pid=\"kpOjP5K-\">document.readyState在complete时或load事件触发时</li><li data-pid=\"XvPZpH4k\">全局error事件触发时</li><li data-pid=\"2TeaPHEL\">全局unhandledrejection事件触发时</li></ol><p data-pid=\"6M-U7VNS\"><b>检测方式</b><br/>初始化SDK时，我们需要配置哪些是根容器，如果根容器为空则说明是白屏。<br/>具体实现方式为，根据屏幕的宽度（window.innerWidth）和高度（window.innerHeight）算出每个采样点的具体坐标，再用elementsFromPoint获取每个坐标的 dom 元素，对比获取的元素是否为配置的根容器元素。<br/>仔细想一下，上面的判断方式其实会有问题。<br/>因为在<b>微前端与iframe场景</b>下，子应用白屏时，应该也需要上报才对。如果按上述方式判断，主应用（一般包含导航或者一级菜单）如果没有白屏，子应用永远不会被检测出白屏。因此，需要兼容此类场景。<br/>兼容方式也很简单，我们只要判断内容区内的采样点满足白屏条件即可。大部分后台类的应用，会有顶部导航或左侧的一级菜单，因此我们选定右下方为内容区。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2b30a28255a3679cdf3ea51fbc0e5afa_b.jpg\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"522\" class=\"origin_image zh-lightbox-thumb\" width=\"522\" data-original=\"https://pic3.zhimg.com/v2-2b30a28255a3679cdf3ea51fbc0e5afa_r.jpg\" data-original-token=\"v2-58c37a742200aaecaeb7757c04671750\"/><figcaption>内容区内的采样点</figcaption></figure><p data-pid=\"Q82iTKlg\">如上图所示，整个屏幕共33个采样点，其中内容区有28个。简单起见，检测白屏时，我们判断空白的采样点是否大于等于28个。采样点坐标的获取如下：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">9</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// x轴采样点\n</span><span class=\"c1\"></span>  <span class=\"kr\">const</span> <span class=\"nx\">xElements</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">elementsFromPoint</span><span class=\"p\">((</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerWidth</span> <span class=\"o\">*</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n  <span class=\"c1\">// y轴采样点\n</span><span class=\"c1\"></span>  <span class=\"kr\">const</span> <span class=\"nx\">yElements</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">elementsFromPoint</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerWidth</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span> <span class=\"o\">*</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"p\">);</span>\n  <span class=\"c1\">// 上升的对角线采样点\n</span><span class=\"c1\"></span>  <span class=\"kr\">const</span> <span class=\"nx\">upDiagonalElements</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">elementsFromPoint</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerWidth</span> <span class=\"o\">*</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span> <span class=\"o\">*</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n  <span class=\"p\">);</span>\n  <span class=\"c1\">// 下降的对角线采样点\n</span><span class=\"c1\"></span>  <span class=\"kr\">const</span> <span class=\"nx\">downDiagonalElements</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">elementsFromPoint</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerWidth</span> <span class=\"o\">*</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">innerHeight</span> <span class=\"o\">*</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"p\">,</span>\n  <span class=\"p\">);</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isContainer</span><span class=\"p\">(</span><span class=\"nx\">xElements</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"nx\">as</span> <span class=\"nx\">HTMLElement</span><span class=\"p\">))</span> <span class=\"nx\">emptyPoints</span><span class=\"o\">++</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// 中心点只计算一次\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">!==</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isContainer</span><span class=\"p\">(</span><span class=\"nx\">yElements</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"nx\">as</span> <span class=\"nx\">HTMLElement</span><span class=\"p\">))</span> <span class=\"nx\">emptyPoints</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isContainer</span><span class=\"p\">(</span><span class=\"nx\">upDiagonalElements</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"nx\">as</span> <span class=\"nx\">HTMLElement</span><span class=\"p\">))</span> <span class=\"nx\">emptyPoints</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isContainer</span><span class=\"p\">(</span><span class=\"nx\">downDiagonalElements</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"nx\">as</span> <span class=\"nx\">HTMLElement</span><span class=\"p\">))</span> <span class=\"nx\">emptyPoints</span><span class=\"o\">++</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><h3>有骨架屏场景</h3><p data-pid=\"jMKOYadq\"><br/><b>检测时机</b></p><ol><li data-pid=\"i9g0gdBz\">document.readyState在complete之前</li><li data-pid=\"gQk3OYwf\">全局error事件触发时</li><li data-pid=\"zjOdpQTw\">全局unhandledrejection事件触发时</li></ol><p data-pid=\"iybVlF09\"><br/><br/><b>检测方式</b><br/>如果应用内有骨架屏，继续用无骨架屏应用的白屏检测方式已经无法判断白屏，因为骨架屏也是有效的 dom 元素。<br/>有骨架屏应用的检测方式为：对比初次采样前后获取的 dom 元素是否一致。因为在页面加载完成前可能已经渲染完骨架屏，为了获取对照组数据，初次采样的时间要在页面加载完成前。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 项目有骨架屏\n</span><span class=\"c1\"></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">isSkeletonApp</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">readyState</span> <span class=\"o\">!==</span> <span class=\"s1\">&#39;complete&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">idleCallback</span><span class=\"p\">({</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;beforeComplete&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s1\">&#39;骨架屏场景白屏&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 页面加载完毕\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">readyState</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;complete&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">idleCallback</span><span class=\"p\">({</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;complete&#39;</span><span class=\"p\">,</span>\n      <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s1\">&#39;页面加载完毕白屏&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span>\n      <span class=\"s1\">&#39;load&#39;</span><span class=\"p\">,</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">idleCallback</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;load&#39;</span><span class=\"p\">,</span>\n        <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s1\">&#39;页面加载完毕白屏&#39;</span><span class=\"p\">,</span>\n      <span class=\"p\">}),</span>\n    <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">idleCallback</span><span class=\"p\">({</span>\n    <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">,</span>\n    <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">,</span>\n    <span class=\"nx\">filename</span><span class=\"o\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">filename</span><span class=\"p\">,</span>\n    <span class=\"nx\">lineno</span><span class=\"o\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">lineno</span><span class=\"p\">,</span>\n    <span class=\"nx\">colno</span><span class=\"o\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">colno</span><span class=\"p\">,</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;unhandledrejection&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">idleCallback</span><span class=\"p\">({</span>\n    <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">,</span>\n    <span class=\"nx\">reason</span><span class=\"o\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">reason</span><span class=\"p\">,</span>\n    <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Promise未捕获的错误&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre></div><h2>数据上报</h2><p data-pid=\"H-MB5USu\"><br/>检测出白屏问题后，就要上报白屏信息到数据后台了。一般数据后台需要有数据清洗、存储、消费、告警等功能。此外，还需要区分不同的产品与环境，控制上报数据并发量、上报用户浏览器信息、用户行为数据、方便排查问题的Sourcemap，告警方式与规则等细节问题。如果要将数据后台做的全面细致，实现成本是比较高的。<br/>权衡投入产出比后，我们的数据后台复用了云音乐部门同事研发的前端错误监控平台Corona。我们要做的就是将上报白屏错误到Corona的逻辑，内置到白屏检测SDK中。</p><h2>SDK的接入方式</h2><p data-pid=\"oogjYLRN\"><br/>SDK支持以外链方式接入前端应用，除云音乐的Corona puzzle脚本外，不依赖其他资源加载，一般只需要改动模板文件，不侵入业务代码。</p><h3>SDK API</h3><p data-pid=\"yReUg0IH\"><br/><b>配置项</b></p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><td>字段名</td><td>类型</td><td>说明</td><td>是否必须</td><td>默认值</td></tr><tr><td>containers</td><td>String[]</td><td>需要检测白屏的容器选择器列表</td><td>否</td><td>[&#39;html&#39;, &#39;body&#39;, &#39;#app&#39;, &#39;#root&#39;, &#39;#mainapp-container&#39;, &#39;#subapp-container&#39;]</td></tr><tr><td>corona</td><td>Corona</td><td>Corona平台错误监控的实例</td><td>否</td><td>window.corona</td></tr><tr><td>isSkeletonApp</td><td>Boolean</td><td>是否是有骨架屏的应用</td><td>否</td><td>false</td></tr><tr><td>autoInit</td><td>Boolean</td><td>是否自动初始化SDK</td><td>否</td><td>true</td></tr><tr><td>debug</td><td>Boolean</td><td>是否开启调试模式，开启后会打印日志</td><td>否</td><td>false</td></tr></tbody></table><p data-pid=\"3PKKTbyy\"><br/><b>方法</b></p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><td>方法名</td><td>说明</td><td>参数</td><td>返回值</td></tr><tr><td>init</td><td>初始化SDK</td><td>无</td><td>无</td></tr></tbody></table><h3>通过外链接入</h3><p data-pid=\"1Sp7g113\">只需要在模板文件内，通过外链script引入白屏检测SDK及其依赖的Corona SDK即可。</p><h2>总结</h2><p data-pid=\"ChiRb0o6\"><br/>本文首先介绍了前端白屏表现、白屏原因，以及修复白屏问题的业务价值。然后对比几种常见的白屏检测方案，并介绍了采样点检测方案的具体实现，包括采样点如何选取、白屏的判断标准与检测时机、微前端与iframe场景的兼容等。<br/>白屏检测工具完善现有的质量保障体系。使我们能尽早发现、及时处理白屏问题，减少线上重大故障几率，降低白屏问题对客户的负面影响。下一篇文章将介绍如何自动化的检测白屏，模拟用户的行为，主动发现问题。</p><p></p><p></p>",
            "voteup_count": 15,
            "comment_count": 1
        },
        "created": "2023-12-09T16:17:51+08:00"
    },
    {
        "content": {
            "id": 3293913629,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/20933265/answer/3293913629",
            "created_time": 1700322521,
            "updated_time": 1700323228,
            "question": {
                "type": "question",
                "id": 20933265,
                "title": "阻挡你学会 Haskell 最大的两个问题是什么?",
                "question_type": "normal",
                "created": 1365516743,
                "updated_time": 1365516743,
                "url": "https://www.zhihu.com/question/20933265",
                "is_deleted": false
            },
            "author": {
                "id": "fe6e62b94ef8d19228fc56f1fdf9231f",
                "url_token": "the-alpha-54",
                "name": "The Alpha",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-462ee2ecf88c2b068c48a6721da06b8a_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-462ee2ecf88c2b068c48a6721da06b8a.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/fe6e62b94ef8d19228fc56f1fdf9231f",
                "user_type": "people",
                "headline": "1！5！哥们在这给你说唱！",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1580657483
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 21,
            "comment_count": 3,
            "thanks_count": 14,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"W8NL8Bbj\">两次入手 Haskell 失败, 转头去学了 Elixir.</p><p data-pid=\"WSLORGD0\">第一次是在写 JS 的时候偶然发现 Monad. 为了搞懂 Monad 去学的 Haskell. 当时 Haskell 的资料实在太少, 工作繁忙的情况下啃不下英文资料.</p><p data-pid=\"E1eBOBnS\">第二次是写 GO 的时候为了更优雅的 err handling, 看了 Rob Pike 写的 Errors are values 这篇文章. 有些人认为这是一种蹩脚的 err Monad 模拟. 紧接着后面又发现了一门奇妙的 JS 方言 purescript (类 Haskell 的 JS 方言), 决定通过 purescript 去学习 Haskell. (很奇怪对吧)</p><p data-pid=\"LIBoJbBG\">其实过完 purescript 的 doc 和示例后我对函数式编程已经初入门槛. 但不管是 purescript 还是 Haskell 我都找不到什么使用场景. 反倒是有种手里拿着锤子看谁都像钉子的感觉. (没办法, 我的工作面实在太窄)</p><p data-pid=\"Opgi1x1R\">后来认识了一位 Ruby 同好(虽然我并没有那么喜欢 Ruby, 但是我很喜欢 Rails), 这位哥为了生计不得不抛弃国内没有岗位的 Ruby, 去外企写披着 Ruby 皮的 Elixir, 我被他狠狠地布道了.</p><p data-pid=\"UG6ZZ962\">个人感受来说, Elixir 的工业味道更重一些, 有很多更接近我这种凡人品味的用例和生态, feat 添加的也十分保守, 和我的相性更好.</p><p data-pid=\"GUNScz3U\">另外一门我学习的「函数式」语言是 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/2ff239f95aaa7f4612a23d220ff4ce48\" data-hash=\"2ff239f95aaa7f4612a23d220ff4ce48\" data-hovercard=\"p$b$2ff239f95aaa7f4612a23d220ff4ce48\">@张宏波</a> 老师的 Rescript. Rescript 官网上有关于集成 React 非常详细的指导和 Playground, 也是对新人非常的友好.</p><p data-pid=\"dnPjNaOb\">所以对我来说 Haskell 最大的两个问题是: </p><p data-pid=\"pcLZVOMk\">1. 资料太少, 导致我无法学习它. </p><p data-pid=\"iPdK9T7H\">2. 生态太小, 导致我无处使用它.</p><p data-pid=\"h9xcP9Wa\">当然我觉得问题在我, 是个凡人.</p><hr/><p data-pid=\"i-0J5csp\">我觉得如果想让更多的人接受一个技术, 就不能指望他先去「理解这些概念是什么」, 再去「了解这些概念怎么用」.</p><p data-pid=\"4E6KxiPo\">虽然我知道这是没办法的事情, 但当你发明了锤子, 最好的方法不是解释为什么它很好用, 而是让别人敲两下.</p>",
            "excerpt": "两次入手 Haskell 失败, 转头去学了 Elixir. 第一次是在写 JS 的时候偶然发现 Monad. 为了搞懂 Monad 去学的 Haskell. 当时 Haskell 的资料实在太少, 工作繁忙的情况下啃不下英文资料. 第二次是写 GO 的时候为了更优雅的 err handling, 看了 Rob Pike 写的 Errors are values 这篇文章. 有些人认为这是一种蹩脚的 err Monad 模拟. 紧接着后面又发现了一门奇妙的 JS 方言 purescript (类 Haskell 的 JS 方言), 决定通过 purescrip…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxidxNSiDCDm5iGSAiUKCTYyODk3MjAwNBIKMzI5MzkxMzYyORgEIgpJTUFHRV9URVhU",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-11-18T23:48:41+08:00"
    },
    {
        "content": {
            "id": 2373885274,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/42065322/answer/2373885274",
            "created_time": 1646379055,
            "updated_time": 1646526271,
            "question": {
                "type": "question",
                "id": 42065322,
                "title": "计算机算法领域有哪些书籍像《算法导论》一样经典？",
                "question_type": "normal",
                "created": 1459607169,
                "updated_time": 1459689861,
                "url": "https://www.zhihu.com/question/42065322",
                "is_deleted": false
            },
            "author": {
                "id": "6f2a1765b7b406d262de8d3002af0d3e",
                "url_token": "selinahxy",
                "name": "一只小猫咪",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-f4af4995359042556e61a3a90b296a32_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-f4af4995359042556e61a3a90b296a32.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/6f2a1765b7b406d262de8d3002af0d3e",
                "user_type": "people",
                "headline": "计算、数学系回坑",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-16f926b2059072a7f0e8a6ad9a7cc31d.png?source=6a64a727",
                        "night_mode_url": "https://pic1.zhimg.com/v2-16f926b2059072a7f0e8a6ad9a7cc31d.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1545153941
            },
            "thumbnail": "https://picx.zhimg.com/v2-a0a2ccfda6ddbc443d9bed406750935b_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 332,
            "comment_count": 13,
            "thanks_count": 65,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"C5aeBEkY\">我推荐这一本Randomized Algorithms，作者是 Rajeev Motwani 和 Prabhakar Raghavan，两个算法大牛 。私认为这本书算是学完算法导论之后一个不错的进阶。 </p><p data-pid=\"VQj_3k4d\">我接下来会简单讲一些这本书涉及的内容，以及我推荐的原因。 </p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-965d73ffae67fa42a098d4beaedf06cb_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"878\" data-original-token=\"v2-a0a2ccfda6ddbc443d9bed406750935b\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-40e83aaf07a2ceb84197499ee8c79e5a_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"588\" data-original=\"https://pic1.zhimg.com/v2-965d73ffae67fa42a098d4beaedf06cb_r.jpg?source=2c26e567\"/></figure><p data-pid=\"qmv8_NWo\">接触了传统的deterministic algorithm（ 确定性算法）之后，随机算法是非常自然的下一步。我们知道相当多重要的问题都是np-hard的，也就是说研究出多项式的确定性算法是一件最起码现在看来遥遥无期的事情。面对这样的问题，approximation algorithm（近似算法）当然是一个思路。但很多时候我们发现，当我们要求的近似精度到达一定的程度的时候，我们又会不幸地遇到np-hard的瓶颈。</p><p data-pid=\"K3lfcCOf\">于是，搞算法的人就开始想：我们能不能借助随机性来取得一些突破？我们不要求每次运行这个算法的时候都能得到足够好的答案，只要每一次都有一个<b>固定的成功概率</b>就好了。这样我们只要重复这个算法足够多的次数即可。 </p><p data-pid=\"FUkCnvYn\">针对这类问题，书里面简单介绍了randomized rounding的方法。我们知道，很多np-hard的问题，比如说max-sat，set-cover都可以写成linear programming（线性规划）的形式。虽然线性规划是可以很快求出最优解的，但难点在于<b>我们只接受属于</b> <img src=\"https://www.zhihu.com/equation?tex=%5C%7B0%2C1%5C%7D%5En\" alt=\"\\{0,1\\}^n\" eeimg=\"1\"/> 的离散解。randomized rounding的思路是先用线性规划求出一个在 <img src=\"https://www.zhihu.com/equation?tex=%5B0%2C1%5D%5En\" alt=\"[0,1]^n\" eeimg=\"1\"/> 上的连续解，然后对于每一个解出来的变量 <img src=\"https://www.zhihu.com/equation?tex=%5Coverset%7B%5Csim%7D%7Bx_i%7D\" alt=\"\\overset{\\sim}{x_i}\" eeimg=\"1\"/> , 以 <img src=\"https://www.zhihu.com/equation?tex=%5Coverset%7B%5Csim%7D%7Bx_i%7D\" alt=\"\\overset{\\sim}{x_i}\" eeimg=\"1\"/> 的概率将 <img src=\"https://www.zhihu.com/equation?tex=x_i\" alt=\"x_i\" eeimg=\"1\"/> 设为1，用 <img src=\"https://www.zhihu.com/equation?tex=1-%5Coverset%7B%5Csim%7D%7Bx_i%7D\" alt=\"1-\\overset{\\sim}{x_i}\" eeimg=\"1\"/> 的概率将其设为零。在这本书里你可以看到，使用这种方法可以在一些np-hard的问题上得到不错的近似解。 </p><hr/><p data-pid=\"Iak-Bq7w\">除此之外，这本书还介绍了一些非常实用的降低算法成本的方法。这里算法成本可能不止是时间复杂度，也可能是space comlexity（空间复杂度）、communication complexity（通信复杂度）等等。这些成本过高的话都会在现实应用中造成瓶颈。</p><p data-pid=\"6pNKrhnu\">一种可能的思路叫做fingerprinting（原谅我不知道怎么翻译）。这里我举一个比较简单的例子让大家管中窥豹一下。</p><p data-pid=\"3oaVYtVX\">假设我们有两个字符串A,B，他们的长度为n，假设n非常非常大。两个人分别持有A,B, 他们想要确定A,B 是否相等，那么一种最直接的方法是其中一人将自己的字符发送给对方，于是需要n个比特的通信成本，在一些通信成本较高的场景下这可能不是很现实。 </p><p data-pid=\"7SYAL7WA\">但是很多时候并不需要这样，你可以设计出一个<b>随机函数</b>f, 将A,B 转换成长度为b的字符串A‘，B‘。这里面往往b会比n小得多。 f的特点是如果A=B ， 那么 <img src=\"https://www.zhihu.com/equation?tex=f%28A%29+%3D+f%28B%29\" alt=\"f(A) = f(B)\" eeimg=\"1\"/> 。 如果 <img src=\"https://www.zhihu.com/equation?tex=A%5Cneq+B\" alt=\"A\\neq B\" eeimg=\"1\"/> , 则大概率 <img src=\"https://www.zhihu.com/equation?tex=f%28A%29%5Cneq+f%28B%29\" alt=\"f(A)\\neq f(B)\" eeimg=\"1\"/> 。</p><p data-pid=\"1vsaR2r9\">那么我们在比较A，B字符串的时候，只需要寄出一个长度为b的字符串好了。这样通信成本会低很多</p><p data-pid=\"p0vLkfXE\">这里我们能看到fingerprinting这个名字的由来。指纹肯定不能包含一个人所有的信息，但却足够将一个人和其他人分别开来，这也是为什么犯罪现场可以拿指纹当证据的重要原因。在我们的算法中A‘，B‘相对于A，B就起到了类似的作用。</p><p data-pid=\"FrGUNvqe\">这样类似的技巧还有很多，还有一些非常有名的例子有polynomial identity testing(用来判断两个多项式是否相等）matrix multiplication testing（判定A是否等于BC，这里A,B,C都是非常大的矩阵）。这些我有时间再更新，或许会为此专门再写一篇文章。 </p><hr/><p data-pid=\"xwuhyLPI\">书里还从cs的角度介绍了一些比较实用的概率知识。</p><p data-pid=\"2K9Rw6fE\">书里涉及了一些基础的concentration inequality（集中不等式），这些知识对于ml也非常重要。但是内容还是稍微有点浅，建议辅以一些统计学/概率书籍进行学习。而且网上也有很多不错的lecture notes。</p><p data-pid=\"ig51kMmZ\">书里还讲了一些图上的random walk（随机游走）。大名鼎鼎的pagerank就是以次为基础的，而且这个还可以应用在很多重要的任务上：比如clustering，minimum cut等等。 </p><hr/><p data-pid=\"OmLHiN5O\">我还很喜欢这本书的一点是作者在努力告诉你好的算法是什么样子的。 </p><p data-pid=\"sOBYCPtr\">这本书，还有我教这门课的老师，都在强调：<b>好的算法很多时候都是像奥卡姆剃刀一样简洁的。</b></p><p data-pid=\"Omk__x_C\">你读paper很多时候能看见带着各种各样公式的看起来很nb的算法，但是实际上他们的贡献并没有你想象的那么大。 </p><p data-pid=\"DEGKC1-t\">而最好的算法，就应该尽量像我上面写的randomized rounding和fingerprinting那样，<b>简洁清楚却不trivial</b>。因为清楚，所以学术界的人能够清楚地看见算法背后的idea并对之进行推广改进。而在现实生活中，也因为其简洁而适用范围广。 </p><p data-pid=\"E8z7-PmE\">相反，那些过度复杂的算法，既不能给学术界足够的启发，也因为可能包含太多太多的假设而没有办法应用在现实生活中。</p><p data-pid=\"vw-OBrkG\">我觉得读了这本书，哪怕你什么都没记住，但能够扭转自己那种“复杂的就是nb的“的错误观念也是非常值得的。</p><p data-pid=\"K2mfk5Yc\">-----------------------------------------------------------------------------------------------</p><p data-pid=\"yVdAx1Iv\">我就写到这里了，剩下的大家自己去体会吧。</p><p data-pid=\"3ueGDl0c\">愿大家学业工作顺利。 <br/> <br/> </p>",
            "excerpt": "我推荐这一本Randomized Algorithms，作者是 Rajeev Motwani 和 Prabhakar Raghavan，两个算法大牛 。私认为这本书算是学完算法导论之后一个不错的进阶。 我接下来会简单讲一些这本书涉及的内容，以及我推荐的原因。 [图片] 接触了传统的deterministic algorithm（ 确定性算法）之后，随机算法是非常自然的下一步。我们知道相当多重要的问题都是np-hard的，也就是说研究出多项式的确定性算法是一件最起码现在看来遥遥无期的事情。面对这…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 1,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-a0a2ccfda6ddbc443d9bed406750935b_720w.jpg?source=7e7ef6e2",
                        "width": 588,
                        "height": 878,
                        "token": "v2-a0a2ccfda6ddbc443d9bed406750935b",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxjauvrrCCDdsacEkgIlCgk0NjE2OTc2ODESCjIzNzM4ODUyNzQYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-03-04T15:30:55+08:00"
    },
    {
        "content": {
            "id": 248031703,
            "title": "算法数据结构 | 三个步骤完成强连通分量分解的Kosaraju算法",
            "type": "article",
            "excerpt_title": "强连通分量分解的Kosaraju算法 今天是 算法数据结构专题的第35篇文章，我们来聊聊图论当中的强连通分量分解的Tarjan算法。Kosaraju算法一看这个名字很奇怪就可以猜到它也是一个根据人名起的算法，它的发明人是S. Rao Kosaraju，这是一个在图论当中非常著名的算法，可以用来拆分 有向图当中的强连通分量。背景知识这里有两个关键词，一个是有向图，另外一个是强连通分量。有向图是它的使用范围，我们只能使用在有向图当中。对于无…",
            "url": "https://zhuanlan.zhihu.com/p/248031703",
            "image_url": "https://picx.zhimg.com/v2-7008ab5b023f82994ba74912bb25f81d_r.jpg?source=172ae18b",
            "created": 1600222343,
            "updated": 1600222343,
            "author": {
                "id": "f9e3a3c3a22609a6d5d73968a95a59f1",
                "url_token": "coderliangt",
                "name": "梁唐",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-6c614f6e64bf5049ee8f0d7ef2c5d106_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-6c614f6e64bf5049ee8f0d7ef2c5d106.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/f9e3a3c3a22609a6d5d73968a95a59f1",
                "user_type": "people",
                "headline": "自学AI绘画中，公众号：Ai绘画梁",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"Hib9nbNU\">强连通分量分解的Kosaraju算法</p><p data-pid=\"m0cs7fyH\">今天是<b>算法数据结构专题</b>的第35篇文章，我们来聊聊图论当中的强连通分量分解的Tarjan算法。</p><p data-pid=\"EmhMRbQE\">Kosaraju算法一看这个名字很奇怪就可以猜到它也是一个根据人名起的算法，它的发明人是S. Rao Kosaraju，这是一个在图论当中非常著名的算法，可以用来拆分<b>有向图当中的强连通分量</b>。</p><h2><b>背景知识</b></h2><p data-pid=\"JGWiEqFw\">这里有两个关键词，一个是有向图，另外一个是强连通分量。有向图是它的使用范围，我们只能使用在有向图当中。对于无向图其实也存在强连通分量这个概念，但由于无向图的连通性非常强，只需要用一个集合维护就可以知道连通的情况，所以也没有必要引入一些算法。</p><p data-pid=\"mY-XrEQ6\">有向图我们都了解，那么什么叫做强连通分量呢？强连通分量的英文是strongly connected components。这是一个很直白的翻译，要理解它我们首先需要理解强连通的概念。在有向图当中，如果两个点之间<b>彼此存在一条路径相连</b>，那么我们称这两个点强连通。那么推广一下，如果一张图当中的<b>一个部分中的每两个点都连通</b>，那么这个部分就称为强连通分量。</p><p data-pid=\"Fa1ISXsE\">强连通分量一般是一张完整的图的一个部分，比如下面这张图当中的{1, 2, 3, 4}节点就可以被看成是一个强连通分量。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5799eabb0f37368506660fb2b51cb907_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"201\" class=\"content_image\" width=\"320\" data-original-token=\"v2-d06f12cc72cfc159167a0e809c440050\"/></figure><p data-pid=\"na2jlaZf\">其实求解强连通分量的算法并不止一种，除了Kosaraju之外还有大名鼎鼎的Tarjan算法可以用来求解。但相比Tarjan算法，Kosaraju算法更加直观，更加容易理解。</p><h2><b>算法原理</b></h2><p data-pid=\"tWTKdZBA\">Kosaraju算法的原理非常简单，简单到<b>只有三个步骤</b>：</p><ol><li data-pid=\"ztsUlKtl\">我们通过<b>后序遍历</b>的方式遍历整个有向图，并且维护每个点的出栈顺序</li><li data-pid=\"mOCe6vTM\">我们将有向图反向，根据出栈顺序从大到小再次遍历反向图</li><li data-pid=\"fk7YrBWL\">对于点u来说，在遍历反向图时所有能够到达的v都和u在一个强连通分量当中</li></ol><p data-pid=\"pzz3fWX6\">怎么样，是不是很简单？</p><p data-pid=\"Ym-XxGR9\">下面我们来详细阐述一下细节，首先后序遍历和维护出栈顺序是一码事。也就是在递归的过程当中当我们遍历完了u这个节点所有连通的点之后，再把u加入序列。其实也就是<b>u在递归出栈的时候才会被加入序列</b>，那么序列当中存储的也就是每个点的出栈顺序。</p><p data-pid=\"Sro6zPTz\">这里我用一小段代码演示一下，看完也就明白了。</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">popped</span> <span class=\"o\">=</span> <span class=\"p\">[]</span> <span class=\"c1\"># 存储出栈节点</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">):</span>\n    <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">Graph</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]:</span>\n        <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n        <span class=\"n\">popped</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n</code></pre></div><p data-pid=\"Lrwpg0fq\">我们在访问完了所有的v之后再把u加入序列，这也就是后序遍历，和二叉树的后序遍历是类似的。</p><p data-pid=\"bVaoMUO3\">反向图也很好理解，由于我们求解的范围是有向图，如果原图当中存在一条边从u指向v，那么反向图当中就会有一条边从v指向u。也就是把所有的边都调转反向。</p><p data-pid=\"BfH6A48d\">我们用上面的图举个例子，对于原图来说，它的出栈顺序我们用红色笔标出。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-46ee9279437377ad002475e85e23d92d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1562\" data-rawheight=\"866\" class=\"origin_image zh-lightbox-thumb\" width=\"1562\" data-original=\"https://pic2.zhimg.com/v2-46ee9279437377ad002475e85e23d92d_r.jpg\" data-original-token=\"v2-682f81be2fb73aac24652f94b4ad9b74\"/></figure><p data-pid=\"HZZiVH5P\">也就是[6, 4, 2, 5, 3, 1]，我们按照出栈顺序<b>从大到小排序</b>，也就是将它反序一下，得到[1, 3, 5, 2, 4, 6]。1是第一个，也就是最后一个出栈的，也意味着1是遍历的起点。</p><p data-pid=\"XpNCWFbV\">我们将它反向之后可以得到：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-15e39fd214d8bc91ba1e7b7b940fb702_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1526\" data-rawheight=\"772\" class=\"origin_image zh-lightbox-thumb\" width=\"1526\" data-original=\"https://pic3.zhimg.com/v2-15e39fd214d8bc91ba1e7b7b940fb702_r.jpg\" data-original-token=\"v2-27f5d6769f2d90c748d006e5eda5a520\"/></figure><p data-pid=\"617XYIyK\">我们再次从1出发可以遍历到2，3， 4，说明{1, 2, 3, 4}是一个强连通分量。</p><p data-pid=\"L7Et0Wpd\">怎么样，整个过程是不是非常简单？</p><p data-pid=\"BwDmS75P\">我们将这段逻辑用代码实现，也并不会很复杂。</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n<span class=\"n\">graph</span><span class=\"p\">,</span> <span class=\"n\">rgraph</span> <span class=\"o\">=</span> <span class=\"p\">[[]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)],</span> <span class=\"p\">[[]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n<span class=\"n\">used</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">False</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n<span class=\"n\">popped</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n\n<span class=\"c1\"># 建图</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_edge</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">):</span>\n    <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"n\">rgraph</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># 正向遍历</span>\n<span class=\"k\">def</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">):</span>\n    <span class=\"n\">used</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n    <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">graph</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">used</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]:</span>\n            <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n    <span class=\"n\">popped</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># 反向遍历</span>\n<span class=\"k\">def</span> <span class=\"nf\">rdfs</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">scc</span><span class=\"p\">):</span>\n    <span class=\"n\">used</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">True</span>\n    <span class=\"n\">scc</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">rgraph</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">used</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]:</span>\n            <span class=\"n\">rdfs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">scc</span><span class=\"p\">)</span>\n            \n<span class=\"c1\"># 建图，测试数据         </span>\n<span class=\"k\">def</span> <span class=\"nf\">build_graph</span><span class=\"p\">():</span>\n    <span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n    <span class=\"n\">add_edge</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&#34;__main__&#34;</span><span class=\"p\">:</span>\n    <span class=\"n\">build_graph</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">N</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">used</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n            <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n\n    <span class=\"n\">used</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"bp\">False</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)]</span>\n    <span class=\"c1\"># 将第一次dfs出栈顺序反向</span>\n    <span class=\"n\">popped</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">popped</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">used</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]:</span>\n            <span class=\"n\">scc</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"n\">rdfs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">scc</span><span class=\"p\">)</span>\n            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">scc</span><span class=\"p\">)</span>\n</code></pre></div><h2><b>思考</b></h2><p data-pid=\"WSv-c6Vs\">算法讲完了，代码也写了，但是并没有结束，仍然有一个很大的疑惑没有解开。算法的原理很简单，很容易学会，但问题是<b>为什么这样做就是正确的呢</b>？这其中的原理是什么呢？我们似乎仍然没有弄得非常清楚。</p><p data-pid=\"6MF4R8K3\">这里面的原理其实很简单，我们来思考一下，如果我们在正向dfs的时候，u点出现在了v点的后面，也就是u点后于v点出栈。有两种可能，<b>一种可能是u点可以连通到v点，说明u是v的上游</b>。<b>还有一种可能是u不能连通到v</b>，说明图被分割成了多个部分。对于第二种情况我们先不考虑，因为这时候u和v一定不在一个连通分量里。对于第一种情况，u是v的上游，说明u可以连通到v。</p><p data-pid=\"3FiXv0mp\">这时候，我们将图反向，如果我们从u还可以访问到v，那说明了什么？很明显，<b>说明了在正向图当中v也有一条路径连向u</b>，不然反向之后u怎么连通到v呢？所以，u和v显然是一个强连通分量当中的一个部分。我们再把这个结论推广，所有u可以访问到的，第一次遍历时在它之前出栈的点，都在一个强连通分量当中。</p><p data-pid=\"7Neya-6i\">如果你能理解了这一点，那么整个算法对你来说也就豁然开朗了，相信剩下的细节也都不足为虑了。</p><p data-pid=\"HfE31Obg\">今天的文章到这里就结束了，如果喜欢本文的话，请来一波<b>素质三连</b>，给我一点支持吧（<b>关注、转发、点赞</b>）。</p><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzUyMTM5OTM2NA%3D%3D%26mid%3D2247487212%26idx%3D2%26sn%3D31afabe8dc942566fbd0dded6162eeee%26chksm%3Df9daf3c7cead7ad133edaa1f5c30660e78c4730c5be240391d12043ff1697191d6919f1dc259%26token%3D1406902026%26lang%3Dzh_CN%23rd\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-619e6679428710e2d8763cc3d0c638db_ipico.jpg\" data-image-width=\"338\" data-image-height=\"338\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">算法数据结构 | 三个步骤完成强连通分量分解的Kosaraju算法</a><p data-pid=\"A8lhLl6J\">- END -</p>",
            "voteup_count": 28,
            "column": {
                "id": "techflow",
                "type": "column",
                "url_token": "techflow",
                "title": "TechFlow",
                "url": "https://zhuanlan.zhihu.com/techflow",
                "created": 1576997739,
                "updated": 1591323216,
                "description": "日拱一卒，功不唐捐\n深入浅出的文章，带你遨游算法技术的海洋",
                "image_url": "https://picx.zhimg.com/v2-14df58f51a2228d973a3ccd52fb3fb3e_720w.jpg?source=d16d100b"
            },
            "comment_count": 1
        },
        "created": "2020-09-16T10:12:23+08:00"
    },
    {
        "content": {
            "id": 636256231,
            "title": "编译器的设计思路：以TypeScript Compiler为例",
            "type": "article",
            "excerpt_title": "写在最前为什么会有本专栏在我研究TypeScript源码的过程中，我发现网络上的相关资料并不充裕，而且大部分浮于表面。因此，在吸收完这些资料后（其实用不了多久），我只好通过阅读源码和理解（猜测）的方式来学习一门比较现代的编译器/Language Server的架构设计及细节实现。 在经过一段时间的沉淀后，我也产生了一些已有文档不具备的深入理解。把这些零碎的理解归纳之后发出来，我希望能让后人在学习的过程中快速掌握全貌，少走…",
            "url": "https://zhuanlan.zhihu.com/p/636256231",
            "image_url": "",
            "created": 1686466507,
            "updated": 1686467388,
            "author": {
                "id": "694bd3976bbe23063f82539ec7afdcf0",
                "url_token": "yangyifei",
                "name": "DirectorY",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/694bd3976bbe23063f82539ec7afdcf0",
                "user_type": "people",
                "headline": "五字班，对平凡的技术点写写深入剖析的文章，希望能裨益更多人",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<h2>写在最前</h2><h3>为什么会有本专栏</h3><p data-pid=\"5V1hCzQ-\">在我研究TypeScript源码的过程中，我发现网络上的相关资料并不充裕，而且大部分浮于表面。因此，在吸收完这些资料后（其实用不了多久），我只好通过阅读源码和理解（猜测）的方式来学习一门比较现代的编译器/Language Server的架构设计及细节实现。</p><p data-pid=\"hHiWr0hj\">在经过一段时间的沉淀后，我也产生了一些已有文档不具备的深入理解。把这些零碎的理解归纳之后发出来，我希望能让后人在学习的过程中快速掌握全貌，少走弯路，也算是一种对社区的贡献。</p><p data-pid=\"NpyS7BT-\">另外，我有个与之相关的兴趣项目，想要寻找拥有相同兴趣的伙伴，而将这些内容分享出来也有助于我和同样对语言实现感兴趣的伙伴找到彼此。</p><h3>一些碎碎念</h3><p data-pid=\"vtZvyrBZ\">编译器分前端和后端，而TypeScript这门语言的输出是JavaScript，因而不太涉及编译器后端（在我理解里主要是代码性能优化）的部分。TypeScript的一些精华在于其语言特性的设计，但本专栏也不会探讨为什么如此设计。将这些部分剥离，一个给定了规范又无需考虑指令重排的语言就没什么高大上的算法设计了，难点在于模块划分、概念理解、架构设计，而我个人主要关注这些部分。</p><p data-pid=\"yq0yg4c_\">我没有上过编译原理的课程，但正因为上一条所说的原因，本专栏的内容更偏工程，而与编译原理的学术探讨相关性不高。我不保证我会把一些学术性的概念说错，也可能不知某些学术概念的存在。例如，我大概知道LL(1)是什么东西，但我不知道其准确所指的范畴。</p><p data-pid=\"wjDThbTY\">我不会对已有的英文文档做翻译。</p><p data-pid=\"OnPrsJS2\">欢迎私信或评论我问问题，但作为作者，我更希望遇到一起”探讨“问题的伙伴，双方一起思考，交换理解，而非你问我答。</p><p data-pid=\"kVjuFEgt\">我无法保证私信回复/发文章的时效。</p><hr/><a href=\"https://zhuanlan.zhihu.com/p/630871173\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">TypeScript源代码相关资料及学习建议</a><p data-pid=\"a1JQVY9q\">在<a href=\"https://zhuanlan.zhihu.com/p/630871173\" class=\"internal\">TypeScript源代码相关资料及学习建议</a>中，我列了一些讲解编译器架构的文章/资料，包括：</p><ul><li data-pid=\"DfXc4CPE\">mini-typescript</li></ul><a href=\"https://link.zhihu.com/?target=https%3A//github.com/sandersn/mini-typescript%23mini-typescript\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">mini-typescript</a><p data-pid=\"JNdkdRK9\">• TypeScript Compiler Internals</p><a href=\"https://link.zhihu.com/?target=https%3A//basarat.gitbook.io/typescript/overview\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TypeScript Compiler Internals</a><p data-pid=\"Rzklo-pT\">• 官方文档（写的比较浅入浅出）</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript-Compiler-Notes/tree/main/intro\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-74f3609dbc830de1ac31ea63e6660b96_qhd.jpg\" data-image-width=\"1200\" data-image-height=\"600\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TypeScript-Compiler-Notes/intro at main · microsoft/TypeScript-Compiler-Notes</a><p data-pid=\"K-PRwZtm\">这些文章都聚焦于TypeScript Compiler是<b>怎么做的</b>，而非<b>为什么这么做</b>。这是因为这些文章的受众主要是TypeScript仓库的开发者（当然，主要是MicroSoft自家团队）和泛TypeScript生态的开发者（typescript-eslint和<a href=\"https://link.zhihu.com/?target=https%3A//gist.github.com/jakebailey/3e73c7aab4da2044a95121467aa3b4e9\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一些需要魔改tsc的项目</a>等等），而不是期望于照猫画虎从头开始设计一个编译器的人。</p><p data-pid=\"vIF4DrgA\">另一类参考资料是“编译原理”这门专业课，但编译原理的局限性也很明显：</p><p data-pid=\"WgDaHmBZ\">• 首先，大学的课程更偏重于学术性。以Stanford的<a href=\"https://link.zhihu.com/?target=https%3A//web.stanford.edu/class/cs143/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CS143</a>为例，其中大约一半的课程在讲parser（后文会讲这是什么）相关的东西，大约四分之一到三分之一的内容在讲优化输出指令。从工程上讲，对前者而言，现在的语言的语法都大差不差，除非要自创一个无可借鉴的语法，否则使用一些成熟的parser生成工具，也可以获得一个可用且性能尚佳的parser；对后者而言，TypeScript Compiler非常忠实地将TypeScript直接转译成JavaScript，因此，其转译部分的工程实现也比较简单。</p><p data-pid=\"yuc7lvne\">• 其次，编译原理一般是针对C++ like语言来讲解的，例如贵系的编原大作业<a href=\"https://link.zhihu.com/?target=https%3A//decaf-lang.github.io/minidecaf-tutorial/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">minidecaf</a>。这类语言的编译器架构与TypeScript Compiler有一些区别。</p><p data-pid=\"KnugnFPe\">总而言之，这篇文章将从“设计一个编译器”这个大问题开始，自上而下地逐级将问题拆解成子问题，以回答“为什么要这么设计”的问题，再探讨一些其它文章不讲的设计问题。难度设置上，本文假设受众是没有编译器基础的小白，因此切入点会非常浅，再逐级深化到其它文章没有探讨的设计思路问题。</p><p data-pid=\"Tzdl4KiZ\">我会以TypeScript Compiler（tsc）的架构为核心进行讲解，但会在本篇和接下来的一些文章中探讨下一些其它语言的某些设计思路，例如Python的PEG parser、rustc的一些设计。</p><hr/><p data-pid=\"L-1N9ci0\"><b>写完之后发现这篇文章写了接近10000字，有点长，如果各位读者有哪里没读明白的话欢迎指出，也欢迎分享阅读体验，我想知道这么拆解是不是够易懂了，还是仍需要讲的更慢更简单一点。</b></p><hr/><p data-pid=\"m_4WUOoa\">本文将分为两部分，第一部分探讨思路，几乎不涉及源码；第二部分则会涉及一些非常顶层的源码，但不会深入至细节，因为探讨细节的文章有不少，但<b>对自行设计编译器的帮助非常有限</b>。在第一部分的末尾我会解释其原因。</p><h2><b>Part1：如何造一个编译器？</b></h2><h3><b>编译器是做什么的</b></h3><p data-pid=\"Ufuuxz0h\">tsc主要完成两项任务：</p><p data-pid=\"ekFk-5Hv\">1. 将TypeScript代码转换成JavaScript代码</p><p data-pid=\"IsCmHgUm\">2. 检查代码中的错误</p><p data-pid=\"u5_HRw7w\">对TypeScript这样的“JavaScript补丁”而言，第一项任务非常简单，对大部分的代码，只要识别出类型声明，然后把它删掉即可。诸如enum等关键字是TypeScript提出的新概念，这些概念需要一定程度的转写，但也不是很困难。</p><p data-pid=\"Ix2QQ-z7\">主要的困难在第二点，亦即“静态检查”。所谓“静态”，即在代码被送入V8等解释器运行之前，面对着一系列写好的代码文件，不必执行这些代码（静态）便对这些代码文件的类型做检查，以确保其自洽。</p><p data-pid=\"41bvVheX\">因此，这个问题便有了雏形：输入一系列文本文件(TypeScript Code)，输出这些文本文件中包含的代码错误(Diagnostics)，（如果没错的话再）将其转换为JavaScript Code。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-513c15d1f96a77a9721773f0019bb56a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"403\" data-rawheight=\"213\" class=\"content_image\" width=\"403\" data-original-token=\"v2-14060d3a3414f267d12e4a58a6fafe9d\"/></figure><blockquote data-pid=\"l0bWwgzb\"><b>在接下来的讲解中，我会仅探讨单一文件的情况，它足以反映编译器的设计。</b></blockquote><h3><b>表征语言的结构</b></h3><p data-pid=\"ptaoWXjp\">计算机擅长处理结构化的数据，所谓“结构化”，主要体现为key-value pair和array这两种形式。在这个基础上，人们可以构建更为复杂的数据结构。数据结构，既对现实问题进行了抽象（开发者好理解好维护），又利于计算机运行的（可以设计跑得又快又对的算法）。</p><blockquote data-pid=\"5alxjMwr\"><i>GPT出现之后，计算机也能处理无结构的数据，但首先这种方式的能源效率极低（想想nvidia卖的那些显卡多少钱，电费多少钱），其次它对于比较深刻的细节仍然存在胡言乱语的可能。至少现在，为了又快又准地解决问题，尽可能设计数据结构仍然是更优的策略（可见的未来亦如此，很可能长久的未来也如此）。</i></blockquote><p data-pid=\"2s-_SlZu\">但我们的输入是一个字符串，我们能做的事情只有输入下标，输出对应位置的字符这一件事。拿着这个字符串，我们对其表征的TypeScript code的结构一无所知。</p><p data-pid=\"VfcFlr3k\">因此，要想解决上面的两个问题，编译器的第一步是提取出语言的结构，而这个结构，就是AST（Abstract Syntax Tree）。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e48bd8edee437c24a31c93dc997ca818_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb\" width=\"573\" data-original=\"https://pic1.zhimg.com/v2-e48bd8edee437c24a31c93dc997ca818_r.jpg\" data-original-token=\"v2-34e6ba387f0c0d5d2d5509061d82b81c\"/></figure><p data-pid=\"38Z5W6Tk\">编译器相关的概念也就以AST为边界划分为两部分。由代码生成AST，再对AST进行分析的部分叫做前端（frontend），而由AST输出代码的部分则叫做后端（backend）。对TypeScript而言，由于JavaScript就是其子集，因此其backend非常简单，几乎只需要去掉那些属于TypeScript结构但不属于JavaScript结构的部分即可。</p><p data-pid=\"oFJJIanA\">AST，顾名思义，它首先是个tree。换言之，整个文本形式的代码会先被转化为一个树形结构。我们以下面的代码为例：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">x</span>: <span class=\"kt\">number</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">y</span>: <span class=\"kt\">number</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"q2DBvnVV\">其会转变为如下的形式：</p><div class=\"highlight\"><pre><code class=\"language-bash\">SourceFile                        \n<span class=\"p\">|</span>-VariableStatement            // const x: <span class=\"nv\">number</span> <span class=\"o\">=</span> 1<span class=\"p\">;</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclarationList    // const x: <span class=\"nv\">number</span> <span class=\"o\">=</span> <span class=\"m\">1</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclaration      //       x: <span class=\"nv\">number</span> <span class=\"o\">=</span> <span class=\"m\">1</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier             //       x\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-NumberKeyword          //          number\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-NumericLiteral         //                   <span class=\"m\">1</span>\n<span class=\"p\">|</span>-VariableStatement            // const y: <span class=\"nv\">number</span> <span class=\"o\">=</span> <span class=\"m\">2</span> + x<span class=\"p\">;</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclarationList    // const y: <span class=\"nv\">number</span> <span class=\"o\">=</span> <span class=\"m\">2</span> + x\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclaration      //       y: <span class=\"nv\">number</span> <span class=\"o\">=</span> <span class=\"m\">2</span> + x\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier             //       y\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-NumberKeyword          //          number\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-BinaryExpression     //                   <span class=\"m\">2</span> + x\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-NumericLiteral       //                   <span class=\"m\">2</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-PlusToken            //                     +\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier           //                       x\n<span class=\"p\">|</span>-EndOfFileToken</code></pre></div><p data-pid=\"VVzybR0g\">所谓tree，其满足<b>每个子节点对应的字符串一定是父节点的子字符串</b>的条件，因而形成了树形结构。</p><p data-pid=\"hOHVHdiv\">具体来说，每个AST节点都包含如下内容：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">interface</span> <span class=\"nx\">Node</span> <span class=\"p\">{</span>\n  <span class=\"nx\">kind</span>: <span class=\"kt\">SyntaxKind</span><span class=\"p\">;</span>\n  <span class=\"nx\">begin</span>: <span class=\"kt\">number</span><span class=\"p\">;</span>\n  <span class=\"nx\">end</span>: <span class=\"kt\">number</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"66p2vSYb\">kind，即该节点的类型，即上面示例中左侧的名称，如BinaryExpression、VariableDeclaration等。</p><p data-pid=\"8icexhu8\">begin和end，即该节点在输入的TypeScript Code字符串中的开头和结尾。通过这两个数字，我们便可拿到其对应的子字符串。之所以要在整个文件的TypeScript Code坐标系下表征，则是为了利于输出报错信息。</p><p data-pid=\"Wb_hOU3X\">之所以要为不同的节点赋予不同的类型，是因为不同类型的节点包含了不一样的子节点。例如，BinaryExpression的子节点分为左侧的表达式left，右侧的表达式right和二元运算符operatorToken。</p><div class=\"highlight\"><pre><code class=\"language-text\">{                         // x + 2\n    left: Node;           // x\n    operatorToken: Node;  //   +\n    right: Node;          //     2\n}</code></pre></div><p data-pid=\"qfPo8bMH\">又比如说，子节点可以是一个list，如SourceFile的子节点是一个语句列表statements。</p><div class=\"highlight\"><pre><code class=\"language-text\">{    //               const x: number = 1;\\n const y: number = 2 + x;\n     // statements[0] const x: number = 1;\\n\n     // statements[1]                        const y: number = 2 + x;\n     statements: Node[]; \n}            </code></pre></div><p data-pid=\"uYZAd9p-\"><b>从文本到语言的结构</b></p><p data-pid=\"Jb2_mYjW\">接下来，我们需要一套算法，其将一个文本字符串转换为AST。一般来说，这分为两个步骤。</p><p data-pid=\"-KpPN-nk\">在第一步中，通过一个字符一个字符的向后读取，整个文本将会被划分成一个<code>Node[]</code>类型的列表。</p><p data-pid=\"sAht31uA\">还是照搬上面的例子：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">x</span>: <span class=\"kt\">number</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">y</span>: <span class=\"kt\">number</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"ekq8ZPpx\">经过第一步之后，则会划分成如下的列表：</p><div class=\"highlight\"><pre><code class=\"language-bash\">const\nx\n:\n<span class=\"nv\">number</span>\n<span class=\"o\">=</span>\n<span class=\"m\">1</span>\n<span class=\"p\">;</span>\nconst\ny\n:\n<span class=\"nv\">number</span>\n<span class=\"o\">=</span>\n<span class=\"m\">2</span>\n+\nx\n<span class=\"p\">;</span></code></pre></div><p data-pid=\"vE4zzgF8\">注意，这一步的产物是平级的列表，而不是分层的树形结构。</p><p data-pid=\"bbf5FhqX\">第二步以这个列表为输入，将其整理为树形结构，也就是AST。</p><p data-pid=\"T1V2Bbuy\">在tsc中，第一步的算法被抽象为<code>scanner</code>，第二步的算法被抽象为<code>parser</code>。</p><p data-pid=\"pSsuRUL2\">值得一提的是，scanner和parser并非上文所述的先后顺序，即先调用scanner得到一个列表，再应用parser得到AST。实际上，parser一边调用scanner获得下一个Node，一边进行AST的建造。</p><h3><b>Syntactic analysis</b></h3><p data-pid=\"oxwfztxW\">上面所述的两步需要遵循某个规则，这个规则由语言的spec所规定。例如，<code>const let x = 3;</code>不是一个合法的语句，编译器不知道如何生成AST，自然而然也不会生成AST。因此，编译器是一边检查代码是否符合生成AST的规则，一边依照这个规则生成AST节点。这个检查便叫做语法检查（syntax check），而其充分必要条件便是成功生成了AST。</p><h3><b>定义语法并自动生成parser</b></h3><p data-pid=\"k0yQQxNj\">Syntactic analysis和AST生成的部分，便是一开始提到的编译原理课会花一半时间讲解的部分。这一部分的内容学术性比较浓厚，但工程实践上可以不需要知道，至少一开始完全可以绕开它。</p><p data-pid=\"Z39lqjqZ\">本文在介绍完scanner和parser后，<b>不会继续深入</b>。这是因为工程上，人们可以以某种形式定义一个语法文件后执行一段程序，自动生成parser的代码，再将这些代码贴到自己的codebase中即可。又由于常见语言的语法大差不差，对着别人给出的语法文件照猫画虎一般而言足矣。</p><p data-pid=\"03mO93MO\">一个比较常用的工具是<a href=\"https://link.zhihu.com/?target=https%3A//github.com/antlr/antlr4/blob/master/doc/index.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Antlr4</a>，其中的lexer相当于scanner，parser便是parser，但lexer和parser是自动生成的，从工程应用上讲不需要知道发生了什么。</p><p data-pid=\"YfpcM9P7\">从<a href=\"https://link.zhihu.com/?target=https%3A//peps.python.org/pep-0617/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Python3.9</a>起，其采用了<a href=\"https://link.zhihu.com/?target=https%3A//docs.python.org/3/reference/grammar.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一类叫做PEG的语法</a>来自动生成cpython的parser。Python的创始人Guido<a href=\"https://link.zhihu.com/?target=https%3A//medium.com/%40gvanrossum_83706/peg-parsing-series-de5d41b2ed60\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">写了一个文章系列</a>来讲解这个叫做<a href=\"https://link.zhihu.com/?target=https%3A//github.com/we-like-parsers/pegen\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">pegen</a>的库的设计。</p><p data-pid=\"Awcdigtt\">总之，从工程视角而言，有许多既可靠又能生成良好性能的parser的工具可用，无需深入了解其如何生成parser以及所生成代码的架构便足以应用了。</p><h3><b>还要检查什么？</b></h3><p data-pid=\"k4EqypLE\">首先，让我们来总结一下当前整个编译器的架构：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f0aceaa112c3913d06146ca3aa372dc5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"743\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb\" width=\"743\" data-original=\"https://pic2.zhimg.com/v2-f0aceaa112c3913d06146ca3aa372dc5_r.jpg\" data-original-token=\"v2-2cde21569069f69c88f8b865123c0a01\"/></figure><p data-pid=\"jPQsn9YG\">通过引入Scanner和Parser，我们能够将TypeScript Code转化为AST。在生成AST的过程中，代码是否符合规定的AST结构也会被一并检查，因此这一步叫做Syntactic analysis。</p><p data-pid=\"LpPwDZqf\">在此之后，编译器仍然会做一系列检查。在TypeScript里，（我自己）大致将其分为两类。</p><p data-pid=\"8WOofTKe\">第一类，参考下面两个例子：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">a</span>: <span class=\"kt\">number</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"oHBR1eam\">在tsc里，其会报告<code>Block-scoped variable &#39;a&#39; used before its declaration</code>.</p><p data-pid=\"VAj1b6jU\">值得注意的是，其的一个变种：</p><div class=\"highlight\"><pre><code class=\"language-text\">a = 3;</code></pre></div><p data-pid=\"ZKxdeVE5\">在tsc里，其会报告<code>Cannot find name &#39;a&#39;</code>.</p><p data-pid=\"w9oB6DYp\">删除了一行代码，tsc报告了不同的错误，证明tsc有能力分辨出不同的不符合JavaScript/TypeScript规范的代码。对于这类上下文结构上的检查，我大致都归结为一类。这类问题的特点就是鸡零狗碎，也谈不上什么算法可言，需要case by case的手写大型决策树（if/else）来依次处理。</p><p data-pid=\"DGzcJ5xq\">第二类检查，就是所谓<b>Type</b>Script的类型检查：</p><div class=\"highlight\"><pre><code class=\"language-text\">let x: number;\nx = &#39;abc&#39;;</code></pre></div><p data-pid=\"aUYtLy4L\">这两类问题都没有被归属于Syntactic analysis，原因在于，<b>它们完全符合AST的规则</b>，单独拎出来每一行（每一个statement），都是完全正确的。因此，直到生成AST为止，tsc不会发现任何的错误。</p><h3><b>树形结构的限制</b></h3><p data-pid=\"Of-I8rJH\">为了更进一步的阐明Syntactic analysis的局限性，请看如下几行代码的例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">const x = 1;\nfunction foo() {\n  const y = 2;\n  const z = x + y;\n}</code></pre></div><p data-pid=\"ekeCLbPL\">相应的，我们得到了如下的AST</p><div class=\"highlight\"><pre><code class=\"language-bash\">SourceFile\n<span class=\"p\">|</span>-VariableStatement            // const <span class=\"nv\">x</span> <span class=\"o\">=</span> 1<span class=\"p\">;</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclarationList    // const <span class=\"nv\">x</span> <span class=\"o\">=</span> <span class=\"m\">1</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclaration      //       <span class=\"nv\">x</span> <span class=\"o\">=</span> <span class=\"m\">1</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier             //       x\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-NumericLiteral         //           <span class=\"m\">1</span>\n<span class=\"p\">|</span>-FunctionDeclaration          // <span class=\"k\">function</span> foo <span class=\"o\">{}</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier                 //          foo\n<span class=\"p\">|</span> <span class=\"p\">|</span>-Block                      //              <span class=\"o\">{}</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableStatement        // const <span class=\"nv\">y</span> <span class=\"o\">=</span> 2<span class=\"p\">;</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclarationList// const <span class=\"nv\">y</span> <span class=\"o\">=</span> <span class=\"m\">2</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclaration  //       <span class=\"nv\">y</span> <span class=\"o\">=</span> <span class=\"m\">2</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier         //       y\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-NumericLiteral     //           <span class=\"m\">2</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableStatement        // const <span class=\"nv\">z</span> <span class=\"o\">=</span> x + y<span class=\"p\">;</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclarationList// const <span class=\"nv\">z</span> <span class=\"o\">=</span> x + y\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclaration  //       <span class=\"nv\">z</span> <span class=\"o\">=</span> x + y\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier         //       z\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-BinaryExpression   //           x + y\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier       //           x\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-PlusToken        //             +\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier       //               y\n<span class=\"p\">|</span>-EndOfFileToken</code></pre></div><p data-pid=\"NdVxqy-n\">我们首先关注<code>z = x + y</code>这句。假设我们想要检查这句话的正确性，我们大致上会想要检查几个问题：</p><p data-pid=\"334ErTGS\">1. x、y声明没有？</p><p data-pid=\"Yr53pWtD\">2. x、y是什么类型？它们可以使用加法吗？</p><p data-pid=\"7YM9laN7\">3. x + y的结果是什么类型？既然要赋值给z，那么z的类型能否与其类型兼容？</p><p data-pid=\"zZH6adFF\">前两个问题都指向了同一个问题：</p><p data-pid=\"rGNGR7Zb\">x、y在哪里声明？我们如何找到它？</p><p data-pid=\"moP-UuQm\">于是，我们回去看AST，然后发现一个大问题：</p><p data-pid=\"uPTT-iaP\"><code>const z = x + y</code>和<code>const y = 2</code>是兄弟节点，<code>const z = x + y</code>和<code>const x = 1</code>也位于不同的子树上，而且在树里的深度也不一致。</p><p data-pid=\"FNylEwwC\">核心在于<b>不同的子树</b>。</p><p data-pid=\"n_ZknzFf\">本质上讲，树形结构建立在父节点和子节点之间拥有很强的某种关联的假设之上，这让其非常有利于上溯、下溯（一般用于遍历），但不利于建立子树和子树之间的关联。如果想要找到某一子树相关的所有子树，那么就只有自顶向下，从树根开始做一次搜索（也就是遍历一遍树）的途径，非常昂贵。</p><p data-pid=\"qXGFAGjQ\">好在现在常见的编程语言都有另一层更强的先验可用，即作用域规则（Scope Rule）。</p><p data-pid=\"r3sDethb\"><b>Scope Rule</b></p><p data-pid=\"7dV1_ajg\">在代码执行过程中，其会在Scope中声明一系列变量，一旦离开Scope，Scope失效，某个变量x便失效，且如果x所存储的值不再被使用，其会被析构（C++/Rust）或是被垃圾回收（Python/Java）。</p><p data-pid=\"M2LYSKC8\">而Scope Rule在约束一件事情：我们现在声明了一个变量x，这个变量x什么时候是可见的？什么时候x这个变量就不可用了？这个Scope的范围到底是多大？这里只举两类常见的Scope Rule：Block Rule，LEGB Rule。</p><p data-pid=\"e8Bw_xyN\"><b>Block Scope/LEGB Scope</b></p><p data-pid=\"UZRZ2-sD\">Block Rule，顾名思义，我们以在当前这个Block声明了一个变量x，那么只有这个Block中x才可见，可用。一旦离开了这个block，所有的变量便不可用了。常见的Block以一组大括号来表示（C++/Rust）。</p><p data-pid=\"oALXOz-O\">这里提及LEGB Rule，不深入探讨，主要是想强调其以一个函数为Scope，而非以某个大括号作为Scope。</p><p data-pid=\"lvezGzCB\">区别在哪？在于两个非常常见的程序结构：循环和分支。我们便以循环举例：</p><div class=\"highlight\"><pre><code class=\"language-python\"><span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span>  <span class=\"c1\"># 9</span></code></pre></div><p data-pid=\"L4yNPm1O\">上例的Python代码是可用的，但下例的C++代码是不可用的：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">void</span> <span class=\"nf\">foo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"c1\">// error\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"MQUJARmN\">之所以这个代码在Python中可行，是因为只要函数foo没有执行完成，新声明的j都是可用的，哪怕其来自于某个循环体或者分支。而在C++中，每次循环结束后j就已经被释放了，因此每次执行新的循环，j都被重新声明一次。</p><p data-pid=\"bsjsGrCV\">那么JavaScript呢？它偏偏两种Scope Rule都有。var的Scope Rule类似于Python，而let/const的Scope Rule则是Block Scope。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">j</span><span class=\"p\">);</span> <span class=\"c1\">// 9\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">bar</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">j</span><span class=\"p\">);</span> <span class=\"c1\">// error\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><h3><b>嵌套Scope</b></h3><p data-pid=\"YKMxLvPA\">有了Scope Rule之后，我们知道，如果我们在某处声明了一个变量，那么<b>仅在当前的Scope中，它才（对后续的引用而言）可见。一旦当前的Scope结束，则其不可见。</b>如果当前的Scope有内嵌的子Scope，则取决于子Scope有没有声明同名变量，<b>如果有同名变量，则其不可见。如果没有，则可以访问当前Scope声明的变量。</b></p><p data-pid=\"lpleTISI\">注意这一约束，如以下的例子：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">foo</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">10</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">j</span><span class=\"p\">);</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"nx\">i</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">j</span><span class=\"p\">);</span> <span class=\"c1\">// error\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"upyYCUkC\">原则上，在for循环内，console.log能够访问到来自于外部的j，但实际上其会报错。</p><blockquote data-pid=\"_dLJ4mXR\"><i>tsc其实检查不出来这个错，但V8会报错，这涉及到一个叫做Temporal Dead Zone的检测，而TypeScript出于各种原因和tradeoff考量并没有将其做的过于细致，好在一般程序员也很难写出这样的代码。参见<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/issues/54343\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这个issue</a>。</i></blockquote><h3><b>基于Scope的查表</b></h3><p data-pid=\"9_y0Iel7\">以上的探讨稍微有点细了，让我们回到主线。有了Scope Rule后，我们便可以将来自于不同子树的代码以一种较低的成本关联起来。</p><p data-pid=\"6F7hPMft\">我们再回头看前文举的例子：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">foo() {</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">z</span> <span class=\"o\">=</span> <span class=\"nx\">x</span> <span class=\"o\">+</span> <span class=\"nx\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-bash\">SourceFile\n<span class=\"p\">|</span>-VariableStatement            // const <span class=\"nv\">x</span> <span class=\"o\">=</span> 1<span class=\"p\">;</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclarationList    // const <span class=\"nv\">x</span> <span class=\"o\">=</span> <span class=\"m\">1</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclaration      //       <span class=\"nv\">x</span> <span class=\"o\">=</span> <span class=\"m\">1</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier             //       x\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-NumericLiteral         //           <span class=\"m\">1</span>\n<span class=\"p\">|</span>-FunctionDeclaration          // <span class=\"k\">function</span> foo <span class=\"o\">{}</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier                 //          foo\n<span class=\"p\">|</span> <span class=\"p\">|</span>-Block                      //              <span class=\"o\">{}</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableStatement        // const <span class=\"nv\">y</span> <span class=\"o\">=</span> 2<span class=\"p\">;</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclarationList// const <span class=\"nv\">y</span> <span class=\"o\">=</span> <span class=\"m\">2</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclaration  //       <span class=\"nv\">y</span> <span class=\"o\">=</span> <span class=\"m\">2</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier         //       y\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-NumericLiteral     //           <span class=\"m\">2</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableStatement        // const <span class=\"nv\">z</span> <span class=\"o\">=</span> x + y<span class=\"p\">;</span>\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclarationList// const <span class=\"nv\">z</span> <span class=\"o\">=</span> x + y\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-VariableDeclaration  //       <span class=\"nv\">z</span> <span class=\"o\">=</span> x + y\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier         //       z\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-BinaryExpression   //           x + y\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier       //           x\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-PlusToken        //             +\n<span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span> <span class=\"p\">|</span>-Identifier       //               y\n<span class=\"p\">|</span>-EndOfFileToken</code></pre></div><p data-pid=\"dbRzCW__\"><code>const z = x + y</code>和<code>const y = 2</code>的公共祖先节点是Block<code>{ const y = 2; const z = x + y }</code>，这是个Block，恰好对应着Block Scope。</p><p data-pid=\"unOmjvuG\"><code>const z = x + y</code>和<code>const x = 1</code>的公共祖先节点是SourceFile，对应File Scope，我们完全可以将整个文件看成一个最顶级的block，则其也是一个Block Scope。</p><p data-pid=\"Y6eEJ0t4\">接下来的思路就很直观了：</p><p data-pid=\"U_HKHUZi\">• 对Block这一类的AST节点做特殊处理，对所有该类型的Node，为其加入一个key-value pair作为要查询的表即可。</p><p data-pid=\"GF_2TguJ\">• 每当AST中找到一个变量的<b>声明</b>，便以该变量的名称作为key，将该变量对应的AST节点存入表中。</p><p data-pid=\"ylGcN2wz\">• 如果新声明的变量试图写入表中时，发现该变量名已经在表中，这说明这个scope已经有了同名的变量，报错（实际的逻辑会比这个更复杂）。</p><p data-pid=\"TcpeVUzC\">• 当找到一个变量引用时（即没有用<code>var/const/let</code>开头的对变量的使用，例如<code>z = x + y</code>中的x和y），去这个表中查找相应的声明。查找的方式是：</p><p data-pid=\"qdoPIfSM\">￮ 以变量节点（Identifier）为起始，沿着AST逐级查看父节点，如果父节点是block，则获得其所存储的变量表。</p><p data-pid=\"Swf0Vn6s\">￮ 查看变量表中是否有和自己同名的声明，如果有，则找到了相应的声明。</p><p data-pid=\"IDQL4Bgt\">￮ 如果没有，继续沿着AST向上查看父节点，并查询对应的变量表，直到找到声明或者什么也找不到。</p><h3><b>Symbol, Node, Symbol Table</b></h3><p data-pid=\"XUr9XMy3\">当我们把一个变量的声明和所有的引用关联起来之时，我们便有了符号（Symbol）的概念。Symbol的声明一定对应于一个AST节点，且由于我们不允许同一个scope中有多个同名变量，我们可以确保其声明有且仅有一个节点。Symbol还对应于一系列的引用该变量的AST节点。</p><p data-pid=\"Gpwz7oLc\">这一个声明节点和一系列引用节点具备一些公共的特性，这使得我们会引入一个新的数据结构，来存储这些公共特性。例如，<b>节点的声明和节点的引用一定具备同样的类型</b>。因此我们一旦知道了声明的类型，便可以将其存到Symbol中。</p><p data-pid=\"dr_pVccS\">同时，每个变量引用和变量声明的节点都会存储一份该Symbol，以便查询。  </p><hr/><p data-pid=\"NKnPNwZr\">接下来，我们借这个机会来梳理一下常见的两个概念，Node和Symbol。</p><p data-pid=\"yeIdqVi9\">前文一般称呼为AST节点，实际上在tsc中，这个概念就叫做Node，Node就是一个AST节点，它将整个代码文本以树形结构呈现，并为每一个子字符串赋予了一个类型。</p><p data-pid=\"cNvmlUzW\">而Symbol则是子树和子树之间的“飞线”。一个变量的声明和变量的引用位于不同的子树，因而我们需要额外的机制来将其关联起来。在位于不同子树上的同名变量被关联起来了以后，其“关联”已经没办法用树形结构来表述，因此tsc使用了Symbol的概念来表征一系列关联在一起的Node。它们拥有共同的特性，因此只要解决了一个，其它的便可以直接获得。举个例子，在TypeScript里，对某个变量使用Go To Reference之后，同一个Scope下其它位置的同一变量，Go To Reference都是立即结果的。这是因为对同一个Symbol的特性查询已经被缓存的缘故。</p><p data-pid=\"OwqybbbK\">上一节所说的，归属于Scope的由变量名映射到Symbol的表，就是Symbol Table。</p><h3><b>Binder</b></h3><p data-pid=\"ERC_z3Ww\">在tsc中，binder负责将变量声明变成Symbol存入Symbol Table这一步。其遍历由Parser生成的AST，并在遇到拥有Scope的Node时，为其建立Symbol Table，并将该Symbol Table置入某个全局变量container中。当遍历到子树中的变量声明时，相应的变量名会被创建对应的Symbol，然后存入当前Scope的Symbol Table，亦即全局变量container所对应的Symbol Table中。</p><p data-pid=\"3G7rFhLM\">对于不是声明类型的Node，Binder不会处理，这是后面要提到的Checker的工作。</p><h3><b>resolveName()</b></h3><p data-pid=\"95ZrG5fP\">resolveName()是Checker中的一个函数，其输入参数是一个表示变量名的Node，此后该函数会从该Node开始上溯，直到找到其声明，并将当前Node绑定到相应的Symbol上。</p><h3><b>Program</b></h3><p data-pid=\"IxAr38fu\">让我们再将视线收回到整个编译器的全景。我们可以把整个编译器分为四个环节。到这里为止，我们了解了四个环节中的前两个，而代码生成的部分没什么好讲的。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d7a28ab6a49cc3e645d418f6eab64c32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"743\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb\" width=\"743\" data-original=\"https://pic3.zhimg.com/v2-d7a28ab6a49cc3e645d418f6eab64c32_r.jpg\" data-original-token=\"v2-e07b924e1fc29fc0cc8e441724e178e1\"/></figure><p data-pid=\"jAYLuRNy\">从架构上讲，大致长这样：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fbb67363ca749262475ae3b322cccf8d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"743\" data-rawheight=\"503\" class=\"origin_image zh-lightbox-thumb\" width=\"743\" data-original=\"https://pic2.zhimg.com/v2-fbb67363ca749262475ae3b322cccf8d_r.jpg\" data-original-token=\"v2-353dbf5d2caf8f456c724557b54aa075\"/></figure><p data-pid=\"7ryS_1yC\">从源码讲，大概分为这么几步：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">program</span> <span class=\"o\">=</span> <span class=\"nx\">getProgram</span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"nx\">checker</span> <span class=\"o\">=</span> <span class=\"nx\">program</span><span class=\"p\">.</span><span class=\"nx\">getTypeChecker</span><span class=\"p\">();</span>\n<span class=\"nx\">checker</span><span class=\"p\">.</span><span class=\"nx\">getSemanticDiagnostics</span><span class=\"p\">();</span>\n<span class=\"nx\">program</span><span class=\"p\">.</span><span class=\"nx\">emit</span><span class=\"p\">();</span>\n</code></pre></div><p data-pid=\"t8H1zmhZ\">第一步，创建了一个Program对象。所谓Program，就是一系列AST的集合体，每个AST对应一个源文件。因此，这一步调用了Scanner/Parser生成AST。</p><p data-pid=\"OdcpsKCb\">第二步，创建了一个TypeChecker对象。<b>在生成TypeChecker的过程中，binder会被调用</b>。我大致猜测，其原因在于，如果要做Semantic Analysis（依赖AST子树之间“飞线”后才能做的分析与检查），则建立Symbol Table的过程是不可或缺的，因此这一步便会调用binder。</p><p data-pid=\"yND-6hpq\">注意，在checker被初始化之时，<b>resolveName没有被调用</b>，也就是说此时尽管变量声明已经被存入Symbol Table，但变量引用依然不知道其来自于哪个声明。之所以要这么安排顺序，对tsc来说其实毫无意义，因为我们知道所有的变量引用终将与其声明绑定。但是，对于Language Server而言，这样做确有其意义。我们以后的文章会讲。</p><p data-pid=\"O-a-bvaM\">第三步， 调用<code>checker.getSemanticDiagnostics</code>获取全部的报错信息（如果有的话）。resolveName和其它的Semantic Analysis将会在这个环节被执行。</p><p data-pid=\"_tpb1QRs\">最后一步，emit即根据AST输出JavaScript代码。</p><h3><b>Checker/Semantic Analysis</b></h3><p data-pid=\"IMdpxZCp\">checker这个环节做了前文提及过的两件事：</p><p data-pid=\"-JAGZDFF\">• 类型检查</p><p data-pid=\"VjhNV_7V\">• 一般性的与上下文相关的Semantic Analysis。</p><p data-pid=\"uge5oODM\">类型检查这里其实又分为两个部分：</p><p data-pid=\"ZQXG5FS9\">• 计算某个表达式的类型<br/>当我们写出<code>a + b(c.d() as E)</code>这样的表达式是，checker需要得到整个表达式的类型。因此，其需要依次获得每个变量，每个函数，每个方法的给定的类型签名，然后根据其返回值的类型签名组装起来，得到整个表达式的类型。</p><p data-pid=\"d31V_Yj9\">• 判断某个表达式的类型是否符合约束<br/>这其实在上面的例子已经得到体现了，当我们写出<code>b(c.d() as E)</code>时，我们一方面需要知道b的签名，一方面也同时需要判断<code>c.d()</code>是否能够直接转换成E，而E是否满足b的输入参数的类型。</p><p data-pid=\"K2I86pcg\">对类型推导（计算某个表达式的类型）而言，实在没什么好写的。如果我看到了函数<code>foo</code>，我就从符号表去找<code>foo</code>的声明。如果<code>foo</code>的声明写的不完整，没有写返回值的类型，那我就检查<code>foo</code>的函数体，看看其return到底是什么类型。如果返回值来自于别的变量，那我就再去查看其来源的类型，以此类推……。整个过程必定是琐碎的，但不是困难的，也很难说涉及什么算法。</p><p data-pid=\"4v-Yv0XK\">对类型检查（判断类型是否符合约束）而言，其核心是checker中的<code>isTypeAssignableTo(src, target)</code>函数，其检测src的类型是否能够赋值给target。至于匹配过程，其实也是一种比较无聊的大型递归决策树。对primitive types，直接按照输入的规则进行比对，对于复合类型，例如union、intersection、interface、array等，则可递归对比每个子类别。也很琐碎，但也难说困难。</p><p data-pid=\"oIwsvi-y\">实现上，binder需要遍历一次AST，而checker则第二次遍历了AST。这保证了所有的变量在遍历过程中都得以检查。但是注意，这样遍历两遍AST是JavaScript的某个特性导致的，在别的语言里，可能bind和check在同一遍遍历AST就完成了。我会在其它的文章中辨析这些设计的背后原因。</p><p data-pid=\"lsHEFymK\"><b>小结</b></p><p data-pid=\"VCmcTGaa\">到此为止，我们覆盖了编译器从文本文件，到生成AST，再到根据声明建立Symbol，再到使引用关联Symbol，直到检查代码的一系列环节。</p><p data-pid=\"sPrFx40E\">这些环节的特点是：<b>没什么算法可言</b>。直到分为哪些模块，知道每个模块都要干什么，也就基本上能实现出来了。这里面的琐碎细节，例如any为什么能赋值给任何类型，例如var和let同时出现又会怎么样，都属于非常琐碎的细节问题，而其基本上来自于语言规范的制定。一旦语言规范确定了，大家干的事几乎就是写一个大型if/else以确保各种corner case都得以解决。</p><p data-pid=\"Wsd4zac_\">之所以在一开始说市面上这些讲细节的文章<b>对自行设计编译器的帮助非常有限</b>，原因有三：</p><ul><li data-pid=\"5pCd0JIk\">知其然，不知其所以然<br/><br/>所有的文章都会上来把scanner、parser、binder、checker、emitter这五大部件列在这，因为这就是TypeScript代码的组织方式，但实际上，从“我要编译代码”这个目的往下拆，才能发现这里面resolveName扮演的核心角色。不同语言对Name Resolution的处理，非常值得单独写一篇文章。</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li data-pid=\"OyvC7krF\">由于缺乏分辨能力，带入了很多没用的细节<br/></li><ul><li data-pid=\"BbfICo-0\">AST的生成部分不可迁移，除非你像MicroSoft一样能掏出来一个几个到十几个人的团队，有空手写scanner/parser，且值得这样做，否则已有的生成工具就很好使。</li><li data-pid=\"IRRWaYB1\">Node、Symbol、Symbol Table、Binder、Name Resolution、Checker、isTypeAssignableTo这些大的架构层面的概念可迁移。</li><li data-pid=\"2FC6g7Ks\">模块内部的细节很难可迁移。如果语言的规则与TypeScript不一样，那么很多细节就应当实现自己的版本，想要迁移TypeScript的代码，可能连读都读不明白，也没必要读的很明白，更推荐随用随看。</li><li data-pid=\"3_UOiXsq\">从2010年到现在，TypeScript的代码已经维护了十年，代码中混杂了防御性编程、性能埋点、乱七八糟的tsconfig选项、cache和为了美观整洁地容下这些东西而做的重构。很多文章直接将这些细节也一并粘贴了过来（大多数讲其它某个框架的文章也有这种类似问题）。</li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li data-pid=\"9hmAUzjZ\">真想照猫画虎，直接读源码会更好<br/></li><ul><li data-pid=\"8mgHIJCp\">我们想要支持Union类型，那只要能定位到Union类型检查的位置即可，代码阅读的难度本就不大，难在找到其位置。对于这些文章而言，这又太细节了。</li></ul></ul><h2><b>Part2：相关源码及索引</b></h2><p data-pid=\"lmUCt7P5\">这一部分会在非常浅表的层次解读一些代码，以指路为主，建议直接阅读源码。</p><p data-pid=\"nmraL7Hx\">代码以写作时最新的<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/tree/v5.1.3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TypeScript V5.1.3</a>为准，每个链接都会锁定为该tag下的commit id。</p><h3><b>核心类型</b> <b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/v5.1.3/src/compiler/types.ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">src/compiler/types.ts</a></b></h3><p data-pid=\"9Mg0rAsp\">编译器相关的类型声明都写在了这个文件下，对刚开始读代码的读者来说，关注如下几个类型即可：</p><p data-pid=\"xOjQ03rJ\">• <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/types.ts%23L911\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Node</a>：AST节点，pos和end代表了其起始和结尾，kind则表征了该节点的类型，parent是该节点在AST中的父节点。</p><p data-pid=\"jjEiA8J3\">• <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/types.ts%23L40\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SyntaxKind</a>：枚举值，每一个对应一种Node的类型。根据SyntaxKind搜索，就可以在本文件里找到对应的AST Node的类型声明。</p><div class=\"highlight\"><pre><code class=\"language-text\">interface ReadonlyTextRange {\n    readonly pos: number;\n    readonly end: number;\n}\n\ninterface Node extends ReadonlyTextRange {\n    readonly kind: SyntaxKind;\n    readonly parent: Node;   \n}             </code></pre></div><p data-pid=\"49XDzOpz\">在众多extend Node的interface中，如下几类有代表性：</p><p data-pid=\"3DnFi9Xd\">• <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/types.ts%23L1732\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Declaration</a>：一种Node。所有的声明类型的Node都会extend这个interface，比如说变量声明、函数声明、类声明等等。symbol便是由这些Node到其对应Symbol的映射。<br/>这个_declarationBrand是一个小trick，主要就是为了避免<code>{ symbol: Symbol; }</code>这样的类型也能被直接赋值给Declaration的变量。可以根据Branded Type这个关键词去查，不展开讲。<br/>另外，我们此前提到，其它引用某个变量的Node，也会直接指向该Symbol，但这些Node并没有symbol这个property，而是将其放在了NodeLinks的resolvedSymbol属性中。这部分超出了本文章的范畴，知道即可。</p><div class=\"highlight\"><pre><code class=\"language-text\">interface Declaration extends Node {\n    _declarationBrand: any;\n    /** @internal */ symbol: Symbol; // Symbol declared by node (initialized by binding)\n}</code></pre></div><p data-pid=\"SAwGf69S\">• <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/types.ts%23L936\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LocalsContainer</a>：一种Node。所有拥有Scope的Node都会extends这个interface，比如说block、函数声明、文件等等。<br/>locals这个property就是Symbol Table了，而Symbol Table就是从变量名到Symbol的映射。</p><div class=\"highlight\"><pre><code class=\"language-text\">interface LocalsContainer extends Node {\n    _localsContainerBrand: any;\n    /** @internal */ locals?: SymbolTable; // Locals associated with node (initialized by binding)\n}\n\ntype SymbolTable = Map&lt;string, Symbol&gt;</code></pre></div><p data-pid=\"IyDBN3Fh\">• <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/types.ts%23L4236\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SourceFile</a>：一种Node。TypeScript对代码的处理（估计所有语言都如此）是以文件为单位的，而文件也是一个Node，且文件和AST的根节点是等价的概念。<br/>我们前文讲了AST内跨子树的符号查找方式，而跨AST（跨文件）的符号查找，其实逻辑也差不多。import statement指定了符号来源于哪个文件，而文件中的export statement则标记了文件中所暴露的符号，二者一拼差不多就能找到了。</p><p data-pid=\"QOCQGdRv\">• <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/types.ts%23L5813\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Symbol</a>：一个变量声明和多个变量引用所指向的，代表变量本身的那个实体。escapedName是其变量名，valueDeclaration是其声明所对应的Node。</p><div class=\"highlight\"><pre><code class=\"language-text\">export interface Symbol {\n    escapedName: __String;                  // Name of symbol\n    declarations?: Declaration[];           // Declarations associated with this symbol\n    valueDeclaration?: Declaration;         // First value declaration of the symbol\n }</code></pre></div><p data-pid=\"Tl6wJrq4\">declarations之所以存在，是因为有些时候还会出现多个Declaration。例如var：</p><div class=\"highlight\"><pre><code class=\"language-text\">var x: number;\nvar x = 3;\nvar x = 3 * 3;</code></pre></div><p data-pid=\"pku-GrPq\">这里只有第一行会成为valueDeclaration，但三行都会被放入declarations中，因为var允许这样重复声明。</p><p data-pid=\"MlC3scWi\">另外还有<a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/declaration-files/by-example.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TypeScript的declare语法</a>，这个不展开了。</p><p data-pid=\"LNwwKjcu\">• <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/types.ts%23L6172\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Type</a>：在TypeScript中，每个“Type”都会有一个Type类型。只需知道Symbol才会拥有Type，Type是跟Symbol关联的概念，于Node无关，即可。</p><div class=\"highlight\"><pre><code class=\"language-text\">interface Type {\n    symbol: Symbol; // Symbol associated with type (if any)\n}</code></pre></div><p data-pid=\"AvjFcKEb\">在tsc中，最常用的primitive type是复用的。换言之，如果两个变量x、y的类型都是number，函数foo的返回值是number，那么x、y的Symbol的type和foo的type，都是同一个对象，三者之间可以直接用===来比较。现在，只有复合类型才需要初始化Type，这有效的减少了tsc在工作中实例化的Type数量。</p><p data-pid=\"Sd9WHFol\">相关代码位于<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/checker.ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">src/compiler/checker.ts</a>，由于这个文件太大了，github没法正常显示，因此直接在文本里搜索createIntrinsicType便能看到这些全局唯一的Type。</p><h3><b>Constructors</b></h3><p data-pid=\"mlCe4Ftg\">tsc中没有这部分，但是Language Servervice/Language Server会在Node、Symbol、Type外再包一层，分别叫做<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/services/services.ts%23L345\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NodeObject</a>、<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/services/services.ts%23L621\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SymbolObject</a>、<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/services/services.ts%23L784\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TypeObject</a>。</p><p data-pid=\"PRAKeF11\">这些类提供了一些类方法，也有助于读代码，因此在这里提一嘴。</p><h3><b>主干代码</b></h3><p data-pid=\"oJvyL-VR\">tsc的核心是一个叫做<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/executeCommandLine/executeCommandLine.ts%23L886\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">performCompilation</a>的函数，函数的核心是如下两行：</p><div class=\"highlight\"><pre><code class=\"language-text\">const program = createProgram(programOptions);\nconst exitStatus = emitFilesAndReportErrorsAndGetExitStatus(\n    program,\n    reportDiagnostic,\n    s =&gt; sys.write(s + sys.newLine),\n    createReportErrorSummary(sys, options)\n);</code></pre></div><p data-pid=\"_F8o0nEa\">第一行就是创建program，即创建各个文件的AST并做Syntactic analysis。第二行，<code>emitFilesAndReportErrorsAndGetExitStatus</code>内嵌了一个叫做<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/watch.ts%23L559\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">emitFilesAndReportErrors</a>，这个函数又可以展开为如下几个关键调用：</p><div class=\"highlight\"><pre><code class=\"language-text\">program.getSyntacticDiagnostics();\nprogram.getSemanticDiagnostics();\nprogram.emit();</code></pre></div><p data-pid=\"G05JWzHZ\">第三行，emit是生成JavaScript代码的部分，不多说。</p><p data-pid=\"az68mcN6\">第一行，<code>getSyntacticDiagnostics</code>最终调用的是<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/program.ts%23L2803\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">getSyntacticDiagnosticsForFile</a>这个函数，其直接返回<code>sourceFile.parseDiagnostics</code>。换言之，前文所提到的，AST的根节点，对应一整个文件的SourceFile Node有一个property叫做<code>parseDiagnostics</code>，在AST生成过程中的所有报错，都会存到此处。这就是Syntactic Analysis。</p><p data-pid=\"v-75XShS\">第二行，<code>getSemanticDiagnostics</code>最终调用的是<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/program.ts%23L2841\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">getBindAndCheckDiagnosticsForFileNoCache</a>这个函数。从名字上已经能看出来了，Semantic Analysis就是binder和checker干的事情。</p><p data-pid=\"fYkhhoDF\">这个函数大概干了几件事：</p><div class=\"highlight\"><pre><code class=\"language-text\">const typeChecker = getTypeChecker();\nlet bindDiagnostics = sourceFile.bindDiagnostics;\nlet checkDiagnostics = typeChecker.getDiagnostics(sourceFile, cancellationToken);</code></pre></div><p data-pid=\"0_UIG7Q-\">换言之，binder的报错信息是也是存在了AST的根节点SourceFile之中，而其它的报错信息则存在了checker之中。</p><p data-pid=\"LIkA2j8y\">binder的报错信息是什么时候生成的呢？我们展开<code>createTypeChecker</code>：</p><div class=\"highlight\"><pre><code class=\"language-text\">function getTypeChecker() {\n    return typeChecker || (typeChecker = createTypeChecker(program));\n}</code></pre></div><p data-pid=\"MXK94v7j\">这是个简单的cache trick，在首次调用时，会调用<code>createTypeChecker</code>来初始化checker，此后则只返回该实例，不再会初始化。</p><p data-pid=\"C362oy1a\">createTypeChecker同样位于<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/checker.ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">src/compiler/checker.ts</a>中，请自行搜索定位。大致它干了这么几件事：</p><div class=\"highlight\"><pre><code class=\"language-text\">function createTypeChecker(program) {\n    let diagnostics = createDiagnosticCollection();\n    function getDiagnostics() {\n        checkSourceFile(sourceFile);\n        return diagnostics.getDiagnostics();\n    }\n    function checkSourceFile() {\n        ...\n    }\n    function initializeTypeChecker() {\n        bindSourceFile(sourceFile);\n    }\n    \n    const checker = { \n        getDiagnostics,\n        ...\n    };\n    initializeTypeChecker();\n    return checker;\n}</code></pre></div><p data-pid=\"ZMgkLGdA\">首先，创建了checker，其只包括一系列方法，但不包括任何属性，例如<code>getDiagnostics</code>方法。</p><p data-pid=\"A9XRO8be\">接下来，调用<code>initializeTypeChecker</code>，而这一步基本上就干了一件事：对所有文件的AST做Symbol Binding。换言之，将所有的声明都存到相应scope的Symbol Table中。</p><p data-pid=\"jAyTuKrm\">再提醒一遍，<code>createTypeChecker</code>只会被调用一次，所以bind的步骤也只会发生一次。</p><p data-pid=\"ofFXHSS7\">再看看被返回的checker中提供的<code>getDiagnostics</code>方法，它对每个SourceFile都调用了<code>checkSourceFile</code>这个函数，而这个函数才是checker阶段对所有的类型和语句进行检查的核心，我们后面再讲。</p><p data-pid=\"HKrDlOpA\">diagnostics是一个闭包作用域内的变量（我一般也叫全局变量，因为它对这些暴露的方法来说是全局的，在了解scope rule的本质之后，所谓“闭包”啥的根本没啥好讲）。由于其对所有方法可见，<code>checkSourceFile</code>自然可以往里面塞报错信息。因此，在<code>checkSourceFile</code>被调用之前，它是空的，而在其被调用之后，所有的报错信息都会被写入，此时<code>getDiagnostics</code>再将其返回。</p><p data-pid=\"MYsVncLR\">我们把上面列举的所有步骤拼成一块再来看：</p><div class=\"highlight\"><pre><code class=\"language-text\">const program = createProgram(programOptions);\nprogram.getSyntacticDiagnostics();\n\n// program.getSemanticDiagnostics();\nconst typeChecker = program.getTypeChecker();\nlet bindDiagnostics = sourceFile.bindDiagnostics;\nlet checkDiagnostics = typeChecker.getDiagnostics(sourceFile, cancellationToken);\n\nprogram.emit();</code></pre></div><ol><li data-pid=\"1f6och4Q\">创建program（创建AST，做Syntactic Analysis，将报错存入sourceFile.parseDiagnostics）。</li><li data-pid=\"teaKe5R8\">获取Syntactic Analysis中的报错</li><li data-pid=\"8eVUE4oN\">获取Semantic Analysis中的报错。</li><ol><li data-pid=\"8tHM_p7k\">获取TypeChecker，第一次调用时会触发创建TypeChecker，创建过程中会触发binding，相应的报错存入sourceFile.bindDiagnostics。</li><li data-pid=\"LzgosAmm\">获取bindDiagnostics。</li><li data-pid=\"NyemMLRI\">调用getDiagnostics，其会触发checkSourceFile，并将报错存到checker内的一个全局变量中，在检查结束后，所存储的报错会被返回。</li></ol><li data-pid=\"zk9RLzzr\">输出JavaScript代码。</li></ol><p data-pid=\"jeyuur8u\"><b>遍历AST</b></p><p data-pid=\"s3ALmGK0\">在编译器领域，很常见的一种模式是Visitor Pattern。简要的举一个例子：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c2ec58b5bae3f7e82657910957dac996_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"573\" data-rawheight=\"303\" class=\"origin_image zh-lightbox-thumb\" width=\"573\" data-original=\"https://pic3.zhimg.com/v2-c2ec58b5bae3f7e82657910957dac996_r.jpg\" data-original-token=\"v2-9b618ede353cc526d308448d19f9d55a\"/></figure><p data-pid=\"_Kkj1IVY\">假设我们有一棵树，树中的节点有四类ABCD，A类型的节点有三个子节点，B类型的节点只有一个子节点。但是，每个节点的子节点的类型都是任意的。</p><p data-pid=\"m0CPzk0G\">Visitor Pattern大致是如下的代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">function visitEachChild(node, visitFunction) {\n    switch (node.kind) {\n        case A:\n            visitFunction(node.aChild1);\n            visitFunction(node.aChild2);\n            visitFunction(node.aChild3);\n            break;\n        case B:\n            visitFunction(node.bChild);\n            break;\n    }\n}\n\nfunction visit(node) {\n    switch (node.kind) {\n        case A:\n            // ...\n        case B:\n            // ...\n        case C:\n            // ...\n        case D:\n            // ...\n    }\n    visitEachChild(node, visit);\n}\nvisitEachChild(treeRoot, visit);</code></pre></div><p data-pid=\"dLbOm2K-\">函数<code>visitEachChild</code>存储了每个类型节点的结构信息，它知道A的三个子节点分别叫aChildX，B的一个子节点叫bChild，C和D没有子节点。当传入一个函数时，它会根据当前节点的类型，推断出要对哪些子节点递归调用同样的函数。</p><p data-pid=\"1pKWBwpZ\">函数<code>visit</code>则提供了对当前节点要做的处理，根据类型不同，会对节点进行不同的处理。为了达到递归的效果，其在最后往往需要再次调用<code>visitEachChild</code>以对当前节点的子节点重复同样的操作。</p><p data-pid=\"bSdfebJC\">这个pattern的好处是将树节点的结构和对每种节点要做的操作区分开，两个函数各司其职。而且，tsc中同一个AST会被binder和checker分别遍历，因此binder和checker可以提供不同的<code>visit</code>函数，来对同一个树形结构做不同的操作，且无需关心结构的变化。</p><p data-pid=\"zoUjU01A\">binder和checker分别提供的visit函数，叫<code>bind</code>和<code>checkSourceElement</code>。</p><p data-pid=\"WNnWt2aN\">而提供树形结构的<code>visitEachChild</code>函数，其在tsc中叫<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/parser.ts%23L1236\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">forEachChild</a>，它的本体是一个叫做<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/parser.ts%23L501\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">forEachChildTable</a>的映射表。</p><h3><b>Binder <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/binder.ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">src/compiler/binder.ts</a></b></h3><p data-pid=\"4Bkg_RlA\">在binder里，刚才说的<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/binder.ts%23L2636\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bind</a>函数是visitor，但其主干代码其实是<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/binder.ts%23L1073\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bindChildren</a>和<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/binder.ts%23L2636\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bindContainer</a>，另有一个函数叫做<code>bindWorker</code>，但这里的代码跟前文所述的主干关系不大，都是语言特性支持。</p><p data-pid=\"ry_84E6x\">在binder里，和Node类型相关的函数，一般被命名为<code>bindXxx</code>，有时候也可以直接搜到，如果搜不到的话就去<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/binder.ts%23L1073\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bindChildren</a>和<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/binder.ts%23L2636\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bindContainer</a>找即可。</p><h3><b>Checker <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/7275ded359554bbef410c96cd8cfc32a2f31ed84/src/compiler/checker.ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">src/compiler/checker.ts</a></b></h3><p data-pid=\"kAVozXty\">对非类型检查的部分，就看<code>checkSourceElement</code>和<code>checkXxx</code>即可。<br/>对类型检查的部分，参考<code>isTypeRelatedTo</code>这个函数。<br/>关联Node和Symbol的部分，则参考<code>resolveName</code>这个函数。</p><h2><b>编译器相关的参考资料</b></h2><p data-pid=\"PXD_puNK\">• <a href=\"https://zhuanlan.zhihu.com/p/88441131\" class=\"internal\">一些编译原理课程整理</a></p>",
            "voteup_count": 233,
            "column": {
                "id": "c_1643269342841327616",
                "type": "column",
                "url_token": "c_1643269342841327616",
                "title": "TypeScript语言的实现",
                "url": "https://zhuanlan.zhihu.com/c_1643269342841327616",
                "created": 1684565941,
                "updated": 1684565941,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 10
        },
        "created": "2023-06-11T14:55:07+08:00"
    },
    {
        "content": {
            "id": 661059052,
            "title": "HOTScript - 类型层面上的函数式编程",
            "type": "article",
            "excerpt_title": "HKT 的缺失TS，或者说 JS，本身已经有相当多函数式编程上的应用——尽管从纯函数式语言的角度来看，它们因语言自身的限制多少显得有些蹩脚。不过，我们已经可以看到相当一些库在这上面做了努力，如 fp-ts、effect-ts、Ramda、ts-pattern、fantasy-land 等，它们都尝试提供某种独特的、函数式味道的编程范式，以使代码更精炼或减少更多潜在的 BUG. [图片] 然而在类型层面，我们遇到了问题——TS 本身并不支持高阶类型。常见的所谓“类型…",
            "url": "https://zhuanlan.zhihu.com/p/661059052",
            "image_url": "https://picx.zhimg.com/v2-b5d87e2b1cd22b3eac96737edd12ccaa_r.jpg?source=172ae18b",
            "created": 1697224881,
            "updated": 1697358148,
            "author": {
                "id": "7b0ef8d0ab32d664a36fd98e8f377302",
                "url_token": "wo-mo-mo-kan-ni-zhuang-bi",
                "name": "Snowflyt",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-d72d00a6b84b6e3ac5befc958ec12145_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-d72d00a6b84b6e3ac5befc958ec12145.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/7b0ef8d0ab32d664a36fd98e8f377302",
                "user_type": "people",
                "headline": "22 岁，学生，苏州大学软件工程在读",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1534327519
            },
            "comment_permission": "all",
            "content": "<h2>HKT 的缺失</h2><p data-pid=\"PJ2CWp1X\">TS，或者说 JS，本身已经有相当多函数式编程上的应用——尽管从纯函数式语言的角度来看，它们因语言自身的限制多少显得有些蹩脚。不过，我们已经可以看到相当一些库在这上面做了努力，如 fp-ts、effect-ts、Ramda、ts-pattern、fantasy-land 等，它们都尝试提供某种独特的、函数式味道的编程范式，以使代码更精炼或减少更多潜在的 BUG.</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f42cc8723dae407ab85c2a574bcb833e_b.gif\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-thumbnail=\"https://pic3.zhimg.com/v2-f42cc8723dae407ab85c2a574bcb833e_b.jpg\" data-default-watermark-src=\"https://pic3.zhimg.com/v2-f42cc8723dae407ab85c2a574bcb833e_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-f42cc8723dae407ab85c2a574bcb833e_r.jpg\" data-original-token=\"v2-f42cc8723dae407ab85c2a574bcb833e\"/><figcaption>ts-pattern - 可能不算个“函数式编程”库，它只是提供了某种稍显蹩脚的 Pattern Matching</figcaption></figure><p data-pid=\"P2W0tD5k\">然而在类型层面，我们遇到了问题——TS 本身并不支持高阶类型。常见的所谓“类型体操”通常是将一堆泛型、条件类型与递归类型糊在一起，这有些类似于 Python 中“一行流”给人的感觉——简单的说，写的人爽，看的人难过。TS 则更过分——不仅看的人难受，写的人也不舒服。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a2c801035e2cd7ab59ffa4bbf98bc7bf_b.jpg\" data-size=\"normal\" data-rawwidth=\"2380\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb\" width=\"2380\" data-original=\"https://pic4.zhimg.com/v2-a2c801035e2cd7ab59ffa4bbf98bc7bf_r.jpg\" data-original-token=\"v2-a2c801035e2cd7ab59ffa4bbf98bc7bf\"/><figcaption>Python 典中典一行流 Quick Sort</figcaption></figure><p data-pid=\"ZjI5EK24\">——HOTScript（<span class=\"nolink\">Higher-Order TypeScript</span>）便是一个模拟了“高阶类型（Higher-Kinded Type, HKT）”的 TS 工具库，它使得你可以在类型层面“传递函数”，以实现某种有些“函数式编程”味道的类型编程模式：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gvergnaud/hotscript\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/gvergnaud/ho</span><span class=\"invisible\">tscript</span><span class=\"ellipsis\"></span></a><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">import</span> <span class=\"kr\">type</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">Tuples</span><span class=\"p\">,</span> <span class=\"nx\">Strings</span><span class=\"p\">,</span> <span class=\"nx\">Numbers</span> <span class=\"p\">}</span> <span class=\"kr\">from</span> <span class=\"s2\">&#34;hotscript&#34;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">res1</span> <span class=\"o\">=</span> <span class=\"nx\">Pipe</span><span class=\"o\">&lt;</span>\n  <span class=\"c1\">//  ^? 62\n</span><span class=\"c1\"></span>  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">],</span>\n  <span class=\"p\">[</span>\n    <span class=\"nx\">Tuples</span><span class=\"p\">.</span><span class=\"nx\">Map</span><span class=\"p\">&lt;</span><span class=\"nt\">Numbers.Add</span><span class=\"err\">&lt;</span><span class=\"na\">3</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>       <span class=\"c1\">// [4, 5, 6, 7]\n</span><span class=\"c1\"></span>    <span class=\"nx\">Tuples</span><span class=\"p\">.</span><span class=\"nx\">Join</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;.&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>                 <span class=\"c1\">// &#34;4.5.6.7&#34;\n</span><span class=\"c1\"></span>    <span class=\"nx\">Strings</span><span class=\"p\">.</span><span class=\"nx\">Split</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;.&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>               <span class=\"c1\">// [&#34;4&#34;, &#34;5&#34;, &#34;6&#34;, &#34;7&#34;]\n</span><span class=\"c1\"></span>    <span class=\"nx\">Tuples</span><span class=\"p\">.</span><span class=\"nx\">Map</span><span class=\"p\">&lt;</span><span class=\"nt\">Strings.Prepend</span><span class=\"err\">&lt;&#34;</span><span class=\"na\">1</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"c1\">// [&#34;14&#34;, &#34;15&#34;, &#34;16&#34;, &#34;17&#34;]\n</span><span class=\"c1\"></span>    <span class=\"nx\">Tuples</span><span class=\"p\">.</span><span class=\"nx\">Map</span><span class=\"p\">&lt;</span><span class=\"nt\">Strings.ToNumber</span><span class=\"p\">&gt;,</span>     <span class=\"c1\">// [14, 15, 16, 17]\n</span><span class=\"c1\"></span>    <span class=\"nx\">Tuples</span><span class=\"p\">.</span><span class=\"nx\">Sum</span>                        <span class=\"c1\">// 62\n</span><span class=\"c1\"></span>  <span class=\"p\">]</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"lDRnL4I-\">不过，如果你对这些大家戏称的“类型体操”还不那么熟悉，或许看到这里是懵逼的，你也许没看出来这么写有什么优势。下面我将尝试简单解析一下为什么我们需要使用 HKT，并且给出一些原型实现。</p><p data-pid=\"h6IeWctc\">如果你稍微接触过一点所谓的“类型体操”，你大概写过这种代码：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Concat</span><span class=\"p\">&lt;</span><span class=\"nt\">S</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">Ext</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">S</span><span class=\"si\">}${</span><span class=\"nx\">Ext</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">PrependStrings</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">string</span><span class=\"p\">[],</span>\n  <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"p\">[</span>\n  <span class=\"k\">infer</span> <span class=\"nx\">Head</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">string</span><span class=\"p\">[],</span>\n<span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"p\">[</span><span class=\"nx\">Concat</span><span class=\"p\">&lt;</span><span class=\"nt\">S</span><span class=\"err\">,</span> <span class=\"na\">Head</span><span class=\"p\">&gt;,</span> <span class=\"p\">...</span><span class=\"nx\">PrependStrings</span><span class=\"p\">&lt;</span><span class=\"nt\">Tail</span><span class=\"err\">,</span> <span class=\"na\">S</span><span class=\"p\">&gt;]</span>\n  <span class=\"o\">:</span> <span class=\"p\">[];</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">R</span> <span class=\"o\">=</span> <span class=\"nx\">PrependStrings</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;baz&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ [&#39;xfoo&#39;, &#39;xbar&#39;, &#39;xbaz&#39;]\n</span></code></pre></div><p data-pid=\"Yu2p-5Tb\">这是经典的条件类型与递归类型的结合。而遍历元组是非常常见的操作，所以这样的类型定义几乎已经成了某种模板。然而，这段类型定义的信息量其实很低，其中真正有用的只有 <code>Concat&lt;S, Head&gt;</code>，剩下的只是冗余的模板代码，用于表示一个 <code>map</code> 操作。 </p><p data-pid=\"EISjxt2s\">在 JS 中，对于类似的需求，我们通常会使用高阶函数（如 <code>map</code>）来实现：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">concat</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">s</span>: <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"nx\">ext</span>: <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">s</span><span class=\"si\">}${</span><span class=\"nx\">ext</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">prependStrings</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kr\">as</span><span class=\"o\">:</span> <span class=\"kr\">readonly</span> <span class=\"kt\">string</span><span class=\"p\">[],</span> <span class=\"nx\">s</span>: <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n  <span class=\"kr\">as</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">((</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"nx\">str</span><span class=\"p\">));</span>\n\n<span class=\"nx\">prependStrings</span><span class=\"p\">([</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;baz&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">);</span> <span class=\"c1\">// =&gt; [&#39;xfoo&#39;, &#39;xbar&#39;, &#39;xbaz&#39;]\n</span></code></pre></div><p data-pid=\"_pa8YhfO\">或者，借助 Ramda，我们可以写得更加“纯函数”一些，这更接近 TS 在类型编程上的思路：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"kr\">as</span> <span class=\"nx\">R</span> <span class=\"kr\">from</span> <span class=\"s1\">&#39;ramda&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">prependStrings</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"kr\">as</span><span class=\"o\">:</span> <span class=\"kr\">readonly</span> <span class=\"kt\">string</span><span class=\"p\">[],</span> <span class=\"nx\">s</span>: <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n  <span class=\"nx\">R</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">R</span><span class=\"p\">.</span><span class=\"nx\">concat</span><span class=\"p\">(</span><span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"nx\">R</span><span class=\"p\">.</span><span class=\"nx\">__</span><span class=\"p\">),</span> <span class=\"kr\">as</span><span class=\"p\">);</span>\n</code></pre></div><p data-pid=\"okmqjVm9\"><i>当然，实际上用 Ramda 应该写成 <code>R.map(R.concat(s))</code> 才合适……这里只是为了与下文对应。</i></p><p data-pid=\"4BkG46Yg\">于是我们希望存在一种方案，可以使泛型作为某种“函数”被传递，这样上面的类型定义就可以这样被简化：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">PrependStrings</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">string</span><span class=\"p\">[],</span>\n  <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">Map</span><span class=\"p\">&lt;</span><span class=\"nt\">Concat</span><span class=\"err\">&lt;</span><span class=\"na\">S</span><span class=\"err\">,</span> <span class=\"err\">~</span><span class=\"p\">&gt;,</span> <span class=\"nx\">AS</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"FL0wBiUB\">但显然，<code>Concat&lt;S, ~&gt;</code> 不是段合法的 TS 代码。至少在 TS 中，我们还没办法这么做——JS 支持高阶函数，TS 却不支持高阶类型（Higher-Kinded Type, HKT）。关于如何以及是否在 TS 中引入 HKT，有一个从 2014 年开始的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/issues/1213\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Issue</a>，其中许多人讨论了该如何引入 HKT，以及当前的替代方案（是的，2014 年……Sadly）。</p><h2>对 HKT 的一种简单模拟</h2><p data-pid=\"eGDf_HAl\">不少人确实想到这一步就结束了，以为 TS 确实只能采用这种偏命令式的写法写代码。然而实际上存在多种简单的方案在类型编程中“传递函数”，以其中一种思路（也是 HOTScript 采用的思路）为例，让我们看看如何实现一种基本的“函数传递”。</p><p data-pid=\"FYpr_iE4\">让我们先把问题简化一下，假设我们打算实现一个这样的东西：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Concat</span><span class=\"p\">&lt;</span><span class=\"nt\">S</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">Ext</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">S</span><span class=\"si\">}${</span><span class=\"nx\">Ext</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Result</span> <span class=\"o\">=</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">Concat</span><span class=\"err\">&lt;&#39;</span><span class=\"na\">x</span><span class=\"err\">&#39;,</span> <span class=\"err\">~</span><span class=\"p\">&gt;,</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ &#39;xfoo&#39;\n</span></code></pre></div><p data-pid=\"mPDHVUE0\">当然，这样的语法是不成立的，但我们可以从中得到某种启发：我们实际上只需要让一个泛型成为一个可“延迟求值”的什么东西，例如这里我们希望 <code>Concat</code> 被传递给 <code>Call</code>，然后延迟到给定最后一个参数后再计算出结果。利用 <code>this</code>，我们可以实现某种近似的东西：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">fn</span>: <span class=\"kt\">unique</span> <span class=\"kt\">symbol</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Fn</span><span class=\"p\">&lt;</span><span class=\"nt\">Args</span> <span class=\"err\">=</span> <span class=\"na\">readonly</span> <span class=\"na\">unknown</span><span class=\"err\">[],</span> <span class=\"na\">Return </span><span class=\"o\">=</span> <span class=\"na\">unknown</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"p\">[</span><span class=\"nx\">fn</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n  <span class=\"nx\">args</span>: <span class=\"kt\">Args</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span><span class=\"o\">:</span> <span class=\"nx\">Return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn</span><span class=\"err\">,</span> <span class=\"na\">Args</span> <span class=\"na\">extends</span> <span class=\"na\">F</span><span class=\"err\">[&#39;</span><span class=\"na\">args</span><span class=\"err\">&#39;]</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">F</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">args</span>: <span class=\"kt\">Args</span><span class=\"p\">;</span>\n<span class=\"p\">})[</span><span class=\"s1\">&#39;return&#39;</span><span class=\"p\">];</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">ConcatFn</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"kt\">string</span><span class=\"p\">],</span> <span class=\"kt\">string</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span><span class=\"o\">:</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"s1\">&#39;args&#39;</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}${</span><span class=\"k\">this</span><span class=\"p\">[</span><span class=\"s1\">&#39;args&#39;</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">R</span> <span class=\"o\">=</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">ConcatFn</span><span class=\"err\">,</span> <span class=\"err\">[&#39;</span><span class=\"na\">foo</span><span class=\"err\">&#39;,</span> <span class=\"err\">&#39;</span><span class=\"na\">bar</span><span class=\"err\">&#39;]</span><span class=\"p\">&gt;;</span>\n<span class=\"c1\">//   ^ &#39;foobar&#39;\n</span></code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0024c6b12fb8cfffed4ccbbc902dae7b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"149\" class=\"origin_image zh-lightbox-thumb\" width=\"501\" data-original=\"https://pic4.zhimg.com/v2-0024c6b12fb8cfffed4ccbbc902dae7b_r.jpg\" data-original-token=\"v2-0024c6b12fb8cfffed4ccbbc902dae7b\"/></figure><p data-pid=\"GTMEulmr\">当然，你可能觉得 <code>this[&#39;args&#39;][0]</code>、<code>this[&#39;args&#39;][1]</code> 这样有些太丑陋了，你也可以尝试这样写，或许会看着舒服些？看个人喜好：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">fn</span>: <span class=\"kt\">unique</span> <span class=\"kt\">symbol</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Fn</span><span class=\"p\">&lt;</span><span class=\"nt\">Args</span> <span class=\"err\">=</span> <span class=\"na\">readonly</span> <span class=\"na\">unknown</span><span class=\"err\">[],</span> <span class=\"na\">Return </span><span class=\"o\">=</span> <span class=\"na\">unknown</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"p\">[</span><span class=\"nx\">fn</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n  <span class=\"nx\">args</span>: <span class=\"kt\">Args</span><span class=\"p\">;</span>\n  <span class=\"nx\">def</span><span class=\"o\">:</span> <span class=\"p\">(...</span><span class=\"nx\">args</span>: <span class=\"kt\">readonly</span> <span class=\"kt\">never</span><span class=\"p\">[])</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn</span><span class=\"err\">,</span> <span class=\"na\">Args</span> <span class=\"na\">extends</span> <span class=\"na\">F</span><span class=\"err\">[&#39;</span><span class=\"na\">args</span><span class=\"err\">&#39;]</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">ReturnType</span><span class=\"o\">&lt;</span>\n  <span class=\"p\">(</span><span class=\"nx\">F</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">args</span>: <span class=\"kt\">Args</span><span class=\"p\">;</span>\n  <span class=\"p\">})[</span><span class=\"s1\">&#39;def&#39;</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">ConcatFn</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"kt\">string</span><span class=\"p\">],</span> <span class=\"kt\">string</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">def</span><span class=\"o\">:</span> <span class=\"p\">([</span><span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"nx\">ext</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">Readonly</span><span class=\"p\">&lt;</span><span class=\"nt\">this</span><span class=\"err\">[&#39;</span><span class=\"na\">args</span><span class=\"err\">&#39;]</span><span class=\"p\">&gt;)</span> <span class=\"o\">=&gt;</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">typeof</span> <span class=\"nx\">s</span><span class=\"si\">}${</span><span class=\"k\">typeof</span> <span class=\"nx\">ext</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">R</span> <span class=\"o\">=</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">ConcatFn</span><span class=\"err\">,</span> <span class=\"err\">[&#39;</span><span class=\"na\">foo</span><span class=\"err\">&#39;,</span> <span class=\"err\">&#39;</span><span class=\"na\">bar</span><span class=\"err\">&#39;]</span><span class=\"p\">&gt;;</span>\n<span class=\"c1\">//   ^ &#39;foobar&#39;\n</span></code></pre></div><p data-pid=\"Pq706_uf\">不过，这里的 <code>ConcatFn</code> 目前还是个 HKT，而不是一个真正的泛型。于是我们可以定义一个 <code>Lift</code> 泛型用于“提升”HKT 到一个可自动部分应用的泛型：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">_</span>: <span class=\"kt\">unique</span> <span class=\"kt\">symbol</span><span class=\"p\">;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">_</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">_</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Tail</span><span class=\"p\">&lt;</span><span class=\"nt\">AS</span> <span class=\"na\">extends</span> <span class=\"na\">readonly</span> <span class=\"na\">unknown</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"p\">[</span><span class=\"kt\">unknown</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Tail</span>\n  <span class=\"o\">:</span> <span class=\"p\">[];</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">PartialApply1</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn</span><span class=\"err\">,</span> <span class=\"na\">Arg</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span> <span class=\"p\">{</span>\n  <span class=\"nx\">args</span>: <span class=\"kt\">Tail</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">[&#39;</span><span class=\"na\">args</span><span class=\"err\">&#39;]</span><span class=\"p\">&gt;;</span>\n  <span class=\"nx\">def</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">Arg</span><span class=\"err\">,</span> <span class=\"na\">...this</span><span class=\"err\">[&#39;</span><span class=\"na\">args</span><span class=\"err\">&#39;]]</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Lift</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn</span><span class=\"err\">,</span> <span class=\"na\">AS</span> <span class=\"na\">extends</span> <span class=\"na\">readonly</span> <span class=\"na\">unknown</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"p\">[</span>\n  <span class=\"k\">infer</span> <span class=\"nx\">Head</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Head</span> <span class=\"kr\">extends</span> <span class=\"nx\">_</span>\n    <span class=\"o\">?</span> <span class=\"nx\">F</span>\n    : <span class=\"kt\">Lift</span><span class=\"p\">&lt;</span><span class=\"nt\">PartialApply1</span><span class=\"err\">&lt;</span><span class=\"na\">F</span><span class=\"err\">,</span> <span class=\"na\">Head</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Tail</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">:</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"err\">[]</span><span class=\"p\">&gt;;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Concat</span><span class=\"p\">&lt;</span><span class=\"nt\">S</span> <span class=\"na\">extends</span> <span class=\"na\">string</span> <span class=\"err\">|</span> <span class=\"na\">_ </span><span class=\"o\">=</span> <span class=\"na\">_</span><span class=\"err\">,</span> <span class=\"na\">Ext</span> <span class=\"na\">extends</span> <span class=\"na\">string</span> <span class=\"err\">|</span> <span class=\"na\">_ </span><span class=\"o\">=</span> <span class=\"na\">_</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Lift</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">ConcatFn</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"nx\">S</span><span class=\"p\">,</span> <span class=\"nx\">Ext</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Result1</span> <span class=\"o\">=</span> <span class=\"nx\">Concat</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ &#39;foobar&#39;\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Result2</span> <span class=\"o\">=</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">Concat</span><span class=\"err\">&lt;&#39;</span><span class=\"na\">foo</span><span class=\"err\">&#39;</span><span class=\"p\">&gt;,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ &#39;foobar&#39;\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Result3</span> <span class=\"o\">=</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">Concat</span><span class=\"err\">,</span> <span class=\"err\">[&#39;</span><span class=\"na\">foo</span><span class=\"err\">&#39;,</span> <span class=\"err\">&#39;</span><span class=\"na\">bar</span><span class=\"err\">&#39;]</span><span class=\"p\">&gt;;</span>\n<span class=\"c1\">//   ^ &#39;foobar&#39;\n</span></code></pre></div><p data-pid=\"9tEzBNSq\">……等一下，其实上面这段代码不能正常工作，这是由于一个神秘的原因，我个人也不知道是否是 TS 的 BUG：TS  在展开 <code>[...([string] &amp; [&#39;a&#39;])]</code> 这样的类型时会得到 <code>&#39;a&#39;[]</code> 而不是预期的 <code>[&#39;a&#39;]</code>，而 <code>Call&lt;Concat&lt;&#39;foo&#39;&gt;, [&#39;bar&#39;]&gt;</code> 在 <code>def: () =&gt; Call&lt;F, [Arg, ...this[&#39;args&#39;]]&gt;</code> 中的 <code>this[&#39;args&#39;]</code> 会被推导成 <code>[string] &amp; [&#39;bar&#39;]</code>，因此 <code>[Arg, ...this[&#39;args&#39;]]</code> 会得到 <code>[&#39;foo&#39;, ...&#39;bar&#39;[]]</code> 而不是预期的 <code>[&#39;foo&#39;, &#39;bar&#39;]</code>……就像下图这样：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-61d4b163d512750cbbcdfb5ac60ba592_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"511\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb\" width=\"511\" data-original=\"https://pic3.zhimg.com/v2-61d4b163d512750cbbcdfb5ac60ba592_r.jpg\" data-original-token=\"v2-61d4b163d512750cbbcdfb5ac60ba592\"/></figure><p data-pid=\"-N56-xQy\">我也不知道这是咋回事，如果有人知道欢迎在评论区里说声。总之，为了解决这个问题，我创建了一个 <code>Identity</code> 函数，用于将 <code>[string] &amp; [&#39;bar&#39;]</code> 这样的 intersection 正确地变成 <code>[&#39;bar&#39;]</code>：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Identity</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[],</span>\n  <span class=\"nx\">I</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"k\">void</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kr\">readonly</span> <span class=\"p\">[],</span>\n  <span class=\"nx\">Result</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kr\">readonly</span> <span class=\"p\">[],</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">I</span><span class=\"p\">[</span><span class=\"s1\">&#39;length&#39;</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"nx\">AS</span><span class=\"p\">[</span><span class=\"s1\">&#39;length&#39;</span><span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Result</span>\n  : <span class=\"kt\">Identity</span><span class=\"p\">&lt;</span><span class=\"nt\">AS</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">...I</span><span class=\"err\">,</span> <span class=\"na\">void</span><span class=\"err\">],</span> <span class=\"err\">[</span><span class=\"na\">...Result</span><span class=\"err\">,</span> <span class=\"na\">AS</span><span class=\"err\">[</span><span class=\"na\">I</span><span class=\"err\">[&#39;</span><span class=\"na\">length</span><span class=\"err\">&#39;]]]</span><span class=\"p\">&gt;;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">R</span> <span class=\"o\">=</span> <span class=\"nx\">Identity</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"kt\">number</span><span class=\"p\">,</span> <span class=\"kr\">boolean</span><span class=\"p\">]</span> <span class=\"o\">&amp;</span> <span class=\"p\">[</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kc\">true</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ [&#39;bar&#39;, 1, true]\n</span></code></pre></div><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f2fb829d0a96a054de89c9f5556fc56e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"776\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb\" width=\"776\" data-original=\"https://pic3.zhimg.com/v2-f2fb829d0a96a054de89c9f5556fc56e_r.jpg\" data-original-token=\"v2-f2fb829d0a96a054de89c9f5556fc56e\"/></figure><p data-pid=\"lxZfug9c\">这个 <code>Identity</code> 的实现着实有些丑陋，只是我已经尽力了……我试了好几种方案，最后只有这个别扭的方案能 work.</p><p data-pid=\"9kYuHaBJ\">好吧，经历了这个小插曲，现在一个可以工作的 <code>Lift</code> 实现是这样的：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">_</span>: <span class=\"kt\">unique</span> <span class=\"kt\">symbol</span><span class=\"p\">;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">_</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">_</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Identity</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[],</span>\n  <span class=\"nx\">I</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"k\">void</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kr\">readonly</span> <span class=\"p\">[],</span>\n  <span class=\"nx\">Result</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"kr\">readonly</span> <span class=\"p\">[],</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">I</span><span class=\"p\">[</span><span class=\"s1\">&#39;length&#39;</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"nx\">AS</span><span class=\"p\">[</span><span class=\"s1\">&#39;length&#39;</span><span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Result</span>\n  : <span class=\"kt\">Identity</span><span class=\"p\">&lt;</span><span class=\"nt\">AS</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">...I</span><span class=\"err\">,</span> <span class=\"na\">void</span><span class=\"err\">],</span> <span class=\"err\">[</span><span class=\"na\">...Result</span><span class=\"err\">,</span> <span class=\"na\">AS</span><span class=\"err\">[</span><span class=\"na\">I</span><span class=\"err\">[&#39;</span><span class=\"na\">length</span><span class=\"err\">&#39;]]]</span><span class=\"p\">&gt;;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Tail</span><span class=\"p\">&lt;</span><span class=\"nt\">AS</span> <span class=\"na\">extends</span> <span class=\"na\">readonly</span> <span class=\"na\">unknown</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"p\">[</span><span class=\"kt\">unknown</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Tail</span>\n  <span class=\"o\">:</span> <span class=\"p\">[];</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">PartialApply1</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn</span><span class=\"err\">,</span> <span class=\"na\">Arg</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span> <span class=\"p\">{</span>\n  <span class=\"nx\">args</span>: <span class=\"kt\">Tail</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">[&#39;</span><span class=\"na\">args</span><span class=\"err\">&#39;]</span><span class=\"p\">&gt;;</span>\n  <span class=\"nx\">def</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">Arg</span><span class=\"err\">,</span> <span class=\"na\">...Identity</span><span class=\"err\">&lt;</span><span class=\"na\">this</span><span class=\"err\">[&#39;</span><span class=\"na\">args</span><span class=\"err\">&#39;]</span><span class=\"p\">&gt;]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Lift</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn</span><span class=\"err\">,</span> <span class=\"na\">AS</span> <span class=\"na\">extends</span> <span class=\"na\">readonly</span> <span class=\"na\">unknown</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"p\">[</span>\n  <span class=\"k\">infer</span> <span class=\"nx\">Head</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Head</span> <span class=\"kr\">extends</span> <span class=\"nx\">_</span>\n    <span class=\"o\">?</span> <span class=\"nx\">F</span>\n    : <span class=\"kt\">Lift</span><span class=\"p\">&lt;</span><span class=\"nt\">PartialApply1</span><span class=\"err\">&lt;</span><span class=\"na\">F</span><span class=\"err\">,</span> <span class=\"na\">Head</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Tail</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">:</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"err\">[]</span><span class=\"p\">&gt;;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Concat</span><span class=\"p\">&lt;</span><span class=\"nt\">S</span> <span class=\"na\">extends</span> <span class=\"na\">string</span> <span class=\"err\">|</span> <span class=\"na\">_ </span><span class=\"o\">=</span> <span class=\"na\">_</span><span class=\"err\">,</span> <span class=\"na\">Ext</span> <span class=\"na\">extends</span> <span class=\"na\">string</span> <span class=\"err\">|</span> <span class=\"na\">_ </span><span class=\"o\">=</span> <span class=\"na\">_</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Lift</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">ConcatFn</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"nx\">S</span><span class=\"p\">,</span> <span class=\"nx\">Ext</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Result1</span> <span class=\"o\">=</span> <span class=\"nx\">Concat</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ &#39;foobar&#39;\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Result2</span> <span class=\"o\">=</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">Concat</span><span class=\"err\">&lt;&#39;</span><span class=\"na\">foo</span><span class=\"err\">&#39;</span><span class=\"p\">&gt;,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ &#39;foobar&#39;\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Result3</span> <span class=\"o\">=</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">Concat</span><span class=\"err\">,</span> <span class=\"err\">[&#39;</span><span class=\"na\">foo</span><span class=\"err\">&#39;,</span> <span class=\"err\">&#39;</span><span class=\"na\">bar</span><span class=\"err\">&#39;]</span><span class=\"p\">&gt;;</span>\n<span class=\"c1\">//   ^ &#39;foobar&#39;\n</span></code></pre></div><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3cfcccc6b261dac7f90907e373cecff1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"440\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb\" width=\"440\" data-original=\"https://pic2.zhimg.com/v2-3cfcccc6b261dac7f90907e373cecff1_r.jpg\" data-original-token=\"v2-3cfcccc6b261dac7f90907e373cecff1\"/></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-606121e98e2f167df267d4d38ca6460a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"532\" data-rawheight=\"145\" class=\"origin_image zh-lightbox-thumb\" width=\"532\" data-original=\"https://pic3.zhimg.com/v2-606121e98e2f167df267d4d38ca6460a_r.jpg\" data-original-token=\"v2-606121e98e2f167df267d4d38ca6460a\"/></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7d15e0226b0f989b6ce04587fb5f47a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"152\" class=\"origin_image zh-lightbox-thumb\" width=\"552\" data-original=\"https://pic2.zhimg.com/v2-7d15e0226b0f989b6ce04587fb5f47a5_r.jpg\" data-original-token=\"v2-7d15e0226b0f989b6ce04587fb5f47a5\"/></figure><p data-pid=\"gq1gizpL\">看起来我们已经可以实现前面提到的 <code>List.Map&lt;Concat&lt;S, ~&gt;, AS&gt;</code> 了，让我们试一试：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">interface</span> <span class=\"nx\">Fn1</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span> <span class=\"err\">=</span> <span class=\"na\">unknown</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span> <span class=\"p\">{</span>\n  <span class=\"nx\">args</span>: <span class=\"kt\">readonly</span> <span class=\"p\">[</span><span class=\"nx\">A</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Widen</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span>\n  <span class=\"o\">?</span> <span class=\"kt\">string</span>\n  <span class=\"o\">:</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"kt\">number</span>\n  <span class=\"o\">?</span> <span class=\"kt\">number</span>\n  <span class=\"o\">:</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"kt\">bigint</span>\n  <span class=\"o\">?</span> <span class=\"kt\">bigint</span>\n  <span class=\"o\">:</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"kr\">boolean</span>\n  <span class=\"o\">?</span> <span class=\"kr\">boolean</span>\n  <span class=\"o\">:</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"kt\">unknown</span><span class=\"p\">[]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"p\">[</span><span class=\"k\">infer</span> <span class=\"nx\">Head</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">]</span>\n    <span class=\"o\">?</span> <span class=\"p\">[</span><span class=\"nx\">Widen</span><span class=\"p\">&lt;</span><span class=\"nt\">Head</span><span class=\"p\">&gt;,</span> <span class=\"p\">...</span><span class=\"nx\">Widen</span><span class=\"p\">&lt;</span><span class=\"nt\">Tail</span><span class=\"p\">&gt;]</span>\n    <span class=\"o\">:</span> <span class=\"p\">[]</span>\n  <span class=\"o\">:</span> <span class=\"p\">{</span>\n      <span class=\"p\">[</span><span class=\"nx\">K</span> <span class=\"k\">in</span> <span class=\"k\">keyof</span> <span class=\"nx\">T</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">T</span><span class=\"p\">[</span><span class=\"nx\">K</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"p\">(...</span><span class=\"nx\">args</span>: <span class=\"kt\">readonly</span> <span class=\"kt\">never</span><span class=\"p\">[])</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">unknown</span>\n        <span class=\"o\">?</span> <span class=\"nx\">T</span><span class=\"p\">[</span><span class=\"nx\">K</span><span class=\"p\">]</span>\n        <span class=\"o\">:</span> <span class=\"nx\">Widen</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">[</span><span class=\"na\">K</span><span class=\"err\">]</span><span class=\"p\">&gt;;</span>\n    <span class=\"p\">};</span>\n\n<span class=\"kr\">namespace</span> <span class=\"nx\">List</span> <span class=\"p\">{</span>\n  <span class=\"kr\">export</span> <span class=\"kr\">type</span> <span class=\"nx\">Map</span><span class=\"o\">&lt;</span>\n    <span class=\"nx\">F</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn1</span><span class=\"p\">&lt;</span><span class=\"nt\">Widen</span><span class=\"err\">&lt;</span><span class=\"na\">AS</span><span class=\"err\">[</span><span class=\"na\">number</span><span class=\"err\">]</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[],</span>\n  <span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"p\">[</span><span class=\"k\">infer</span> <span class=\"nx\">Head</span> <span class=\"kr\">extends</span> <span class=\"nx\">F</span><span class=\"p\">[</span><span class=\"s1\">&#39;args&#39;</span><span class=\"p\">][</span><span class=\"kt\">number</span><span class=\"p\">],</span> <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">]</span>\n    <span class=\"o\">?</span> <span class=\"p\">[</span><span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">Head</span><span class=\"err\">]</span><span class=\"p\">&gt;,</span> <span class=\"p\">...</span><span class=\"nx\">Map</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">Tail</span><span class=\"p\">&gt;]</span>\n    <span class=\"o\">:</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">R</span> <span class=\"o\">=</span> <span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">Map</span><span class=\"p\">&lt;</span><span class=\"nt\">Concat</span><span class=\"err\">&lt;&#39;</span><span class=\"na\">x</span><span class=\"err\">&#39;</span><span class=\"p\">&gt;,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;baz&#39;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ [&#39;xfoo&#39;, &#39;xbar&#39;, &#39;xbaz&#39;]\n</span></code></pre></div><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-21f69f76ac3c71beefbdc3b2e32ab0a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb\" width=\"644\" data-original=\"https://pic1.zhimg.com/v2-21f69f76ac3c71beefbdc3b2e32ab0a8_r.jpg\" data-original-token=\"v2-21f69f76ac3c71beefbdc3b2e32ab0a8\"/></figure><p data-pid=\"UtByHXbQ\">真漂亮。</p><p data-pid=\"3TXMk3mQ\"><i>顺带一提，我写完这块之后才发现这里对 <code>Fn</code> 参数的定义有问题，函数参数应该是逆变的，这里变成协变了，然后 <code>Widen</code> 也是多余的……只要用函数类型稍微调整一下就行了，不过为了减小读者的阅读压力，我没有修改上面的代码，这里就简单将修改后的完整代码贴出来：</i></p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Cast</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"na\">U</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"nx\">U</span> <span class=\"o\">?</span> <span class=\"nx\">T</span> : <span class=\"kt\">U</span><span class=\"p\">;</span>\n\n<span class=\"kr\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">fn</span>: <span class=\"kt\">unique</span> <span class=\"kt\">symbol</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Fn</span><span class=\"p\">&lt;</span><span class=\"nt\">Args</span> <span class=\"na\">extends</span> <span class=\"na\">readonly</span> <span class=\"na\">unknown</span><span class=\"err\">[]</span> <span class=\"err\">=</span> <span class=\"na\">never</span><span class=\"err\">,</span> <span class=\"na\">Return </span><span class=\"o\">=</span> <span class=\"na\">unknown</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"p\">[</span><span class=\"nx\">fn</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n  <span class=\"nx\">args</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">args</span>: <span class=\"kt\">Args</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n  <span class=\"nx\">def</span><span class=\"o\">:</span> <span class=\"p\">(...</span><span class=\"nx\">args</span>: <span class=\"kt\">readonly</span> <span class=\"kt\">never</span><span class=\"p\">[])</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Return</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Fn1</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span> <span class=\"err\">=</span> <span class=\"na\">never</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"nx\">A</span><span class=\"p\">]</span><span class=\"o\">&gt;</span> <span class=\"p\">{}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Args</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">F</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span><span class=\"p\">&lt;</span><span class=\"nt\">infer</span> <span class=\"na\">Args</span> <span class=\"na\">extends</span> <span class=\"na\">unknown</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Args</span>\n  : <span class=\"kt\">readonly</span> <span class=\"p\">[];</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Tail</span><span class=\"p\">&lt;</span><span class=\"nt\">AS</span> <span class=\"na\">extends</span> <span class=\"na\">readonly</span> <span class=\"na\">unknown</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"p\">[</span><span class=\"kt\">unknown</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Tail</span>\n  <span class=\"o\">:</span> <span class=\"p\">[];</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">PartialApply1</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn</span><span class=\"err\">,</span> <span class=\"na\">Arg</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span> <span class=\"p\">{</span>\n  <span class=\"nx\">args</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">args</span>: <span class=\"kt\">Tail</span><span class=\"p\">&lt;</span><span class=\"nt\">Args</span><span class=\"err\">&lt;</span><span class=\"na\">F</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n  <span class=\"nx\">def</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">Cast</span><span class=\"err\">&lt;[</span><span class=\"na\">Arg</span><span class=\"err\">,</span> <span class=\"na\">...Args</span><span class=\"err\">&lt;</span><span class=\"na\">this</span><span class=\"p\">&gt;],</span> <span class=\"nx\">Args</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn</span><span class=\"err\">,</span> <span class=\"na\">AS</span> <span class=\"na\">extends</span> <span class=\"na\">Args</span><span class=\"err\">&lt;</span><span class=\"na\">F</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">ReturnType</span><span class=\"o\">&lt;</span>\n  <span class=\"p\">(</span><span class=\"nx\">F</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">args</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">args</span>: <span class=\"kt\">AS</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n  <span class=\"p\">})[</span><span class=\"s1\">&#39;def&#39;</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">_</span>: <span class=\"kt\">unique</span> <span class=\"kt\">symbol</span><span class=\"p\">;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">_</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">_</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Lift</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn</span><span class=\"err\">,</span> <span class=\"na\">AS</span> <span class=\"na\">extends</span> <span class=\"na\">readonly</span> <span class=\"na\">unknown</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"p\">[</span>\n  <span class=\"k\">infer</span> <span class=\"nx\">Head</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Head</span> <span class=\"kr\">extends</span> <span class=\"nx\">_</span>\n    <span class=\"o\">?</span> <span class=\"nx\">F</span>\n    : <span class=\"kt\">Lift</span><span class=\"p\">&lt;</span><span class=\"nt\">PartialApply1</span><span class=\"err\">&lt;</span><span class=\"na\">F</span><span class=\"err\">,</span> <span class=\"na\">Head</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Tail</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">:</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">Cast</span><span class=\"err\">&lt;[],</span> <span class=\"na\">Args</span><span class=\"err\">&lt;</span><span class=\"na\">F</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">ConcatFn</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"kt\">string</span><span class=\"p\">],</span> <span class=\"kt\">string</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">def</span><span class=\"o\">:</span> <span class=\"p\">([</span><span class=\"nx\">s</span><span class=\"p\">,</span> <span class=\"nx\">ext</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">Readonly</span><span class=\"p\">&lt;</span><span class=\"nt\">Args</span><span class=\"err\">&lt;</span><span class=\"na\">this</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">typeof</span> <span class=\"nx\">s</span><span class=\"si\">}${</span><span class=\"k\">typeof</span> <span class=\"nx\">ext</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Concat</span><span class=\"p\">&lt;</span><span class=\"nt\">S</span> <span class=\"na\">extends</span> <span class=\"na\">string</span> <span class=\"err\">|</span> <span class=\"na\">_ </span><span class=\"o\">=</span> <span class=\"na\">_</span><span class=\"err\">,</span> <span class=\"na\">Ext</span> <span class=\"na\">extends</span> <span class=\"na\">string</span> <span class=\"err\">|</span> <span class=\"na\">_ </span><span class=\"o\">=</span> <span class=\"na\">_</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Lift</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">ConcatFn</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span><span class=\"nx\">S</span><span class=\"p\">,</span> <span class=\"nx\">Ext</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">namespace</span> <span class=\"nx\">List</span> <span class=\"p\">{</span>\n  <span class=\"kr\">export</span> <span class=\"kr\">type</span> <span class=\"nx\">Map</span><span class=\"o\">&lt;</span>\n    <span class=\"nx\">F</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn1</span><span class=\"p\">&lt;</span><span class=\"nt\">AS</span><span class=\"err\">[</span><span class=\"na\">number</span><span class=\"err\">]</span><span class=\"p\">&gt;,</span>\n    <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[],</span>\n  <span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"p\">[</span><span class=\"k\">infer</span> <span class=\"nx\">Head</span> <span class=\"kr\">extends</span> <span class=\"nx\">Args</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"p\">&gt;[</span><span class=\"kt\">number</span><span class=\"p\">],</span> <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">]</span>\n    <span class=\"o\">?</span> <span class=\"p\">[</span><span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">Cast</span><span class=\"err\">&lt;[</span><span class=\"na\">Head</span><span class=\"err\">],</span> <span class=\"na\">Args</span><span class=\"err\">&lt;</span><span class=\"na\">F</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">Map</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">Tail</span><span class=\"p\">&gt;]</span>\n    <span class=\"o\">:</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">R</span> <span class=\"o\">=</span> <span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">Map</span><span class=\"p\">&lt;</span><span class=\"nt\">Concat</span><span class=\"err\">&lt;&#39;</span><span class=\"na\">x</span><span class=\"err\">&#39;</span><span class=\"p\">&gt;,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;baz&#39;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ [&#39;xfoo&#39;, &#39;xbar&#39;, &#39;xbaz&#39;]\n</span></code></pre></div><p data-pid=\"NoIuEMcH\">现在，依此扩展下去就可以构建一整个采用“函数式编程”范式的 TS 工具库了。HOTScript 的实现原理与这里很类似（实际上还不如这里类型安全），只是进行了更多扩展，例如支持使用 <code>_</code> 进行 <code>PartialApply</code>，可以写出 <code>Concat&lt;_, &#39;x&#39;&gt;</code> 这样的代码，而不仅仅是支持柯里化。</p><p data-pid=\"DGZHTdRO\">说一句题外话，HOTScript 也支持任意精度的整数运算，而不仅仅是限制在数十范围内的整数，它并不采用经典的 <code>Tuple[&#39;length&#39;]</code> 来计算整数：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e8c180f77ca8bbc72883202491024250_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"797\" data-rawheight=\"505\" class=\"origin_image zh-lightbox-thumb\" width=\"797\" data-original=\"https://pic1.zhimg.com/v2-e8c180f77ca8bbc72883202491024250_r.jpg\" data-original-token=\"v2-e8c180f77ca8bbc72883202491024250\"/></figure><p data-pid=\"DMSC-QGL\">如果你实际在 TS 中尝试过整数运算，你应该知道这东西是多么蛋疼，使用 <code>Tuple[&#39;length&#39;]</code> 模拟的整数计算常常计算到十几就变成 <code>any</code> 了。<code>ts-toolbelt</code> 里边也有个整数计算，它的做法相当简单粗暴，就是把每个数字对应的下一个值和前一个值写在一个大对象里，像是 <code>type IterationMap = { __: number; &#39;-100&#39;: [-101, -100, -99]; &#39;-99&#39;: [-100, -99, -98]; ... &#39;100&#39;: [99, 100, 101] }</code>……显然这种方案也只能计算这个大对象里包含的数字，而 HOTScript 却可以做到任意精度的整数运算。如果你对其实现感兴趣，可以参考<a href=\"https://link.zhihu.com/?target=https%3A//github.com/ecyrbe/ts-calc\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>。 </p><h2>另一种思路</h2><p data-pid=\"wVRXX4z-\">如果你曾了解过一些 HKT 的知识，可能会发现这里的引入和你认知中的大相径庭——在其他许多编程语言中，HKT 可不是为了实现什么“类型层面的函数式编程”，或者至少不像 TS 中看起来与运行时代码如此相近。许多人第一次接触 HKT 应当源自于 Monad，例如在 Scala 中，可以这样将 HKT 与 Monad 结合使用：</p><div class=\"highlight\"><pre><code class=\"language-scala\"><span class=\"k\">def</span> <span class=\"n\">doSomething</span><span class=\"o\">[</span><span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span><span class=\"kt\">:</span> <span class=\"kt\">Monad</span><span class=\"o\">](</span><span class=\"n\">m</span><span class=\"k\">:</span> <span class=\"kt\">M</span><span class=\"o\">[</span><span class=\"kt\">Int</span><span class=\"o\">])</span> <span class=\"k\">=</span> <span class=\"o\">...</span></code></pre></div><p data-pid=\"PUyIrII9\">或者这样：</p><div class=\"highlight\"><pre><code class=\"language-scala\"><span class=\"k\">class</span> <span class=\"nc\">HigherOrderMap</span><span class=\"o\">[</span><span class=\"kt\">Key</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]</span>, <span class=\"kt\">Value</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]]</span> <span class=\"o\">{</span> <span class=\"o\">...</span> <span class=\"o\">}</span></code></pre></div><p data-pid=\"CBewQ99f\">或者来个实际些的<a href=\"https://link.zhihu.com/?target=https%3A//www.baeldung.com/scala/higher-kinded-types\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">例子</a>：</p><div class=\"highlight\"><pre><code class=\"language-scala\"><span class=\"k\">trait</span> <span class=\"nc\">Collection</span><span class=\"o\">[</span><span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"k\">_</span><span class=\"o\">]]</span> <span class=\"o\">{</span>\n  <span class=\"k\">def</span> <span class=\"n\">wrap</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span>\n  <span class=\"k\">def</span> <span class=\"n\">first</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">T</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">B</span>\n<span class=\"o\">}</span>\n\n<span class=\"k\">val</span> <span class=\"n\">collection</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Collection</span><span class=\"o\">[</span><span class=\"kt\">List</span><span class=\"o\">]</span> <span class=\"o\">{</span> \n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">wrap</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> \n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">first</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">List</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">B</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">head</span> \n<span class=\"o\">}</span> \n<span class=\"n\">assertEquals</span><span class=\"o\">(</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">wrap</span><span class=\"o\">(</span><span class=\"s\">&#34;Some values&#34;</span><span class=\"o\">),</span> <span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"s\">&#34;Some values&#34;</span><span class=\"o\">))</span> \n<span class=\"n\">assertEquals</span><span class=\"o\">(</span><span class=\"n\">collection</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"o\">(</span><span class=\"nc\">List</span><span class=\"o\">(</span><span class=\"s\">&#34;Some values&#34;</span><span class=\"o\">)),</span> <span class=\"s\">&#34;Some values&#34;</span><span class=\"o\">)</span>\n\n<span class=\"k\">val</span> <span class=\"n\">seqCollection</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Collection</span><span class=\"o\">[</span><span class=\"kt\">Seq</span><span class=\"o\">]</span> <span class=\"o\">{</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">wrap</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">](</span><span class=\"n\">a</span><span class=\"k\">:</span> <span class=\"kt\">A</span><span class=\"o\">)</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">A</span><span class=\"o\">]</span> <span class=\"k\">=</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"k\">override</span> <span class=\"k\">def</span> <span class=\"n\">first</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">](</span><span class=\"n\">b</span><span class=\"k\">:</span> <span class=\"kt\">Seq</span><span class=\"o\">[</span><span class=\"kt\">B</span><span class=\"o\">])</span><span class=\"k\">:</span> <span class=\"kt\">B</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">head</span>\n<span class=\"o\">}</span>\n<span class=\"n\">assertEquals</span><span class=\"o\">(</span><span class=\"n\">seqCollection</span><span class=\"o\">.</span><span class=\"n\">wrap</span><span class=\"o\">(</span><span class=\"s\">&#34;Some values&#34;</span><span class=\"o\">),</span> <span class=\"nc\">Seq</span><span class=\"o\">(</span><span class=\"s\">&#34;Some values&#34;</span><span class=\"o\">))</span>\n<span class=\"n\">assertEquals</span><span class=\"o\">(</span><span class=\"n\">seqCollection</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"o\">(</span><span class=\"nc\">Seq</span><span class=\"o\">(</span><span class=\"s\">&#34;Some values&#34;</span><span class=\"o\">)),</span> <span class=\"s\">&#34;Some values&#34;</span><span class=\"o\">)</span></code></pre></div><p data-pid=\"Npmhx_js\">当然，这不意味着只有 TS 能定义近似类型层面的“函数”……Dotty（Scala 3）甚至真的引入了类型层面的函数，就叫 Type Lambda：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-108305555d749fe976b801a3d124d45d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1205\" data-rawheight=\"581\" class=\"origin_image zh-lightbox-thumb\" width=\"1205\" data-original=\"https://pic2.zhimg.com/v2-108305555d749fe976b801a3d124d45d_r.jpg\" data-original-token=\"v2-108305555d749fe976b801a3d124d45d\"/></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-17b9203a0ae8b74a8b977c2f61574211_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"615\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb\" width=\"615\" data-original=\"https://pic2.zhimg.com/v2-17b9203a0ae8b74a8b977c2f61574211_r.jpg\" data-original-token=\"v2-17b9203a0ae8b74a8b977c2f61574211\"/></figure><p data-pid=\"rmAofeHt\">真是可惜了，Dotty 推出了不少很有价值的新特性，Scala 的应用却越来越少了……只能说 Kotlin 确实是懂的——大部分用户不需要多么高级的语言，他们只需要写着爽的语言，至于泛型是不是真的都没很多人在乎……</p><p data-pid=\"zfQ8bqGU\"><i>顺带一提，上面这个 Scala 的 <code>Collection</code> 用我们刚才定义的 HKT 模拟倒也不复杂：</i></p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">interface</span> <span class=\"nx\">ContainerFn</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">unknown</span><span class=\"p\">]</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">def</span><span class=\"o\">:</span> <span class=\"p\">([</span><span class=\"nx\">x</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">Readonly</span><span class=\"p\">&lt;</span><span class=\"nt\">Args</span><span class=\"err\">&lt;</span><span class=\"na\">this</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span> <span class=\"nx\">value</span>: <span class=\"kt\">typeof</span> <span class=\"nx\">x</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n<span class=\"kr\">type</span> <span class=\"nx\">Container</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span> <span class=\"err\">=</span> <span class=\"na\">_</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Lift</span><span class=\"p\">&lt;</span><span class=\"nt\">ContainerFn</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">T</span><span class=\"err\">]</span><span class=\"p\">&gt;;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">BoxedFn</span> <span class=\"kr\">extends</span> <span class=\"nx\">Fn</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">unknown</span><span class=\"p\">]</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">def</span><span class=\"o\">:</span> <span class=\"p\">([</span><span class=\"nx\">x</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">Readonly</span><span class=\"p\">&lt;</span><span class=\"nt\">Args</span><span class=\"err\">&lt;</span><span class=\"na\">this</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"k\">typeof</span> <span class=\"nx\">x</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n<span class=\"kr\">type</span> <span class=\"nx\">Boxed</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span> <span class=\"err\">=</span> <span class=\"na\">_</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Lift</span><span class=\"p\">&lt;</span><span class=\"nt\">BoxedFn</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">T</span><span class=\"err\">]</span><span class=\"p\">&gt;;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Collection</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span> <span class=\"na\">extends</span> <span class=\"na\">Fn1</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">wrap</span><span class=\"o\">:</span> <span class=\"p\">&lt;</span><span class=\"nt\">A</span><span class=\"p\">&gt;(</span><span class=\"nx\">a</span>: <span class=\"kt\">A</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"na\">Cast</span><span class=\"err\">&lt;[</span><span class=\"na\">A</span><span class=\"err\">],</span> <span class=\"na\">Args</span><span class=\"err\">&lt;</span><span class=\"na\">T</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n  <span class=\"nx\">first</span><span class=\"o\">:</span> <span class=\"p\">&lt;</span><span class=\"nt\">B</span><span class=\"p\">&gt;(</span><span class=\"nx\">b</span>: <span class=\"kt\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"na\">Cast</span><span class=\"err\">&lt;[</span><span class=\"na\">B</span><span class=\"err\">],</span> <span class=\"na\">Args</span><span class=\"err\">&lt;</span><span class=\"na\">T</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">B</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">R1</span> <span class=\"o\">=</span> <span class=\"nx\">Collection</span><span class=\"p\">&lt;</span><span class=\"nt\">Container</span><span class=\"p\">&gt;[</span><span class=\"s1\">&#39;wrap&#39;</span><span class=\"p\">];</span>\n<span class=\"c1\">//   ^ &lt;A&gt;(a: A) =&gt; { value: A; }\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">R2</span> <span class=\"o\">=</span> <span class=\"nx\">Collection</span><span class=\"p\">&lt;</span><span class=\"nt\">Container</span><span class=\"p\">&gt;[</span><span class=\"s1\">&#39;first&#39;</span><span class=\"p\">];</span>\n<span class=\"c1\">//   ^ &lt;B&gt;(b: { value: B; }) =&gt; B;\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">R3</span> <span class=\"o\">=</span> <span class=\"nx\">Collection</span><span class=\"p\">&lt;</span><span class=\"nt\">Boxed</span><span class=\"p\">&gt;[</span><span class=\"s1\">&#39;wrap&#39;</span><span class=\"p\">];</span>\n<span class=\"c1\">//   ^ &lt;A&gt;(a: A) =&gt; [A];\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">R4</span> <span class=\"o\">=</span> <span class=\"nx\">Collection</span><span class=\"p\">&lt;</span><span class=\"nt\">Boxed</span><span class=\"p\">&gt;[</span><span class=\"s1\">&#39;first&#39;</span><span class=\"p\">];</span>\n<span class=\"c1\">//   ^ &lt;B&gt;(b: [B]) =&gt; B;\n</span></code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c9fd9bad46158bcca306120143562767_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"515\" data-rawheight=\"363\" class=\"origin_image zh-lightbox-thumb\" width=\"515\" data-original=\"https://pic4.zhimg.com/v2-c9fd9bad46158bcca306120143562767_r.jpg\" data-original-token=\"v2-c9fd9bad46158bcca306120143562767\"/></figure><p data-pid=\"xlnLpnTW\">好了，闲话少谈。我们看到，HKT 更大的作用其实在于为运行时系统提供更灵活的类型安全——这是理所当然的，像 TS 这样将 HKT 纯粹用于类型体操才是走偏了。从这个角度考虑，其实不太容易想到上面提到的 HKT 实现方式，而是以这种方式实现：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">AppendLodash</span><span class=\"p\">&lt;</span><span class=\"nt\">S</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">?</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">S</span><span class=\"si\">}</span><span class=\"sb\">_`</span> <span class=\"o\">:</span> <span class=\"kt\">never</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Repeat2</span><span class=\"p\">&lt;</span><span class=\"nt\">S</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">?</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">S</span><span class=\"si\">}${</span><span class=\"nx\">S</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">:</span> <span class=\"kt\">never</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">FnMap</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">readonly</span> <span class=\"nx\">AppendLodash</span>: <span class=\"kt\">AppendLodash</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;;</span>\n  <span class=\"kr\">readonly</span> <span class=\"nx\">Repeat2</span>: <span class=\"kt\">Repeat2</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">FnName</span> <span class=\"o\">=</span> <span class=\"k\">keyof</span> <span class=\"nx\">FnMap</span><span class=\"p\">&lt;</span><span class=\"nt\">unknown</span><span class=\"p\">&gt;;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Call</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">FnName</span><span class=\"err\">,</span> <span class=\"na\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">FnMap</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;[</span><span class=\"nx\">F</span><span class=\"p\">];</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Result1</span> <span class=\"o\">=</span> <span class=\"nx\">Call</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;AppendLodash&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ &#39;foo_&#39;\n</span><span class=\"c1\"></span>\n<span class=\"kr\">type</span> <span class=\"nx\">Result2</span> <span class=\"o\">=</span> <span class=\"nx\">Call</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;Repeat2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ &#39;barbar&#39;\n</span></code></pre></div><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-beaf5ffa5292e7f72baae2c07096d0bd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"530\" data-rawheight=\"149\" class=\"origin_image zh-lightbox-thumb\" width=\"530\" data-original=\"https://pic2.zhimg.com/v2-beaf5ffa5292e7f72baae2c07096d0bd_r.jpg\" data-original-token=\"v2-beaf5ffa5292e7f72baae2c07096d0bd\"/></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-cf47d17fa5e066c470b94b254d55ec8d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"143\" class=\"origin_image zh-lightbox-thumb\" width=\"475\" data-original=\"https://pic2.zhimg.com/v2-cf47d17fa5e066c470b94b254d55ec8d_r.jpg\" data-original-token=\"v2-cf47d17fa5e066c470b94b254d55ec8d\"/></figure><p data-pid=\"xCC3KId4\">……是的，这里的实现其实相当简单，就是一个大对象里边放了一堆“函数”，然后给每个函数一个字符串表示的唯一标识符，“调用”这些“函数”时就从大对象里根据标识符去取……非常简单的思路，fp-ts 就是这么干的。把这里的代码扩展一下，还可以得到接受两个参数的“函数”：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Concat</span><span class=\"p\">&lt;</span><span class=\"nt\">Ext</span><span class=\"err\">,</span> <span class=\"na\">S</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Ext</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span>\n    <span class=\"o\">?</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">S</span><span class=\"si\">}${</span><span class=\"nx\">Ext</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">:</span> <span class=\"kt\">never</span>\n  <span class=\"o\">:</span> <span class=\"kt\">never</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Fn2Map</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"na\">U</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">readonly</span> <span class=\"nx\">Concat</span>: <span class=\"kt\">Concat</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"na\">U</span><span class=\"p\">&gt;;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Fn2Name</span> <span class=\"o\">=</span> <span class=\"k\">keyof</span> <span class=\"nx\">Fn2Map</span><span class=\"p\">&lt;</span><span class=\"nt\">unknown</span><span class=\"err\">,</span> <span class=\"na\">unknown</span><span class=\"p\">&gt;;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Apply2</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">Fn2Name</span><span class=\"err\">,</span> <span class=\"na\">T</span><span class=\"err\">,</span> <span class=\"na\">U</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Fn2Map</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"na\">U</span><span class=\"p\">&gt;[</span><span class=\"nx\">F</span><span class=\"p\">];</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">R</span> <span class=\"o\">=</span> <span class=\"nx\">Apply2</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;Concat&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ &#39;foobar&#39;\n</span></code></pre></div><p data-pid=\"9LfPhRNY\">我们也顺便写个 <code>List.Map</code> 和 <code>Pipe</code>：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">namespace</span> <span class=\"nx\">List</span> <span class=\"p\">{</span>\n  <span class=\"kr\">export</span> <span class=\"kr\">type</span> <span class=\"nx\">Map</span><span class=\"o\">&lt;</span>\n    <span class=\"nx\">F</span> <span class=\"kr\">extends</span> <span class=\"nx\">FnName</span><span class=\"p\">,</span>\n    <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"kt\">unknown</span><span class=\"p\">[],</span>\n  <span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">AS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"p\">[</span><span class=\"k\">infer</span> <span class=\"nx\">Head</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span><span class=\"p\">]</span>\n    <span class=\"o\">?</span> <span class=\"p\">[</span><span class=\"nx\">Apply1</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">Head</span><span class=\"p\">&gt;,</span> <span class=\"p\">...</span><span class=\"nx\">Map</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">Tail</span><span class=\"p\">&gt;]</span>\n    <span class=\"o\">:</span> <span class=\"p\">[];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Result</span> <span class=\"o\">=</span> <span class=\"nx\">List</span><span class=\"p\">.</span><span class=\"nx\">Map</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;AppendLodash&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;baz&#39;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ [&#39;foo_&#39;, &#39;bar_&#39;, &#39;baz_&#39;]\n</span></code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7976d17427f4eb430d2ebabaa3201207_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"758\" data-rawheight=\"345\" class=\"origin_image zh-lightbox-thumb\" width=\"758\" data-original=\"https://pic4.zhimg.com/v2-7976d17427f4eb430d2ebabaa3201207_r.jpg\" data-original-token=\"v2-7976d17427f4eb430d2ebabaa3201207\"/></figure><p data-pid=\"eRWhxZWj\">也可以写个 <code>Pipe</code>：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Pipe</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"na\">NS</span> <span class=\"na\">extends</span> <span class=\"na\">readonly</span> <span class=\"na\">FnName</span><span class=\"err\">[]</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">NS</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"p\">[</span>\n  <span class=\"k\">infer</span> <span class=\"nx\">Head</span> <span class=\"kr\">extends</span> <span class=\"nx\">FnName</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span><span class=\"k\">infer</span> <span class=\"nx\">Tail</span> <span class=\"kr\">extends</span> <span class=\"kr\">readonly</span> <span class=\"nx\">FnName</span><span class=\"p\">[],</span>\n<span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Pipe</span><span class=\"p\">&lt;</span><span class=\"nt\">Call</span><span class=\"err\">&lt;</span><span class=\"na\">Head</span><span class=\"err\">,</span> <span class=\"na\">T</span><span class=\"p\">&gt;,</span> <span class=\"nx\">Tail</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">:</span> <span class=\"nx\">T</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Result</span> <span class=\"o\">=</span> <span class=\"nx\">Pipe</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">&#39;AppendLodash&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Repeat2&#39;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">//   ^ &#39;foo_foo_&#39;\n</span></code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d94d3efebf937c3d539fed11c8d21057_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"311\" class=\"origin_image zh-lightbox-thumb\" width=\"802\" data-original=\"https://pic4.zhimg.com/v2-d94d3efebf937c3d539fed11c8d21057_r.jpg\" data-original-token=\"v2-d94d3efebf937c3d539fed11c8d21057\"/></figure><p data-pid=\"FRIXndeF\">好了，这就是 HKT 的另一种模拟思路了，可能比上一种还要简单。在 fp-ts 中，你可以这样使用它（这里有一份相关的<a href=\"https://link.zhihu.com/?target=https%3A//github.com/gcanti/fp-ts/blob/master/docs/guides/HKT.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">教程</a>）：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">import</span> <span class=\"kr\">type</span> <span class=\"p\">{</span> <span class=\"nx\">Functor</span><span class=\"p\">,</span> <span class=\"nx\">Functor1</span><span class=\"p\">,</span> <span class=\"nx\">Functor2</span> <span class=\"p\">}</span> <span class=\"kr\">from</span> <span class=\"s1\">&#39;fp-ts/Functor&#39;</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"kr\">type</span> <span class=\"p\">{</span> <span class=\"nx\">HKT</span><span class=\"p\">,</span> <span class=\"nx\">Kind</span><span class=\"p\">,</span> <span class=\"nx\">Kind2</span><span class=\"p\">,</span> <span class=\"nx\">URIS</span><span class=\"p\">,</span> <span class=\"nx\">URIS2</span> <span class=\"p\">}</span> <span class=\"kr\">from</span> <span class=\"s1\">&#39;fp-ts/HKT&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">export</span> <span class=\"kr\">const</span> <span class=\"nx\">URI</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Boxed&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">export</span> <span class=\"kr\">type</span> <span class=\"nx\">URI</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">URI</span><span class=\"p\">;</span>\n\n<span class=\"kr\">declare</span> <span class=\"nx\">module</span> <span class=\"s1\">&#39;fp-ts/HKT&#39;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">interface</span> <span class=\"nx\">URItoKind</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">readonly</span> <span class=\"nx\">Boxed</span>: <span class=\"kt\">Boxed</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span><span class=\"p\">&gt;;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">export</span> <span class=\"kr\">type</span> <span class=\"nx\">Boxed</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nx\">A</span><span class=\"p\">];</span>\n\n<span class=\"kr\">export</span> <span class=\"kr\">const</span> <span class=\"nx\">mapBoxed</span>: <span class=\"kt\">Functor1</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;Boxed&#39;</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">URI</span><span class=\"p\">,</span>\n  <span class=\"nx\">map</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">ma</span><span class=\"p\">,</span> <span class=\"nx\">f</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">[</span><span class=\"nx\">f</span><span class=\"p\">(</span><span class=\"nx\">ma</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])],</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">lift</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">URIS2</span><span class=\"p\">&gt;(</span>\n  <span class=\"nx\">F</span>: <span class=\"kt\">Functor2</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"p\">&gt;,</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"p\">&lt;</span><span class=\"nt\">A</span><span class=\"err\">,</span> <span class=\"na\">B</span><span class=\"p\">&gt;(</span><span class=\"nx\">f</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">a</span>: <span class=\"kt\">A</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">B</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">&lt;</span><span class=\"nt\">E</span><span class=\"p\">&gt;(</span><span class=\"nx\">fa</span>: <span class=\"kt\">Kind2</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">E</span><span class=\"err\">,</span> <span class=\"na\">A</span><span class=\"p\">&gt;)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Kind2</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">E</span><span class=\"err\">,</span> <span class=\"na\">B</span><span class=\"p\">&gt;;</span>\n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">lift</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span> <span class=\"na\">extends</span> <span class=\"na\">URIS</span><span class=\"p\">&gt;(</span>\n  <span class=\"nx\">F</span>: <span class=\"kt\">Functor1</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"p\">&gt;,</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"p\">&lt;</span><span class=\"nt\">A</span><span class=\"err\">,</span> <span class=\"na\">B</span><span class=\"p\">&gt;(</span><span class=\"nx\">f</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">a</span>: <span class=\"kt\">A</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">B</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">fa</span>: <span class=\"kt\">Kind</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">A</span><span class=\"p\">&gt;)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Kind</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">B</span><span class=\"p\">&gt;;</span>\n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">lift</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"p\">&gt;(</span>\n  <span class=\"nx\">F</span>: <span class=\"kt\">Functor</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"p\">&gt;,</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"p\">&lt;</span><span class=\"nt\">A</span><span class=\"err\">,</span> <span class=\"na\">B</span><span class=\"p\">&gt;(</span><span class=\"nx\">f</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">a</span>: <span class=\"kt\">A</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">B</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">fa</span>: <span class=\"kt\">HKT</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">A</span><span class=\"p\">&gt;)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">HKT</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">B</span><span class=\"p\">&gt;;</span>\n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">lift</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"p\">&gt;(</span>\n  <span class=\"nx\">F</span>: <span class=\"kt\">Functor</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"p\">&gt;,</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"p\">&lt;</span><span class=\"nt\">A</span><span class=\"err\">,</span> <span class=\"na\">B</span><span class=\"p\">&gt;(</span><span class=\"nx\">f</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">a</span>: <span class=\"kt\">A</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">B</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">fa</span>: <span class=\"kt\">HKT</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">A</span><span class=\"p\">&gt;)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">HKT</span><span class=\"p\">&lt;</span><span class=\"nt\">F</span><span class=\"err\">,</span> <span class=\"na\">B</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span><span class=\"nx\">fa</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">F</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">fa</span><span class=\"p\">,</span> <span class=\"nx\">f</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">arrayFirst</span> <span class=\"o\">=</span> <span class=\"p\">&lt;</span><span class=\"nt\">AS</span> <span class=\"na\">extends</span> <span class=\"na\">readonly</span> <span class=\"na\">unknown</span><span class=\"err\">[]</span><span class=\"p\">&gt;(</span><span class=\"kr\">as</span><span class=\"o\">:</span> <span class=\"nx\">AS</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">AS</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=&gt;</span> <span class=\"kr\">as</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">r</span> <span class=\"o\">=</span> <span class=\"nx\">lift</span><span class=\"p\">(</span><span class=\"nx\">mapBoxed</span><span class=\"p\">)(</span><span class=\"nx\">arrayFirst</span><span class=\"p\">);</span>\n<span class=\"c1\">//    ^ &lt;AS extends readonly unknown[]&gt;(fa: Boxed&lt;AS&gt;) =&gt; Boxed&lt;AS[0]&gt;\n</span></code></pre></div><p data-pid=\"mNRAS2KX\">类似这样的东西用上面的思路也是可以实现的，不一定要用 fp-ts 这种基于大对象的实现方式，有兴趣的话可以自己试试。</p><h2>所以说？</h2><p data-pid=\"rNPigixm\">这篇文章的起始意图是介绍 HOTScript 这个库，但是写着写着就走偏了，开始讨论如何在 TS 中实现 HKT，并且（似乎）给出了一个比 HOTScript 更好的 HKT 实现，非常神秘。</p><p data-pid=\"_p0kWcJl\">好了，但不管怎么样，我写这篇文章的目的还是为了推广下 HOTScript 这个库，或者说推广一下在类型层面使用 HKT 代替命令式编程范式这种思路。通过 HOTScript，你可以很轻松地编写一个类型安全的 querySelector，而使用传统方式显然不会这么轻松：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"kr\">as</span> <span class=\"nx\">H</span> <span class=\"kr\">from</span> <span class=\"s1\">&#39;hotscript&#39;</span>\n\n<span class=\"kr\">declare</span> <span class=\"kd\">function</span> <span class=\"nx\">querySelector</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;(</span><span class=\"nx\">selector</span>: <span class=\"kt\">T</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">ElementFromSelector</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">|</span> <span class=\"kc\">null</span>\n\n<span class=\"kr\">interface</span> <span class=\"nx\">Trim</span> <span class=\"kr\">extends</span> <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">Fn</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span><span class=\"o\">:</span>\n    <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"s2\">&#34;arg0&#34;</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Prev</span><span class=\"si\">}</span><span class=\"sb\"> ,</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Next</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">&lt;</span><span class=\"nt\">Trim</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">Prev</span><span class=\"p\">}</span><span class=\"err\">,$</span><span class=\"p\">{</span><span class=\"na\">Next</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span> <span class=\"o\">:</span>\n    <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"s2\">&#34;arg0&#34;</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Prev</span><span class=\"si\">}</span><span class=\"sb\">, </span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Next</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">&lt;</span><span class=\"nt\">Trim</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">Prev</span><span class=\"p\">}</span><span class=\"err\">,$</span><span class=\"p\">{</span><span class=\"na\">Next</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span> <span class=\"o\">:</span>\n    <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"s2\">&#34;arg0&#34;</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Prev</span><span class=\"si\">}</span><span class=\"sb\">:is(</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">El</span><span class=\"si\">}</span><span class=\"sb\">)</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Rest</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">&lt;</span><span class=\"nt\">Trim</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">Prev</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">El</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">Rest</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span> <span class=\"o\">:</span>\n    <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"s2\">&#34;arg0&#34;</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Prev</span><span class=\"si\">}</span><span class=\"sb\">:where(</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">El</span><span class=\"si\">}</span><span class=\"sb\">)</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Rest</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">&lt;</span><span class=\"nt\">Trim</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">Prev</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">El</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">Rest</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span> <span class=\"o\">:</span>\n    <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"s2\">&#34;arg0&#34;</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">El</span><span class=\"si\">}</span><span class=\"sb\">(</span><span class=\"si\">${</span><span class=\"kt\">string</span><span class=\"si\">}</span><span class=\"sb\">)</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Rest</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">&lt;</span><span class=\"nt\">Trim</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">El</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">Rest</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span> <span class=\"o\">:</span>\n    <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"s2\">&#34;arg0&#34;</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">El</span><span class=\"si\">}</span><span class=\"sb\">[</span><span class=\"si\">${</span><span class=\"kt\">string</span><span class=\"si\">}</span><span class=\"sb\">]</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Rest</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">$</span><span class=\"p\">&lt;</span><span class=\"nt\">Trim</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">El</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">Rest</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span> <span class=\"o\">:</span>\n    <span class=\"k\">this</span><span class=\"p\">[</span><span class=\"s2\">&#34;arg0&#34;</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">ElementFromSelector</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">Pipe</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"err\">[</span>\n    <span class=\"na\">Trim</span><span class=\"err\">,</span>\n    <span class=\"na\">H.Strings.Split</span><span class=\"err\">&lt;&#39;</span> <span class=\"err\">&#39;</span><span class=\"p\">&gt;,</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">Tuples</span><span class=\"p\">.</span><span class=\"nx\">Last</span><span class=\"p\">,</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">Strings</span><span class=\"p\">.</span><span class=\"nx\">Split</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;,&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">Tuples</span><span class=\"p\">.</span><span class=\"nx\">ToUnion</span><span class=\"p\">,</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">Strings</span><span class=\"p\">.</span><span class=\"nx\">Split</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;:&#34;</span> <span class=\"o\">|</span> <span class=\"s2\">&#34;[&#34;</span> <span class=\"o\">|</span> <span class=\"s2\">&#34;.&#34;</span> <span class=\"o\">|</span> <span class=\"s2\">&#34;#&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">Tuples</span><span class=\"p\">.</span><span class=\"nx\">At</span><span class=\"p\">&lt;</span><span class=\"nt\">0</span><span class=\"p\">&gt;,</span>\n    <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">Match</span><span class=\"o\">&lt;</span><span class=\"p\">[</span>\n        <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">Match</span><span class=\"p\">.</span><span class=\"nx\">With</span><span class=\"p\">&lt;</span><span class=\"nt\">keyof</span> <span class=\"na\">HTMLElementTagNameMap</span><span class=\"err\">,</span> <span class=\"na\">H.Objects.Get</span><span class=\"err\">&lt;</span><span class=\"na\">H._</span><span class=\"err\">,</span> <span class=\"na\">HTMLElementTagNameMap</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n        <span class=\"nx\">H</span><span class=\"p\">.</span><span class=\"nx\">Match</span><span class=\"p\">.</span><span class=\"nx\">With</span><span class=\"p\">&lt;</span><span class=\"nt\">any</span><span class=\"err\">,</span> <span class=\"na\">HTMLElement</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">]</span><span class=\"o\">&gt;</span>\n<span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6ab4e8884e8449669b3d23d764d2c03e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"633\" data-rawheight=\"433\" class=\"origin_image zh-lightbox-thumb\" width=\"633\" data-original=\"https://pic3.zhimg.com/v2-6ab4e8884e8449669b3d23d764d2c03e_r.jpg\" data-original-token=\"v2-6ab4e8884e8449669b3d23d764d2c03e\"/></figure><p data-pid=\"H68UOyvb\">一个类型安全的 Router：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">Pipe</span><span class=\"p\">,</span> <span class=\"nx\">Objects</span><span class=\"p\">,</span> <span class=\"nx\">Strings</span><span class=\"p\">,</span> <span class=\"nx\">ComposeLeft</span><span class=\"p\">,</span> <span class=\"nx\">Tuples</span><span class=\"p\">,</span> <span class=\"nx\">Match</span> <span class=\"p\">}</span> <span class=\"kr\">from</span> <span class=\"s2\">&#34;hotscript&#34;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">res5</span> <span class=\"o\">=</span> <span class=\"nx\">Pipe</span><span class=\"o\">&lt;</span>\n  <span class=\"c1\">//    ^? { id: string, index: number }\n</span><span class=\"c1\"></span>  <span class=\"s2\">&#34;/users/&lt;id:string&gt;/posts/&lt;index:number&gt;&#34;</span><span class=\"p\">,</span>\n  <span class=\"p\">[</span>\n    <span class=\"nx\">Strings</span><span class=\"p\">.</span><span class=\"nx\">Split</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;/&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">Tuples</span><span class=\"p\">.</span><span class=\"nx\">Filter</span><span class=\"p\">&lt;</span><span class=\"nt\">Strings.StartsWith</span><span class=\"err\">&lt;&#34;&lt;&#34;</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n    <span class=\"nx\">Tuples</span><span class=\"p\">.</span><span class=\"nx\">Map</span><span class=\"p\">&lt;</span><span class=\"nt\">ComposeLeft</span><span class=\"err\">&lt;[</span><span class=\"na\">Strings.Trim</span><span class=\"err\">&lt;&#34;&lt;&#34;</span> <span class=\"err\">|</span> <span class=\"err\">&#34;</span><span class=\"p\">&gt;</span><span class=\"s2\">&#34;&gt;, Strings.Split&lt;&#34;</span><span class=\"o\">:</span><span class=\"s2\">&#34;&gt;]&gt;&gt;,\n</span><span class=\"s2\">    Tuples.ToUnion,\n</span><span class=\"s2\">    Objects.FromEntries,\n</span><span class=\"s2\">    Objects.MapValues&lt;\n</span><span class=\"s2\">      Match&lt;[Match.With&lt;&#34;</span><span class=\"kt\">string</span><span class=\"s2\">&#34;, string&gt;, Match.With&lt;&#34;</span><span class=\"kt\">number</span><span class=\"err\">&#34;</span><span class=\"p\">,</span> <span class=\"kt\">number</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&gt;</span>\n  <span class=\"p\">]</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"uIyIO2BY\">——最后，我想说重要的不是“前端娱乐圈又造了个新轮子”，而是一种 TS 类型层面上的新编程范式已经被越来越多地熟知。HKT 并不是什么新概念，然而将其用于类型层面的“函数式编程”，确实是一个相当新颖的概念——至少对多数人来说。</p>",
            "voteup_count": 76,
            "comment_count": 13
        },
        "created": "2023-10-14T03:21:21+08:00"
    },
    {
        "content": {
            "id": 3240355437,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/624862650/answer/3240355437",
            "created_time": 1696679851,
            "updated_time": 1696785331,
            "question": {
                "type": "question",
                "id": 624862650,
                "title": "为什么 flow 干不过 typescript?",
                "question_type": "normal",
                "created": 1696563718,
                "updated_time": 1696563718,
                "url": "https://www.zhihu.com/question/624862650",
                "is_deleted": false
            },
            "author": {
                "id": "75acc1436f62a422cf2de850d3e1940d",
                "url_token": "parkin-lin",
                "name": "大家的林语冰",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-5491e5b8f3ac2539ebf21684332c49df_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-5491e5b8f3ac2539ebf21684332c49df.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/75acc1436f62a422cf2de850d3e1940d",
                "user_type": "people",
                "headline": "bilibili@人猫神话 | 公众号@人猫神话",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pica.zhimg.com/v2-af3c46537b9700dbf7f61f0be956dc86.png?source=6a64a727",
                        "night_mode_url": "https://pic2.zhimg.com/v2-af3c46537b9700dbf7f61f0be956dc86.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://pica.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1545332805
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 19,
            "comment_count": 9,
            "thanks_count": 16,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"1xt6G8pj\">可以肯定的是，原因一言难尽；可以肯定的是，TS（TypeScript）在这场静态类型的神仙打架中脱颖而出。</p><p data-pid=\"X-koeGCI\">私以为其中一大原因 —— 这大约就是开源的魔力吧，毕竟 TS 也不是天选之子，生而傲天对祂者降维打击。</p><p data-pid=\"s2-hypTA\">实际上，Flow 现在也是开源的，但它起初只是 Meta（当时还是 Facebook）的一个内部私有项目，而 TS 则由于当时微软的相关政策，一开始就不得不开源。就开源而言，可以说 Flow 是大势所趋，而 TS 是迫不得已，所以时势造英雄，TS 被迫反杀。</p><p data-pid=\"Ph1C2bfH\">另外一个原因是前端生态的“曝光效应”，由于 TS 更愿意拥抱前端生态，所以在社区就成功滚雪球了。</p><p data-pid=\"UW9FfB8G\">举个栗子，Angular 团队有静态类型编程的刚需，它们一开始有自给自足的 AtScript，谷歌有 Closure 编译器（类似 JSDoc 风格），但 TS 看到它们在反复造轮子，说服了 Angular 团队一起拥抱 TS。Angular 当时有邀请包括但不限于 Facebook 的 Flow、谷歌的 Dart 等团队洽谈，但只有 TS 团队愿意精诚合作、梦幻联动。</p><p data-pid=\"A1k5Z-SH\">有意思的是，Angular2 为了拥抱 TS，损失了若干流量。TS 则找到了流量密码，打不过就加入，反手就支持 TSX，连 React 都莫名其妙化敌为友。</p><p data-pid=\"G9bFMtWr\">还有一个原因是“路径依赖”（技术舒适圈）。相对于 Dart 这种破而后立的破坏性更新，TS 选择的是增量更新，尽量成为 JS 的严格超集，TS 团队直接参与 TC39 的 ES6 的标准话。对于前端用户而言，不需要从零开始学习一门新语言的语法，而是基于 ES6 语法增量更新静态类型，心智负担和学习成本的性价比吸引更多社区的 ES6 爱好者。</p><p data-pid=\"UXWSn3CW\">只能说 TS 更懂公关，该“无为”就“无为”，TS 的博弈策略绝非“战无不胜”，而是“百战不殆”。</p><p data-pid=\"RFob0uvr\">更多相关轶事可以临幸语冰搬运的纪录片《TS 的诞生》。</p><a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1rV411w7D8/%3Fspm_id_from%3D333.999.0.0%26vd_source%3Ddfa48d4af8a01fa6be1d9939e32794f8\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-b144c09d95e6a3729910c476d016f4d7_ipico.jpg\" data-image-width=\"100\" data-image-height=\"100\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TypeScript 的诞生：TS 官摄最新纪录片</a><p></p>",
            "excerpt": "可以肯定的是，原因一言难尽；可以肯定的是，TS（TypeScript）在这场静态类型的神仙打架中脱颖而出。 私以为其中一大原因 —— 这大约就是开源的魔力吧，毕竟 TS 也不是天选之子，生而傲天对祂者降维打击。 实际上，Flow 现在也是开源的，但它起初只是 Meta（当时还是 Facebook）的一个内部私有项目，而 TS 则由于当时微软的相关政策，一开始就不得不开源。就开源而言，可以说 Flow 是大势所趋，而 TS 是迫不得已，所以时势造英…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjtzI+JDCCk+ZwwkgIlCgk2MTkyMzYyMTQSCjMyNDAzNTU0MzcYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-10-07T19:57:31+08:00"
    },
    {
        "content": {
            "id": 1325705210,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/23921846/answer/1325705210",
            "created_time": 1594175111,
            "updated_time": 1643926678,
            "question": {
                "type": "question",
                "id": 23921846,
                "title": "程序员想要出国工作（欧美国家）有哪些可以努力的途径？",
                "question_type": "normal",
                "created": 1401115842,
                "updated_time": 1401115842,
                "url": "https://www.zhihu.com/question/23921846",
                "is_deleted": false
            },
            "author": {
                "id": "1183186dd5cb98b2fc60b23c6e073207",
                "url_token": "kenshinji",
                "name": "kenshinji",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/b932d8ce7_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/b932d8ce7.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/1183186dd5cb98b2fc60b23c6e073207",
                "user_type": "people",
                "headline": "Podcasts Junkie &amp;&amp; Geek",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 724,
            "comment_count": 168,
            "thanks_count": 248,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"mhUoF5Uw\">就我最近在国内通过远程面试拿到的一家德国电商(<a href=\"https://link.zhihu.com/?target=https%3A//www.zalando.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Zalando</a>)的工作机会来分享一下我的经验吧。</p><p data-pid=\"CK6lByZ0\">首先你的简历要能通过筛选，这个基本上是一个比较长期的过程，我基本上是做到了如下几个点。</p><ul><li data-pid=\"FPcFRlr6\">需要有一份<b>英文简历</b>，最好是放到Linkedin上面，并且能够时不时的更新，这样就会有一些猎头或者公司的Recruiter来主动联系你，更新的方面包括你最近做的项目啊，你参加的网上的培训的课程啊（我有参加了很多codeschool, codecademy的课程都放到了Linkedin的简历里面)。<b>关于英文简历的修改，推荐一个神器<a href=\"https://link.zhihu.com/?target=https%3A//grammarly.go2cloud.org/aff_c%3Foffer_id%3D182%26aff_id%3D89281\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Grammarly</a></b>, 能够帮你纠正英文写作的一些常见错误，用他们家免费的就够了,支持Mac/Windows平台，还有Chrome浏览器插件。</li><li data-pid=\"Xr7NNQmr\"><b>活跃的Stack Overflow账号</b>的profile，我曾经有一段时间几乎每天都有去Stack Overflow上面提问题和回答问题。</li><li data-pid=\"zV3QT2y5\"><b>活跃的GitHub账号</b>以及可以拿出手介(chui)绍(niu)的开源项目</li><li data-pid=\"jIbCHL4f\">要通过简历关，其实还有个捷径就是<b>找朋友内推</b>，一般内推的话，基本都能过简历关。</li></ul><p data-pid=\"zAgz-l9R\">关于Stack Overflow和GitHub我是之前看到有些公司说这两个是加分项，所以我很早之前就开始打理我的这两个网站账号了，事实证明确实如此，靠这个我拿到了爱尔兰的Riot Games的面试机会，并且面试的时候面试官也提到了。</p><p data-pid=\"4I7ckTYZ\">简历关通过了的话，接下来就是面试了。我最近面得比较多的都是大厂，而大厂的面试流程几乎都是标准化的，大同小异，<b>基本上最关键的两个部分就是 算法题 + 系统设计</b>。</p><ul><li data-pid=\"y4qjcer8\"><b>算法题</b>， 一般大部分的公司在开始面试的时候都会给你一个做在线编程题的网站，比如codility或者hackerrank这样的，一般的公司可能是30分钟一个编程大题，基本上都是1小时左右完成两个编程大题。如果你经常上LeetCode刷算法题的话，这种关卡可以轻松拿下。接下来可能就是面试官跟你约个时间然后共享屏幕来做算法题了，一般的公司可能会允许你通过IDE来完成，难度大一点的公司，比如Google，会要求你用Google Docs来白板编程。</li><li data-pid=\"sgDzWzDO\"><b>系统设计</b>，这一关我一直比较弱，最后拿下Zalando的offer也差点栽在这个上面，后来有网友推荐了<a href=\"https://link.zhihu.com/?target=https%3A//www.educative.io/courses/grokking-the-system-design-interview%3Faff%3DBYZE\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">educative.io的系统设计课程</a>，并且这个课程也是在一亩三分地上被推荐最多的应付大厂系统设计课程。所以如果你不知道如何准备系统设计面试的话，可以看看这个课程。</li></ul><p data-pid=\"QxYHev2d\">除了算法题和系统设计，我还要说说可能比较重要的一关，就是<b>Behavior Questions</b>(行为测试)，基本上就是问诸如“如果你跟你的领导发生了争执，你会怎么处理”， “说说你遇到的一次挫折”，诸如此类的直击灵魂深处的拷问(因为很多时候只能靠编故事   )。 这种面试在Amazon这样的公司，占到了50%的比重，之前参加了加拿大亚马逊的面试，整个4轮下来，每一关的面试官都是花了一半的时间在问这类问题，并且也听到一种说法是很多技术面过关了的面试者，最终因为Behavior Questions折戟沉沙。如果你马上要面试亚马逊的话，不妨看看油管上Dan Croitor的视频，他有一系列如何应对这类问题的视频。</p><p data-pid=\"RUAQAc0k\">好了，我要分享的我的面试国外公司的经验基本就是这些，如果你有什么问题，欢迎留言评论或者直接私信我。</p><p data-pid=\"9gBZSYVP\">或者如果你有兴趣直接从国内找海外的工作，也欢迎联系我交流经验。:)</p>",
            "excerpt": "就我最近在国内通过远程面试拿到的一家德国电商( Zalando )的工作机会来分享一下我的经验吧。首先你的简历要能通过筛选，这个基本上是一个比较长期的过程，我基本上是做到了如下几个点。 需要有一份英文简历，最好是放到Linkedin上面，并且能够时不时的更新，这样就会有一些猎头或者公司的Recruiter来主动联系你，更新的方面包括你最近做的项目啊，你参加的网上的培训的课程啊（我有参加了很多codeschool, codecademy的课程都放到…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxj6z5L4BCD162qSAiUKCTI3MTEwNDU3MBIKMTMyNTcwNTIxMBgEIgpJTUFHRV9URVhU",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2020-07-08T10:25:11+08:00"
    },
    {
        "content": {
            "id": 654234711,
            "title": "整洁架构在前端的设计思想与应用实践",
            "type": "article",
            "excerpt_title": "作者：owen、avery、challen 等 随着业务的发展，前端项目承载了越来越多的职责，也越来越复杂，简单通过 cli 生成的框架结构越来越无法满足。面对前端项目复杂度的不断提升，我们开始思考前端的架构组织方式怎么才更合理？应该如何设计良好的前端架构？行业是否有比较好的优秀实践？本文先从架构基本概念开始介绍，然后介绍整洁架构的概念和设计理念，最后结合整洁架构、 DDD 方法论，一起探讨整洁架构在前端的应用实践。1、 为…",
            "url": "https://zhuanlan.zhihu.com/p/654234711",
            "image_url": "https://picx.zhimg.com/v2-b8e4bf8197f8b4ed23860d800dc2023b_r.jpg?source=172ae18b",
            "created": 1694079006,
            "updated": 1694079006,
            "author": {
                "id": "3a6e8ebd9bc64271aab3f1c9c9f217dc",
                "url_token": "teng-xun-ji-zhu-gong-cheng",
                "name": "腾讯技术工程",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-f3e3a9dcfb2d2a875914f9b139983cc2_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-f3e3a9dcfb2d2a875914f9b139983cc2.jpg?source=0df5f383",
                "is_org": true,
                "type": "people",
                "url": "https://www.zhihu.com/people/3a6e8ebd9bc64271aab3f1c9c9f217dc",
                "user_type": "organization",
                "headline": "分享腾讯技术",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19554298",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19554298",
                                "name": "编程",
                                "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c"
                            }
                        ]
                    },
                    {
                        "type": "identity",
                        "description": "已认证账号"
                    }
                ],
                "badge_v2": {
                    "title": "编程话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "编程话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "已认证账号",
                            "url": "https://www.zhihu.com/term/institution-settle",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "编程话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity_org",
                            "title": "已认证账号",
                            "description": "已认证账号",
                            "url": "https://www.zhihu.com/term/institution-settle",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c"
                },
                "actived_at": 1504255006
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"Ef64bPiW\">作者：owen、avery、challen 等</p><blockquote data-pid=\"GWDTjuai\"> 随着业务的发展，前端项目承载了越来越多的职责，也越来越复杂，简单通过 cli 生成的框架结构越来越无法满足。面对前端项目复杂度的不断提升，我们开始思考前端的架构组织方式怎么才更合理？应该如何设计良好的前端架构？行业是否有比较好的优秀实践？本文先从架构基本概念开始介绍，然后介绍整洁架构的概念和设计理念，最后结合整洁架构、 DDD 方法论，一起探讨整洁架构在前端的应用实践。</blockquote><h3><b>1、 为什么需要了解架构</b></h3><p data-pid=\"ZwtxRmoP\">对于每个软件系统，我们都可以通过行为和架构两个维度来体现它的实际价值。</p><p data-pid=\"gbEloVg2\">行为是指系统实现的功能特性，一般是比较紧急的，需要按时上线。架构就是指系统架构，是重要的，但是并不总是特别紧急。因此导致我们常常忽视系统的架构价值，使得系统越来越难于理解、修改，导致系统功能迭代成本逐步上升，生产力逐步下降。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4ada11ecad1125d178a2b15698db558e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1600\" data-rawheight=\"894\" class=\"origin_image zh-lightbox-thumb\" width=\"1600\" data-original=\"https://pic3.zhimg.com/v2-4ada11ecad1125d178a2b15698db558e_r.jpg\" data-original-token=\"v2-4ada11ecad1125d178a2b15698db558e\"/></figure><p data-pid=\"XxoIOtCO\">如果你遇到了这个问题，就应该要了解架构了，思考当前系统架构是否合理。</p><p data-pid=\"_R0gATYG\"><b>那什么是架构呢？</b></p><p data-pid=\"RQt2vCXW\">架构的本质就是控制系统复杂度，其终极目标用最小的人力成本来满足构建和维护系统需求，同时最小化系统的总运营成本，确保系统不会因为增加功能而导致开发成本上升。</p><p data-pid=\"mt1jE10d\"><b>那如何来判断架构的优劣？</b></p><p data-pid=\"4yyHXGnM\">一个软件架构的优劣，可以用它满足用户需求所需要的成本来衡量。如果该成本很低，系统理解成本低、易于修改、方便维护，能轻松部署，并且在系统的整个生命周期内一直都能维持这样的低成本，那么这个系统的设计就是优良的。反之，如果该系统的每次发布都会提升下一次变更的成本，那么这个设计就是不好的。</p><p data-pid=\"W3QTcUI7\">这样的架构可以大大节省软件项目构建与维护的人力成本。让每次变更都短小简单，易于实施，并且避免缺陷，用最小的成本，最大程度地满足功能性和灵活性的要求。</p><p data-pid=\"Mzeix8gp\"><b>那么良好的架构是怎么实现的呢？</b></p><p data-pid=\"dh9MXGcF\">良好的架构实现方式，一般都是通过模块化解耦、分层解耦，实现关注点分离，并通过一定的规则组织好不同模块、不同分层的关系，实现高内聚低耦合，从而控制系统的复杂度。</p><p data-pid=\"7Le6eznq\">整洁架构就是其中一种经典架构，让你我不再为每次功能迭代而胆战心惊，<b>那么接下来我们将介绍何为『整洁架构』，为什么说它是一个好的软件架构。</b></p><h3><b>2、 整洁架构的定义</b></h3><p data-pid=\"2Hs4PS_A\">整洁架构（Clean Architecture）是一种软件架构设计原则，由罗伯特·C·马丁（Robert C. Martin）提出，它旨在使软件系统更加灵活、可维护和可测试。</p><p data-pid=\"HedtcEP1\">主要特点如下：</p><ul><li data-pid=\"Ig_LhHQ-\"><b>与框架无关：</b> 无论是前端代码还是服务端代码，其逻辑本身都应该是独立的，不应该依赖于某一个第三方框架或工具库。比如不依赖 Vue.js、React 等框架。</li><li data-pid=\"myse3Dqj\"><b>可测试性</b>：代码中的业务逻辑可以在不依赖 ui、数据库、服务器的情况下进行测试。</li><li data-pid=\"ddwvnbCd\"><b>和 ui 无关：</b>代码中的业务逻辑不应该和 ui 做强绑定。比如把一个 web 应用切换成桌面应用，业务逻辑不应该受到影响。</li><li data-pid=\"giE54e3j\"><b>和数据库无关：</b>无论数据库用的是 mysql 还是 mongodb，无论其怎么变，都不该影响到业务逻辑。</li><li data-pid=\"21RWk3qL\"><b>和外部服务无关：</b>将业务逻辑置于系统的核心，无论外部服务怎么变，都不影响到使用该服务的业务逻辑。</li></ul><p data-pid=\"It9JsU_n\">一个优秀的软件架构师应该致力于最大化架构组件的可选项数量，可以低成本更换框架、数据库、外部服务等，接下来我们具体看下整洁架构的设计思想。</p><h3><b>3、 整洁架构的设计</b></h3><h3><b>3.1、整洁架构的设计思想</b></h3><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1e97feee11e9572bd0b72b0903f9d419_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"772\" data-rawheight=\"567\" class=\"origin_image zh-lightbox-thumb\" width=\"772\" data-original=\"https://pic2.zhimg.com/v2-1e97feee11e9572bd0b72b0903f9d419_r.jpg\" data-original-token=\"v2-1e97feee11e9572bd0b72b0903f9d419\"/></figure><p data-pid=\"C83A1i2l\">整洁架构除了以下至少四层架构外，在层与层之间还有一个非常明确的依赖关系，<b>外层的逻辑依赖内层的逻辑</b> (图中黑色箭头指向)，但是内层的代码不可以依赖外层。</p><ul><li data-pid=\"STYoKGoj\"><b>实体层：</b> 业务实体这一层中封装的是整个系统的关键业务逻辑。这些实体既可以是带方法的类，也可以是带有一堆函数的结构体。但它们必须是高度抽象的，封装了该应用中最通用、最高层的业务逻辑，只可以随着核心业务规则变化，不可以随着外层组件的变化而变化。例如，一个针对页面导航方式或者安全问题的修改不应该触及这些对象，一个针对应用在运行时的行为所做的变更也不应该影响业务实体。该层一般采用 DDD 的理念进行抽象、封装。</li><li data-pid=\"T1yXsgR3\"><b>用例层:</b> 软件的用例层中通常包含的是特定应用场景下的业务逻辑，这里面封装并实现了整个系统的所有用例。该层控制所有流向和流出实体层的数据流，并使用核心的实体及其业务规则来完成业务需求。此层的变更不会影响实体层，更外层的变更，比如开发框架、数据库、UI 等变化，也不会影响此层。</li><li data-pid=\"bJ_Jleyc\"><b>适配器层:</b> 软件的接口适配器层中通常是一组数据转换器，它们负责将数据从对用例和业务实体而言最方便操作的格式，转化成外部系统（譬如数据库以及 Web）最方便操作的格式。反之，来自于外部服务的数据也会在这层转换为内层需要的结构，一般用于 ui 和接口的适配操作。</li><li data-pid=\"ighr4chO\"><b>框架和驱动层：</b>由最外层由各种框架和工具组成，比如 Web 框架、数据库访问工具等。通常在这层不需要写太多代码，大多是一些用来跟内层通信的胶水代码。</li></ul><p data-pid=\"EAohP-Wj\"><b>了解了整洁结构的设计思想，那么它和其他经典的架构有什么区别呢？</b></p><h3><b>3.2、整洁架构和其他架构对比</b></h3><p data-pid=\"erZV_Fiw\">我们先了解下最常见的六边形架构和 DDD 分层架构。</p><h3><b>3.2.1、六边形架构</b></h3><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7ee26ef4250150f3ba1516b585fcf62e_b.jpg\" data-size=\"normal\" data-rawwidth=\"1142\" data-rawheight=\"854\" class=\"origin_image zh-lightbox-thumb\" width=\"1142\" data-original=\"https://pic3.zhimg.com/v2-7ee26ef4250150f3ba1516b585fcf62e_r.jpg\" data-original-token=\"v2-7ee26ef4250150f3ba1516b585fcf62e\"/><figcaption>本图片来源《DDD 实战课》</figcaption></figure><p data-pid=\"lG7edZAE\">其核心理念是：应用是通过端口与外部进行交互的 。也就是说，在上图的六边形架构中，红圈内的核心业务逻辑（应用程序和领域模型）与外部资源（包括 APP、Web 应用以及数据库资源等）完全隔离，仅通过适配器进行交互。</p><p data-pid=\"k9kX0dRu\">它解决了业务逻辑与用户界面的代码交错问题，很好地实现了前后端分离。</p><h3><b>3.2.2、DDD 分层架构</b></h3><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8cb153b8a89c5cd55bbbf444c1ded2f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1106\" data-rawheight=\"996\" class=\"origin_image zh-lightbox-thumb\" width=\"1106\" data-original=\"https://pic2.zhimg.com/v2-8cb153b8a89c5cd55bbbf444c1ded2f9_r.jpg\" data-original-token=\"v2-8cb153b8a89c5cd55bbbf444c1ded2f9\"/></figure><p data-pid=\"ksPSjWxL\">核心理念： 领域驱动设计。 领域模型准确反映了业务语言，而传统数据对象除了简单 setter/getter 方法外，没有任何业务方法</p><ul><li data-pid=\"YXsneEXE\">用户界面层：负责向用户显示信息和解释用户指令，也是我们常说的 UI 层</li><li data-pid=\"mJVujs-3\">应用层： 负责使用领域层提供的能力进行业务流程编排，实现对应功能</li><li data-pid=\"b16HYeU3\">领域层：领域模型/领域服务/和防腐层的接口定义，为应用层提供能力</li><li data-pid=\"r3iUYAA3\">基础设施层：为其它各层提供通用的技术和基础服务，如数据持久化、消息中间件等</li></ul><p data-pid=\"heAJwlUs\">具体实践是一般第一步为自上而下结构化分解，如图：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d4c168696b61093b122494be3cd982ff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2540\" data-rawheight=\"1270\" class=\"origin_image zh-lightbox-thumb\" width=\"2540\" data-original=\"https://pic4.zhimg.com/v2-d4c168696b61093b122494be3cd982ff_r.jpg\" data-original-token=\"v2-d4c168696b61093b122494be3cd982ff\"/></figure><p data-pid=\"y1a3WMAk\"><i>图片来自于张建飞《基于 DDD 的应用架构设计和实践》分享</i></p><p data-pid=\"9RGMelUR\">第二步为自下而上的领域建模，从而完成功能的实现，如图</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-da515a3cf5feba813a5b9c21d0928163_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2748\" data-rawheight=\"1378\" class=\"origin_image zh-lightbox-thumb\" width=\"2748\" data-original=\"https://pic4.zhimg.com/v2-da515a3cf5feba813a5b9c21d0928163_r.jpg\" data-original-token=\"v2-da515a3cf5feba813a5b9c21d0928163\"/></figure><p data-pid=\"d4lAcI2U\"><i>图片来自于张建飞《基于 DDD 的应用架构设计和实践》分享</i></p><p data-pid=\"Xr-FdNYt\">总结起来就是先把业务逻辑按结构化拆解，拆解为不同的步骤，然后调用领域层的能力进行逻辑编排实现对应功能。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-39072e92f1659e4607edced42b41acd1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2710\" data-rawheight=\"1354\" class=\"origin_image zh-lightbox-thumb\" width=\"2710\" data-original=\"https://pic2.zhimg.com/v2-39072e92f1659e4607edced42b41acd1_r.jpg\" data-original-token=\"v2-39072e92f1659e4607edced42b41acd1\"/></figure><p data-pid=\"Mvx20qbc\"><i>图片来自于张建飞《基于 DDD 的应用架构设计和实践》分享</i></p><h3><b>3.2.3、对比分析</b></h3><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5cea7154f49487e85d944cc6b4066f97_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1600\" data-rawheight=\"1158\" class=\"origin_image zh-lightbox-thumb\" width=\"1600\" data-original=\"https://pic4.zhimg.com/v2-5cea7154f49487e85d944cc6b4066f97_r.jpg\" data-original-token=\"v2-5cea7154f49487e85d944cc6b4066f97\"/></figure><p data-pid=\"8U7rneiq\"><i>本图片来源《DDD 实战课》</i></p><p data-pid=\"O0jaI8_d\"><b>可以看到他们的共同点是：整洁架构、DDD 分层架构、六边形架构都是以领域模型为核心</b>，实行分层架构，内部核心业务逻辑与外部应用、资源隔离并解耦。</p><p data-pid=\"PXQ6-ZL0\">事实上整洁架构恰恰是最后的集大成者，集合了 <b>DDD 领域驱动</b>的思想 + <b>分层架构</b>的落地，具体可以如下架构发展历史图。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b84373a3b9c68833a52950eb2bdea126_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1600\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb\" width=\"1600\" data-original=\"https://pic3.zhimg.com/v2-b84373a3b9c68833a52950eb2bdea126_r.jpg\" data-original-token=\"v2-b84373a3b9c68833a52950eb2bdea126\"/></figure><p data-pid=\"oumj9t79\"><i>图片来源于《领域驱动架构及其演变史（EBI、DDD、端口适配、洋葱、整洁）》</i></p><p data-pid=\"8Tbn2dRs\">了解了整洁架构的优势，接下来我们重点介绍如何应用整洁架构</p><h3><b>4、 如何应用整洁架构？</b></h3><p data-pid=\"RHmn0Y9L\">首先会借鉴 DDD 的思想进行业务分析、建模，形成业务的领域模型。</p><h3><b>4.1 战略阶段：分析业务，建立领域模型</b></h3><h3><b>4.1.1 分析业务流程</b></h3><p data-pid=\"zWcQCA2K\">DDD 中一般采用用例分析、事件风暴、四色建模等方法，尽可能全面不遗漏的分解业务领域，梳理业务过程中的用户操作、事件以及依赖关系，再根据这些要素进一步梳理出领域对象及他们之间的关系。</p><p data-pid=\"Ah1MeqBh\">DDD 里说的这些业务分析方法在构建大型项目时非常有用，但在日常需求中会显得有点重。于是我们结合用例分析与事件风暴，沉淀出一套适合日常需求分析的方法论，内部称之为双轴泳道分析法。</p><p data-pid=\"5fggdTnF\">下面以电商购物需求为例，介绍一下实施步骤：</p><ul><li data-pid=\"gLrxNnrU\">识别业务参与者</li></ul><p data-pid=\"04KYSV3i\">业务参与者，是指在业务流程中发起动作，触发状态改变的个体。业务参与者可以某个角色、某个系统、或者某个综合系统。</p><p data-pid=\"7bNo14A4\">例如电商网站购物场景中，用户选品、下单、支付，电商网页负责呈现商品信息，提示用户操作结果，电商后台负责生成订单、记账。用户（角色）、电商网页（系统）、电商后台（系统）都是业务参与者，其概念类似用例分析里的 actor。</p><ul><li data-pid=\"DHUSSY2l\">分析参与者在不同阶段发生的动作及触发的状态</li></ul><p data-pid=\"P-aIs9u3\">动作是指参与者发起的某个命令，比如创建订单、抽奖等，而状态是指动作发生后引起的状态变更，比如订单已创建，订单创建失败等，其概念类似事件风暴的命令和事件。</p><p data-pid=\"2ZLTpXvH\">对电商购物场景分析结果如下：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2a525ada7f95d726a7e3afcfb1d9e4f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"948\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb\" width=\"948\" data-original=\"https://pic1.zhimg.com/v2-2a525ada7f95d726a7e3afcfb1d9e4f4_r.jpg\" data-original-token=\"v2-2a525ada7f95d726a7e3afcfb1d9e4f4\"/></figure><ul><li data-pid=\"OVKOJkns\">使用双轴泳道图描述业务流程</li></ul><p data-pid=\"OKxNHgcB\">泳道的横轴是业务参与者，纵轴是业务流程的不同阶段，通过双轴泳道图描述出各个参与者在不同阶段发生的动作、触发的状态。</p><p data-pid=\"zzKuyPDb\">在业务流程中，有些属于前端交互，有些属于动作，有些属于状态。动作和状态会用于后续的领域对象提取，我们需要将他们标注出来以便识别。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-acac7ae98bfa94d287a2bd52d41f7beb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"903\" class=\"origin_image zh-lightbox-thumb\" width=\"661\" data-original=\"https://pic4.zhimg.com/v2-acac7ae98bfa94d287a2bd52d41f7beb_r.jpg\" data-original-token=\"v2-acac7ae98bfa94d287a2bd52d41f7beb\"/></figure><h3><b>4.1.2 提取领域对象</b></h3><p data-pid=\"42g6GZvX\">经过上述分析后，业务流程已经非常清晰。第二步，就是要根据分析过程中产生的动作和状态，提取出产生这些行为的对象，进一步识别出实体、值对象、聚合根。</p><ul><li data-pid=\"DvLUuLGf\">实体</li></ul><p data-pid=\"G5Pqayae\">业务形态上是包含业务规则的集合，具有唯一标识字段(id)。代码上通常以类/对象的形式存在，包含属性和方法。</p><ul><li data-pid=\"TMTVsOgU\">值对象</li></ul><p data-pid=\"Go2N5MvG\">业务形态上是干个属性的集合，只有数据初始化操作和有限的不涉及修改数据的行为，不具有唯一标识(id)。代码上以类/对象的形式被实体引用。</p><ul><li data-pid=\"Ws87kz_O\">聚合根</li></ul><p data-pid=\"Ugy-Y7XO\">聚合根是一个特殊实体，具备唯一标识（id)，有独立的生命周期。聚合根是聚合的唯一入口点，负责协调实体以及值对象完成业务逻辑。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cea8443f76bd05b4e92f13e6a0191847_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"491\" class=\"origin_image zh-lightbox-thumb\" width=\"650\" data-original=\"https://pic4.zhimg.com/v2-cea8443f76bd05b4e92f13e6a0191847_r.jpg\" data-original-token=\"v2-cea8443f76bd05b4e92f13e6a0191847\"/></figure><p data-pid=\"U2MFj7np\">在以上例子中，将动作、状态归类后，可划分为用户、购物车、商品、订单、消费流水五个实体，收货地址可作为值对象。</p><h3><b>4.1.3 划分界限，识别模块</b></h3><p data-pid=\"tCuSNFiz\">根据上下文语义，寻找聚合根、划定界限，将实体进一步组合成聚合，一个聚合对应一个模块。</p><p data-pid=\"4KeC_-6f\">在本例子中：</p><ul><li data-pid=\"zczICVrT\">用户实体和购物车实体与用户强相关，分别管理用户基本信息和购物车信息，可以用户实体为聚合根，共同构成用户模块；</li><li data-pid=\"05Oyakkm\">订单实体、消费流水实体与下单强相关，可以订单实体为聚合更，共同构成下单模块；</li><li data-pid=\"eCOj2OEA\">商品模块较独立，可单独构成商品模块。</li></ul><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0dd2d9f964853feb661657a3bba779e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"461\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb\" width=\"461\" data-original=\"https://pic1.zhimg.com/v2-0dd2d9f964853feb661657a3bba779e4_r.jpg\" data-original-token=\"v2-0dd2d9f964853feb661657a3bba779e4\"/></figure><h3><b>4.2 战术阶段：工程落地，搭建分层架构</b></h3><p data-pid=\"V49EkpFH\">通过战略阶段建立对应的领域模型后，在对应的工程实现上，应如何划分层呢？</p><h3><b>4.2.1 分层实现</b></h3><p data-pid=\"Hu_1Y6HG\">以前端工程为例，常规的 mvvm 前端工程的分层架构如下图，会在 store 层直接调用 api 层发起请求，然后再通过 mvvm 更新视图</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0586a670dc5886cd19e71ec1d79c78ed_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1600\" data-rawheight=\"1168\" class=\"origin_image zh-lightbox-thumb\" width=\"1600\" data-original=\"https://pic2.zhimg.com/v2-0586a670dc5886cd19e71ec1d79c78ed_r.jpg\" data-original-token=\"v2-0586a670dc5886cd19e71ec1d79c78ed\"/></figure><p data-pid=\"aedFufqd\">❌ 容易出现的问题：</p><ul><li data-pid=\"cuy4Dxdz\">业务逻辑和 ui 强耦合，如果要更换 ui，改动成本大</li><li data-pid=\"LlsZHF69\">往往 store 层依赖框架的实现，业务逻辑易和框架强耦合，如果切换框架或升级框架，重构成本大。比如升级 vue 到 vue2，或 vue 切换到 react。</li></ul><p data-pid=\"fsDjella\"><b>根据整洁架构思想，设计后的架构如下：</b></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e138abd8471a99c5d31c1fff74830b94_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"982\" data-rawheight=\"796\" class=\"origin_image zh-lightbox-thumb\" width=\"982\" data-original=\"https://pic1.zhimg.com/v2-e138abd8471a99c5d31c1fff74830b94_r.jpg\" data-original-token=\"v2-e138abd8471a99c5d31c1fff74830b94\"/></figure><p data-pid=\"xJYCgOGy\">在原有基础上拆分了实体层和用例层，并在用例层内通过端口的方式定义了依赖的端口方法，用来解耦框架和第三方服务的依赖。</p><p data-pid=\"KBifo7S9\">目前很多前端实践里实体层是比较薄，有的只有类型定义，把逻辑封装到了用例层，但用例层的逻辑不适合更细粒度的复用，导致复用比较麻烦，这也不符合整洁架构对实体层的定义，整洁架构中期望实体这一层中封装的是整个系统的关键业务逻辑。</p><p data-pid=\"6CLa9Gu5\">个人觉得应该视具体情况而定，逻辑简单的前端页面，用例层和实体层都比较简单，可以使用贫血的实体层；如果逻辑复杂的一定要把逻辑抽取到实体层，用例层使用实体层提供的能力进行功能串联，方便复用及后续维护。比如我们这边的下载逻辑就比较重，需要把相关逻辑封装在实体层。</p><p data-pid=\"Tz1Y5LsB\">比如购买这个用例里，需要判断是否登录，判断是否有库存，创建订单，支付等流程，每个流程应该使用的都是实体的能力，具体的逻辑封装在实体里，用例层核心是实现流程的串联。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3a1006a7b56b589ae1e70ee9d3b22b4d_b.jpg\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"251\" class=\"origin_image zh-lightbox-thumb\" width=\"655\" data-original=\"https://pic2.zhimg.com/v2-3a1006a7b56b589ae1e70ee9d3b22b4d_r.jpg\" data-original-token=\"v2-3a1006a7b56b589ae1e70ee9d3b22b4d\"/><figcaption>img</figcaption></figure><p data-pid=\"np-cvDDk\">下面我们看下这样分层后的代码示例及数据流向是怎么样的？</p><p data-pid=\"VjKOk2tK\">以最常见的电商商品展示为示例，用户登录后查看商品详情，根据用户所在地展示商品库存。整个流程是这样的：进到页面 -&gt; 检查登录态 -&gt; 发起请求 -&gt; 组装数据 -&gt; 页面展示</p><p data-pid=\"K0WxHrq7\"><b>实体层</b></p><p data-pid=\"JdkUqcE9\">关于实体层的设计有两个要点：</p><ul><li data-pid=\"oodYZ05t\">使用充血模型来描述实体</li></ul><p data-pid=\"-5fU_BWC\">充血模型指的是，实体内包含数据及常用行为，符合面向对象的封装性，是典型的面向对象编程风格。反之贫血模型指的是实体只包含数据，行为不封装在实体内，是一种面向过程的设计。</p><ul><li data-pid=\"5irRarW7\">结合具体场景，允许部分依赖实现</li></ul><p data-pid=\"5aGJQnmC\">众所周知，DDD 中非常强调领域层的解耦，理论上领域层应该依赖抽象接口，不应该依赖具体实现。这种彻底解耦的方式的确能解决后续依赖项变更的问题，但在实际开发中，很多依赖项是我们可控的，可预知后续是不会变更的，这种情况下如果对所有依赖都要抽象出接口，那将会大大增加我们的工作量。因此我们提倡结合具体的场景，只对后续可能变化的依赖进行防腐，对于后续不会变化的依赖我们允许直接依赖实现。</p><p data-pid=\"iO8-eLji\">本例子中，可拆分成用户、商品两个实体。</p><p data-pid=\"sHPCXAau\">用户实体，主要提供用户常用的登录、登出、查询用户所在城市等方法。用户的登录态一般依赖 cookie，浏览器的 cookie 接口不大可能出现破坏性变更，因此在用户实体中，我们允许直接依赖 cookie 操作库，而查询用户城市依赖于用户服务提供接口，为防止后端接口变更，需要对用户服务进行防腐。</p><div class=\"highlight\"><pre><code class=\"language-text\">// 用户实体 ./shared/domain/entities/user.ts\n\nimport cookie from &#39;cookie&#39;;\n\nexport interface IUserService {\n    getCity(id: string): Promise&lt;City&gt;;\n}\n\nexport class User {\n    // 用户Id\n    public id: string;\n    // 用户服务\n    private userService: IUserService;\n\n    constructor(id: string, name: string, userService: IUserService) {}\n\n    // 检查用户是否登录\n    public isLogin(): boolean {\n        if (cookie.get(&#39;openid&#39;) &amp;&amp; cookie.get(&#39;access_token&#39;)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // 登录\n    public login(): Promise&lt;void&gt; {\n        if (!this.isLogin()) {\n            goToURL(&#39;https://www.xxx.com/login&#39;);\n        }\n    }\n\n    // 退出登录\n    public logout(): Promise&lt;void&gt; {\n        cookie.remove(&#39;openid&#39;);\n        cookie.remove(&#39;access_token&#39;);\n        goToURL(&#39;https://www.xxx.com/login&#39;);\n    }\n\n    // 获取用户所在城市\n    public getCity(): Promise&lt;City&gt; {\n        return this.userService.getCity(this.id);\n    }\n}\n</code></pre></div><p data-pid=\"ZaWct2k8\">商品实体：提供查询商品详情方法，商品实体依赖后端的商品服务，为防止后端接口变更，需要进行防腐：</p><div class=\"highlight\"><pre><code class=\"language-text\">// 商品实体 ./shared/domain/entities/product.ts\n\nexport interface IProductService {\n    getBaseInfoById(id: string): Promise&lt;ProductBaseInfo&gt;;\n    getStockInfoByIdAndCity(id: string, city: City): Promise&lt;ProductStockInfo&gt;;\n}\n\nexport class Product {\n  // 商品Id\n  public id: string;\n  // 用户服务\n  private productService: ProductService;\n\n  constructor(id: string, name: string; productService: IProductService) {}\n\n  // 获取商品详情\n  public async getDetail() {\n      // 获取商品基本信息和库存信息\n      const baseInfo = await this.productService.getBaseInfoById(this.id);\n      const stockInfo = await this.productService.getStockInfoById(this.id, city);\n      // 组合详情数据\n      const detail = {\n          id: this.id,\n          name: baseinfo.name,\n          images: baseinfo.name,\n          stockNum: stockInfo.num,\n      };\n      return detail;\n  }\n\n  // 根据地区获取库存信息\n  public addToCart(num：number) {\n      return this.productService.getStockInfoById(this.id, city);\n  }\n};\n</code></pre></div><p data-pid=\"pgfE6Ccs\"><b>用例层</b></p><p data-pid=\"quDnATr7\">用例层主要充当“协调者”的角色，组合各个实体的操作，实现业务逻辑，这层的逻辑代码会“面向过程”。</p><p data-pid=\"fARkIupb\">本例子中，需要结合用户实体和商品实体，实现根据用户所在地获取商品库存信息</p><div class=\"highlight\"><pre><code class=\"language-text\">// 获取商品详情用例 ./shared/domain/usercases/get-product-detail.ts\n\nimport { User } from &#39;./shared/domain/entities/user.ts&#39;;\nimport { Product } from &#39;./shared/domain/entities/product.ts&#39;;\n// 用户服务、产品服务的具体实现，见适配器层\nimport { UserService } from &#39;./server/services/user-service.ts&#39;;\nimport { ProductService } from &#39;./server/services/product-service.ts&#39;;\n\nexport async function getProductDetail(userId: string, productId: string) {\n    // 示例化用户实体和商品实体，省略部分代码\n    const user = new User(userId, UserService);\n    const product = new Product(productId, ProductService);\n\n    // 获取用户所在城市\n    const city: City = await user.getCity();\n    // 获取商品基本信息\n    const productBaseInfo = await product.getBaseInfo();\n    // 根据城市获取商品库存\n    const productStockInfo = await product.getStockInfo(city);\n    return {\n        baseInfo: productBaseInfo,\n        stockInfo: productStockInfo,\n    };\n}\n</code></pre></div><p data-pid=\"IeBMmu6I\"><b>适配器层</b></p><ul><li data-pid=\"uRymlEem\">包含 UI 框架的代码，及 store 相关的代码，如 vuex，通过更新 vuex 的数据更新视图</li><li data-pid=\"xYGR3Yi0\">调用第三方服务，并将其转化成用例层的端口格式</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">// 用户服务具体实现 ./server/services/user-service.ts\nimport { IUserService } from &#39;./shared/domain/entities/user.ts&#39;;\n\nclass UserService implements IUserService {\n    getCity(userId: string): Promise&lt;City&gt; {\n        // 通过后台接口获取用户所在城市\n        const resp = get(&#39;https://api.xxx.com/queryUserCity&#39;, { userId });\n        if (resp.ret !== 0) {\n            throw new Error(&#39;查询用户所在城市失败&#39;);\n        }\n\n        return resp.data.city as City;\n    }\n\n}\n\n// 商品服务具体实现 ./server/services/product-service.ts\nimport { IProductService } from &#39;./shared/domain/entities/product.ts&#39;;\n\nclass ProductService implements IProductService {\n    getBaseInfoById(id: string): Promise&lt;ProductBaseInfo&gt; {\n        // 调用后台商品服务接口，省略具体实现\n    }\n    getStockInfoByIdAndCity(id: string, city: City): Promise&lt;ProductStockInfo&gt; {\n        // 调用后台商品服务接口，省略具体实现\n    }\n}\n\n// 商品详情页 store ./client/store/product-store.ts\nimport { getProductDetial } from &#39;./shared/domain/usercases/get-product-detail.ts&#39;\n\nexport default new Vuex.Store({\n  state: {\n    productDetail: ProductDetail,\n  },\n  mutations: {\n    async getProductDetail(state) {\n        // 用例已包含具体业务逻辑，这里直接调用用例方法\n        state.productDetail = getProductDetial(userId, productId);\n    },\n  },\n}\n\n// 商品详情页 ./client/pages/product-detail.ts\n\nimport { defineComponent, ref, onMounted } from &#39;vue&#39;;\n\nexport defineComponent({\n  name: &#39;ProudctDetailPage&#39;,\n  setup() {\n\n     onMounted(() =&gt; {\n         setLoading(true);\n         await store.getProductDetail();\n         setLoading(false);\n      });\n\n    return () =&gt; (\n      &lt;div&gt;\n        &lt;p&gt; {{ store.productDetail.baseInfo }}&lt;/p&gt;\n        &lt;p&gt; {{ store.productDetail.stockInfo }}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  },\n});\n</code></pre></div><p data-pid=\"EGagCOWv\"><b>框架和驱动层</b></p><ul><li data-pid=\"lQci_iqi\">这里是用到的第三方服务、框架，如 vue、svelte 等</li></ul><p data-pid=\"D_nOtNpc\">如以下伪代码</p><div class=\"highlight\"><pre><code class=\"language-text\">import vue from &#39;Vue&#39;\n\nvue.render(App);\n</code></pre></div><p data-pid=\"ykL79V6s\"><b>整体数据流向图如下</b></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-484b825e83bb8479ac4a26fb829533db_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2684\" data-rawheight=\"656\" class=\"origin_image zh-lightbox-thumb\" width=\"2684\" data-original=\"https://pic4.zhimg.com/v2-484b825e83bb8479ac4a26fb829533db_r.jpg\" data-original-token=\"v2-484b825e83bb8479ac4a26fb829533db\"/></figure><h3><b>4.2.2 依据 SOLID 原则实现分层</b></h3><ul><li data-pid=\"NWTfviFb\"><b>S 单一职责原则</b></li><li data-pid=\"Tip8PhYb\"><b>O 开闭原则</b></li><li data-pid=\"WRzs9pwc\"><b>L 里氏替换原则</b></li><li data-pid=\"jo1dfXUW\"><b>I 接口隔离原则</b></li><li data-pid=\"XbN9WqBe\"><b>D 依赖倒置原则</b></li></ul><p data-pid=\"LGmL-j7k\"><i>PS:   由于网上对 SOLID 原则有较多介绍，这里就不额外展开了，有兴趣的同学可查阅学习</i></p><h3><b>4.3.3 架构及目录示例</b></h3><p data-pid=\"1xbjay2N\">基于此，我们采用整洁架构后目录结构如下，如下图所示</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9545728fcc87ced8c4f888e6f9b175e7_b.jpg\" data-size=\"normal\" data-rawwidth=\"1260\" data-rawheight=\"1402\" class=\"origin_image zh-lightbox-thumb\" width=\"1260\" data-original=\"https://pic4.zhimg.com/v2-9545728fcc87ced8c4f888e6f9b175e7_r.jpg\" data-original-token=\"v2-9545728fcc87ced8c4f888e6f9b175e7\"/><figcaption>img</figcaption></figure><ul><li data-pid=\"e4MEp8K5\">单独抽离领域层（包括实体层、用例层、防腐层）目录</li><li data-pid=\"AE3axZcP\">将 utils 工具进行拆解，无&#34;副作用&#34; 的 utils 移动至 shared 目录下，界面相关如 jump 存放到对应的 client 的 utils 下</li></ul><h3><b>5、总结</b></h3><p data-pid=\"MQ9CyEO7\">整洁架构不是&#34;银弹&#34;，在实践上存在以下优缺点：</p><p data-pid=\"kAw8xjO_\"><b>✅ 优点：</b></p><ul><li data-pid=\"Zs2hbend\">业务领域层逻辑更干净，业务逻辑可适配到不同的 UI 框架、对于同构的 SSR 服务也可以公用同一套业务逻辑</li><li data-pid=\"HmjZ2fTJ\">职责边界更为明确，内层的业务逻辑可覆盖单元测试，ui 层则依赖 e2e 端对端测试覆盖</li></ul><p data-pid=\"sBpj3wx5\"><b>❌ 缺点：</b></p><ul><li data-pid=\"ixhtR66v\">构建边界的成本较大，由于核心业务层无法直接引用外层 UI 的 store 和 api，需额外声明端口依赖，开发效率变低</li></ul><p data-pid=\"hK-1y-wm\">所以说没有最好的架构，只有最适合自己团队和业务的架构。对于是否使用整洁架构，我们应考量项目复杂度、项目的生命周期，综合来衡量。对于业务逻辑简单、业务生命周期较短的项目，直接使用照搬整洁架构，会导致开发效率地变低；但是对于需要长期维护的复杂项目，如腾讯文档、vsCode 内核、低代码引擎等，就非常适合整洁架构，能大大降低系统的维护成本，并在前端技术快速变迁的情况下，非常方便后续对 UI 库、框架的升级改造。</p><p data-pid=\"12YP7dj_\">期望大家在日常工作中除了关注系统的行为，多一些对架构的关注和思考，以提升系统的整洁性，让每次变更都短小简单，易于实施，并且避免缺陷，用最小的成本，最大程度地满足功能性和灵活性的要求。</p><p data-pid=\"P2za1rfy\">最后感谢您的阅读，如果本文给你带来了一些启发，欢迎动动手指，一键三连，这是对笔者最大的支持和鼓励。</p><h3><b>6、 参考文献</b></h3><p data-pid=\"_eq1QBT6\"><b><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/30333919/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《整洁架构之道》书籍</a></b></p><p data-pid=\"VyDIV5Yg\"><b><a href=\"https://link.zhihu.com/?target=https%3A//time.geekbang.org/qconplus/detail/100059794\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《基于 DDD 的应用架构设计和实践》视频分享</a></b></p><p data-pid=\"mDoUn6i5\"><b><a href=\"https://link.zhihu.com/?target=https%3A//zq99299.github.io/note-book2/ddd/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DDD 实战课</a></b></p><p data-pid=\"8V4L4FrY\"><b><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/dennyzhangdd/p/16867287.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">领域驱动架构及其演变史（EBI、DDD、端口适配、洋葱、整洁）</a></b></p>",
            "voteup_count": 58,
            "comment_count": 2
        },
        "created": "2023-09-07T17:30:06+08:00"
    },
    {
        "content": {
            "id": 651156067,
            "title": "代码是负债，而不是资产",
            "type": "article",
            "excerpt_title": "最近在读《Google 软件工程》，其中有一句话让我印象深刻： 代码是负债，而不是资产。 然而作为程序员，相信很多人都认为自己的代码就是资产，是自己智慧的结晶，怎么会是负债呢？ 首先这个当然是要限定在软件工程领域来讨论。 在软件工程领域，代码的构建是要花费时间和人力成本的，但代码并不因此就能算作资产，真正有价值的是代码所要解决的产品问题，给用户和公司带来的价值。 而且写好的代码也是需要长期维护，长期运行的，…",
            "url": "https://zhuanlan.zhihu.com/p/651156067",
            "image_url": "https://picx.zhimg.com/v2-3e69daeb06f87aa9d83245c2e0a0ae42_r.jpg?source=172ae18b",
            "created": 1692508561,
            "updated": 1692508561,
            "author": {
                "id": "74c3f77dfde6329c6af53c52eedbee9d",
                "url_token": "newbmiao",
                "name": "newbmiao",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-2531bfc7fb4ee470d6cd99bf882cff96_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-2531bfc7fb4ee470d6cd99bf882cff96.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/74c3f77dfde6329c6af53c52eedbee9d",
                "user_type": "people",
                "headline": "搬砖工，微信公众号: newbmiao",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pica.zhimg.com/v2-af3c46537b9700dbf7f61f0be956dc86.png?source=6a64a727",
                        "night_mode_url": "https://pic2.zhimg.com/v2-af3c46537b9700dbf7f61f0be956dc86.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "Thoughtworks 员工"
                    }
                ],
                "badge_v2": {
                    "title": "Thoughtworks 员工",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "Thoughtworks 员工",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "Thoughtworks 员工",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"WQicRrf6\">最近在读《Google 软件工程》，其中有一句话让我印象深刻： 代码是负债，而不是资产。</p><p data-pid=\"V0v1ZQ0X\">然而作为程序员，相信很多人都认为自己的代码就是资产，是自己智慧的结晶，怎么会是负债呢？</p><p data-pid=\"9s1YhvMT\">首先这个当然是要限定在软件工程领域来讨论。</p><p data-pid=\"iOJIaouG\">在软件工程领域，代码的构建是要花费时间和人力成本的，但代码并不因此就能算作资产，真正有价值的是代码所要解决的产品问题，给用户和公司带来的价值。</p><p data-pid=\"yt9IWqBu\">而且写好的代码也是需要长期维护，长期运行的，而不是一次性的。 虽然维护的时间或长或短，决定于其服务的产品的生命。</p><p data-pid=\"aAtu8nrf\">所以代码是有维护成本的，就像负债，在没还清前，是需要源源不断的投入的。</p><p data-pid=\"mh3u2syI\">我觉得这其实才道出了代码的本质。</p><p data-pid=\"iNmcbvtq\">为什么软件工程领域围绕代码有那么多方法论？</p><p data-pid=\"-rI-l6Uu\">结对编程，代码评审，代码风格指南，测试驱动开发，设计文档评审，流水线集成和发布，清理技术负债，等等。</p><p data-pid=\"EhAf_yUU\">身处其中的程序员当然知道这是为了保证代码质量，但仅仅就是这样么？</p><p data-pid=\"-pd1L1Tk\">要是从一开始就明白代码是负债，这一切就好理解了。</p><p data-pid=\"iPpCrK0m\">因为代码是需要维护的，不合理维护的代码就会像逐渐发霉的苹果，早晚有一天变成人人厌恶的坏代码，那些你眼里讨厌的 legacy。</p><p data-pid=\"7L1NDilg\">所以从一开始，代码就应该结合产品生命周期的规划，明白构建的代码将会存活大概多长时间。基于此再去设计，去实现，去计划相应的代码维护方案。</p><p data-pid=\"Wqg3PyvE\">前期合适的流程能构建出当下场景合理的代码，避免代码一开始就腐烂。</p><p data-pid=\"xCms3DYp\">但重要的是，团队能一开始就意识到代码需要长期合理的维护。</p><p data-pid=\"j0X6qJXS\">不会因为新需求的交付，而忽视那些将要后已经有问题但没人问津的技术负债。毕竟负债分散到日常去处理成本远远要小于最后一次偿还。</p><p data-pid=\"EqfX3RWj\">而且，当代码不能很好的服务产品的时候，要考虑何时弃用，将负债彻底清理。这反而是很多团队会忽略的东西。</p><p data-pid=\"mNXPQdFu\">不过有人就说，代码不用了不清理可以么？好像也没什么问题是不。</p><p data-pid=\"ziQliQXr\">等遗留的旧代码依旧被别的代码引用，新老服务代码还有一些纠缠剪不断，代码仓库变得越来越臃肿，代码缺陷检查通不过，到时候开始抱怨的你猜会是谁？</p><p data-pid=\"vcAVKhsT\">到这里，你有没有发现，代码永远是程序员的负债，如果你自己还混不自知的话，最后很容易把自己搅入泥潭。</p><p data-pid=\"_TNaFbUu\">那个时候你能怪 PM 或者 EM 没有给你规划技术负债的清理维护么？</p><p data-pid=\"5I_M5DjG\">可能他们也知道，但是他们的屁股更关心的是需求的交付，产品的迭代。</p><p data-pid=\"wZy4xZs2\">而你有没有提前识别出代码负债的问题，有没有把技术负债也加入到日常交付中，是你要关心和负责的事情。</p><p data-pid=\"FkqwgXsE\">以前觉得软件工程都是些虚头巴脑的东西，不如写代码实在。</p><p data-pid=\"xLkEJWqj\">现在觉得写代码确实实在，但那些”虚头巴脑“的东西反而更考验一个程序员的能力。</p><hr/><p data-pid=\"P9p0gLUP\">文章首发公众号：newbmiao</p><p data-pid=\"VEpu1nwZ\">推荐阅读：<b><a href=\"https://link.zhihu.com/?target=http%3A//blog.newbmiao.com/categories/OPA/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OPA系列</a></b></p><p data-pid=\"-hoFTKwB\"><b><a href=\"https://link.zhihu.com/?target=http%3A//blog.newbmiao.com/categories/go/dig101/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Dig101-Go系列</a></b></p>",
            "voteup_count": 131,
            "column": {
                "id": "newbmiao",
                "type": "column",
                "url_token": "newbmiao",
                "title": "学点Rust",
                "url": "https://zhuanlan.zhihu.com/newbmiao",
                "created": 1539339314,
                "updated": 1700401281,
                "description": "公众号：newbmiao（欢迎关注，获取及时更新）\n博客：blog.newbmiao.com",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 21
        },
        "created": "2023-08-20T13:16:01+08:00"
    },
    {
        "content": {
            "id": 649521396,
            "title": "基于 RPC 和 TypeScript 的 BFF 设计与实践",
            "type": "article",
            "excerpt_title": "一、前言随着多终端的发展，前后端的数据交互的复杂性和多样性都在急剧增加。不同的终端，其屏幕尺寸和页面 UI 设计不一，对接口的数据需求也不尽相同。构建一套接口满足所有场景的传统方式，面对新的复杂性日益捉襟见肘。在 这个背景下，BFF 作为一种模式被提出。其全称是 Backend for frontend，即为前端服务的后端。它的特点是考虑了不同端的数据访问需求，并给予各端针对性的优化。 在这篇文章中，我们将介绍一种基于 RPC 和…",
            "url": "https://zhuanlan.zhihu.com/p/649521396",
            "image_url": "https://pic1.zhimg.com/v2-cf6a7bc5758e531706f227cd9b29881f_r.jpg?source=172ae18b",
            "created": 1691763065,
            "updated": 1691763065,
            "author": {
                "id": "6751e943236c0381facaf51cf6fa1f43",
                "url_token": "lucifier129",
                "name": "工业聚",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-456a1e201a2cec4ca51b363248c8c7df_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-456a1e201a2cec4ca51b363248c8c7df.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/6751e943236c0381facaf51cf6fa1f43",
                "user_type": "people",
                "headline": "前端 | github.com/Lucifier129",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"BMhlhE0Q\"><b>一、前言</b></p><p data-pid=\"iwrWjcxW\">随着多终端的发展，前后端的数据交互的复杂性和多样性都在急剧增加。不同的终端，其屏幕尺寸和页面 UI 设计不一，对接口的数据需求也不尽相同。构建一套接口满足所有场景的传统方式，面对新的复杂性日益捉襟见肘。在</p><p data-pid=\"BRKCF_VK\">这个背景下，BFF 作为一种模式被提出。其全称是 Backend for frontend，即为前端服务的后端。它的特点是考虑了不同端的数据访问需求，并给予各端针对性的优化。</p><p data-pid=\"_5d8X6vp\">在这篇文章中，我们将介绍一种基于 RPC 和 TypeScript 的 BFF 设计与实践。我们称之为 RPC-BFF，它利用前后端都采用同一语言（TypeScript）的优势，实现了其它 BFF 技术方案所不具备的多项功能，可以显著提升前后端数据交互的性能、效率以及类型安全。</p><p data-pid=\"-0KxBBc-\"><b>二、为什么会需要 BFF？</b></p><p data-pid=\"RqeHAzg0\">用发展的视角来看，业界存在的两大趋势催生了 BFF 模式：</p><ul><li data-pid=\"CWrksWB4\">硬件行业的多终端发展趋势</li><li data-pid=\"PrhCBSM8\">软件行业的微服务发展趋势</li></ul><p data-pid=\"uF0Wn8ql\">其中，微服务化以及中台化的趋势，改变了后端团队构建服务的方式。整个系统将按照领域模型分隔出多个微服务，这增强了各个服务的内聚性和可复用性的同时，也给下游的接口调用者增加了数据聚合的成本。</p><p data-pid=\"tgkI5NPn\">多终端的发展，又让数据聚合的需求进一步多样化。使得处于微服务和多终端之间的团队，不管是前端团队还是后端团队，他们面对的问题日趋复杂化。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fafd0c4d6abb93a1c356f42091105100_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"292\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-fafd0c4d6abb93a1c356f42091105100_r.jpg\" data-original-token=\"v2-fafd0c4d6abb93a1c356f42091105100\"/></figure><p data-pid=\"2Oqdvf_M\">系统复杂度的增加，将体现在代码复杂度和团队协作复杂度上。这意味着，没有采用有效手段应对复杂度的团队，自身将成为产研流程中的瓶颈。他们既要面对上游多个微服务的联调需求，又要应对下游多个端的数据消费需求；有更多的会议要参加，更多的需求文档要读，更多的代码、单元测试和技术文档要写，然而敏捷开发模式的交付周期却不随之增加。</p><p data-pid=\"sqBAu6uI\">此时一般有两个应对策略。一种是去掉数据聚合层，让各个下游前端应用自行对接微服务接口，将聚合数据的业务逻辑转移到前端，增加它们的代码体积，拖慢其加载速度，同时显著增加客户端向服务端发起的请求数，达到拉低页面渲染性能，破坏用户体验的效果。</p><p data-pid=\"SkbJgmwH\">另一种做法则是采用 BFF 模式，降低前后端数据交互的复杂度。微服务强调按领域模型分隔服务，BFF 则强调按终端类型分隔服务。将原本单个团队处理“多对多”的复杂关系，转变成多个团队处理的“一对多”关系。因此，本质上，BFF 模式的优化方式是通过调整开发团队在人力组织关系层面的职能分工而实现的。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-cabd46aaa763b48e3c02e6f2c910aefc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"722\" data-original=\"https://pic1.zhimg.com/v2-cabd46aaa763b48e3c02e6f2c910aefc_r.jpg\" data-original-token=\"v2-cabd46aaa763b48e3c02e6f2c910aefc\"/></figure><p data-pid=\"eRZ1UfPo\">也就是说，BFF 不是作为新技术用以提升生产力，而是通过改变生产关系去解放生产力。从单一团队成为产研流程中的单点瓶颈，转变成多个 BFF 研发团队各自应对某一端的数据聚合需求。</p><p data-pid=\"KVSfa57r\">这种转变所争取到的是增加人手以提升效率的空间。一个工作任务相耦合的研发团队不能无限加人提效，但若能拆成多个研发团队，则可以扩大每个子团队的提效空间。当然，代价是团队之间可能存在重复工作，只是相比效率瓶颈而言，这些问题可能不属于现阶段主要矛盾，值得取舍。</p><p data-pid=\"kXtPEGN1\">尽管 BFF 不是新技术，也不要求新技术，但不意味着不能引入新技术，或者引入新技术无法提效。我们仍可以用新技术去实现 BFF，解决因团队拆分而产生的问题，收获研发效率（生产力）和产研流程（生产关系）两方面的提升。</p><p data-pid=\"4_97QoEj\">接下来，我们先看一下实现 BFF 的几种不同方式，然后介绍作为新技术出现的 RPC-BFF。</p><p data-pid=\"xplOSD6p\"><b>三、BFF 的实现方式</b></p><p data-pid=\"O_n4WYgs\">如前所述，BFF 是作为模式（Pattern）被提出，而非一种新技术。在技术层面上，任何支持服务端开发的语言和运行时，不管是 Java、Python、Go 还是 Node.js，都可以开发 BFF 服务。只要它们所实现的这个服务，是面向前端需求的。</p><p data-pid=\"dXkUJls1\">BFF 的实现方式多种多样，不仅跟技术选型有关，跟研发团队的分工方式、职能边界、协作流程等因素也息息相关。</p><p data-pid=\"x_qVtbU0\"><b>3.1 朴素模式</b></p><p data-pid=\"SK_L_S9g\">所谓的朴素模式，是指 BFF 的实现方式不改变前后端的分工方式、职能边界和协作流程。前端不介入 BFF 层的实现，BFF 层的需求由后端团队自行消化。</p><p data-pid=\"CiG-8SlY\">也就是说，BFF 在这里仅仅是后端团队的内部分工：</p><ul><li data-pid=\"yW2qB0Sr\">开发微服务应用（后端团队）</li><li data-pid=\"bMFGJET2\">开发 BFF 服务（后端团队）</li><li data-pid=\"aHGHKPlL\">消费 BFF 接口（前端团队）</li></ul><p data-pid=\"uRDx3-Ru\">前端的工作方式跟之前一样，后端负责开发 BFF 为前端团队提供面向前端的数据聚合接口。开发 BFF 的编程语言由后端决定。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fffb9bb68d135cbc1d95ddd1c07175b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"641\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-fffb9bb68d135cbc1d95ddd1c07175b3_r.jpg\" data-original-token=\"v2-fffb9bb68d135cbc1d95ddd1c07175b3\"/></figure><p data-pid=\"qsU4vVB_\">如上图所示，紫框为研发团队（前端或后端），蓝框为 BFF 服务，黄框为前端应用，绿色箭头表示“开发”，紫色箭头表示“调用”。</p><p data-pid=\"sBxRCvGM\">在图示中，BFF 按照终端尺寸分为 Mobile BFF 和 PC BFF 两类，它背后的假设是：相近终端尺寸的前端应用拥有相近的数据访问需求。移动端应用调用 Mobile BFF，PC 端应用调用 PC BFF。</p><p data-pid=\"nCiPRkGL\"><b>3.2 解耦模式</b></p><p data-pid=\"V4bx3SHD\">解耦模式，相比朴素模式而言，它改变了分工方式、职能边界和协作流程。后端不介入 BFF 层的实现，BFF 层的需求由前端团队自行消化。也就是说，BFF 是前后端团队共同完成的一种新的分工：</p><ul><li data-pid=\"9J9bgQgm\">开发微服务应用（后端团队）</li><li data-pid=\"Q7rHV10x\">开发 BFF 服务（前端团队）</li><li data-pid=\"njD7HelI\">消费 BFF 服务（前端团队）</li></ul><p data-pid=\"ZbbsWRH-\">前端的工作方式跟之前有所不同，前端团队自己开发 BFF 服务以供自己的前端应用消费聚合好的数据。开发 BFF 的编程语言由前端决定。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3b2dabfa43ae3d1a0d09f36bfa423011_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-3b2dabfa43ae3d1a0d09f36bfa423011_r.jpg\" data-original-token=\"v2-3b2dabfa43ae3d1a0d09f36bfa423011\"/></figure><p data-pid=\"WWGB2HRC\">如上图所示，前端团队同时开发了 App 及配套的 BFF 服务。前端开发的 BFF 服务背后调用了后端团队提供的各个微服务接口，将它们聚合起来，转换为前端应用可直接消费的数据形态。</p><p data-pid=\"-zpgd3h0\"><b>3.3 朴素模式 VS 解耦模式</b></p><p data-pid=\"THRO2Z7U\">两种模式都有其适用场景，具体要看不同研发团队的人力资源、应用类型和技术文化风格等多个因素。</p><p data-pid=\"3QdO6w8l\">从技术发展的角度，解耦模式更能代表“彻底的前后端分离”的趋势和目标。</p><p data-pid=\"AMYdlRJv\">前后端分离可以大体分为两个阶段：</p><ul><li data-pid=\"YFTzcPQA\">渲染服务回归前端团队（SSR）</li><li data-pid=\"-Dr9AWCK\">数据服务回归前端团队（BFF）</li></ul><p data-pid=\"YD3BNaBb\">部分开发者可能认为完成了第一阶段，就达到了前后端分离的目标。此时前端团队可以自行构建SSR 服务器，更早介入渲染流程，不必等到浏览器加载页面的 JavaScript 脚本后才开始发挥作用。不必再跟后端频繁沟通，交代他们在 html 文件里添加指定的 id 或class 名；前端团队可以全权处理，后端团队只需要提供数据接口即可。</p><p data-pid=\"vGMmj24U\">然而，“前后端分离”不只是把前端代码（如 html 文件）从后端代码仓库转移到前端代码仓库里，这只是形式和手段。前后端分离是指职能的分离，是为了让前端研发人员不必低效率地遥控后端研发人员，让他们去机械地调整面向前端需求的代码。前端团队可以自主负责、自主修改、快速迭代，专业的人做专业的事儿。</p><p data-pid=\"CLoqllK5\">面向前端需求的代码，不仅仅是 html 文件，也包括了面向渲染优化的数据聚合代码。前端的职能是为用户开发出体验更好的 GUI 应用，有助于这个目标的所有合理的技术手段都在其职能范围之内。</p><p data-pid=\"AC7mpWdZ\">让 SSR 服务从后端团队转到前端团队，是为了得到面向前端需求的界面渲染优化空间。让更加理解渲染优化原理的前端团队，可以在 SSR 服务上应用新的渲染优化措施，包括但不限于 Streaming SSR、Suspense、Selective Hydration、Server Component 等技术可以得以应用。它们可以显著提升页面的各项性能指标，令用户更早看到内容，更早看到有意义的内容，更早跟界面自由交互。</p><p data-pid=\"ZKSxy6Hl\">让 BFF 服务从后端团队转到前端团队，则是为了获得面向前端需求的数据聚合优化空间，可以提高代码的跨端复用率、减少前端应用的代码体积、减少前端应用的加载时间，提升用户体验。</p><p data-pid=\"CvKDV7wN\">当研发团队完成了 SSR 和 BFF 两个阶段的前后端分离后，前端团队同时掌握了 SSR 和 BFF 两重优化空间。他们既不需要让后端团队帮忙添加 id 和 class 到 html 文件中，也不需要让他们帮忙把某个文案添加到某个接口里。面向前端的渲染优化需求和数据优化需求，都能在前端团队职责范围内自主解决，显著减少前后端的沟通频次和成本，分离彼此的关注度，提升双方的专业聚焦水平。</p><p data-pid=\"jvoji4Jl\">更重要的是，SSR 和 BFF 在渲染优化上有着不可分割的关系。视图的渲染不是凭空的，它依赖数据的准备，有意义的内容才得以呈现；当视图需要流式渲染，数据请求也需要做相应配合。假设我们页面的首屏所依赖的数据，都被聚合到一个单一接口里，其后果便是 Streaming SSR 无法发挥充分价值；所有组件都在等待单一聚合接口的响应数据，才开始进行渲染。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b19d0dbc7c6c6a9c70c7f011934e8226_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"447\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-b19d0dbc7c6c6a9c70c7f011934e8226_r.jpg\" data-original-token=\"v2-b19d0dbc7c6c6a9c70c7f011934e8226\"/></figure><p data-pid=\"iiqGg7aJ\">如上图所示，紫色箭头表示“时间”，粉色框为数据获取，橙色框为组件渲染，绿色框为发送 HTML 到浏览器。我们可以看到，朴素的 SSR 是一个串行过程，组件渲染阶段需要等待数据获取全部结束。而充分的 Streaming SSR 则有多次数据获取的并发任务（调用了多次后端接口），组件渲染并不需要等待所有数据获取任务结束，只需相关数据就位即可进入组件渲染及后续发送 HTML 的流程。用户可以更早看到内容。</p><p data-pid=\"FRHRMCnw\">在前端团队缺乏 BFF 掌控能力的情况下，他们无法自主控制 SSR 的数据获取过程，只能被动接受后端提供的接口。即便视图层框架（如 React）支持 Streaming rendering，也仅仅是把一大块 html 分多次发送给浏览器，它仍受制于 data-fetching 的阻塞时间，无法做到充分的 Streaming SSR。</p><p data-pid=\"2hh2lnAE\">因此，技术层面更合理的做法是，每个组件描述它自身所需的数据依赖，页面渲染时遇到没有数据依赖的静态组件，立即发送给用户，遇到有数据依赖的组件则发起请求（Render-As-You-Fetch），不同组件可以独立发起不同请求，每个组件数据请求完毕后即刻开始自身渲染，最终得到页面流式渲染，用户渐进式地看到一块块成形的界面渲染的效果。</p><p data-pid=\"90vqjUgW\">我们可以看到，在这个渲染优化需求下，传统意义上的数据聚合思路（尽可能少的接口）反而是不利的；微服务式的多个接口，反而是有利的。当然，这不意味着前端直接对接微服务接口，不需要 BFF；这其实意味着我们需要 Streaming BFF 去解放 Streaming SSR 的潜力。</p><p data-pid=\"U9auIvH-\">总的而言，彻底的前后端分离是指前端掌握了面向渲染优化的充分条件，包括 SSR 和 BFF 两个彼此紧密关联的优化空间，缺少任意一个，都难以获得充分的渲染优化能力。从这个角度来看，前端团队开发 BFF 是一个未来的技术方向。研发团队的分工模式随着技术发展，将从朴素模式逐渐转向解耦模式。</p><p data-pid=\"v3D8oA3s\"><b>四、解耦模式的 BFF 技术选型</b></p><p data-pid=\"oKOqXcuN\">解耦模式的 BFF 服务由前端团队开发，所用的编程语言也由前端团队决定。大部分情况下前端团队会采用相同的编程语言（JavaScript/TypeScript），基于 Node.js 运行时开发相应的 BFF 服务。基于这个前提，我们讨论几种技术选型。</p><p data-pid=\"WHYc-svY\"><b>4.1 RESTful API</b></p><p data-pid=\"TCaMJDxC\">处于模仿阶段的前端团队，往往会采用 RESTful API 方式实现 BFF 服务。技术目标是把后端之前做但现在不做的功能，用同样的方式和思路让前端团队用Node.js 实现一遍。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b36628bc07ec86817754f0d952674440_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"586\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-b36628bc07ec86817754f0d952674440_r.jpg\" data-original-token=\"v2-b36628bc07ec86817754f0d952674440\"/></figure><p data-pid=\"xoAVO5Qa\">实现 BFF 服务的前端开发人员，其心智模型跟普通后端无异，涉及 URL,HttpRequest, HttpResponse, RequestHeader, Query, Body, Cookie, Authorization, CORS，Service, Controller 等等。</p><p data-pid=\"x8BmIeLR\">然而，即便是现在，掌握成熟后端接口开发能力的前端开发人员，依旧是稀缺的。所以，往往这种方式开发的 BFF 服务的质量，劣于专业后端开发的，并且几乎不考虑面向前端的极致优化，能满足需求已经达到了目标。</p><p data-pid=\"Pg4s2Vuy\">此外，从语义角度看，RESTful API 是面向资源的，跟面向前端需求的 BFF 场景并不契合。很多时候，前端需要的数据并不是后端资源的直接映射，而是经过聚合、转换、过滤、排序等处理后的结果。</p><p data-pid=\"BkWZAHFq\">因此，一开始基于 RESTful API 开发的 BFF 服务，最终将有意或无意、主动或被动地演变成只有一半功能的 RPC 服务。它的 url 参数设计是函数语义，而非资源语义，但调用这些远程函数时仍然要考虑 server-client 之间底层通讯细节。既没有被封装，也缺少优化。</p><p data-pid=\"jDWeqfPr\"><b>4.2 GraphQL</b></p><p data-pid=\"Wkc72Rhc\">GraphQL是一个面向前端数据访问优化的数据抽象层，它相当适合作为 BFF 技术选型，并且也是我们之前包括现在仍在使用的 BFF 方案。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8783d2e3110dece5a060a35d3e187321_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"394\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-8783d2e3110dece5a060a35d3e187321_r.jpg\" data-original-token=\"v2-8783d2e3110dece5a060a35d3e187321\"/></figure><p data-pid=\"wBXi7mWs\">它的技术特点是，在数据访问层实现了一定的控制反转（Inversion of control，IOC）的能力。</p><p data-pid=\"KeohK4tC\">GraphQL 服务的开发者负责构建一个数据网络结构（Graph），支持其消费者根据自身需求编写 GraphQL Query 语句查询所需 JSON 数据（Tree）。这种灵活的查询能力，实际上是将前后端数据交互相关的代码分成了两部分，一部分是关于通用性的，放在数据提供方（GraphQL 服务）里，一部分是关于特殊性的，放在数据消费方（前端应用的查询语句）里。</p><p data-pid=\"oMQBGMmq\">如此，GraphQL BFF 可以将按终端尺寸分类的多个 BFF 整合成一个 BFF。从之前Mobile BFF 和 PC BFF，变成统一的GraphQL BFF。减少了两个 BFF 之间重复的部分。</p><ul><li data-pid=\"IBpHk4Wi\">Mobile BFF = GraphQL BFF + Mobile GraphQL Query</li><li data-pid=\"6O6eOm6z\">PC BFF = GraphQL BFF + PC GraphQL Query</li></ul><p data-pid=\"7SkvvtyC\">通过统一的 GraphQL-BFF 配合差异的 *-GraphQL-Query 实现了之前多个 BFF 服务提供的数据访问能力。</p><p data-pid=\"eBo2Z3s6\">前端团队开发 GraphQL BFF 应用时，其心智模型不再是纯粹的后端概念，而是 GraphQL 相关的概念，如 Schema, Query, Mutation, Resolver，DataLoader, Directive, SelectionSet 等等，它们更加利于前后端数据访问的优化。更多详情可以阅读另一篇文章《<a href=\"https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMjM5MDI3MjA5MQ%3D%3D%26mid%3D2697268699%26idx%3D1%26sn%3Dd761aa9f77b5a6acd7e26134169c13ae%26chksm%3D8376f2efb4017bf9777495d5d4cba16cea02a87b608e9c63f2ca1b6817cdba3dd84dfaadb20d%26scene%3D21%23wechat_redirect\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GraphQL-BFF：微服务背景下的前后端数据交互方案</a>》。</p><p data-pid=\"2andD1L7\"><b>4.3 RPC</b></p><p data-pid=\"ElRopFyf\">RPC 是指 Remote Procedure Call，即远程过程调用。这个模式也适用于 BFF 服务的实现。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d58dd23faa532b75b9c04828774667f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"793\" data-original=\"https://pic1.zhimg.com/v2-d58dd23faa532b75b9c04828774667f4_r.jpg\" data-original-token=\"v2-d58dd23faa532b75b9c04828774667f4\"/></figure><p data-pid=\"BJwlXs9B\">它的技术特征是，将实现端和调用端之间的通讯过程封装，作为技术细节隐藏起来，并不暴露给调用者。对于调用者而言，仿佛像调用本地函数。</p><p data-pid=\"Nb2XuNvG\">正因如此，它不要求调用一次 RPC 函数即发起一次独立的通讯过程。它可以将多次 RPC 函数批量化(Batching)并流式响应（Streaming），进一步减少反复重建通讯过程的开销。</p><p data-pid=\"EVwmDkC7\">前端团队基于 RPC 模式开发 BFF时，其心智模型跟开发传统后端服务不同。所谓的接口设计，被转化为函数参数设计和返回值设计，沿袭了前端开发者熟悉的标准编程语言特性。相比 RESTful API 和 GraphQL 而言，RPC 引入更少概念和领域知识要求。</p><p data-pid=\"itd594HD\"><b>4.4 GraphQL VS RPC</b></p><p data-pid=\"-_ulLNe6\">我们团队从四年前开始使用 GraphQL-BFF，并成功落地到多个项目，取得了不错的效果。我们看到了它带来的好处和价值，同时也发现了它当前的一些局限性。为了突破桎梏，争取到更广阔的优化空间，我们开始探索 RPC-BFF 方案，并试图克服 GraphQL-BFF 方案未能解决的问题。</p><p data-pid=\"4B1tno5x\">值得提醒的是，本文提到的 GraphQL-BFF 面临的难题，是在精益求精的层面上的探讨，并非否定和质疑 GraphQL 作为 BFF 方案的合理性。</p><p data-pid=\"VEKWnNcu\">GraphQL-BFF 的第一个难题是类型问题。GraphQL 是一个跨编程语言的数据抽象层，它自带了一套 Type System。使用具体某个带类型的编程语言（如 TypeScript）开发 GraphQL 服务时，就存在两个类型系统，因此难免有一些语言特性无法对齐以及类型重复定义的地方。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-92d67c4bdf79208e8dbc4f884e6ab922_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"342\" data-rawheight=\"342\" class=\"content_image\" width=\"342\" data-original-token=\"v2-92d67c4bdf79208e8dbc4f884e6ab922\"/></figure><p data-pid=\"x9wnBym_\">比如，GraphQL 的类型系统支持代数数据类型（Algebraic data type），可以用 union 定义 A 或 B 的类型关系。这在 Rust和 TypeScript 中有不错的支持，在 Java 或 Go 中还没有直接的支持。然而即便是 TypeScript，很多类型声明也得在 GraphQL 和 TypeScript 中分别定义一份。</p><p data-pid=\"4hAtyRsN\">此外，GraphQL 的 Client-side 类型问题也是一个挑战。由于 GraphQL 服务的返回值取决于发送过来的查询语句，因此其响应的数据类型不是固定的，而是随着查询语句代码的修改而变化的。</p><p data-pid=\"WUs-8bX2\">尽管 GraphQL 由于提供了内省机制（Introspection），可以构建出专门根据 GraphQL Schema + GraphQL Query 生成 TypeScript 类型定义的 Code Generator 工具。但其中包含很多手动处理或复杂的工程化配置环节。</p><p data-pid=\"ILzodoux\">开发者有可能需要手动从 TypeScript 代码里复制出 GraphQL Query 语句，在 GraphQL Code Generator 工具里生成 TypeScript 类型后，复制该类型定义到项目中，然后传入 GraphQL Client 调用函数标记其返回值类型。</p><p data-pid=\"x9h_uEW9\">或者像 Facebook/Meta 公司推出的 Relay 框架那样，实现一个 Compiler 去扫描代码里的 GraphQL Query 语句，自动生成类型到指定目录，让开发者可以直接使用。这块对研发团队的技术能力和工程化水平有较高要求。</p><p data-pid=\"zzinNsdk\">GraphQL-BFF 的第二个难题是，缺乏 Streaming 优化支持。当前的 GraphQL 数据响应，是由查询语句中最慢的节点决定的，尚未支持已 resolved 的节点提前返回给调用端消费的能力。</p><p data-pid=\"8bPeTR-Y\">虽然 GraphQL 有 @stream/@defer 相关的 RFC，但目前并未进入 GraphQL 规范中，也未在相关 GraphQL 库中得到实现或推广。</p><p data-pid=\"Jb9CmoKP\">GraphQL-BFF 的第三个难题是缺少 Client-side Data-Loader 优化支持。在 Server-side 的GraphQL 有相关 Data-Loader，支持在一次查询请求处理过程中，相同资源的访问可以被去重。但是在调用端，一次 GraphQL Query 就对应着一次 Http 请求与响应。多次 GraphQL Query 很难被自动 merge 和 batching，遑论 streaming 优化。</p><p data-pid=\"1H6lip42\">如前所述，为了渲染上的进一步优化，前端组件实践的流行趋势是，每个组件可以将自己的数据需求定义在自己的组件代码中，而非托管给父级组件。如此，可以方便组件自身做 streaming 优化；当它自身的数据已经获取完毕，它可以先行渲染，不必等待。</p><p data-pid=\"2lEtRGtj\">相关 GraphQL Client（如Relay）的处理办法是，让视图组件用 GraphQL Fragment 而非 GraphQL Query 去表达数据需求。通过编译器处理后，它们将可以提取到父级组件或者根组件里合并为 GraphQL Query。实现编写时在组件内，运行时托管在父级组件中获取数据。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-08ce025c553540056818388c6842d454_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"767\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-08ce025c553540056818388c6842d454_r.jpg\" data-original-token=\"v2-08ce025c553540056818388c6842d454\"/></figure><p data-pid=\"meZ4qi51\">这种策略在实践上是可行的，然而既有较高的工程化门槛，难以普遍推广，又不是 GraphQL 规范所定义的标准行为，甚至需要额外自定义很多指令以达到目标（如  Relay 框架的 @argument, @argumentDefinitions 等），这进一步损害了它的易用性。    我们需要的一种 BFF 技术方案是：</p><ul><li data-pid=\"m0FQvlMH\">支持使用标准的语言特性解决问题</li><li data-pid=\"P0Rk3MgM\">BFF 实现端类型定义不必编写两份</li><li data-pid=\"ZqlwOumD\">BFF 调用端可无缝复用 BFF 实现端的定义，不必重复定义</li><li data-pid=\"w3JORUmk\">支持 Client-side Data-Loader 机制，可以将客户端的多个数据访问调用自动</li><li data-pid=\"Bx3p8wpN\">    merging</li><li data-pid=\"00Za6PXN\">    batching</li><li data-pid=\"DIqgtsGj\">    streaming</li></ul><p data-pid=\"AKy83pgu\">RPC-BFF 技术方案，可以满足上述目标。</p><p data-pid=\"AE5mGDvo\"><b>五、RPC-BFF 的技术选型</b></p><p data-pid=\"W8Fsgmm2\">基于 RPC 实现 BFF 的思路和方案，也有很多种选择。</p><p data-pid=\"eDr7RE9N\"><b>5.1 gRPC</b></p><p data-pid=\"mLORwhG-\">gRPC 是一个非常优秀的 RPC 技术方案，但它跟 GraphQL 一样是跨编程语言的，需要额外使用一种 DSL 定义类型（Interface Definition Language，IDL），因此有类似的重复定义类型的问题，也未对前端常用语言（如TypeScript)做充分的针对性优化，并且它主要服务于分布式系统这类 server-to-server 的调用，对 client/ui-to-server 的 BFF 场景没有特殊处理。</p><p data-pid=\"29sxYGnV\">在很多基于 gRPC 的 BFF 实践中，BFF 跟背后的领域服务之间是 RPC 模式，BFF 跟前端之间则回到 RESTful API 模式。而我们所谓的 RPC-BFF，其实是指前端和 BFF 之间是 RPC 模式的调用关系。</p><p data-pid=\"Ty69yI4J\"><b>5.2 tRPC</b></p><p data-pid=\"smvgHF6U\">tRPC 的设计目的则跟我们的目标更加贴合，它是基于 TypeScript 实现的端到端类型安全方案（End-to-end type-safe APIs）。</p><p data-pid=\"KipL5G7a\">然而，tRPC 的技术实现方式，跟我们的需求场景却不契合。tRPC 跟前文的 Relay 框架某种意义上是两个极端。Relay 框架完全依赖它的 Relay Compiler 去扫描代码，充分分析和收集代码里的 GraphQL 配置，有很多编译、构建和代码生成的环节。而 tRPC 则相反，它目前没有构建、编译和代码生成的步骤，正如其官方文档里所言：</p><blockquote data-pid=\"-7Cff0XG\">tRPC has no build or compile steps, meaning no code generation, runtime bloat or build step.</blockquote><p data-pid=\"V8jtPE5P\">tRPC 假设了开发者的项目是全栈项目（full-stack application），或者前后端代码都在一个仓库。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f2465fb692e6ef1a3fd4076812e00340_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"945\" data-rawheight=\"250\" class=\"origin_image zh-lightbox-thumb\" width=\"945\" data-original=\"https://pic1.zhimg.com/v2-f2465fb692e6ef1a3fd4076812e00340_r.jpg\" data-original-token=\"v2-f2465fb692e6ef1a3fd4076812e00340\"/></figure><p data-pid=\"exbTXmUv\">因此，前端项目可以直接 import 后端项目里的 TypeScript 类型。</p><p data-pid=\"RUu6GBCt\">如果我们构建的 BFF 项目，不只为了一个前端项目服务，而是多个前端项目共用的，涉及跨端、跨语言、跨团队等复杂组合。使用 tRPC 时，可能就得采取 Monorepo 模式，把 BFF 项目及其所有调用方的代码项目，放到一个 Git 仓库中管理。这将显著地增加多个团队之间的 Git 工作流、CI/CD、研发和部署流程等多方面的协调问题，要求处理新的工程化复杂度（Monorepo），能满足这个条件的团队不多。</p><p data-pid=\"uiZbB-RK\">我们的场景所期望的技术方案是，允许 BFF 项目及各个下游前端项目在不同仓库中管理，它们无法直接 import BFF 项目的类型，不满足 tRPC 的项目假设。</p><p data-pid=\"Q4-W2s35\"><b>5.3 DeepKi</b></p><p data-pid=\"4EG9gcIu\"><b>t</b>DeepKit 是一个富有野心的项目，它在 TypeScript 基础上增加了很多特性，力图打造一个更加完备的 TypeScript 后端基础设施。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ecdef291a6d0567af98ad10a70365ebf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"539\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-ecdef291a6d0567af98ad10a70365ebf_r.jpg\" data-original-token=\"v2-ecdef291a6d0567af98ad10a70365ebf\"/></figure><p data-pid=\"_MUtJ2cF\">它也有 RPC 模块的部分，但出于以下几个原因，最后未被我们选择。第一个原因是，DeepKit 的 RPC 实践方式跟 tRPC 有类似的项目结构假设。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c1c0e20bc982ecc2997834454696417e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"932\" data-rawheight=\"327\" class=\"origin_image zh-lightbox-thumb\" width=\"932\" data-original=\"https://pic3.zhimg.com/v2-c1c0e20bc982ecc2997834454696417e_r.jpg\" data-original-token=\"v2-c1c0e20bc982ecc2997834454696417e\"/></figure><p data-pid=\"Bkztvz9u\">如上所示，rpc server 和 rpc client 之间需要有个共享的接口，一个负责实现该接口，一个负责消费该接口。这也要求前后端需要放到一个仓库中。或者采用 npm 包这类更低效的代码共享途径，对库和框架这种变动比较不频繁的场景来说是合适的，对业务迭代这种更新频率则难以接受。</p><p data-pid=\"3uYP-zJr\">另一个原因则是，选择 DeepKit 并不是选择一个库或者框架这种小决策，它从编程语言开始侵入，然后到运行时以及库和框架等方方面面。有较强的 Vendor lock-in 风险，一个项目要从 DeepKit 中迁移到另一个技术相当困难。</p><p data-pid=\"2thCHisT\">团队需要下很大的决心才敢押注 DeepKit 选型，以 DeepKit 目前的完成度和流行度，还无法支撑我们做出这个决定。</p><p data-pid=\"eMDOtYZE\"><b>5.4 自研 RPC-BFF</b></p><p data-pid=\"9vxdGRcI\">如前所述，我们深入分析了 RPC BFF 的优势，以及考察了多个不同的技术选型。有的过于庞大、过分复杂，有的则过于简单、过于局限。</p><p data-pid=\"eGWpm38R\">但这些项目也启发了我们的自研方向，帮助我们从简单到复杂的光谱中，根据自身实际需求找到一个平衡点，可以用尽可能低的研发成本、尽可能小的侵入性、尽可能少的项目结构要求，实现 RPC-BFF 模式。</p><p data-pid=\"2A9-Z7Di\">也就是说，我们既不要像 DeepKit 和 Relay 那样，从完整的编译器乃至编程语言层面切入到代码生成和运行时，它们或许有更大的目标和野心，配得上如此高昂的技术成本和实现难度，但对纯粹的 BFF 场景而言可能过犹不及。同时也不要像 tRPC 那样完全没有代码生成，而是选择一个最小化代码生成的路线，满足 RPC-BFF 这一聚焦场景的需求。</p><p data-pid=\"XBocjtuM\"><b>六、自研 RPC-BFF 的设计与实现</b></p><p data-pid=\"vwLaDC4M\"><b>6.1 RPC-BFF 的设计思路</b></p><p data-pid=\"FSOwYVuk\">RPC-BFF 可以看作朴素 BFF 的拓展增强版。在朴素 BFF 中，后端在最简陋的情况下只为前端提供了数据。而 RPC-BFF 则需要做更多：提供数据、提供类型以及提供代码。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-df47eac70ce508328b66ed54a355e1f2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"646\" data-rawheight=\"316\" class=\"origin_image zh-lightbox-thumb\" width=\"646\" data-original=\"https://pic3.zhimg.com/v2-df47eac70ce508328b66ed54a355e1f2_r.jpg\" data-original-token=\"v2-df47eac70ce508328b66ed54a355e1f2\"/></figure><p data-pid=\"8OyWEkBE\">如上图所示，RPC-BFF 既是数据提供者（Data Provider），也是类型提供者（Type Provider），还是代码提供者（Code Provider）。前端不必重复定义 BFF 响应的数据类型，也不必亲自构造 Http 请求处理通讯问题。要做到这些功能，同时又不能损害易用性，需要极致地挖掘 TypeScript 的类型表达能力。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-543785444acd313c086d0b903a9b7711_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"509\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-543785444acd313c086d0b903a9b7711_r.jpg\" data-original-token=\"v2-543785444acd313c086d0b903a9b7711\"/></figure><p data-pid=\"QdUTEA9I\">上图为 RPC-BFF 架构图示意，其中存在四种颜色，分别的含义如下：</p><ul><li data-pid=\"x5nXIHQ0\">服务端运行时（server-runtime）为粉色，服务器代码在此运行</li><li data-pid=\"4f69Bve7\">类型编译时（compile-time）为蓝色，类型检查在此进行</li><li data-pid=\"wCtubvA5\">CLI 运行时（cli-runtime）为黄色，本地开发阶段使用的命令行工具</li><li data-pid=\"1EhdNZy7\">客户端运行时(client-runtime)为紫色，前端代码在此运行</li></ul><p data-pid=\"_lWX8C1u\">该 RPC-BFF 架构设计的核心在于Schema 部分，它是一切的基础。我们可以看到，Schema 有两条箭头，一条为 type infer，一条为 to JSON。也就是说，Schema 既作用于类型(type)所在的编译时(compile-time)，也作用于值(value)所在的运行时(runtime)。</p><p data-pid=\"WlAoYYkE\">当 BFF 端的代码经过编译，类型信息被编译器抹除后，我们仍可以在运行时访问到 JSON 数据结构表示的 Schema。通过这种机制，我们的 RPC-BFF 像 GraphQL 那样支持内省特性（introspection）。在开发阶段，前端可以通过本地 CLI 工具向 RPC-BFF 发起内省请求（Introspection Request）拿到 JSON 形式的 Schema 结构，然后通过 Code Generator 生成前端所需的 Client 类型和 Client 代码。</p><p data-pid=\"WkWvIymC\">如此，我们既不需要用编译器去扫描和分析服务端代码以提取类型，也不需要用编译器去扫描和分析前端代码去生成类型。对于 RPC-BFF 来说，不需要掌握到图灵完备的编程语言的所有信息才能工作，只需要掌握RPC 函数列表及其输入和输入类型结构即可。</p><p data-pid=\"vrIDiIHJ\"><b>6.2 RPC-BFF Schema 设计与实现</b></p><p data-pid=\"BZojA6oy\">Schema 是一段特殊的代码，它介于 Type 和 Program 之间，面向特定领域保留其所需的元数据性质的配置结构。Schema 往往比类型复杂，但比一般意义上的程序简单。</p><p data-pid=\"dulP5u6a\">不管是 tRPC 还是 GraphQL 都包含 Schema 性质的要素。然而，对于 RPC-BFF 的场景来说，它们分别都有能力的缺失。</p><p data-pid=\"QzFfUeE-\">tRPC 中的 Schema 是只起到了 Validator 和 Type-infer 的作用，而没有 Introspection 机制。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7a3cc22647261bd733e04ba026807e8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"559\" class=\"origin_image zh-lightbox-thumb\" width=\"737\" data-original=\"https://pic4.zhimg.com/v2-7a3cc22647261bd733e04ba026807e8b_r.jpg\" data-original-token=\"v2-7a3cc22647261bd733e04ba026807e8b\"/></figure><p data-pid=\"9ssv8ti-\">如上所示，tRPC 自身没有实现 schema 部分，但可以从开源社区的多个 schema-based validator 库中选择一个它目前支持的（如 zod），从而得到在 server runtime 对客户端传递进来的参数验证，以及在开发阶段提供 type-infer 功能。</p><p data-pid=\"NAdrckGJ\">而 GraphQL 的情况则复杂一些，它分为 Schema-first 和 Code-first 两类实践方式。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-12188ddbe2458913757dd5cfdfee2421_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"557\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"557\" data-original=\"https://pic2.zhimg.com/v2-12188ddbe2458913757dd5cfdfee2421_r.jpg\" data-original-token=\"v2-12188ddbe2458913757dd5cfdfee2421\"/></figure><p data-pid=\"vg3aCRoJ\">Schema-first GraphQL 实践如上图所示，GraphQL Schema 以字符串的形式出现在 TypeScript/JavaScript 代码中，它是 DSL 形态，要复用 host language（如 TypeScript）的类型系统相当困难。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-325c84a44dc025953f6cc95794bbc59c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"566\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb\" width=\"566\" data-original=\"https://pic1.zhimg.com/v2-325c84a44dc025953f6cc95794bbc59c_r.jpg\" data-original-token=\"v2-325c84a44dc025953f6cc95794bbc59c\"/></figure><p data-pid=\"9pX30smQ\">Code-first/Code-only GraphQL 则如上图所示，它是 eDSL 形态，即嵌入式领域特定语言(Embedded domain-specific language)，它可以基于 host language 的API 以程序的方式而非字符串的方式，创建出 GraphQL Schema。</p><p data-pid=\"nEh2jYxv\">因此，这种模式下 GraphQL 相当于嵌入到 TypeScript 中，它有机会利用 TypeScript 的类型推导(type infer)能力，反推出 TypeScript 类型；也能够在运行时 stringify 为 DSL 形态的 GraphQL Schema。</p><p data-pid=\"OoCabGwt\">可以说，这种实践方式的 GraphQL 跟 host language 的整合度更高，某种程度上是更灵活的，尽管牺牲了 DSL 那种直观性。</p><p data-pid=\"PtUG-4XX\">然而，目前几乎所有 Code-first/Code-only 的 GraphQL 库的 TypeScript 类型支持程度都有很大的不足。特别是对 GraphQL 这种类型之间递归结构特别频繁的技术来说，其类型推导的技术挑战远大于zod 等朴素 schema-based validator 库。即便是 zod 这类更简单的场景，对递归类型也没有充分支持。</p><blockquote data-pid=\"Bn_5QeSG\">You can define a recursive schema in Zod, but because of a limitation of TypeScript, their type can&#39;t be statically inferred. Instead you&#39;ll need to define the type definition manually, and provide it to Zod as a &#34;type hint&#34;.</blockquote><p data-pid=\"kVOxN79l\">如 zod 官方文档所述，当我们的 schema 中存在递归，type-infer 就受到了限制，需要更繁琐的方式去自行拼装出递归类型。</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">baseCategorySchema</span> <span class=\"o\">=</span> <span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"kt\">object</span><span class=\"p\">({</span>\n  <span class=\"nx\">name</span>: <span class=\"kt\">z.string</span><span class=\"p\">(),</span>\n<span class=\"p\">});</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Category</span> <span class=\"o\">=</span> <span class=\"nx\">z</span><span class=\"p\">.</span><span class=\"k\">infer</span><span class=\"p\">&lt;</span><span class=\"nt\">typeof</span> <span class=\"na\">baseCategorySchema</span><span class=\"p\">&gt;</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">subcategories</span>: <span class=\"kt\">Category</span><span class=\"p\">[];</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">categorySchema</span>: <span class=\"kt\">z.ZodType</span><span class=\"p\">&lt;</span><span class=\"nt\">Category</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">baseCategorySchema</span><span class=\"p\">.</span><span class=\"nx\">extend</span><span class=\"p\">({</span>\n  <span class=\"nx\">subcategories</span>: <span class=\"kt\">z.lazy</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span><span class=\"nx\">categorySchema</span><span class=\"p\">.</span><span class=\"nx\">array</span><span class=\"p\">()),</span>\n<span class=\"p\">})</span>\n</code></pre></div><p data-pid=\"B8IAJiJ_\">如上所示，它需要先用 schema 方式定义递归类型（Category）中非递归的部分，然后用 type-infer 在 type-level 定义递归部分的类型，最后回到 schema-level 中显式类型标注，定义递归 schema。</p><p data-pid=\"ljwWrGuv\">它在 schema-level 和 type-level 中来回穿梭。每一个递归字段都要求拆成上述 3 个部分，其工程上的易用性缺乏保障，其代码也缺乏可读性。有多少读者能轻易看出上面的复杂 schema 是为了定义下面这几行代码？</p><div class=\"highlight\"><pre><code class=\"language-text\">type Category = {\n  name: string\n  subcategories: Category[]\n}</code></pre></div><p data-pid=\"IA5RVozZ\">回到 GraphQL，我们现在能够看到，它在 Validator 和 Introspection 特性上有良好的支持，可以在 server runtime 验证参数结构和返回值，也可以通过内省请求曝露出schema 结构，但在 type-infer 上仍有一些难以攻克的挑战存在。</p><p data-pid=\"Vvxz4-Tx\">RPC-BFF 的 Schema 需要同时满足 Validator，Type-infer 和 Introspection 三个能力，现有方案并不满足，因此我们通过自研 Schema方案实现了它们。</p><p data-pid=\"2cPyRMSX\">下面是一段定义 User 类型的TypeScript 代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">type UserType = {\n  id: string;\n  name: string;\n  age: number;\n}\n\nconst user: UserType = {\n  id: &#39;user_id_01&#39;,\n  name: &#39;Jade&#39;,\n  age: 18\n}</code></pre></div><p data-pid=\"YPqoLRoF\">经过编译后，在运行时执行的 JavaScript 代码如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">&#34;use strict&#34;;\nconst user = {\n  id: &#39;user_id_01&#39;,\n  name: &#39;Jade&#39;,\n  age: 18\n};</code></pre></div><p data-pid=\"BQBAzWlY\">类型信息被抹去，在运行时无法获取。通过 RPC-BFF Schema 重新定义 User 结构如下：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f9b6d62b015ea20a291d85d3234860a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"671\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb\" width=\"671\" data-original=\"https://pic1.zhimg.com/v2-f9b6d62b015ea20a291d85d3234860a8_r.jpg\" data-original-token=\"v2-f9b6d62b015ea20a291d85d3234860a8\"/></figure><p data-pid=\"DKNByW5-\">我们用 ObjectType 定义了User Schema，用 TypeOf 推导出UserType，经过 TypeScript 编译后，JavaScript 代码如下所示：</p><div class=\"highlight\"><pre><code class=\"language-text\">import { ObjectType } from &#39;@ctrip/rpc-bff&#39;;\n\nclass User extends ObjectType {\n  constructor() {\n    super(...arguments);\n    this.id = String;\n    this.name = String;\n    this.age = Number;\n  }\n}\nconst user = {\n  id: &#39;user_id_01&#39;,\n  name: &#39;Jade&#39;,\n  age: 18\n};</code></pre></div><p data-pid=\"MJqLwuba\">我们可以看到，由 ObjectType 定义的 User Schema 在运行时也得到了保留，因此我们可以基于这些信息，实现在运行时的 Validation 和 Introspection 功能。</p><p data-pid=\"TGZ0OaFW\">此外，我们的 RPC-BFF Schema 技术还克服了 zod 等库未能解决的递归类型定义问题：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6ebe1070a52bf2a03a4154497c748db1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"616\" class=\"origin_image zh-lightbox-thumb\" width=\"475\" data-original=\"https://pic2.zhimg.com/v2-6ebe1070a52bf2a03a4154497c748db1_r.jpg\" data-original-token=\"v2-6ebe1070a52bf2a03a4154497c748db1\"/></figure><p data-pid=\"WZJBeyrF\">我们无需为了支持递归而人为拆分类型，可以直观地定义出上述的 Category 结构，并支持静态类型推导。其秘诀在于利用 TypeScript 中 class 声明具备的独特性质—— value &amp; type 二象性。</p><p data-pid=\"Y-TarIhr\">当我们用 class 声明一个结构时，它同时也定义了：</p><ul><li data-pid=\"Wv4nZRVb\">Constructor 函数值</li><li data-pid=\"IURc0vL9\">Instance Type 实例类型</li></ul><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1648fc89e07733865392317b4e566f24_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"644\" data-rawheight=\"230\" class=\"origin_image zh-lightbox-thumb\" width=\"644\" data-original=\"https://pic1.zhimg.com/v2-1648fc89e07733865392317b4e566f24_r.jpg\" data-original-token=\"v2-1648fc89e07733865392317b4e566f24\"/></figure><p data-pid=\"RdZ8Rx7c\">如上图所示，左边箭头的 Test 是一个实例类型（Instance Type），右边箭头的则是类的构造器函数(Constructor)。</p><p data-pid=\"Oefv1HrA\">目前就我们所知，只在 class 声明场景下 TypeScript 对递归 Schema 有良好的类型推导支持。因此，如果 zod 或者 Code-first GraphQL 库想要支持递归 Schema 结构，它们的 Schema API 可能需要大改，变成我们上面演示的 RPC-BFF Schema 的 API 风格。</p><p data-pid=\"xpsjsSm9\">尽管我们掌握了在 Validator, Type-infer 和 Introspection 能力上更完备的 Schema 技术，满足了 Code-first GraphQL 的技术要求，但也仅限于 server 端的情况，在 client 端的类型，仍需要引入复杂的编译技术扫描前端代码库里的 GraphQL Query 片段以生成类型。这不是我们期望的。因</p><p data-pid=\"YcSYNjAv\">此，我们目前先将这种技术应用于更简单的 RPC-BFF 场景，未来也不排除支持 GraphQL。</p><p data-pid=\"ykOipNsA\"><b>6.3 定义 RPC-BFF 函数</b></p><p data-pid=\"SATC8RG8\">有了 RPC-BFF Schema 之后，我们就可以用它来定义 RPC-BFF 函数了。</p><p data-pid=\"ejFOUWaI\">在纯 TypeScript 的代码里，定义函数的 input 和 output 是这样的：</p><div class=\"highlight\"><pre><code class=\"language-text\">// 定义 input\ntype HelloInput = {\n  name: string\n}\n\n// 定义 output\ntype HelloOutput = {\n  message: string\n}\n\ntype HelloFunction = (input: HelloInput) =&gt; HelloOutput</code></pre></div><p data-pid=\"xBu-k_fu\">然后实现满足该函数类型的代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">const hello: HelloFunction = ({ name })=&gt; {\n  return {\n    message: `Hello ${name}!`,\n  }\n}</code></pre></div><p data-pid=\"tSr9Of_4\">在 RPC-BFF 里，我们只是换了一种方式去定义 input 和 output。去掉注释，并且引入 ObjectType，前面的 hello 函数就变成了这样：</p><div class=\"highlight\"><pre><code class=\"language-text\">import { Api, ObjectType } from &#39;@ctrip/rpc-bff&#39;\n\nclass HelloInput extends ObjectType {\n  name = String\n}\n\nclass HelloOutput extends ObjectType {\n  message = String\n}\n\nexport const hello = Api(\n  {\n    input: HelloInput,\n    output: HelloOutput,\n  },\n  async ({ name }) =&gt; {\n    return {\n      message: `Hello ${name}!`,\n    }\n  },\n)</code></pre></div><p data-pid=\"T7eSUCAy\">可以看到，它跟我们纯 TypeScript 的结构几乎是一样的。</p><p data-pid=\"rbO3IIv0\"><b>6.4 RPC 函数和普通函数的区别</b></p><p data-pid=\"wda2sXZN\">RPC 函数和普通函数的区别在于，RPC函数的 input 和 output 都是 value，而普通函数的 input 和 output 都是 type。type 会在编译时被擦除，而value 会在运行时被保留。</p><p data-pid=\"u4NUcDSS\">所以，RPC 函数的 input和 output 需要是 value，它们在运行时是可以被访问到的。这样可以为 RPC-BFF client 生成类型代码和调用代码。</p><p data-pid=\"zoYqLkTS\">尽管我们使用 value 的方式去定义RPC 函数的输入和输出，但通过 TypeScript 提供的type infer 能力，我们不必为 RPC 函数的实现重新写一次类型定义，而是可以使用 TypeScript 的类型推导能力，让 TypeScript 自动推导出 RPC 函数的输入和输出类型。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8ca7a122b4a4e9c89bd1e9fac8b45d42_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"409\" class=\"origin_image zh-lightbox-thumb\" width=\"458\" data-original=\"https://pic3.zhimg.com/v2-8ca7a122b4a4e9c89bd1e9fac8b45d42_r.jpg\" data-original-token=\"v2-8ca7a122b4a4e9c89bd1e9fac8b45d42\"/></figure><p data-pid=\"hVqcIBKA\">可以看到，我们的 hello 函数实现是有类型的。不仅如此，我们还可以通过 TypeOf 获取到 Schema API 定义出来的结构。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4f6d95d3fc8c2ed6c62e85586c57c6cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"579\" data-rawheight=\"361\" class=\"origin_image zh-lightbox-thumb\" width=\"579\" data-original=\"https://pic1.zhimg.com/v2-4f6d95d3fc8c2ed6c62e85586c57c6cc_r.jpg\" data-original-token=\"v2-4f6d95d3fc8c2ed6c62e85586c57c6cc\"/></figure><p data-pid=\"QCk8UoI1\">通过这种方式，我们实现了 RPC 函数的输入和输出结构，具备以下能力：</p><ul><li data-pid=\"VVLRuf5D\">可以在运行时保留，用以生成代码或者生成文档</li><li data-pid=\"tZn5n_c7\">可以在编译时被隐式地推导出来，</li><li data-pid=\"2DYAarL5\">用以做类型检查可以通过 TypeOf 工具类型显式地获取到，用以做类型标记</li></ul><p data-pid=\"qMPVtUEo\">现在，让我们把 RPC-BFF 函数放到 RPC-BFF App 中：</p><div class=\"highlight\"><pre><code class=\"language-text\">import { createApp } from &#39;@ctrip/rpc-bff&#39;\n\nimport { hello } from &#39;./api/hello&#39;\n\nexport const app = createApp({\n  entries: {\n        hello,\n    }\n})</code></pre></div><p data-pid=\"XfiD4HnF\">createApp 将创建一个 RPC-BFF App，其中 options.entries 字段就是我们想要曝露给前端调用的 RPC-BFF 函数列表。</p><p data-pid=\"0xnvWHyx\">启动后，一个 RPC-BFF Server 就运行起来了。</p><p data-pid=\"WK_HwZyk\"><b>6.5 RPC-BFF 的 Client</b></p><p data-pid=\"0wqoYMhw\">在前端项目的开发阶段，它将会新增 rpc.config.js 配置脚本。</p><div class=\"highlight\"><pre><code class=\"language-text\">// rpc.config.js\nconst { createRpcBffConfig } = require(&#39;@ctrip/rpc-bff-cli&#39;)\n\nmodule.exports = createRpcBffConfig({\n    client: {\n        rootDir: &#39;./__generated__/&#39;,\n        list: [\n            {\n                src: &#39;http://localhost:3001/rpc_bff&#39;,\n                dist: &#39;my-bff-client.ts&#39;,\n            }\n        ]\n    }\n})</code></pre></div><p data-pid=\"0C8RNxNU\">如上所示，当该脚本被 rpc-bff-cli 运行时，它会向 src 发起 introspection request 并生成代码到指定目录下的指定文件（如 my-bff-client.ts）。</p><p data-pid=\"nNRQw-pC\">就我们前面所演示的 hello 函数来说，其生成的代码大概如下所示：</p><div class=\"highlight\"><pre><code class=\"language-text\">// ./__generated__/my-bff-client.ts\n\n/**\n * This file is auto generated by rpc-bff-client\n * Please do not modify this file manually\n */\n\nimport { createRpcBffLoader } from &#39;@ctrip/rpc-bff-client&#39;\n\nexport type JsonType =\n  | number\n  | string\n  | boolean\n  | null\n  | undefined\n  | JsonType[]\n  | { toJSON(): string }\n  | { [key: string]: JsonType }\n\n/**\n * @label HelloInput\n*/\nexport type HelloInput = {\n  name: string\n}\n\n/**\n * @label HelloOutput\n*/\nexport type HelloOutput = {\n  message: string\n}\n\nexport type ApiClientLoaderInput = {\n  path: string[]\n  input: JsonType\n}\n\ndeclare global {\n  interface ApiClientLoaderOptions {}\n}\n\nexport type ApiClientOptions = {\n  loader: (input: ApiClientLoaderInput,\n  options?: ApiClientLoaderOptions) =&gt; Promise&lt;JsonType&gt;\n}\n\nexport const createApiClient = (options: ApiClientOptions) =&gt; {\n  return {\n    hello: (input: HelloInput, loaderOptions?: ApiClientLoaderOptions) =&gt; {\n      return options.loader(\n        {\n          path: [&#39;hello&#39;],\n          input: input as JsonType,\n        },\n        loaderOptions\n      ) as Promise&lt;HelloOutput&gt;\n    }\n  }\n}\n\nexport const loader = createRpcBffLoader(&#34;http://localhost:3001/rpc_bff&#34;)\n\nexport default createApiClient({ loader })</code></pre></div><p data-pid=\"_5jjfEVQ\">我们可以看到，RPC-BFF 的代码生成结果主要包含三个部分：</p><ul><li data-pid=\"FXcyeTG4\">RPC-BFF Server 里的 Schema 变成了前端里的 Type，将在编译后被擦除，不会增加前端代码体积</li><li data-pid=\"pUH8URkS\">RPC-BFF Server 里的 entries 变成了 createApiClient 函数，包含了跟 BFF 端对齐的函数调用列表及其类型信息</li><li data-pid=\"mNNrUDQu\">RPC-BFF Client 被引入和实例化，它将在前端的运行时接管 RPC 函数的前后端通讯过程，对前端调用者无感</li></ul><p data-pid=\"OrxFBFpS\">通过 Introspection + Code-generator 途径，一个 RPC-BFF 服务不必跟它的下游前端项目绑定，而是每个前端项目通过 rpc.config.js 各自同步它们所需的 RPC-BFF 服务。如此解耦了前后端的项目依赖，同时这个模式在 Monorepo 项目中也能很好地工作，是一种更加灵活的方式。</p><p data-pid=\"CR02JzVP\"><b>七、RPC-BFF 特性概览</b></p><p data-pid=\"Sx2ydHVj\">至此，我们了解到了 RPC-BFF 的后端和前端分别的开发方式，可以看到对于 RPC-BFF 服务的开发者来说，并没有引入复杂的 API 或者概念，仅仅是在编写朴素函数的心智模型的基础上，将定义函数输入和输出结构的方式，从朴素的 Type 换成了 RPC-BFF Schema。</p><p data-pid=\"XcHt5I0g\">对于 RPC-BFF 服务的调用方而言，只是增加了 rpc.config.js 配置脚本，在开发阶段就能得到 RPC-BFF 的类型及其 Client 封装，用极小的成本获得极大便利。</p><p data-pid=\"TlT-sKIh\">但这仍不是 RPC-BFF 的优势的全部，接下来，我们来了解一下 RPC-BFF 的几大特性。</p><p data-pid=\"QWVr5pwi\"><b>7.1 端到端类型安全的函数调用</b></p><p data-pid=\"bwf72FYj\">端到端类型安全(End to end type-safety)的函数调用是 RPC-BFF 的基本功能，前端通过生成的 RPC-BFF Client 模块访问 RPC-BFF Server 时，像调用本地异步函数一样。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-15d1406d1419931c5c8fe9ed65a74b3c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"165\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-15d1406d1419931c5c8fe9ed65a74b3c_r.jpg\" data-original-token=\"v2-15d1406d1419931c5c8fe9ed65a74b3c\"/></figure><p data-pid=\"mLbBdIhG\">如上所示，BFF 后端和前端的类型对齐。前端不必关心底层 HTTP 通讯细节，可以聚焦 RPC 函数的 input 和 output 结构。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-664fe4d4684d634cc6b453d1105c1808_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"108\" class=\"origin_image zh-lightbox-thumb\" width=\"460\" data-original=\"https://pic1.zhimg.com/v2-664fe4d4684d634cc6b453d1105c1808_r.jpg\" data-original-token=\"v2-664fe4d4684d634cc6b453d1105c1808\"/></figure><p data-pid=\"qLotjinL\">当 RPC 函数执行时，它将发起 HTTP 请求，将所调用的 RPC 函数的路径(path)和输入(input)等信息打包发送给 RPC-BFF Server。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9dbcbacbcac8d4219da74810145dfcab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"522\" data-rawheight=\"76\" class=\"origin_image zh-lightbox-thumb\" width=\"522\" data-original=\"https://pic4.zhimg.com/v2-9dbcbacbcac8d4219da74810145dfcab_r.jpg\" data-original-token=\"v2-9dbcbacbcac8d4219da74810145dfcab\"/></figure><p data-pid=\"PfAqa406\">RPC-BFF Server 接受到 RPC 函数调用请求后，将匹配出指定函数并以 input 参数调用它得到其 output 结果后发送给前端，前端收到响应结果后，RPC-BFF Client 将其转换为前端 RPC 调用函数的返回值。整个 RPC 过程的前后端流程就完成了。</p><p data-pid=\"j5RvWsCL\"><b>7.2 直观的错误处理</b></p><p data-pid=\"xUbRII0s\">前面介绍的 RPC 调用只涉及请求正确处理和返回的情况，如果服务端报错了，前端如何处理呢？</p><p data-pid=\"NAAueYtq\">对于这个问题，RPC-BFF 也有其优势。不同于朴素的接口请求错误处理，需要去判断 HTTP Status Code 检查请求状态码是否正确，甚至还得判断 result.code 检查业务状态码是否正确等等。</p><p data-pid=\"xMz42jYk\">RPC-BFF 的错误处理支持最直观和自然的 throw 和 try-catch 特性。在 RPC-BFF Client 中可以 catch 到 RPC-BFF Server 里 throw 的错误。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d3ae168d8089eda3d87c4fdbfc68555e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"453\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb\" width=\"453\" data-original=\"https://pic3.zhimg.com/v2-d3ae168d8089eda3d87c4fdbfc68555e_r.jpg\" data-original-token=\"v2-d3ae168d8089eda3d87c4fdbfc68555e\"/></figure><p data-pid=\"q8OA5NgK\">如上，改造我们的 hello 函数，当它遇到空的 name 参数时 throw 指定错误。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e4dbec04ac57ab88b2d81830d11b43da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"502\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb\" width=\"502\" data-original=\"https://pic3.zhimg.com/v2-e4dbec04ac57ab88b2d81830d11b43da_r.jpg\" data-original-token=\"v2-e4dbec04ac57ab88b2d81830d11b43da\"/></figure><p data-pid=\"poUFCeh4\">前端则构造一个空的 name 参数，并 try-catch 此次 RPC 调用，它将能捕获服务端抛出的错误。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-753e530089a8027619813d280b866df9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"434\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb\" width=\"434\" data-original=\"https://pic2.zhimg.com/v2-753e530089a8027619813d280b866df9_r.jpg\" data-original-token=\"v2-753e530089a8027619813d280b866df9\"/></figure><p data-pid=\"KlA137KB\">再次执行后，从 Chrome Devtools 的 Network 面板中，我们看到了标记为错误的 RPC 响应结果。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ce7ebc0ae3c8bc7cb2ba97c0973d7334_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"51\" class=\"origin_image zh-lightbox-thumb\" width=\"650\" data-original=\"https://pic1.zhimg.com/v2-ce7ebc0ae3c8bc7cb2ba97c0973d7334_r.jpg\" data-original-token=\"v2-ce7ebc0ae3c8bc7cb2ba97c0973d7334\"/></figure><p data-pid=\"yL0sXPPY\">在 Console 面板中，我们则看到了前端 catch 到的 RPC 调用错误日志输出。</p><p data-pid=\"GNza15o-\"><b>7.3 代码即文档</b></p><p data-pid=\"x9uLAshm\">RPC-BFF 从 GraphQL-BFF 中学习到了很多优秀之处。在 GraphQL 中，可以基于其 Schema 的 Introspection 能力，构建 GraphQL Playground 平台，可以在其中查看接口的参数类型、字段描述等信息，还能发起查询，相当方便。</p><p data-pid=\"9Kka8e6x\">RPC-BFF 的 Schema 也拥有 Introspection 能力，因此我们可以为前端提供更多内容。</p><div class=\"highlight\"><pre><code class=\"language-text\">export class Todo extends ObjectType {\n  id = {\n    description: `Todo id`,\n    [Type]: Int,\n  }\n\n  content = {\n    description: &#39;Todo content&#39;,\n    [Type]: String,\n  }\n\n  completed = {\n    description: &#39;Todo status&#39;,\n    [Type]: Boolean,\n  }\n}\n\nexport class AddTodoInput extends ObjectType {\n  content = {\n    description: &#39;a content of todo for creating&#39;,\n    [Type]: String,\n  }\n}\n\nexport class AddTodoOutput extends ObjectType {\n  todos = {\n    description: &#39;Todo list&#39;,\n    [Type]: TodoList,\n  }\n}\n\nexport const addTodo = Api(\n  {\n    description: &#39;add todo&#39;,\n    input: AddTodoInput,\n    output: AddTodoOutput,\n  },\n  (input) =&gt; {\n    state.todos.push({\n      id: state.uid++,\n      content: input.content,\n      completed: false,\n    })\n    return {\n      todos: state.todos,\n    }\n  },\n)</code></pre></div><p data-pid=\"Pp0O8jT5\">如上所示，我们在定义 addTodo 接口的 input schema 和 output schema 时，不仅仅提供了对应的类型，还添加了相关的 description 描述。经过前端的代码生成后，将得到如下代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">/**\n * @label Todo\n*/\nexport type Todo = {\n  /**\n  * @remarks Todo id\n  */\n  id: number,\n  /**\n  * @remarks Todo content\n  */\n  content: string,\n  /**\n  * @remarks Todo status\n  */\n  completed: boolean\n}\n\n/**\n * @label AddTodoInput\n*/\nexport type AddTodoInput = {\n  /**\n  * @remarks a content of todo for creating\n  */\n  content: string\n}\n\n/**\n * @label AddTodoOutput\n*/\nexport type AddTodoOutput = {\n  /**\n  * @remarks Todo list\n  */\n  todos: (Todo)[]\n}\n\nexport const createApiClient = (options: ApiClientOptions) =&gt; {\n  return {\n/**\n    * @remarks add todo\n    */\n    addTodo: (input: AddTodoInput, loaderOptions?: ApiClientLoaderOptions) =&gt; {\n      return options.loader(\n        {\n          path: [&#39;addTodo&#39;],\n          input: input as JsonType,\n        },\n        loaderOptions\n      ) as Promise&lt;AddTodoOutput&gt;\n    },\n  }\n}</code></pre></div><p data-pid=\"wJNmFV9R\">相比文本形式的接口契约文档，RPC-BFF 通过注释的方式将接口描述信息呈现出来。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fb7560a708a941897e44b833d14d26c1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"765\" data-rawheight=\"271\" class=\"origin_image zh-lightbox-thumb\" width=\"765\" data-original=\"https://pic2.zhimg.com/v2-fb7560a708a941897e44b833d14d26c1_r.jpg\" data-original-token=\"v2-fb7560a708a941897e44b833d14d26c1\"/></figure><p data-pid=\"9_Umjw9_\">如上所示，生成到注释的方式，比朴素的接口契约更贴近开发者，可以在代码编辑器里直观地看到接口描述和类型描述，并且基于开发阶段的同步机制，它总是实时反映当前 RPC-BFF 的最新状态，避免了接口文档过时的问题。</p><p data-pid=\"qHXOW34K\">当我们想要废弃一个 RPC 函数时，这项机制尤为重要。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-283d428231f6566019a60d583eda3ac6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"459\" data-rawheight=\"406\" class=\"origin_image zh-lightbox-thumb\" width=\"459\" data-original=\"https://pic3.zhimg.com/v2-283d428231f6566019a60d583eda3ac6_r.jpg\" data-original-token=\"v2-283d428231f6566019a60d583eda3ac6\"/></figure><p data-pid=\"a7fibKGG\">如上，我们通过添加 RPC 函数的 deprecated 描述，宣布废弃。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-033fcd8a77c97f5cbadc73183d6bb973_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic4.zhimg.com/v2-033fcd8a77c97f5cbadc73183d6bb973_r.jpg\" data-original-token=\"v2-033fcd8a77c97f5cbadc73183d6bb973\"/></figure><p data-pid=\"-jgJx6u_\">前端经过代码生成同步到 RPC-BFF 最新状态时，将能在代码编辑器里直观地看到废弃的提示信息。如此可以实现流畅的前后端接口废弃过程。</p><p data-pid=\"iyURnMTZ\"><b>7.4 自由的函数组合</b></p><p data-pid=\"phdG2qW0\">在 RPC-BFF 中，RPC 函数跟普通函数本质上是一样的，只是它通过 Schema 定义额外携带了描述自身的元数据信息。我们可以像组合普通函数一样，组合 RPC 函数。</p><p data-pid=\"kzPxSbu0\">假设我们有 updateTodo 和 removeTodo 两个 RPC 函数，然后我们希望添加一个功能：当 updateTodo 收到的 todo.content 为空时，则 remove 该 todo。</p><p data-pid=\"bsCsD89k\">那么，我们不必把 removeTodo 功能分别在 updateTodo 和 removeTodo 中各自实现一遍，而是在 updateTodo 中根据条件调用 removeTodo。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-89738e3a5fc42a20e8738233ef2599a2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"456\" class=\"origin_image zh-lightbox-thumb\" width=\"596\" data-original=\"https://pic3.zhimg.com/v2-89738e3a5fc42a20e8738233ef2599a2_r.jpg\" data-original-token=\"v2-89738e3a5fc42a20e8738233ef2599a2\"/></figure><p data-pid=\"TYjQk2vm\">如上所示，在 updateTodo 中调用 removeTodo 并没有特殊的要求，就像调用别的异步函数一样简单，并且对于前端发起的 updateTodo RPC 调用也没有额外开销，仍是一次对 updateTodo 的远程函数调用。</p><p data-pid=\"KwxHp3fo\"><b>7.5 可靠的接口兼容性识别与版本跟踪</b></p><p data-pid=\"Q7Zau2kq\">由于 RPC-BFF 的调用方在自己的前端项目中，通过 rpc.config.js 同步了 RPC-BFF 当前的接口的类型，因此它还解决了前后端之间常常遇到的接口兼容性争议。</p><p data-pid=\"xiBfHXPp\">在以往朴素的实践中，接口兼容往往只是后端对前端的口头承诺，缺乏自动化的、系统化的方式去发现和识别接口兼容性，甚至往往将问题暴露在生产环境。然后前后端开始争执判空职责的前后端边界划分问题。</p><p data-pid=\"294DX_Hp\">而现在，RPC-BFF 提供了自动发现接口兼容性机制，并且是以系统性的、无争议的方式实现的。</p><div class=\"highlight\"><pre><code class=\"language-text\">export class AddTodoOutput extends ObjectType {\n  todos = {\n    description: &#39;Todo list&#39;,\n    [Type]: Nullable(TodoList),\n  }\n}</code></pre></div><p data-pid=\"vLHIpc2O\">如上，当后端的 addTodo 接口改变了返回值类型，从非空的 todos 变成可空的 todos，这是一种不兼容的变更。</p><p data-pid=\"nvtTpLFX\">前端同步 RPC-BFF 的接口契约后，在代码编辑器里立即可以看到类型系统的 type-check 结果。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-31fc996c9bde35e666c251062809adcf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"627\" data-rawheight=\"334\" class=\"origin_image zh-lightbox-thumb\" width=\"627\" data-original=\"https://pic4.zhimg.com/v2-31fc996c9bde35e666c251062809adcf_r.jpg\" data-original-token=\"v2-31fc996c9bde35e666c251062809adcf\"/></figure><p data-pid=\"8-pT39le\">在不解决这个类型问题的情况下，前端项目难以通过编译，从而避免将问题泄露到生产环境。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b7f1bcaede5b952377c88237cf3ebf05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"210\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-b7f1bcaede5b952377c88237cf3ebf05_r.jpg\" data-original-token=\"v2-b7f1bcaede5b952377c88237cf3ebf05\"/></figure><p data-pid=\"G0deLdmu\">此外，RPC-BFF 生成的代码也进入了前端项目的版本管理中，可以从 git diff 中，清晰地看到每一次迭代的接口契约变更记录。更完整无误地追溯和跟踪前后端的接口契约历史。</p><p data-pid=\"-XJHWQx0\"><b>7.6 自动 merge &amp; batch &amp; stream 优化</b></p><p data-pid=\"1kk_1Tw7\">如前文所描述的，RPC-BFF 需要支持自动的 merge &amp; batch &amp; stream 功能，以便达到更少的 HTTP 请求、更快的数据响应以及更优的 SSR 支持。</p><p data-pid=\"TmAyw__Z\">我们先来讲解一下它们分别的含义。</p><p data-pid=\"I9a5LPaq\">首先讲 batch，它是一种常见的优化技术，可以把一组数据请求合并为一次，往往用在相同资源的批量化请求上。这需要服务端接口提供支持，比如 getUser 接口是获取单个用户信息的，而 getUsers 则是获取多个的，后者可以被视为 batch 接口。</p><p data-pid=\"c1igDaVb\">而 merge 在这里则偏向前端概念，接口支持 batch 只是说我们可以调用一个 batch 接口获取更多数据，但不意味着前端代码里多个地方调用 getUser 接口，会自动 merge 到一起去调用 getUsers 接口。</p><p data-pid=\"i5fbTx2S\">merge &amp; batch 结合起来，就可以让前端里分散的各个调用自动合并到一次 batch 接口的请求中。</p><p data-pid=\"Tcy7uVcF\">现在我们来看 stream，它跟 batch 一样需要服务端的支持。一次 batch 接口请求的响应时间，往往取决于最慢的数据，因为服务端需要准备好所有数据后才能返回 JSON 结果；所谓的 stream 支持，则是服务端能够提前将已获得的数据一份份发送给前端。</p><p data-pid=\"71eQzU4D\">某种意义上，stream 也需要前端的支持。假设接口支持 stream 可以一批批返回数据，前端却一个 await 等待所有数据就位后才开始下一步，那么等于没有发挥出接口流式响应的优势。</p><p data-pid=\"pcWPGM2C\">因此，merge &amp; batch &amp; stream 三者的结合才能发挥出更充分的优化效果。</p><ul><li data-pid=\"hfaIbbPL\">通过 merge，前端代码里各个地方的接口调用被 batch 起来</li><li data-pid=\"lhQ4s1rF\">通过 batch &amp; stream 接口，一份份数据从服务端发送给前端</li><li data-pid=\"v-FflCjr\">通过 RPC-BFF Client 内部数据分发，指定的数据被一份份地发送到各个前端调用点</li></ul><p data-pid=\"ogot9ONM\">每个前端调用点收到数据响应后都将第一时间进入后续的渲染流程，不会受到其它调用点的阻塞影响。我们来看一个例子：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-113f9b0209c9f44ea6bc96504221f3d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"839\" data-rawheight=\"403\" class=\"origin_image zh-lightbox-thumb\" width=\"839\" data-original=\"https://pic1.zhimg.com/v2-113f9b0209c9f44ea6bc96504221f3d4_r.jpg\" data-original-token=\"v2-113f9b0209c9f44ea6bc96504221f3d4\"/></figure><p data-pid=\"tK6_LB41\">如上，为了演示方便，我用 Promise.all 将 3 次 RPC 函数调用的结果打包到一起返回，但我们仍需知道，它们其实是三个独立的 RPC 调用，被写到一起还是分散在其它地方调用，不影响结果。Promise.all 只是在前端汇总 promises 结果，不包含接口相关的 merge &amp; batch &amp; stream 等作用。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-eb413185d58dd5f2afe37d522d2f079c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"565\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb\" width=\"565\" data-original=\"https://pic1.zhimg.com/v2-eb413185d58dd5f2afe37d522d2f079c_r.jpg\" data-original-token=\"v2-eb413185d58dd5f2afe37d522d2f079c\"/></figure><p data-pid=\"pFHm5CZq\">从 Network Request 面板中，我们看到了一个被标记为 Stream 的请求，它里面包含了上面 3 个 RPC 调用的所有信息。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0950508234395c23a0b7b3396d3a3c62_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"105\" class=\"origin_image zh-lightbox-thumb\" width=\"554\" data-original=\"https://pic3.zhimg.com/v2-0950508234395c23a0b7b3396d3a3c62_r.jpg\" data-original-token=\"v2-0950508234395c23a0b7b3396d3a3c62\"/></figure><p data-pid=\"ZWt5Wtrn\">在 Network Response 面板中，我们则看到了一个 Newline delimited JSON 响应，即用换行符分隔的streaming JSON 格式。每一个被 batch &amp; stream 起来的 RPC 函数调用返回数据后，都将立即产生一条 JSON 结果发送给前端，每一行对应一次 RPC 调用。</p><p data-pid=\"Uhwth2-k\"><b>7.7 自动缓存和去重</b></p><p data-pid=\"h4MZJ3Kv\">除了 merge &amp; batch &amp; stream 以外，自动的缓存和去重(cache &amp; dedup)对于渲染优化也很重要。</p><p data-pid=\"uC2r3GMC\">在前端界面中，两个组件依赖同一份接口数据的情况很常见。传统方式是，手动去重，即两个组件都不包含接口调用，而是 lift up 到公共的祖先级组件统一处理后通过 props/context 等方式将同一份数据传送给这两个组件。</p><p data-pid=\"cz27t1wg\">这种方式的缺点是：</p><ul><li data-pid=\"2C8VlV2o\">两个组件都无法被独立使用和复用，因为它们的数据请求逻辑都被挪出去了，内聚性被打破</li><li data-pid=\"pm1LKXqt\">组件优化不足。只有枝叶组件各自发起请求时，Streaming 渲染得到了更优条件。越是顶层的组件里悬停，子组件渲染越是受到阻塞</li></ul><p data-pid=\"hHfLkO8n\">就是为什么 React 目前致力于接管 data-fetching 层，让开发者手动去管理将缺少系统性优化。</p><p data-pid=\"H4KzZPN8\">对于 RPC-BFF 而言，支持 cache &amp; dedup 变得重要。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b7c121890940c09ef5fb9e0ec00ab9aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"965\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb\" width=\"965\" data-original=\"https://pic3.zhimg.com/v2-b7c121890940c09ef5fb9e0ec00ab9aa_r.jpg\" data-original-token=\"v2-b7c121890940c09ef5fb9e0ec00ab9aa\"/></figure><p data-pid=\"z-JsEEW2\">改造前面的 tryBatch 代码，使其包含 4 次 RPC 调用，有 4 个返回值，但有 2 次的参数和函数名是重复的。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3ab9624653a3979b50a04cfee44c2630_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"175\" class=\"origin_image zh-lightbox-thumb\" width=\"583\" data-original=\"https://pic1.zhimg.com/v2-3ab9624653a3979b50a04cfee44c2630_r.jpg\" data-original-token=\"v2-3ab9624653a3979b50a04cfee44c2630\"/></figure><p data-pid=\"LXMWgQb6\">但我们的请求却只包含了 3 次 RPC调用及其响应，其中 2 次的重复调用被合并为一次。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-67bdcd75575767f7f2664531ac117f7f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"327\" data-rawheight=\"133\" class=\"content_image\" width=\"327\" data-original-token=\"v2-67bdcd75575767f7f2664531ac117f7f\"/></figure><p data-pid=\"LTAMvHTC\">但并不影响每个 RPC 调用拿到它对应的 4 个调用结果。</p><p data-pid=\"TWy8XPN3\">通过这种 cache &amp; dedup 机制，每个组件的数据请求都可以内聚于组件代码内部，而不必被迫 lift up 到父级组件做请求托管了。</p><p data-pid=\"BOUOSbUU\">值得提醒的是，不是所有相同参数的 RPC 调用都能被缓存和去重。特别是对于 mutation 性质的请求来说，连续调用两次相同参数的 createTodo，应当是创建两条而非一条。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ed01e150e28083992283165f2a024aa4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"469\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb\" width=\"469\" data-original=\"https://pic1.zhimg.com/v2-ed01e150e28083992283165f2a024aa4_r.jpg\" data-original-token=\"v2-ed01e150e28083992283165f2a024aa4\"/></figure><p data-pid=\"dALw_Sm1\">因此，RPC-BFF 支持在前端传递第二个 options 参数给 RPC 函数，可以关闭 cache 特性。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7f0212ccce276dc43c826108a152b86b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"560\" data-rawheight=\"148\" class=\"origin_image zh-lightbox-thumb\" width=\"560\" data-original=\"https://pic4.zhimg.com/v2-7f0212ccce276dc43c826108a152b86b_r.jpg\" data-original-token=\"v2-7f0212ccce276dc43c826108a152b86b\"/></figure><p data-pid=\"VGEVc5kN\">如上图所示，关闭 cache 后，即便是相同的 RPC 调用，也不会被缓存和去重。options 选项，不仅可以关闭 cache，还可以关闭 batch, stream 等特性。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-caafcbd598f5f652ad20bca677487b19_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb\" width=\"488\" data-original=\"https://pic2.zhimg.com/v2-caafcbd598f5f652ad20bca677487b19_r.jpg\" data-original-token=\"v2-caafcbd598f5f652ad20bca677487b19\"/></figure><p data-pid=\"dBruCZR-\">如上所示，options.batch 是 cache 和 stream 的前提，我们将所有 RPC 调用的 batch 选项都关闭。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1291baae0601e027155ca398a62da229_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"755\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb\" width=\"755\" data-original=\"https://pic2.zhimg.com/v2-1291baae0601e027155ca398a62da229_r.jpg\" data-original-token=\"v2-1291baae0601e027155ca398a62da229\"/></figure><p data-pid=\"tg0P80Ik\">其结果是所有 RPC 函数调用退化为朴素形态，每一个 RPC 调用对应独立的一次 HTTP 请求。</p><p data-pid=\"44tSxeYq\">通过灵活的选项配置，我们可以按需决定 RPC-BFF 里的函数调用的优化策略。</p><p data-pid=\"KyWkxWig\"><b>八、总结</b></p><p data-pid=\"0AFajelC\">在这篇文章中，我们介绍了 BFF 的起源、模式和技术选型，并根据界面渲染优化需求，了解到 Streaming BFF 的重要性，同时也给出了我们当前探索的技术方向——RPC-BFF。</p><p data-pid=\"tw59R9CP\">我们对比了开源社区的一些流行方案，并根据我们自身的场景做了分析，尽管最终采用了自研的方式，但在调研和实验开源技术的过程中，也让我们学习到了很多知识，使得 RPC-BFF 的设计和实现能够吸收开源社区的技术成果。</p><p data-pid=\"Tl3yWV8s\">我们最终达到了预期的技术目标，实现了：</p><ul><li data-pid=\"VQ88oNIj\"><b>Validation</b>: BFF 端可以在运行时验证参数结构和返回值结构的合法性</li><li data-pid=\"svGgGeHx\"><b>Type-infer</b>: 支持从 Schema 中静态类型推导出 TypeScript 类型，避免重复定义</li><li data-pid=\"zPV4xzUM\"><b>Introspection</b>: RPC-BFF 服务可以通过内省请求曝露出其函数列表的契约结构</li><li data-pid=\"zMboAeOW\"><b>Code-generation</b>: 支持为调用方生成类型代码和调用代码，解耦项目依赖</li><li data-pid=\"x7xCHMqO\"><b>Merge</b>: 前端多次 RPC 调用可以自动合并为一次 HTTP 请求</li><li data-pid=\"_YDVZT6y\"><b>Batch</b>: 一次 HTTP 请求支持包含多个 RPC 调用</li><li data-pid=\"4wzoobWF\"><b>Stream</b>: 多个 RPC 调用可以流式响应，一份份发给前端，避免阻塞</li><li data-pid=\"rLEOt1Df\"><b>Dedup</b>: 重复的 RPC 调用可以被去重合并</li><li data-pid=\"OZ6aSriP\"><b>Cache</b>: 重复的 RPC 调用可复用缓存结果</li><li data-pid=\"BAxljOH8\"><b>Type-safe</b>: 前端可复用和对齐 BFF 端的类型</li><li data-pid=\"4XOQ5AKc\"><b>Code as documentation</b>: 代码即文档，RPC 接口的文档描述通过代码生成，以代码注释的形态直接作用于前端项目中</li></ul><p data-pid=\"nmgb2hU1\">目前我们的 RPC-BFF 技术方案已经在内部试点项目中落地并上线平稳运行，接下来将会推广和迭代，并持续挖掘 RPC-BFF 技术方向上的优化潜力。</p><p data-pid=\"RanM_uuB\">以上，希望能给大家带来帮助。</p>",
            "voteup_count": 145,
            "comment_count": 6
        },
        "created": "2023-08-11T22:11:05+08:00"
    },
    {
        "content": {
            "id": 647621772,
            "title": "不清楚react hooks的类型声明？来看就对了",
            "type": "article",
            "excerpt_title": "在了解react hooks的类型之前，有必要先了解一下@types、.d.ts文件的概念及作用。 node_modules中的@types是什么？当我们使用第三方npm包的时候，如果这个包不是 ts编写，则没有导出类型，这时候如果在ts中导入会报错。比如jquery 这时会报错 无法找到模块“jquery”的声明文件尝试使用 npm i --save-dev @types/jquery (如果存在)，或者添加一个包含 declare module &#39;jquery&#39;; 的新声明(.d.ts 这里提示找不到jquery的类型定义 …",
            "url": "https://zhuanlan.zhihu.com/p/647621772",
            "image_url": "https://picx.zhimg.com/v2-f7fab8c5411538b8c298d71f729a6027_r.jpg?source=172ae18b",
            "created": 1690986960,
            "updated": 1690986960,
            "author": {
                "id": "36adc08deb61e5a667d70bd9a4829805",
                "url_token": "da-zhuan-zhuan-fe",
                "name": "转转技术团队",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-cdf126afdda93a733dc909e5ec46b451_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-cdf126afdda93a733dc909e5ec46b451.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/36adc08deb61e5a667d70bd9a4829805",
                "user_type": "people",
                "headline": "关注公众号「转转技术」，各种干货实践，欢迎交流分享~",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1500472612
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"_BG6x129\">在了解react hooks的类型之前，有必要先了解一下@types、.d.ts文件的概念及作用。</p><h3><b>node_modules中的@types是什么？</b></h3><p data-pid=\"AF-uxfBj\">当我们使用第三方npm包的时候，如果这个包不是<code>ts</code>编写，则没有导出类型，这时候如果在ts中导入会报错。比如<code>jquery</code> 这时会报错</p><blockquote data-pid=\"2O7UjLwZ\"> 无法找到模块“jquery”的声明文件尝试使用 <code>npm i --save-dev @types/jquery</code> (如果存在)，或者添加一个包含 <code>declare module &#39;jquery&#39;;</code> 的新声明(.d.ts<br/> </blockquote><p data-pid=\"8Plah_nZ\">这里提示找不到jquery的类型定义 可以安装<code>@types/jquery</code>或者在<code>d.ts</code>中自定义类型,大多数情况我们应该使用第一种办法,如果这个库没有<code>@types</code>库再使用第二种, 可以在<b><a href=\"https://zhuanlan.zhihu.com/url\" class=\"internal\">https://microsoft.github.io/TypeSearch/</a></b>中查找一个包是否存在types。</p><h3><b>types查找规则</b></h3><p data-pid=\"ROI53Kos\">当我们使用<code>import xx from</code>时ts将会默认从<code>./node_modules/@types</code>中获取类型声明，具体查找规则是ts编译器先在当前编译上下文找<code>jquery</code>的定义,找不到则再去<code>./node_modules/@types</code>中查找。 在本地模块查找的类型声明作用域是在模块，在<code>@types</code>中的类型声明是全局的。在<code>tsconfig.json</code>中也可以使用 <code>typeRoots</code>设置默认路径 。</p><h3><b>模块types</b></h3><div class=\"highlight\"><pre><code class=\"language-text\">当然在`tsconfig.json`中也可以使用`types`单独控制`@types`。`types`指定的包会被单独引入。这样全局引入就失效了。</code></pre></div><h3><b>*.d.ts是什么</b></h3><div class=\"highlight\"><pre><code class=\"language-text\">@types下存放的文件都是.d.ts开头的文件 对应的npm包js的类型声明。 在.d.ts文件中声明的类型或者模块，在其他文件中不需要使用import导入，可以直接使用，d.ts的类型声明可以自行编写也可以使用工具声明。有2个工具</code></pre></div><p data-pid=\"gvuHqNtN\">可以使用微软的<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/Microsoft/dts-gen\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dts-gen</a></b>，生成单个文件的声明<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/ConquestArrow/dtsmake\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">dtsmake</a></b>。值得注意的是如果你使用<code>JSDOC</code>语法 在ts3.7以后是可以通过命令为js生成.ds文件。具体用法可查看<b><a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">官方文档</a></b>。</p><p data-pid=\"R1OAdcBN\">介绍完前菜，现在开始进入本文正题。 一起来看下react hooks相关的类型声明吧。在<code>@types/react/index.d.ts</code>文件中。</p><h3><b>useContext</b></h3><div class=\"highlight\"><pre><code class=\"language-text\">`useContext和createContext`是结合一起使用的</code></pre></div><p data-pid=\"9REhHM-L\">useContext定义： <code>function useContext&lt;T&gt;(context:Context&lt;T&gt;):T</code><br/>createContext定义： <code>function createContext&lt;T&gt;(defaultValue:T,):Context&lt;T&gt;</code> <code>createContext</code>的返回Context类型的值提供给useContext的参数。这里泛型<code>T</code>在2个方法中是一致的，如果不指定 ts会类型推导出正确的类型。而<code>Context</code> 类型 则是一个interface</p><div class=\"highlight\"><pre><code class=\"language-text\">interface Context&lt;T&gt; {\n  Provider: Provider&lt;T&gt;;\n  Consumer: Consumer&lt;T&gt;;\n  displayName?: string | undefined;\n}\n\n`Provider` 拥有`value`和`children` `Consumer`拥有 `children` 类型都是`ReactNode|undefined`。想想我们这react中使用`Context`传值 是不是感觉很熟悉？看懂类型定义 再也不怕忘记api了。</code></pre></div><h3><b>useState</b></h3><p data-pid=\"2zCnTmog\">定义：<code>function useState&lt;S&gt;(initialState:S| (() =&gt;S)): [S, Dispatch&lt;SetStateAction&lt;S&gt;&gt;]</code> 泛型<code>S</code>表示<code>state</code> 是用来约束<code>initialState</code>类型，也可以传入返回值是<code>S</code>的方法。 <code>useState</code>返回值为2个元素的元组类型，返回<code>state</code>和更新<code>state</code>的方法。默认情况下<code>useState</code>会根据传入类型自动推导出<code>S</code>类型。 <code>SetStateAction&lt;S&gt;</code>定义了传入<code>setState</code>的参数类型。是<code>S</code>类型或者返回<code>S</code>类型值的函数的联合类型。<code>SetStateAction</code> 的定义为： <code>type SetStateAction&lt;S&gt; = S|((prevState:S) =&gt;S)</code>，<code>prevState</code>为上一次的<code>state</code>，联合类型暂可以理解成<b>或</b>的关系。而 <code>Dispatch</code> 表示setState的类型，是一个没有返回值的方法。定义也很简单<code>Dispatch ：type Dispatch&lt;A&gt; = (value:A) =&gt;void</code>。 还有<code>useState</code>参数个数为0的情况。上面的类型无法满足，所以后面个函数重载约束没有传入初始值的实现。 <code>function useState&lt;S=undefined&gt;(): [S|undefined, Dispatch&lt;SetStateAction&lt;S|undefined&gt;&gt;];</code></p><h3><b>useRef</b></h3><p data-pid=\"_b5MoYPy\">定义比较简单：<code>function useRef&lt;T&gt;(initialValue:T):MutableRefObject&lt;T&gt;</code>, <code>useRef</code> 返回一个可变 ref 对象，其<code> .current</code> 属性初始化为传递的参数。<code>MutableRefObject</code>就是一个包含<code>current：T</code>的接口。值得注意的是 这里同样用了函数重载，包括了<code>initialValue</code>没有传或者为null的情况。<code>ref</code>在<code>props</code>中大部分的初始值都为<code>null</code>。 类型声明中注释明确指定了如果要使用可变的<code>useRef</code> 则需要在范型参数中包含<code>| null</code>.</p><div class=\"highlight\"><pre><code class=\"language-text\">* Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n     * of the generic argument.\n</code></pre></div><p data-pid=\"BOlYVVoI\">如果我们这样写，此时ref为<code>RefObject</code>类型 <code>RefObject</code>的<code>current</code>被<code>readonly</code>修饰。所以是不可变的。当在范型中指定了<code>| null</code> 则根据函数重载命中第一种类型，返回<code>MutableRefObject</code>是可变的。</p><div class=\"highlight\"><pre><code class=\"language-text\">const ref = useRef&lt;number&gt;(null)\nref.current = 2 // 无法分配到 &#34;current&#34; ，因为它是只读属性。\n// 此时命中的这个重载的useRef\nfunction useRef&lt;T&gt;(initialValue: T|null): RefObject&lt;T&gt;;\n</code></pre></div><h3><b>useEffect</b></h3><p data-pid=\"kt08pwd3\">定义: <code>function useEffect(effect:EffectCallback, deps?:DependencyList):void</code>， <code>EffectCallback</code>是一个只能返回<code>void|Destructor</code>的函数类型 用来处理副作用 。 <code>void</code>表示没有返回值 ,但这里并不意味着你赋值一个有返回值的函数会报错，在一个返回值为<code>void</code>的函数你明确返回类型 并不会报错。而void真正表示无论你返回什么？编译器都不会使用检查它。 <code>Destructor</code> 表示析构函数，看下它的定义</p><div class=\"highlight\"><pre><code class=\"language-text\">declare const UNDEFINED_VOID_ONLY: unique symbol;\ntype Destructor = () =&gt; void | { [UNDEFINED_VOID_ONLY]: never }\n</code></pre></div><p data-pid=\"zO8F67gW\">这里<code>UNDEFINED_VOID_ONLY</code>表示一个常量类型 <code>unique symbol</code>是<code>symbol</code>的子类型 , 使用<code>unique symbol</code>的变量必须为<code>const</code>，而值为<code>never</code>表示的是那些永不存在的值的类型。 <code>never</code> 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。这里使用<code>void</code>和{ <code>[UNDEFINED_VOID_ONLY]: never }</code>作为联合类型, 明确约束了<code>effect</code>是不能有返回类型的, 如果明确声明 则会报错。 如果有<code>async</code>修饰函数默认返回<code>promise</code>类型， 所以在<code>useEffect</code>中的<code>effect</code>也同样不能使用<code>async</code>。<code>deps</code>是可选参数，作为依赖是一个只读数组。<code>ReadonlyArray</code>是一个真正的只读数组类型，根据范型来约束数组元素类型。它没有改变数组的方法<code>push</code> <code>shift</code>等。</p><h3><b>useLayoutEffect</b></h3><p data-pid=\"oUCGpRtt\"><code>useLayoutEffect</code>类型声明与<code>useEffect</code>一致。但<code>useLayoutEffect</code>的<code>callback</code>会在<code>DOM</code>更新后同步触发 在浏览器同步刷新之前执行完成 可能会阻塞浏览器渲染。</p><h3><b>useReducer</b></h3><p data-pid=\"ci8Cx46-\">官方介绍<code>useReducer</code> 为 <code>An alternative to </code>useState<code>.</code>是<code>useState</code>的替代解决方案。一般我们都这样使用。当<code>state</code>结构或逻辑比较复杂时，用<code>useReducer</code>管理更方便容易。</p><div class=\"highlight\"><pre><code class=\"language-text\">function reducer(state, action) {\n  switch (action.type) {\n    case &#39;increment&#39;:\n      return {count: state.count + 1};\n    case &#39;decrement&#39;:\n      return {count: state.count - 1};\n    default:\n      throw new Error();\n  }\n}\nconst [state, dispatch] = useReducer(reducer, {count: 0});\nstate.count\ndispatch({type: &#39;decrement&#39;})\n</code></pre></div><p data-pid=\"fX-uOn4k\">在类型声明文件中<code>useReducer</code>写了5个重载函数类型。</p><div class=\"highlight\"><pre><code class=\"language-text\">type ReducerWithoutAction&lt;S&gt; = (prevState: S) =&gt; S;\n\ntype ReducerStateWithoutAction&lt;R extends ReducerWithoutAction&lt;any&gt;&gt; =\n        R extends ReducerWithoutAction&lt;infer S&gt; ? S : never;\n\nfunction useReducer&lt;R extends ReducerWithoutAction&lt;any&gt;, I&gt;(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) =&gt; ReducerStateWithoutAction&lt;R&gt;\n    ): [ReducerStateWithoutAction&lt;R&gt;, DispatchWithoutAction];\n</code></pre></div><ul><li data-pid=\"ilt3QSbg\">第一种是<code>reducer</code>函数没有传<code>action</code>的情况。R表示<code>reducer函数类型</code>, 其中<code>参数state</code>类型和返回类型必须一致。<code>initializerArg</code>表示初始参数，类型为泛型的第二个参数。<code>initializer</code>定义稍微复杂，但是其实约束了此类型必须是一个参数为<code>initializerArg</code>类型 返回值也同<code>initializerArg</code>类型一致的参数类型。而这个<code>initializerArg</code>就是<code>reducer</code>的参数<code>state</code>类型。<code>ReducerStateWithoutAction</code>就是为了约束这三个参数的类型。举个例子更清晰. 下述代码<code>reducer</code>中<code>state</code> <code>initializerArg</code> 已经 <code>initializer</code>的参数和返回参数类型都应该保持一致。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">type stateType = {num: number}\nfunction reducer(state: stateType) {\n  return state\n}\nconst [state,dispatch]=useReducer&lt;typeof reducer,stateType&gt;(\n  reducer, {num: 0},state=&gt;{\n    return {num: state.num+1}\n  })\n</code></pre></div><p data-pid=\"cpJIO1SU\">这里的<code>extends</code> 条件类型是一种条件表达式进行类型的关系检测，类似于三元表达式。意思为左侧类型可分配给右侧类型则返回？后面的类型 否则返回：后的类型。 而<code>infer</code>关键字只能出现在条件类型<code>extends</code> 判断为<code>true</code>的分支，表示一个待推断的类型，<code>infer S</code>表示将推断的类型保存在<code>S</code>中。</p><ul><li data-pid=\"taVBOSzD\">第二个重载与第一个类似 只是在<code>initializer</code>为<code>undefined</code>的情况。如果在<code>useReducer</code>的泛型中指定了第二个参数，则命中第一个重载 此时会报错。具体实现类似下述代码。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">function useReducer&lt;R extends ReducerWithoutAction&lt;any&gt;&gt;(\n        reducer: R,\n        initializerArg: ReducerStateWithoutAction&lt;R&gt;,\n        initializer?: undefined\n    ): [ReducerStateWithoutAction&lt;R&gt;, DispatchWithoutAction];\n\ntype stateType = {num: number}\nfunction reducer(state: stateType) {\n  return state\n}\nconst [state,dispatch]=useReducer&lt;typeof reducer&gt;(\nreducer, {num: 0})\n</code></pre></div><ul><li data-pid=\"F5bWtlnt\">第三个重载约束了<code>reducer</code>函数传入<code>action</code>的情况，不同于<code>redux</code> <code>action</code>是<code>any</code>类型。initializerArg初始参数为 <code>state</code>与泛型<code>I</code>的交叉类型。<code>I</code>可能是<code>state</code>的子集的情况。<code>ReducerState</code>同样是为了取出<code>reducer</code>中<code>state</code>类型。<code>initializer</code>同上述第一种重载类似。要约束<code>arg</code> <code>initializerArg</code> 一致。而初始<code>initializer</code>的返回值要与<code>reducer</code>中<code>state</code>一致。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">// Unlike redux, the actions _can_ be anything\ntype Reducer&lt;S, A&gt; = (prevState: S, action: A) =&gt; S;\n// types used to try and prevent the compiler from reducing S\n// to a supertype common with the second argument to useReducer()\ntype ReducerState&lt;R extends Reducer&lt;any, any&gt;&gt; = R extends Reducer&lt;infer S, any&gt; ? S : never;\nfunction useReducer&lt;R extends Reducer&lt;any, any&gt;, I&gt;(\n        reducer: R,\n        initializerArg: I &amp; ReducerState&lt;R&gt;,\n        initializer: (arg: I &amp; ReducerState&lt;R&gt;) =&gt; ReducerState&lt;R&gt;\n    ): [ReducerState&lt;R&gt;, Dispatch&lt;ReducerAction&lt;R&gt;&gt;];\n</code></pre></div><p data-pid=\"2AxgQtq5\">举个例子 初始参数<code>initializer</code>的<code>state</code>类型 在初始函数的参数类型也应该一致。</p><div class=\"highlight\"><pre><code class=\"language-text\">// 代码实现\ntype stateType = {num: number}\ntype actionType = { type: string, payload: number}\nfunction reducer(state: stateType,action: actionType) {\n  if(action.type==&#39;add&#39;){\n    return {num: state.num+1}\n  }else {\n    return {num: state.num-1}\n  }\n}\nconst [state,dispatch]=useReducer&lt;typeof reducer,actionType&gt;(\nreducer, { type: &#39;add&#39;, payload: 1,num: 2},state=&gt;{\n  return {num:state.num+state.payload}\n})\n</code></pre></div><ul><li data-pid=\"fxOzXiQE\">第4个重载 和第三个类似 在初始参数不包括state的情况， 初始参数<code>initializer</code>的<code>state</code>类型 在初始函数的参数类型也应该一致。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">function useReducer&lt;R extends Reducer&lt;any, any&gt;, I&gt;(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) =&gt; ReducerState&lt;R&gt;\n    ): [ReducerState&lt;R&gt;, Dispatch&lt;ReducerAction&lt;R&gt;&gt;];\n</code></pre></div><p data-pid=\"XjTQDp--\">第5个重载 和上述类似 约束了<code>initializer</code>为<code>undefined</code>,<code>reducer</code>存在<code>actions</code>的情况</p><div class=\"highlight\"><pre><code class=\"language-text\">function useReducer&lt;R extends Reducer&lt;any, any&gt;&gt;(\n        reducer: R,\n        initialState: ReducerState&lt;R&gt;,\n        initializer?: undefined\n    ): [ReducerState&lt;R&gt;, Dispatch&lt;ReducerAction&lt;R&gt;&gt;];\n</code></pre></div><p data-pid=\"IP4zQ1hF\"><code>useReducer</code>的返回值都是一致。返回<code>reducerState</code>和<code>Dispatch</code>，而<code>type Dispatch&lt;A&gt; = (value:A) =&gt;void;</code>就是一个没有返回值的函数 用来触发<code>action</code> 改变<code>reducerState</code>。</p><h3><b>useCallback</b></h3><p data-pid=\"B7JFCzJV\">定义比较简单： <code>function useCallback&lt;T extends (...args:any[]) =&gt;any&gt;(callback:T, deps:DependencyList):T;</code> 范型<code>T</code>为<code>function</code>类型为第一个参数<code>callback</code>的类型，第二个参数<code>DependencyList</code>与<code>useEffect</code>的依赖数组一致，都是一个只读的数组。主要作用是用来缓存<code>callback</code>实例，当传递给子组件方法时与React.memo 或者shouldComponentUpdate一起使用。</p><h3><b>useMemo</b></h3><p data-pid=\"MYxc8zQv\">定义也比较简单：</p><div class=\"highlight\"><pre><code class=\"language-text\">// allow undefined, but don&#39;t make it optional as that is very likely a mistake\nfunction useMemo&lt;T&gt;(factory: () =&gt; T, deps: DependencyList | undefined): T;\n</code></pre></div><p data-pid=\"8NInDSB4\">范型<code>T</code>为<code>factory</code>的返回值类型。<code>deps</code>依赖为<code>DependencyList</code>和<code>undefined</code>的联合类型，这里会有提示允许<code>deps</code>为<code>undefined</code>，但不能是可选的 否则可能是个错误。</p><h3><b>useImperativeHandle</b></h3><p data-pid=\"RY5TVsUm\"><code>useImperativeHandle</code>主要用来配合<code>forwardRef</code>自定义暴露给父组件数据的。一般用来父组件调用子组件方法或获取子组件数据时使用。</p><div class=\"highlight\"><pre><code class=\"language-text\">function useImperativeHandle&lt;T, R extends T&gt;(ref: Ref&lt;T&gt;|undefined, init: () =&gt; R, deps?: DependencyList): void;\ninterface RefObject&lt;T&gt; {\n        readonly current: T | null;\n    }\n    // Bivariance hack for consistent unsoundness with RefObject\ntype RefCallback&lt;T&gt; = { bivarianceHack(instance: T | null): void }[&#34;bivarianceHack&#34;];\ntype Ref&lt;T&gt; = RefCallback&lt;T&gt; | RefObject&lt;T&gt; | null;\n</code></pre></div><p data-pid=\"mMXvdw74\">泛型<code>T</code>为<code>ref</code>的<code>current</code>的类型，<code>R</code>是第二个参数<code>init</code>方法的返回值，<code>DependencyList</code>同上述依赖数组一样 不可变数组。可以这样使用</p><div class=\"highlight\"><pre><code class=\"language-text\">const Child = React.forwardRef&lt;{num: number}&gt;((prop,ref)=&gt;{\n  useImperativeHandle&lt;{num: number}, {num: number}&gt;(ref,()=&gt;({\n    &#39;num&#39;: 1\n  }))\n  return (&lt;div&gt;123&lt;/div&gt;)\n})\n\nconst Foo = ()=&gt;{\n  const childRef = useRef&lt;{num: number}|null&gt;(null)\n  useLayoutEffect(() =&gt; {\n    console.log(childRef.current?.num) // 1\n  }, [])\n  return &lt;&gt;\n    &lt;Child ref={childRef}/&gt;\n  &lt;/&gt;\n}\n</code></pre></div><h3><b>总结</b></h3><p data-pid=\"pFM3d2u3\">本文根据阅读@types/react下<code>hook</code>相关源码入手，意在帮助大家熟悉常用hook以及类型声明，在开发时能得心应手，明白hooks的约束条件，更深入理解<code>hook</code>的功能。</p><h3><b>参考链接</b></h3><p data-pid=\"WjkHe2J7\"><b><a href=\"https://link.zhihu.com/?target=https%3A//jkchao.github.io/typescript-book-chinese\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深入理解 TypeScript</a></b><br/><b><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/4_qXqD5C1SpzYnubUhMK3g\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">types 和 @types 是什么？</a></b><br/><b><a href=\"https://link.zhihu.com/?target=https%3A//reactjs.org/docs/hooks-reference.html%23\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">reactjs.org/docs/hooks-</span><span class=\"invisible\">reference.html#</span><span class=\"ellipsis\"></span></a></b><br/><b><a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/2/basic-types.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">typescriptlang.org/docs</span><span class=\"invisible\">/handbook/2/basic-types.html</span><span class=\"ellipsis\"></span></a></b><br/><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7021674818621669389\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">如何优雅地在 React 中使用TypeScript，看这一篇就够了！</a></b></p><p data-pid=\"n3RRLxNE\"><code>&gt; 转转研发中心及业界小伙伴们的技术学习交流平台，定期分享一线的实战经验及业界前沿的技术话题。</code></p><p data-pid=\"XyVvKJuD\"><code>&gt; 关注公众号「转转技术」（综合性）、「大转转FE」（专注于FE）、「转转QA」（专注于QA），更多干货实践，欢迎交流分享~</code> </p><p></p>",
            "voteup_count": 3,
            "comment_count": 0
        },
        "created": "2023-08-02T22:36:00+08:00"
    },
    {
        "content": {
            "id": 646509421,
            "title": "别再用前缀树了！深度揭秘搜索框“自动补全”功能",
            "type": "article",
            "excerpt_title": "谈到搜索，大家大部分时间都会把注意力聚焦在查询 -&gt; 文档这件事情上。但一个好的搜索产品，除了搜索本身算法要过硬之外，还需要一些配套功能来使得整个用户体验更加完善、顺滑。搜索框的“自动补全”就是这么一个功能。接下来的内容会详细讲解在现代搜索系统里面，搜索框自动补全功能的技术实现，它在整个搜索体验中的扮演的角色与定位，以及它的重要性。 什么是自动补全搜索框自动补全指的是在你输入搜索关键字（但可能还没输…",
            "url": "https://zhuanlan.zhihu.com/p/646509421",
            "image_url": "https://picx.zhimg.com/v2-c243bc4bf66913f8a155fdc1fb831bd0_r.jpg?source=172ae18b",
            "created": 1690757727,
            "updated": 1690757727,
            "author": {
                "id": "c5c61bc0c8468d3451ca0f27f6dfee70",
                "url_token": "taylor-chueng",
                "name": "张泰源",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-809adfbe36df547823d781abba149afe_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-809adfbe36df547823d781abba149afe.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/c5c61bc0c8468d3451ca0f27f6dfee70",
                "user_type": "people",
                "headline": "搜索/推荐，机器学习系统",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic2.zhimg.com/v2-64a58c6459bea11becf5f93975ce9993.png?source=6a64a727",
                        "night_mode_url": "https://pic3.zhimg.com/v2-64a58c6459bea11becf5f93975ce9993.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"Q62mD-xY\">谈到搜索，大家大部分时间都会把注意力聚焦在查询 -&gt; 文档这件事情上。但一个好的搜索产品，除了搜索本身算法要过硬之外，还需要一些配套功能来使得整个用户体验更加完善、顺滑。搜索框的“自动补全”就是这么一个功能。接下来的内容会详细讲解在现代搜索系统里面，搜索框自动补全功能的技术实现，它在整个搜索体验中的扮演的角色与定位，以及它的重要性。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>什么是自动补全</h2><p data-pid=\"jxGm7wf9\">搜索框自动补全指的是在你输入搜索关键字（但可能还没输入完整）的时候，通过你已经输入的文字来给你推荐你可能想要搜索的关键字；如果其中一个推荐词是你想搜的东西，那你只需要点击一下就可以，而不需要自己把完整的搜索词打完。绝大部分带搜索功能的网站/App，都会提供这样的自动补全便利。以下是京东的一个例子：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3fd37057e8ccaee3fb1770ee57fa7cb4_b.jpg\" data-size=\"normal\" data-rawwidth=\"1630\" data-rawheight=\"852\" class=\"origin_image zh-lightbox-thumb\" width=\"1630\" data-original=\"https://pic1.zhimg.com/v2-3fd37057e8ccaee3fb1770ee57fa7cb4_r.jpg\" data-original-token=\"v2-9869d3d392ad6cd8832102e7acdc7b66\"/><figcaption>在京东搜索小米，会给你推荐各种小米相关的关键字</figcaption></figure><p data-pid=\"qwA-IFUM\">很多网站还会根据用户的输入习惯来做优化。比如国内的用户大多都用拼音输入法，那有些网站就会把自动补全做得更加便利，在用户只输入了拼音、但还没有把拼音转换成汉字的时候，就可以进行补全。再以京东为例：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-020d25b0baf94a69ae19411d6b328786_b.jpg\" data-size=\"normal\" data-rawwidth=\"957\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb\" width=\"957\" data-original=\"https://pic3.zhimg.com/v2-020d25b0baf94a69ae19411d6b328786_r.jpg\" data-original-token=\"v2-3e1ed4940ea0cf5856bc347a32a00fb1\"/><figcaption>包括京东在内的很多电商都支持这种只打拼音就可以自动补全的功能。一些采用其他文字的国家的网站/App（比如韩国），也有类似的支持</figcaption></figure><p data-pid=\"yo0QJnjp\">大部分时候，自动补全的都是文字，点击这些文字就会到达对应的搜索页。但在一些特定情况下，自动补全的会是一个直接到某个对象的链接（又称<b>DeepLink</b>或者<b>DirectLink</b>）。比如下面这个领英（LinkedIn）的例子，搜索人名的时候，点击推荐的人名会直接带你到这个人的主页，而不是这个人名的搜索页。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-00147834cc58d1b5236f2854bc7426a1_b.jpg\" data-size=\"normal\" data-rawwidth=\"914\" data-rawheight=\"252\" class=\"origin_image zh-lightbox-thumb\" width=\"914\" data-original=\"https://pic2.zhimg.com/v2-00147834cc58d1b5236f2854bc7426a1_r.jpg\" data-original-token=\"v2-527d7019315b00055b9242c3ca87590b\"/><figcaption>点击第一个结果，会带你到杨乐存的个人主页，而不是搜索“yann lecun&amp;quot;这个词的搜索页</figcaption></figure><h2>自动补全的技术实现</h2><p data-pid=\"sukU1rBn\">那么这样的系统一般是怎么实现的？大致有三种实现的流派</p><ol><li data-pid=\"SQGwfitH\">基于数据库查询匹配（例如利用MySQL里面的LIKE语法）</li><li data-pid=\"7hvLSdtL\">基于Trie树（又称前缀树）</li><li data-pid=\"kbzd2Lgm\">基于Inverted Index（倒排索引）</li></ol><p data-pid=\"o3Nqb_VH\">第1种实现简单但速度最慢，一般是时间不够赶工的选择。在互联网上搜“自动补全系统设计”，绝大部分的教程、面试攻略都会介绍第2种，也就是基于前缀树的算法。但根据我在中大厂的项目经历，大部分成熟、注重优化的搜索产品，都会采用第3种，也就是倒排索引的方式来实现。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fec4022132812daf3547ccfe2ade6720_b.jpg\" data-size=\"normal\" data-rawwidth=\"2190\" data-rawheight=\"1046\" class=\"origin_image zh-lightbox-thumb\" width=\"2190\" data-original=\"https://pic1.zhimg.com/v2-fec4022132812daf3547ccfe2ade6720_r.jpg\" data-original-token=\"v2-c243bc4bf66913f8a155fdc1fb831bd0\"/><figcaption>如何利用倒排索引来实现基于前缀匹配的自动补全。通过上图的索引，用户打&amp;quot;ip&amp;quot;会出来iPhone/iPad/iPod, 但打&amp;quot;iph&amp;quot;就只会出来iPhone</figcaption></figure><p data-pid=\"OI3UNWL2\">鉴于其他两种实现在互联网上有很多相关材料，这里只细聊一下第三种实现的细节。其实思路非常简单，如上图所示，和文本搜索建立倒排索引的流程基本一样，主要的区别点在于Tokenization，也就是分词这一块：</p><ul><li data-pid=\"RB047mKT\">假设文本是&#34;小米手机“，那么在产品搜索中大概会被tokenize成“小米”, “手机”，这样无论用户搜的是&#34;小米&#34;还是&#34;手机&#34;都会匹配到小米手机</li><li data-pid=\"a2Kw8grp\">在自动补全中，&#34;小米手机&#34;会被tokenize成&#34;小&#34;, &#34;小米&#34;, &#34;小米手&#34;, &#34;小米手机&#34;。这样无论用户输入的是哪一个前缀，都能补全出完整的“小米手机“</li></ul><h3>倒排索引 vs. 前缀树的优缺点</h3><p data-pid=\"R1KWZSXt\">前面提到，提到自动补全的系统设计，大部分系统设计教程会和你说用Trie前缀树，而我接触过的成熟商业应用都用的倒排索引。这种割裂、差别其实是一个很有意思的事情——两种设计都是可行的，各有优缺点，很多时候是项目团队/业务的需求决定了选用哪一种。</p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\"><tbody><tr><th></th><th>前缀树</th><th>倒排索引</th></tr><tr><td>系统延迟/开销</td><td>低</td><td>中等</td></tr><tr><td>Scalability</td><td>中等</td><td>好</td></tr><tr><td>工程团队维护成本</td><td>高</td><td>低</td></tr><tr><td>算法团队优化友好性</td><td>差</td><td>好</td></tr></tbody></table><p data-pid=\"pzucKZVB\">上面这个表格是一个<b>高度简化</b>过的优缺点比较，但已经足以看出两者的区别：前缀树简单，能更快返回结果，整体内存/存储开销也更低。但是，在数据量大 / 项目复杂度高 / 关键词推荐质量要求高的场合，倒排索引有比较明显的优势：</p><ul><li data-pid=\"BQxQTw9K\">在数据量巨大的场景下，倒排索引做Sharding（分片）非常容易，而前缀树相对之下更难实现</li><li data-pid=\"biDLsQ8j\">使用倒排索引的话，就跟其他的搜索产品共用一个系统即可，团队完全不需要另外维护一个系统</li><li data-pid=\"iFIeRjYA\">在倒排索引的系统架构下，所有现有的召回、粗排、精排的搜索算法/机器学习模型都可以被直接应用上；但在一个前缀树系统中，即使理论上可行，也得额外花费大量的功夫才能实现</li></ul><p data-pid=\"89ckghwE\">由于上述原因，我了解的硅谷的大型应用/网站（Facebook/Twitter/领英/……）都普遍采用的是倒排索引的实现。</p><h2>自动补全的角色定位和重要性</h2><p data-pid=\"SauRU4Yp\">虽然乍看之下，自动补全只是一个帮用户节省了一些打字时间的工具，对用户的搜索体验并没有本质的改善，似乎是一个无足轻重的功能。但根据我过往的项目经验，自动补全在用户整个搜索过程中是不可或缺的一环：</p><h3>关键作用#1 - 帮助用户准确搜索</h3><p data-pid=\"tM9xYsvP\">在用户的搜索意图比较明确的时候，自动补全可以极大地提高用户搜索的效率以及准确性。比如说：</p><ul><li data-pid=\"8x9q3MWu\">在社交app上搜人，但是你只知道一个人的名字大概怎么念，而不知道具体的拼写的时候，你就可以通过自动补全来尝试不同的拼写方式，来快速找到你想找到的人（尤其是app如果支持基于拼音的自动补全，那你甚至光打拼音就行）</li><li data-pid=\"X2lfb6rc\">用户想在电商网站上面购买某种特定商品，比如荣耀70手机——这款手机分普通版，Pro，和Pro+，这个用户觉得随便哪一款都无所谓，买了就行。但假如最近Pro折扣很大，用户购买率特别高，自动补全的建议就可以把“荣耀70 Pro”放在了第一位，用户就更有可能点击搜索Pro，也更有可能最终完成购买</li></ul><h3>关键作用#2 - 帮助用户探索</h3><p data-pid=\"g65pHe3O\">做过搜索的同学可能都知道，用户的搜索意图并不总是那么的确定的，有时会比较模糊，甚至还会带点探索性。在这种情况下，自动补全也可以帮助用户快速地把自己的购买意图确定下来，或者快速地探索：</p><ul><li data-pid=\"DHxGuI6m\">还是拿手机来举例子——假设用户想买荣耀手机，但不知道有哪些选择。在用户输入“荣耀手机“之后，自动补全就可以提供如下建议：“荣耀手机x50” / “荣耀手机70” / “荣耀手机80” 等，用户可以根据这个列表来把自己的搜索意图进一步具体化</li><li data-pid=\"rWrGn2s1\">有时候用户的意图带有非常强的探索性，比如说“海鲜”——用户只是有一个很模糊的想吃海鲜的欲望，然后想看看有哪些海鲜制品。这个时候自动补全就可以推荐“海鲜捞汁“ / ”海鲜零食“ / ”海鲜方便面“等，让用户可以快速探索电商平台上提供的选择</li><li data-pid=\"rJtclYZu\">最后一种我个人觉得非常有意思的情况是，用户可能本来想买A，但是因为自动补全的推荐，不但买了A，还对B产生了兴趣。再回到“荣耀手机”这个例子——用户只输入了“荣耀”的时候，发现诶，荣耀居然有手表卖！那用户可能就会产生好奇心，在买完手机之后还会去看看手表，喜欢的话可能就顺便买了</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><h2>总结</h2><p data-pid=\"VL26njbE\">前文主要介绍了现代搜索系统里搜索框自动补全的实现、以及它对于整个搜索体验的价值。内容主要来源我在硅谷参与的项目实践、以及与同行的交流，因此不一定适用于所有情况。如果有不同的观点，欢迎评论/私信，大家友好讨论互相学习：）</p>",
            "voteup_count": 7,
            "comment_count": 0
        },
        "created": "2023-07-31T06:55:27+08:00"
    },
    {
        "content": {
            "id": 3134387252,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/612960502/answer/3134387252",
            "created_time": 1690262155,
            "updated_time": 1690264904,
            "question": {
                "type": "question",
                "id": 612960502,
                "title": "为什么好莱坞电影《芭比》在国外口碑爆棚，在国内排片却少得可怜？",
                "question_type": "normal",
                "created": 1689769221,
                "updated_time": 1689769221,
                "url": "https://www.zhihu.com/question/612960502",
                "is_deleted": false
            },
            "author": {
                "id": "7a0de46a60071716d999e583d78ae255",
                "url_token": "LittleBallOfFur",
                "name": "猫球",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-25e890fc3597422b0a0b48e082b84b82_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-25e890fc3597422b0a0b48e082b84b82.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/7a0de46a60071716d999e583d78ae255",
                "user_type": "people",
                "headline": "猫狗双全",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "https://picx.zhimg.com/v2-e04f50276a013662084114ad34078f4e_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 2168,
            "comment_count": 158,
            "thanks_count": 224,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"GJwz9B8z\">我们通常认为芭比是个大IP，但她的市场定位在中国其实非常尴尬。</p><p data-pid=\"CHDVUXLn\">芭比娃娃是我们那一代女生（90-95）的玩具，但是我们小时候芭比娃娃只在高档百货商场有卖，一个基础款都要两百块、一件换装小衣服九十块，当时我们学校订校服，两套真衣服才六十。</p><p data-pid=\"CzQ0D3D8\">我记得很清楚，因为我也曾看着货架囊中羞涩过。人家有进口玩具的高贵和孤傲，完全没有想着适应中国当年的物价，主打一个爱买买、不买滚的态度。那年代两个人吃顿肯德基二三十，一般是我们考出好成绩之后家长给的奖励；两根麻辣串五毛，一包辣条两毛，一杯珍珠奶茶两块，这是零花钱的日常消费。两三百块的一个娃娃，除了“万元户”（非常有年代感的词）家的大小姐，不知道有谁会买。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"KtjBuMe4\">后来中国经济发展了、物价上涨了，小女孩买得起芭比娃娃了，芭比却过时了。现在的小女生喜欢迪士尼那个粉色小狐狸，不过更喜欢的是用智能手机刷短视频，还有电子设备上的各种换装游戏，早就不玩芭比这种换装过家家洋娃娃了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"o9noplE8\">所以芭比这个IP到底是谁的美好童年回忆呢？</p><p data-pid=\"d5YJmAiG\">是我们这茬“当年我高攀不起、现在我爱答不理”的女性，还是后来那茬觉得芭比跟跳皮筋、踢键子差不多属于过时老阿姨玩具的小姑娘？</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"UmUzRu5r\">要是说芭比是个大IP，一整个万象城里找不到一个卖芭比的店铺，用某宝搜一下，销量寥寥无几、被义乌碾压。</p><p data-pid=\"XPhheD7W\">你问为什么电影排片少，那为什么万象城不给她店铺，某宝不给她流量呢？</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-b306c3e57612ba1915e9a8e7ca2f8636_720w.jpg?source=2c26e567\" data-rawwidth=\"1170\" data-rawheight=\"2115\" data-size=\"normal\" data-original-token=\"v2-e04f50276a013662084114ad34078f4e\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-d32af2e5bf3089d4169715a6c01db1b8_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1170\" data-original=\"https://pica.zhimg.com/v2-b306c3e57612ba1915e9a8e7ca2f8636_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"xbvvA11q\">如果不是IP电影，就是一部普通的据说内核还不错的青春片。好吧，假设这是个国产片，别管它有什么深意，男女主年龄加起来都几乎八十岁了，演个粉粉的少女心电影、演俩人设是青少年的少女玩具，他俩就该跟晓庆阿姨一起上热搜挨骂了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"lbM5rYz6\">三十年前芭比就没想过要中国市场，今天中国市场不给她回应，还委屈上了？</p><p data-pid=\"rs454mIc\">当年我真的没有两百块，很遗憾没有成为芭比娃娃的忠实用户。</p><p data-pid=\"NYjDMyAh\">但今天我有啊，我有也不给你。</p>",
            "excerpt": "我们通常认为芭比是个大IP，但她的市场定位在中国其实非常尴尬。 芭比娃娃是我们那一代女生（90-95）的玩具，但是我们小时候芭比娃娃只在高档百货商场有卖，一个基础款都要两百块、一件换装小衣服九十块，当时我们学校订校服，两套真衣服才六十。 我记得很清楚，因为我也曾看着货架囊中羞涩过。人家有进口玩具的高贵和孤傲，完全没有想着适应中国当年的物价，主打一个爱买买、不买滚的态度。那年代两个人吃顿肯德基二三十，一般…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 1,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-e04f50276a013662084114ad34078f4e_720w.jpg?source=7e7ef6e2",
                        "width": 1170,
                        "height": 2115,
                        "token": "v2-e04f50276a013662084114ad34078f4e",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxi06MvWCyD1yvsukgIlCgk1OTk5NzMxMTMSCjMxMzQzODcyNTIYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-07-25T13:15:55+08:00"
    },
    {
        "content": {
            "id": 3129936794,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/26646855/answer/3129936794",
            "created_time": 1689997455,
            "updated_time": 1695640394,
            "question": {
                "type": "question",
                "id": 26646855,
                "title": "前端架构是什么，前端有架构可谈吗？",
                "question_type": "normal",
                "created": 1416153518,
                "updated_time": 1416153518,
                "url": "https://www.zhihu.com/question/26646855",
                "is_deleted": false
            },
            "author": {
                "id": "d740a00ba7cc0bd83b2bdb5a8042d70b",
                "url_token": "yin-guang-yao-96",
                "name": "null",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-312f42a4deb8274e71a87ec6126920a3_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-312f42a4deb8274e71a87ec6126920a3.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/d740a00ba7cc0bd83b2bdb5a8042d70b",
                "user_type": "people",
                "headline": "",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 73,
            "comment_count": 46,
            "thanks_count": 11,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"MbDQxoXA\">我敲，这么多人点赞。。。关注这个回答也没用啊，也不会在这个回答下面更新，不知道猴年马月才会更新。。。</p><p data-pid=\"7IPMJ3WQ\">与其感兴趣，不如直接加入我们团队：</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//bytedance.feishu.cn/docx/ZXB2d0CSaoU8xoxwvUWcZoaxnMh\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">bytedance.feishu.cn/doc</span><span class=\"invisible\">x/ZXB2d0CSaoU8xoxwvUWcZoaxnMh</span><span class=\"ellipsis\"></span></a><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"WFX1nC63\">看了一些回答，讲的都是文件目录组织，或者就 React + Redux/Mobx 这一套。。。我是不太愿意承认前端架构就是这些的。。。</p><p data-pid=\"5WbuCw7K\">先挖个坑，有空了讲一下腾讯文档的分层架构，每一层的架构都很复杂：</p><ol><li data-pid=\"9Gblq9oi\">Model 层：数据存储、原子化、Undo/Redo、冲突处理</li><li data-pid=\"xEPtTnhw\">Render 层：Canvas、WebGL、WebAssembly</li><li data-pid=\"a4prXOsB\">应用层：依赖注入、Service 容器化和 Workbench 配置化</li></ol>",
            "excerpt": "我敲，这么多人点赞。。。关注这个回答也没用啊，也不会在这个回答下面更新，不知道猴年马月才会更新。。。 与其感兴趣，不如直接加入我们团队： https://bytedance.feishu.cn/docx/ZXB2d0CSaoU8xoxwvUWcZoaxnMh 看了一些回答，讲的都是文件目录组织，或者就 React + Redux/Mobx 这一套。。。我是不太愿意承认前端架构就是这些的。。。 先挖个坑，有空了讲一下腾讯文档的分层架构，每一层的架构都很复杂： Model 层：数据存储、原子化、Undo/Redo、冲突处理Render 层：Can…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxial7zUCyC1ua0BkgIlCgk1OTkxNjQyMjcSCjMxMjk5MzY3OTQYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-07-22T11:44:15+08:00"
    },
    {
        "content": {
            "id": 641793765,
            "title": "前端 lockfile 合并冲突，如何正确地处理？",
            "type": "article",
            "excerpt_title": "某次前端需求开发中，新增了一个 npm 包，在进行合码时发现 lockfile 出现冲突。❝ lockfile，即包管理工具的 lock 文件，比如 package-lock.json 、yarn.lock 、pnpm-lock.yaml 手动解冲突非常低效，又容易出错。以下是几种常用的解决方案： 删掉 lockfile，后面再重新安装依赖重置为其中一个分支的 lockfile，后面再重新安装依赖运行依赖安装命令，利用包管理工具自带的机制修复 lockfile 冲突方案 1 会丢失 lock 记录，通常不…",
            "url": "https://zhuanlan.zhihu.com/p/641793765",
            "image_url": "",
            "created": 1688605725,
            "updated": 1688605725,
            "author": {
                "id": "7cf4e0414c0a6c5678f78d6f691139f8",
                "url_token": "zheng-jia-xing-4",
                "name": "francecil",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-f378cc2d729d09c6238dc9ffc0ac044b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-f378cc2d729d09c6238dc9ffc0ac044b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/7cf4e0414c0a6c5678f78d6f691139f8",
                "user_type": "people",
                "headline": "",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1444733827
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"r8pYsC29\">某次前端需求开发中，新增了一个 npm 包，在进行合码时发现 <code>lockfile</code> 出现冲突。</p><blockquote data-pid=\"cuKHgnAn\">❝ lockfile，即包管理工具的 lock 文件，比如 <code>package-lock.json</code> 、<code>yarn.lock</code> 、<code>pnpm-lock.yaml</code><br/> </blockquote><p data-pid=\"0tC347rY\">手动解冲突非常低效，又容易出错。以下是几种常用的解决方案：</p><ol><li data-pid=\"5SWvW738\">删掉 lockfile，后面再重新安装依赖</li><li data-pid=\"cYazC924\">重置为其中一个分支的 lockfile，后面再重新安装依赖</li><li data-pid=\"o1muur48\">运行依赖安装命令，利用包管理工具自带的机制修复 lockfile 冲突</li></ol><p data-pid=\"ojyh9R7Y\">方案 1 会丢失 lock 记录，通常不会选择。</p><p data-pid=\"hw7jykY_\"><b>那方案 2 和方案 3 可行么？需要注意什么问题？</b> 本文将对这些问题进行讨论，并在最后给出<b>最佳实践</b>。</p><blockquote data-pid=\"T3O24cPX\">❝ 如果不想关注细节，也可以滑到最后直接查看「最佳实践」。<br/> </blockquote><p data-pid=\"9pBB9NXy\">在此之前，我们先来讲讲什么情况下会出现 lockfile 合并冲突。</p><h2><b>lockfile 合并冲突的原因</b></h2><p data-pid=\"F12G4Q3L\">Git 合并出现冲突的原因在于两个分支版本对<b>一个文件</b>的<b>同一区域</b>做了修改。如果是不同区域，Git 会尝试自动合并（auto-merge，默认策略）解决冲突。</p><blockquote data-pid=\"a4kWbttm\">❝ 如果对 Git 合并冲突不熟悉，可以先看 <a href=\"https://link.zhihu.com/?target=https%3A//www.freecodecamp.org/news/resolve-merge-conflicts-in-git-a-practical-guide/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">How to Resolve Merge Conflicts in Git – A Practical Guide with Examples</a> 这篇文章<br/> </blockquote><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4430980cb6f584a514748c5795369c41_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1372\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"1372\" data-original=\"https://pic2.zhimg.com/v2-4430980cb6f584a514748c5795369c41_r.jpg\" data-original-token=\"v2-2cccf01aaa6e85af62681aae6b4170e2\"/></figure><p data-pid=\"ygq2PZRx\">注意合并冲突的关键：<b>同一区域发生变化</b>。以 <code>package.json</code> 的依赖配置为例，下面这两个例子，第一个会冲突而第二个不会冲突。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0a5efa629c5a34b924009350e6d7f409_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1680\" data-rawheight=\"926\" class=\"origin_image zh-lightbox-thumb\" width=\"1680\" data-original=\"https://pic2.zhimg.com/v2-0a5efa629c5a34b924009350e6d7f409_r.jpg\" data-original-token=\"v2-c5bef00a67cecb2dd20371821eb4423a\"/></figure><p data-pid=\"umfBGCQI\">对于 lockfile 而言，同一区域发生变化一般有以下两种情况：</p><ul><li data-pid=\"5_cpo6be\">包管理工具版本不一致导致 lockfile 的结构发生变化，出现不兼容合并。对于这个问题，我们应该限定包管理工具的版本，可以参考我的另一篇文章：<a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7250383386183876645\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么保证前端依赖一致这么难? - 掘金</a></li><li data-pid=\"4ImW8tHF\">两个分支的 <code>package.json</code> 依赖配置都发生了变更，并修改了 lockfile 的同一区域。</li></ul><p data-pid=\"Hjyg9Wic\">什么情况下会修改 lockfile 的同一区域？</p><p data-pid=\"zs30wk8R\">由于不同包管理工具以及不同版本的生成策略都不一样，这个问题说来话长，开发者也很难通过调整 <code>package.json</code> 的写法来避免冲突，因此无需过多关注，只要知道当出现这个问题的时候怎么解决即可。</p><p data-pid=\"d-pn9K2C\">下面将讨论两种常用的解决策略。</p><h2><b>方案分析：重置分支 lockfile</b></h2><blockquote data-pid=\"n9s49D1y\">❝ <b>太长不看版</b>：重置分支 lockfile ，即还原 lockfile 到<b>目标分支</b>或者<b>当前分支</b>中的某个版本，也意味着会丢失某个分支的 lock 记录，可能会导致错误。该问题很难彻底解决，只能通过改进开发流程和必要的人工 review 来避免。<br/> </blockquote><p data-pid=\"xQB12391\">重置分支 lockfile 指的是「合并时以<b>目标分支</b>或者<b>当前分支</b>的 lockfile 文件为准」，后面需要再重新执行依赖安装命令去更新 lockfile 。</p><h2><b>三种重置方案</b></h2><p data-pid=\"Rsv1UeW3\">以下三种方案可以方便的重置分支 lockfile：</p><ol><li data-pid=\"I7189f32\">忽略冲突提示并暂存 lockfile 文件，而后丢弃该文件变更，表示继续当前分支的 lockfile 文件。</li><li data-pid=\"CJjg0r6S\">执行 <code>git checkout --ours &#34;*lock*&#34;</code> 或 <code>git checkout --theirs &#34;*lock*&#34;</code> 命令，将以<b>当前分支</b>或<b>目标分支</b>为基准自动修复 lockfile 冲突。</li><li data-pid=\"ESnyTOXo\">基于 Git 配置实现 lockfile <b>冲突修复自动化</b>，需要执行以下两个操作，且二者缺一不可： </li><ol><li data-pid=\"byFe_Dc4\">新增 <code>.gitattributes</code> 文件，配置文件的合并策略，示例：</li><li data-pid=\"FyLGCqh6\"><i># .gitattributes</i><br/><i># 当 pnpm-lock.yaml 出现冲突时，将以当前分支为准</i><br/>pnpm-lock.yaml               merge=ours<br/><br/> </li><li data-pid=\"h3pw_P30\">执行 <code>git config merge.ours.driver true</code> 命令，开启合并驱动配置（如果用了 <code>theirs</code> 的合并策略，则命令改成 <code>merge.theirs.driver</code>）。</li><li data-pid=\"4vxuBkyA\">参考文档： </li><ol><li data-pid=\"NRTm84qn\"><a href=\"https://link.zhihu.com/?target=http%3A//stackoverflow.com/a/930495/958481\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Have Git Select Local Version On Merge Conflict on a Specific File?</a></li><li data-pid=\"1iERymeE\"><a href=\"https://link.zhihu.com/?target=https%3A//git-scm.com/book/en/v2/Customizing-Git-Git-Attributes%23Merge-Strategies%3A~%3Atext%3Dfurther%2520development%2520work.-%2CMerge%2520Strategies%2C-You%2520can%2520also\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Merge Strategies</a></li></ol></ol></ol><h2><b>存在的问题</b></h2><p data-pid=\"42GDcbMg\">无论是以<b>当前分支</b>还是<b>目标分支</b>为基准，重置分支 lockfile 再更新依赖<b>意味着会丢失一部分 lock 记录，可能会引发错误</b>。</p><p data-pid=\"neO-7PwO\">举个业务中遇到过的例子：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-34c058de27c270e4ea9c83b626f10973_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1772\" data-rawheight=\"1246\" class=\"origin_image zh-lightbox-thumb\" width=\"1772\" data-original=\"https://pic4.zhimg.com/v2-34c058de27c270e4ea9c83b626f10973_r.jpg\" data-original-token=\"v2-ca547536e9f206098117a6a3e130b3f3\"/></figure><ol><li data-pid=\"un0KXe65\">从主分支拉取一个开发分支 <code>feat1</code> ，<code>feat1</code> 中新增了依赖 <code>A^1.0.0</code> ，此时装的版本是 <code>1.0.0</code></li><li data-pid=\"G5hWYE5p\">在 <code>feat1</code> 开发的这段时间，有另一个开发分支 <code>feat2</code> 先合到了主分支，并新增了依赖 <code>B^2.0.0</code> ，此时装的版本是 <code>2.0.0</code></li><li data-pid=\"A2iafUUA\"><code>feat1</code> 开发完毕，准备合码到主分支，发现 lockfile 冲突了</li><li data-pid=\"HyOIeO3s\">使用上面的 <b>「重置分支 lockfile」</b>方案，并重新安装了依赖</li><li data-pid=\"Ea4PZftm\">但是这个时候，社区发布了有 <i><code>BREAKING CHANGE</code></i> 的 <code>A@1.0.1</code> 和 <code>B@2.0.1</code>。由于<b>「重置分支 lockfile」</b>方案会忽略 <code>feat1</code> 或者 主分支（<code>feat2</code>）新增的 lock 记录，导致安装了较新版本的 <code>A@1.0.1</code> 或 <code>B@2.0.1</code></li><li data-pid=\"ZNEGaJ_Q\"><code>feat1</code> 直接合到了主分支，导致线上代码报错</li></ol><h2><b>解决方案</b></h2><p data-pid=\"5c4qkp4Z\">有同学说，<b>直接使用固定版本安装依赖不就好了</b>？比如新增依赖时使用 <code>A@1.0.0</code> 和 <code>B@2.0.0</code> ，而不是使用 <code>^</code> 这种版本范围的写法。</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n    &#34;dependencies&#34;: {\n      &#34;A&#34;: &#34;1.0.0&#34;,\n      &#34;B&#34;: &#34;2.0.0&#34;,\n  }\n}\n</code></pre></div><p data-pid=\"kYpH0KAu\">首先，对于<b>应用项目</b>来说，可以直接使用固定版本；但是对于<b>类库项目</b>，不推荐固定版本，有以下两点原因：</p><ul><li data-pid=\"Vc8kAnFt\">依赖该类库的应用项目无法充分复用依赖：比如 <code>^1.0.0</code> 和 <code>^1.1.0</code> 可以合并成 <code>^1.1.0</code>）</li><li data-pid=\"t9hBPySB\"><b>类库项目</b>的间接依赖出现安全漏洞时，无法通过重新安装依赖直接修复</li></ul><p data-pid=\"h1b-zUPm\">其次，锁定直接依赖的版本也不完全有效，丢失 lock 后，直接依赖的间接依赖还是会进行升级，进而导致 <i><code>BREAKING CHANGE</code></i></p><p data-pid=\"XA0-tVE9\">因此，一旦选择该方案，要么就<b>信任其他依赖不会出现问题（听天由命）</b> ，要么就需要<b>必要的 lockfile 人工 review</b> ，并通过<b>合理的开发流程</b>来保障。</p><ul><li data-pid=\"Jdz4PbwU\"><b>合理的开发流程</b>：开发阶段，及时 merge 或者 rebase 主分支的代码，有冲突提前解，而不是等到提测后要上线的时候再去处理。提测后合码前，如果发现代码冲突，解决冲突并合码上线前最好再重新测试一下代码冲突相关的场景（如果项目重要和人力允许的话）。</li><li data-pid=\"BOOU7ApP\"><b>必要的人工 review</b>：仅需关注<b>直接依赖</b>（比如 <code>pnpm-lock.yaml</code> 文件的 <code>specifier</code> 和 <code>version</code> 部分）的版本变更，对于<b>直接依赖</b>引入的<b>间接依赖</b>，自动升级出错的概率较小（一旦出错影响的不只一个项目），且 review 成本太高，选择信任社区，也可选择「变更复测」来保障。</li></ul><h2><b>方案小结</b></h2><ol><li data-pid=\"wHkdjoHR\">重置分支 lockfile 即还原 lockfile 到<b>目标分支</b>或者<b>当前分支</b>中的某个版本</li><li data-pid=\"NOCc6q_7\">有三种方案可以帮助方便的重置分支 lockfile</li><li data-pid=\"1undoLhS\">重置分支 lockfile 会丢失其中某个分支的 lock 记录，进而引发错误</li><li data-pid=\"0hM5Wop1\">锁定直接依赖的版本不是最终解决方案，会引发其他的两个问题</li><li data-pid=\"bpC5EPSp\">尽量由开发流程保证，有冲突就复测，并做好充足的人工 review</li></ol><h2><b>方案分析：包管理工具自带机制</b></h2><blockquote data-pid=\"b8LhGm5X\">❝ 太长不看版：解析冲突文件得到不同版本的 lock 对象，再对 lock 对象进行合并。每种包管理工具的合并方案都不一样，总体来说 pnpm 的最为出色。但无论如何，有合并肯定有丢失，不能保证 100% 没问题。<br/> </blockquote><p data-pid=\"hvVaVqvS\">lockfile 出现合并冲突，目前主流的包管理工具都支持运行依赖安装命令（<code>npm install/yarn/pnpm install</code>）来自动解决冲突。</p><ul><li data-pid=\"Sm0hd0lc\">npm：<a href=\"https://link.zhihu.com/?target=https%3A//docs.npmjs.com/cli/v6/configuring-npm/package-locks%23resolving-lockfile-conflicts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Resolving lockfile conflicts</a> ，v5.7 + 支持</li><li data-pid=\"0TC8mIZS\">yarn：<a href=\"https://link.zhihu.com/?target=https%3A//engineering.fb.com/2017/09/07/web/announcing-yarn-1-0/%23%3A~%3Atext%3DAuto%252Dmerging%2520of%2520lockfiles\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Auto-merging of lockfiles</a> ，v1.0+ 支持</li><li data-pid=\"nX5UvdPb\">pnpm：<a href=\"https://link.zhihu.com/?target=https%3A//pnpm.io/git%23merge-conflicts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Merge conflicts</a> ，v5.11+ 支持</li></ul><blockquote data-pid=\"IoBxJnN0\">❝ 可以认为大部分用户使用的包管理工具的版本都是支持的<br/> </blockquote><p data-pid=\"4TeAM1kQ\">那么这些包管理工具是怎么解决冲突的呢？</p><h2><b>npm 的冲突合并修复策略</b></h2><p data-pid=\"51FkLd7f\">我在另一篇文章 《<a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7251895470548697143\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">浅谈 package-lock.json 的合并冲突修复算法</a> 》中已经分析过这个问题。</p><p data-pid=\"4GFJVR_Y\">总体来说，策略是<b>基于目标分支（</b> <b><code>theirs</code></b> <b>），并应用上当前分支（</b> <b><code>ours</code></b> <b>）的变更。</b></p><p data-pid=\"nlj_8OmH\">举个例子，在<code>主分支</code>上合入<code>开发分支</code>（<code>git merge feat-branch</code>），<code>theirs</code> 指的就是<code>开发分支</code>，<code>ours</code> 指的是<code>主分支</code>，那么将基于<code>开发分支</code>的 lock 记录，并应用上<code>主分支</code>的变更。</p><p data-pid=\"_h-FQ_HT\">也就是说，<b>如果两个分支同时更新同一模块的版本号，则会以主分支（<code>ours</code>）的版本为准，这在 <code>极少数情况下</code>会出错。</b></p><p data-pid=\"MsLeLGZC\">文章给出的解决办法是通过流程和复测来降低影响，下文会讲。</p><h2><b>yarn 的冲突合并修复策略</b></h2><p data-pid=\"OqRNK0Ui\">PR 在 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/yarnpkg/yarn/pull/3544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Auto detect and merge lockfile conflicts</a> ，看最新的实现代码 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/yarnpkg/yarn/blob/master/src/lockfile/parse.js%23L334\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">/src/lockfile/parse.js</a></p><p data-pid=\"Nqo5rqZp\">实际上只要看其中的一行代码就能明白</p><div class=\"highlight\"><pre><code class=\"language-text\">Object.assign({}, parse(variants[0], fileLoc), parse(variants[1], fileLoc));\n</code></pre></div><p data-pid=\"4etuRsza\"><b>浅合并</b>两个分支的 yaml 对象，对象属性都存在则以目标分支（<code>theirs</code>）的为准</p><p data-pid=\"jJcvxEz5\">换句话说，当同一依赖的版本发生冲突，<b>会以目标分支的为准</b>。这点与 npm 的策略相反，但存在的问题和解决方案是类似的。</p><h2><b>pnpm 的冲突合并修复策略</b></h2><p data-pid=\"qoKz7fK2\">pnpm 的冲突修复算法由 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/pnpm/pnpm/tree/main/lockfile/merge-lockfile-changes\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@pnpm/merge-lockfile-changes</a> 项目维护，</p><p data-pid=\"knTGmEjJ\">整体实现上也是先将冲突部分拆解为目标分支内容（<code>theirs</code>）和当前分支内容（ <code>ours</code> ），然后做合并。</p><p data-pid=\"gDq9PIbd\">但是这个合并不是像 yarn 那样简单粗暴的浅合并，而是<b>做了深合并（</b> <b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/pnpm/spec/blob/master/lockfile/6.0.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">lockfile</a></b> <b>结构其实一共也就两层），当出现版本冲突时取版本号较大的。</b></p><p data-pid=\"Ja-dqkI1\">写个 demo 测试下</p><div class=\"highlight\"><pre><code class=\"language-text\">const { mergeLockfileChanges } = require(&#34;@pnpm/merge-lockfile-changes&#34;);\nconst simpleLockfile = {\n  importers: {},\n  lockfileVersion: 5.2,\n};\nconst mergedLockfile = mergeLockfileChanges(\n  {\n    ...simpleLockfile,\n    packages: {\n      &#34;.&#34;: {\n        version: &#34;1.1.0&#34;,\n        dependencies: {\n          foo: &#34;1.2.0&#34;,\n          bar: &#34;3.0.0_qar@1.0.0&#34;,\n          zoo: &#34;4.0.0_qar@1.0.0&#34;,\n          ktv: &#34;5.0.0&#34;\n        },\n      },\n    },\n  },\n  {\n    ...simpleLockfile,\n    packages: {\n      &#34;.&#34;: {\n        version: &#34;1.2.0&#34;,\n        dependencies: {\n          foo: &#34;1.1.0&#34;,\n          bar: &#34;4.0.0_qar@1.0.0&#34;,\n          zoo: &#34;3.0.0_qar@1.0.0&#34;,\n          pua: &#34;5.0.0&#34;\n        },\n      },\n    },\n  }\n);\nconsole.log(JSON.stringify(mergedLockfile, null, 2));\n</code></pre></div><p data-pid=\"g_WFRvYi\">输出得到</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n  &#34;importers&#34;: {},\n  &#34;lockfileVersion&#34;: 5.2,\n  &#34;packages&#34;: {\n    &#34;.&#34;: {\n      &#34;version&#34;: &#34;1.2.0&#34;,\n      &#34;dependencies&#34;: {\n        &#34;foo&#34;: &#34;1.2.0&#34;,\n        &#34;bar&#34;: &#34;4.0.0_qar@1.0.0&#34;,\n        &#34;zoo&#34;: &#34;4.0.0_qar@1.0.0&#34;,\n        &#34;ktv&#34;: &#34;5.0.0&#34;,\n        &#34;pua&#34;: &#34;5.0.0&#34;\n      }\n    }\n  }\n}\n</code></pre></div><p data-pid=\"kbaXHfsw\">也就是说，pnpm 选择了<b>更新的版本</b>，如果会出问题，则表示新版本出现了 <code>BREAKING CHANGE</code> ，但这个情况比起选择旧版本而出现 <code>BREAKING CHANGE</code> 的概率更小。</p><p data-pid=\"8zbn7_A_\">目前，pnpm 官方还在持续优化 lockfile 方案以减少冲突，包括：</p><ol><li data-pid=\"QcNl3Fi2\">针对分支使用不同的锁文件：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/pnpm/pnpm/pull/4475\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/pnpm/pnpm/pu</span><span class=\"invisible\">ll/4475</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"tIsU0Niw\">更改锁定文件格式以减少冲突数量：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/pnpm/rfcs/pull/1\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/pnpm/rfcs/pu</span><span class=\"invisible\">ll/1</span><span class=\"ellipsis\"></span></a></li></ol><p data-pid=\"dBEpKAGK\">此外，pnpm 还提供了一个 <a href=\"https://link.zhihu.com/?target=https%3A//pnpm.io/npmrc%23resolution-mode\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">resolution-mode</a> 配置，用户可以通过配置来决定依赖安装时版本的选择策略：最低（默认）、最高、time-base（与最后一个直接依赖有关）。</p><h2><b>方案小结</b></h2><p data-pid=\"msOBBuHN\">三种方案都选择对 lockfile 进行合并，但在合并的时候策略又不相同：</p><ul><li data-pid=\"hAEkiLoQ\"><b>npm</b>：深合并，并以当前分支（ <code>ours</code> ）的为准</li><li data-pid=\"uSWMnyFm\"><b>yarn</b>：浅合并，并以目标分支（<code>theirs</code>）的为准</li><li data-pid=\"rMvYMyMp\"><b>pnpm</b>：深合并，以版本号大的为准</li></ul><p data-pid=\"3_S58VKd\">yarn 虽是第一个提出解决 lockfile 冲突的，但过去这么久了方案没咋更新。。</p><p data-pid=\"L4Rui3We\">npm 的理念是版本合并应该尽量以主分支的为准，更稳定。</p><p data-pid=\"U26s95Rj\">pnpm 的理念是更信任社区 <code>semver</code> ，选择新版本出现的问题会比旧版本更少。</p><p data-pid=\"GB89xvnL\">整体来说，pnpm 方案出现问题的概率最小，但也不是一定不会出现问题，正如<a href=\"https://link.zhihu.com/?target=https%3A//pnpm.io/zh/git%23%25E5%2590%2588%25E5%25B9%25B6%25E5%2586%25B2%25E7%25AA%2581\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">官方文档</a>所说：</p><blockquote data-pid=\"eF443vBa\">❝ 建议您提交之前查看更改，因为我们无法保证 pnpm 会选择正确的头（head） - 它会构建大部分更新的锁文件，这在大多数情况下是理想的。<br/> </blockquote><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7d2569df055fd67e9a22fe5cd4216d69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"284\" data-rawheight=\"177\" class=\"content_image\" width=\"284\" data-original-token=\"v2-45e4b1280982519f112dfdc1b1eff41e\"/></figure><h2><b>最佳实践</b></h2><p data-pid=\"1stpCg8o\"><b>包管理自带机制</b>相比<b>重置分支 lockfile</b>，丢失的 lock 信息更少，出现的问题也更少。</p><p data-pid=\"MpJrba1c\">总结一下上文，我们得到如下最佳实践：</p><ol><li data-pid=\"4u8vGiSg\">不要手动解冲突，容易语法错误</li><li data-pid=\"037cqID1\">尽量使用包管理工具自带机制来解决冲突</li><li data-pid=\"kGPMhz-I\">如果还未对包管理工具进行选型，尽量选择 <code>pnpm</code></li></ol><p data-pid=\"P7zYLrFj\">此外，包管理工具方案不是一劳永逸，极端情况也可能出现问题。如果项目有这个价值，最好还是做下人工 review 和需求复测，具体行为指南可以参考「方案分析：重置分支 lockfile」一节中的解决方案。</p><h2><b>总结</b></h2><p data-pid=\"LH91L46-\">本文系统分析了 lockfile 冲突的常见方案，并在最后提供了一份最佳实践。</p><p data-pid=\"lyhfbK3F\">前端底层很多设计都是在修修改改，或许需要拓宽视野，上升软件层面的最佳实践，再反哺社区。</p><hr/><p data-pid=\"RAUHsG2p\">最后，如果看完本文有收获，欢迎一键三连（点赞、收藏、分享）  ~</p><h2><b>拓展阅读</b></h2><ul><li data-pid=\"lx4TDwkp\"><a href=\"https://link.zhihu.com/?target=https%3A//7tonshark.com/posts/avoid-conflicts-in-pnpm-lock/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Avoid lockfile conflicts in Rush</a></li></ul>",
            "voteup_count": 19,
            "comment_count": 0
        },
        "created": "2023-07-06T09:08:45+08:00"
    },
    {
        "content": {
            "id": 3091106978,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/596624832/answer/3091106978",
            "created_time": 1687772687,
            "updated_time": 1687775705,
            "question": {
                "type": "question",
                "id": 596624832,
                "title": "为什么感觉函数式编程学起来很困难？",
                "question_type": "normal",
                "created": 1681915379,
                "updated_time": 1682088204,
                "url": "https://www.zhihu.com/question/596624832",
                "is_deleted": false
            },
            "author": {
                "id": "200d53283ff9f8fdb7759e37c94cbb50",
                "url_token": "kokic-86",
                "name": "kokic",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-e8b033a24927efd04fa666337c2d5ded_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-e8b033a24927efd04fa666337c2d5ded.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/200d53283ff9f8fdb7759e37c94cbb50",
                "user_type": "people",
                "headline": "malheureux",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1513514011
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 35,
            "comment_count": 2,
            "thanks_count": 21,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"lwgzd33a\">因为类型.</p><hr/><p data-pid=\"bOdb8q2z\"><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BLisp%2C+Haskell%2C+Lean%7D\" alt=\"\\text{Lisp, Haskell, Lean}\" eeimg=\"1\"/> 虽然这仨都能称得上名正言顺的函数式语言, 但是你在写的时候就会发现该关注的点其实并不相同. 对于那些能够提供给你的 <b>类型信息</b> 更加丰富的语言, 在大的方面其实是简化了原本只看数据需要考虑到的各种 <b>检查</b>, 在这一点上当然是能降低学习和使用的心智负担. 但是为什么一般来说我们感受不到这一点? 可能有以下几点:</p><ul><li data-pid=\"DpGrQ6xk\">没接触过任何语言, 不了解使用程序解决问题的一般流程. 可能从谁那里听说零基础学函数式语言更有优势. 满足这一点遇到的困难通常和函数式语言关系不大, 慢慢来就行. </li><li data-pid=\"-TD7goL3\">使用过一些工业界的主要语言, 但是对于其中的函数式风格 (如果有的话) 不甚了解或仅限于 <code>map</code> <code>reduce</code>. 这个可能是大部分人遇到的情况, 直接一点的结论就是 <b>不会看类型</b>, 之前用过的那些语言大概率是完全没有类型 <code>Type</code>这个概念的. 如果你留意过知乎上的另一个问题 (大概是问 <code>type</code> <code>class</code> <code>typeclass</code> 的区别), 就会发现大部分回答甚至连问题在问什么都没搞清. 虽然不知道概念本身 (比如类型论中的定义) 也没什么影响, 但是关于 <b>类型的一些性质和恰如其分的操作</b> 是需要知道的 (当成黑盒也得会用才行啊), 因为这是你 <b>建模 </b>的方式 (在这一点上我同意 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/3d7373364bc211e041d32f9e2d87324f\" data-hash=\"3d7373364bc211e041d32f9e2d87324f\" data-hovercard=\"p$b$3d7373364bc211e041d32f9e2d87324f\">@Jiaming Lu</a> ). 这个时候就是 <b>多看一些例子 </b>(这个涉及到第三点). 对于同样的效果, 有一套你自己熟悉的写法, 还有一套你自己觉得难以理解的操作, 你觉得后者学起来很难, 这是正常的, 任何人在完全陌生的领域刚开始都会觉得困难, 所谓这两者思维上的转变就是你怎么把熟悉的东西 <b>翻译 </b>过去 (当然这个也是有前提的, 要是在你相对熟悉的语言里也学的一知半解, 你连对面这么干 <b>要解决的问题 </b>都理解不了 那还怎么迁移呢). </li><li data-pid=\"I2d7ZyiO\">最后一点是阅读材料. <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BHaskell%7D\" alt=\"\\text{Haskell}\" eeimg=\"1\"/> 有一些 &#34;广受好评&#34; 又以浅入浅出著称的书籍, 其用途之广就算拿去给幼儿园的小朋友当做儿童绘本阅读也很合适,  但是对于满足第二点的人群, 也许并不是一个好的选择; 还是 <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BHaskell%7D\" alt=\"\\text{Haskell}\" eeimg=\"1\"/>, 可能得益于社区的独特氛围和相关明星人物的个人爱好, 许多有关 <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BHaskell%7D\" alt=\"\\text{Haskell}\" eeimg=\"1\"/> 的网络材料往往是挂羊头卖狗肉, 正急切寻找例子的读者看到满屏幕的演算和交换图 <sup data-text=\"我自己也得画交换图, 还写画交换图的工具...\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>除了按下赞同丰富自己的动态往往别无所获 (只能说文章受众不在于此).  那说了这么多, 哪里能看到代码呢? 答案近在眼前 (当然我也不能假定每个宣称自己有工业界语言基础的人都看过 <b>语言官网的 <img src=\"https://www.zhihu.com/equation?tex=%5Ctextbf%7BReference%7D\" alt=\"\\textbf{Reference}\" eeimg=\"1\"/> 和标准库代码</b>, 从而在学习其他语言时也能立刻想到这一点). </li></ul><hr/><p data-pid=\"3-Bufjfg\">上面是一些可能有影响的因素, 下面才是类型对这个问题产生的影响. </p><p data-pid=\"7GNHQA6j\">望月新一曾经说过 <sup data-text=\"见他的论文 \" data-url=\"https://www.kurims.kyoto-u.ac.jp/~motizuki/Alien%20Copies,%20Gaussians,%20and%20Inter-universal%20Teichmuller%20Theory.pdf\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>, 我们要假定读者是高中生. 国内的高中生最常做的事情应该是刷题, 那我就假定读者对于各大 OJ 平台都有的 <img src=\"https://www.zhihu.com/equation?tex=A+%2B+B+%5C%3B%5C%3B%5Ctext%7BProblem%7D\" alt=\"A + B \\;\\;\\text{Problem}\" eeimg=\"1\"/> 并不陌生 (不幸的是本人不在此列). <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BLean4%7D\" alt=\"\\text{Lean4}\" eeimg=\"1\"/> 的 <img src=\"https://www.zhihu.com/equation?tex=A+%2B+B+%5C%3B%5C%3B%5Ctext%7BProblem%7D\" alt=\"A + B \\;\\;\\text{Problem}\" eeimg=\"1\"/> 写出来是这个样子 <sup data-text=\"其实 Haskell 写出来也是这样.\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup>: </p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">def</span> <span class=\"n\">main</span> <span class=\"kt\">:</span> <span class=\"kt\">IO</span> <span class=\"kt\">Unit</span> <span class=\"kt\">:=</span> \n  <span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"n\">getStdin</span> \n    <span class=\"o\">&gt;&gt;=</span> <span class=\"p\">(</span><span class=\"err\">·</span><span class=\"o\">.</span><span class=\"n\">getLine</span><span class=\"p\">)</span> \n    <span class=\"o\">&gt;&gt;=</span> <span class=\"p\">(</span><span class=\"err\">·</span><span class=\"o\">.</span><span class=\"n\">trim</span><span class=\"o\">.</span><span class=\"n\">splitOn</span> <span class=\"s\">&#34; &#34;</span> \n      <span class=\"o\">|&gt;.</span><span class=\"n\">map</span> <span class=\"kt\">String</span><span class=\"o\">.</span><span class=\"n\">toInt</span><span class=\"o\">!</span> \n      <span class=\"o\">|&gt;.</span><span class=\"n\">foldl</span> <span class=\"kt\">Int</span><span class=\"o\">.</span><span class=\"n\">add</span> <span class=\"kt\">Nat</span><span class=\"o\">.</span><span class=\"n\">zero</span> \n      <span class=\"o\">|&gt;</span> <span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"n\">println</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"OSfetUHW\">(贵乎对 <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BLean%7D\" alt=\"\\text{Lean}\" eeimg=\"1\"/> 高亮的支持形如白板我也可以理解, 这里就借用一下 <img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BHaskell%7D\" alt=\"\\text{Haskell}\" eeimg=\"1\"/> )</p><p data-pid=\"ZkHrYVVl\">这里最大的问题可能是不知道 <code>&gt;&gt;=</code>在干啥, 那依前文所述, 看类型信息.</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">main</span> <span class=\"kt\">:</span> <span class=\"kt\">IO</span> <span class=\"kt\">Unit</span>   <span class=\"c1\">-- 不解释</span>\n<span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"n\">getStdin</span> <span class=\"kt\">:</span> <span class=\"kt\">BaseIO</span> <span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"kt\">FS</span><span class=\"o\">.</span><span class=\"kt\">Stream</span> <span class=\"c1\">-- 不解释</span>\n\n<span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"kt\">FS</span><span class=\"o\">.</span><span class=\"kt\">Stream</span><span class=\"o\">.</span><span class=\"n\">getLine</span> <span class=\"p\">(</span><span class=\"n\">self</span> <span class=\"kt\">:</span> <span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"kt\">FS</span><span class=\"o\">.</span><span class=\"kt\">Stream</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"kt\">IO</span> <span class=\"kt\">String</span> \n<span class=\"c1\">-- 这告诉我们什么呢? 这告诉我们如果有一个 IO.FS.Stream 我们就能得到 IO String</span>\n\n<span class=\"c1\">-- 甚至当你 check 我们预期的这个操作时, Lean Infoview 还要贴心的告诉你这里可以写成 do-notation</span>\n<span class=\"o\">#</span><span class=\"n\">check</span> <span class=\"p\">(</span><span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"n\">getStdin</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"p\">(</span><span class=\"err\">·</span><span class=\"o\">.</span><span class=\"n\">getLine</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"kt\">IO</span> <span class=\"kt\">String</span><span class=\"p\">)</span>\n\n<span class=\"o\">/-</span>\n<span class=\"kt\">Expected</span> <span class=\"kr\">type</span>\n<span class=\"err\">⊢</span> <span class=\"kt\">IO</span> <span class=\"kt\">String</span>\n\n<span class=\"kt\">Messages</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kr\">do</span>\n  <span class=\"kr\">let</span> <span class=\"n\">x</span> <span class=\"err\">←</span> <span class=\"n\">liftM</span> <span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"n\">getStdin</span>\n  <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">getLine</span> <span class=\"kt\">:</span> <span class=\"kt\">IO</span> <span class=\"kt\">String</span>\n<span class=\"o\">-/</span>\n\n<span class=\"c1\">-- 这个时候你已经可以打印输入的内容了, 转成数字再求和无非是字符串的处理</span></code></pre></div><p data-pid=\"lr5NROWp\">这里所有的信息都是具体的, 这个时候你再看<code>IO.getStdin</code>, ta 把<code>IO.FS.Stream</code>这个我们需要的东西用<code>BaseIO</code>包了一下, 到这里可能有点印象了, 但还是不知道<code>&gt;&gt;=</code>是个啥. 小问题, 我们一路 goto <sup data-text=\"文档注释其实应该用 /-- -/, 这里因为高亮的原因我改了一下.\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\">[4]</sup>: </p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"c1\">-- goto</span>\n<span class=\"o\">@</span><span class=\"p\">[</span><span class=\"n\">inherit_doc</span><span class=\"p\">]</span> <span class=\"kr\">infixl</span><span class=\"kt\">:</span><span class=\"mi\">55</span>  <span class=\"s\">&#34; &gt;&gt;= &#34;</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Bind</span><span class=\"o\">.</span><span class=\"n\">bind</span>\n<span class=\"c1\">-- 那这里我们就可以知道, 这个记号实际上叫做 bind</span>\n\n<span class=\"c1\">-- goto</span>\n<span class=\"c1\">-- The typeclass which supplies the `&gt;&gt;=` &#34;bind&#34; function. See `Monad`.</span>\n<span class=\"kr\">class</span> <span class=\"kt\">Bind</span> <span class=\"p\">(</span><span class=\"n\">m</span> <span class=\"kt\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"err\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"c1\">-- If `x : m α` and `f : α → m β`, then `x &gt;&gt;= f : m β` represents the</span>\n  <span class=\"c1\">-- result of executing `x` to get a value of type `α` and then passing it to `f`. </span>\n  <span class=\"c1\">-- 这里不就写的很清楚了吗</span>\n  <span class=\"n\">bind</span> <span class=\"kt\">:</span> <span class=\"p\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"kt\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"p\">}</span> <span class=\"err\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"err\">→</span> <span class=\"p\">(</span><span class=\"n\">α</span> <span class=\"err\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"p\">)</span> <span class=\"err\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span>\n\n<span class=\"nf\">export</span> <span class=\"kt\">Bind</span> <span class=\"p\">(</span><span class=\"n\">bind</span><span class=\"p\">)</span>\n</code></pre></div><p data-pid=\"j1ku7aAv\">If<code>x : m α</code>and<code>f : α → m β</code>, then<code>x &gt;&gt;= f : m β</code>represents the result of executing<code>x</code>to get a value of type<code>α</code>and then passing it to<code>f</code>. 再代回上面那个例子,  我们写的是</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"n\">getStdin</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"p\">(</span><span class=\"err\">·</span><span class=\"o\">.</span><span class=\"n\">getLine</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- 你不懂这里的 `·` ? 就是个用来简写的记号而已, 我们把它展开</span>\n<span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"n\">getStdin</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"p\">(</span><span class=\"n\">λ</span> <span class=\"n\">x</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">getLine</span><span class=\"p\">)</span>\n<span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"n\">getStdin</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"p\">(</span><span class=\"n\">fun</span> <span class=\"n\">x</span> <span class=\"ow\">=&gt;</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">getLine</span><span class=\"p\">)</span>\n<span class=\"c1\">-- 上面两个都是一样的, fun x =&gt; x 和 javascript 基本没差了  </span>\n\n<span class=\"c1\">-- 因为实际上是在写</span>\n<span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"n\">getStdin</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"kt\">FS</span><span class=\"o\">.</span><span class=\"kt\">Stream</span><span class=\"o\">.</span><span class=\"n\">getLine</span></code></pre></div><p data-pid=\"GgYxVV-y\">也就是说</p><div class=\"highlight\"><pre><code class=\"language-text\">x : m α      &lt;----&gt;     IO.getStdin : BaseIO IO.FS.Stream\nm            &lt;----&gt;     BaseIO\nα            &lt;----&gt;     IO.FS.Stream\n\nf : α → m β  &lt;----&gt;     IO.FS.Stream → IO String\nm β          &lt;----&gt;     IO String</code></pre></div><p data-pid=\"BtHOXSKw\">到这里其实问题 (<code>&gt;&gt;=</code>) 已经结束了. </p><p data-pid=\"KdK1iekh\"><img src=\"https://www.zhihu.com/equation?tex=%5Ctextbf%7BRemark.%7D+\" alt=\"\\textbf{Remark.} \" eeimg=\"1\"/> 一个不太重要的细节,<code>BaseIO</code>是怎么变成<code>IO</code>的?</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"o\">@</span><span class=\"p\">[</span><span class=\"n\">inline</span><span class=\"p\">]</span> <span class=\"n\">def</span> <span class=\"kt\">BaseIO</span><span class=\"o\">.</span><span class=\"n\">toIO</span> <span class=\"p\">(</span><span class=\"n\">act</span> <span class=\"kt\">:</span> <span class=\"kt\">BaseIO</span> <span class=\"n\">α</span><span class=\"p\">)</span> <span class=\"kt\">:</span> <span class=\"kt\">IO</span> <span class=\"n\">α</span> <span class=\"kt\">:=</span>\n  <span class=\"n\">act</span></code></pre></div><hr/><p data-pid=\"GOwrWO2d\"><img src=\"https://www.zhihu.com/equation?tex=%5Ctextbf%7BExercise+1.%7D\" alt=\"\\textbf{Exercise 1.}\" eeimg=\"1\"/> 类似地观察<code>pure</code>,  并手工转换</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">def</span> <span class=\"n\">writeFileDo</span> <span class=\"n\">path</span> <span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"kt\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"kt\">:=</span> <span class=\"kr\">do</span>\n  <span class=\"kr\">let</span> <span class=\"n\">file</span> <span class=\"err\">←</span> <span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"kt\">FS</span><span class=\"o\">.</span><span class=\"kt\">Handle</span><span class=\"o\">.</span><span class=\"n\">mk</span> <span class=\"n\">path</span> <span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"kt\">FS</span><span class=\"o\">.</span><span class=\"kt\">Mode</span><span class=\"o\">.</span><span class=\"n\">write</span>\n  <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">putStr</span> <span class=\"n\">s</span>\n  <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">flush</span></code></pre></div><p data-pid=\"RU774My1\">到</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"c1\">-- `↦` i.e. `=&gt;`</span>\n<span class=\"nf\">def</span> <span class=\"n\">writeFile</span> <span class=\"n\">path</span> <span class=\"n\">s</span> <span class=\"kt\">:=</span>\n  <span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"kt\">FS</span><span class=\"o\">.</span><span class=\"kt\">Handle</span><span class=\"o\">.</span><span class=\"n\">mk</span> <span class=\"n\">path</span> <span class=\"kt\">IO</span><span class=\"o\">.</span><span class=\"kt\">FS</span><span class=\"o\">.</span><span class=\"kt\">Mode</span><span class=\"o\">.</span><span class=\"n\">write</span> <span class=\"o\">&gt;&gt;=</span> \n    <span class=\"n\">λ</span> <span class=\"n\">file</span> <span class=\"err\">↦</span> \n      <span class=\"n\">bind</span> <span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">putStr</span> <span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"n\">λ</span> <span class=\"kr\">_</span> <span class=\"err\">↦</span>\n      <span class=\"n\">bind</span> <span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">)</span> <span class=\"n\">λ</span> <span class=\"kr\">_</span> <span class=\"err\">↦</span>\n      <span class=\"n\">pure</span> <span class=\"nb\">()</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"sbselnLR\"><img src=\"https://www.zhihu.com/equation?tex=%5Ctextbf%7BExercise+2.%7D\" alt=\"\\textbf{Exercise 2.}\" eeimg=\"1\"/> 参考<code>writeFile</code>实现<code>readFile</code>. </p>",
            "excerpt": "因为类型. [公式] 虽然这仨都能称得上名正言顺的函数式语言, 但是你在写的时候就会发现该关注的点其实并不相同. 对于那些能够提供给你的 类型信息 更加丰富的语言, 在大的方面其实是简化了原本只看数据需要考虑到的各种 检查, 在这一点上当然是能降低学习和使用的心智负担. 但是为什么一般来说我们感受不到这一点? 可能有以下几点:没接触过任何语言, 不了解使用程序解决问题的一般流程. 可能从谁那里听说零…不会看类型, 之前用过的那些语言大概率是完全没有类型 Type这个概念的. 如果你留意过知乎上的另一个问题 (大概是问 type class typeclass 的区别), 就会发现大部分回答甚至连问题在问什么都没搞清. 虽然不知道概念本身 (比如类型论中的定义) 也没什么影响, 但是关于 类型的一些性质和恰如其分的操作 是需要知道的 (当成黑盒也得会用才行啊), 因为这是你 建模 的方式 (在这一点上我同意 @Jiaming Lu ). 这个时候就是 多看一些例子 (这个涉及到第三点). 对于同样的效果, 有一套你自己熟悉的写法, 还有一套你自己觉得难以理解的操作, 你觉得后者学起来很难, 这是正常的, 任何人在完全陌生的领域刚开始都会觉得困难, 所谓这两者思维上的转变就是你怎么把熟悉的东西 翻译 过去 (当然这个也是有前提的, 要是在你相对熟悉的语言里也学的一知半解, 你连对面这么干 要解决的问题 都理解不了 那还怎么迁移呢). 最后一点是阅读材料. [公式] 有一些 &#34;广受好评&#34; 又以浅入浅出著称的书籍, 其用途之广就算拿去给幼儿园的小朋友当做儿童绘本阅读也很合适, 但是对于满足第二点的人群, 也许并不是一个好的选择; 还是 [公式] , 可能得益于社区的独特氛围和相关明星人物的个人爱好, 许多有关 [公式] 的网络材料往往是挂羊头卖狗肉, 正急切寻找例子的读者看到满屏幕的演算和交换图 [1]除了按下赞同丰富自己的动态往往别无所获 (只能说文章受众不在于此). 那说了这么多, 哪里能看到代码呢? 答案近在眼前 (当然我也不能假定每个宣称自己有工业界语言基础的人都看过 语言官网的 [公式] 和标准库代码, 从而在学习其他语言时也能立刻想到这一点).",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxiimfrBCyCSh54tkgIlCgk1OTIxMDQyOTUSCjMwOTExMDY5NzgYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-06-26T17:44:47+08:00"
    },
    {
        "content": {
            "id": 3070192197,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/264668205/answer/3070192197",
            "created_time": 1686550166,
            "updated_time": 1686550166,
            "question": {
                "type": "question",
                "id": 264668205,
                "title": "一个女生嫁不出去的概率有多大？",
                "question_type": "normal",
                "created": 1514302495,
                "updated_time": 1514343957,
                "url": "https://www.zhihu.com/question/264668205",
                "is_deleted": false
            },
            "author": {
                "id": "20359793e9017d311f0c949583e78899",
                "url_token": "zhou-sai",
                "name": "赛赛",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-fef33b02f9d7d3f16fe29afeab3bcb05_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-fef33b02f9d7d3f16fe29afeab3bcb05.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/20359793e9017d311f0c949583e78899",
                "user_type": "people",
                "headline": "",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 4,
            "comment_count": 1,
            "thanks_count": 7,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"4UjBAPpH\">感觉这位表姐嫁出去的概率基本为零了。</p><p data-pid=\"gtEN8e0i\">身高估计145，体胖，肤黄，貌丑。现在年龄应该39了。</p><p data-pid=\"wHbS0kp2\">表哥的描述是：同学见到之后，纷纷说这位是艰难了。注意当年同学们说这话的时候，妹子年龄也就23。</p><p data-pid=\"58YrVVtR\">由于担心她生活不愉快，她妈妈早早给她买了房，买了车，找了清闲的工作。这下好了，更没戏了，因为啥也不缺，对于男人的要求反而还提高了，就更凉的透彻了。</p><p data-pid=\"QFgGhKOj\">另一个不利因素是她妈妈结过两次婚。第一次婚姻失败之后，二婚的男人在结婚几年之后就失业了，没有对于家庭收入有任何贡献，时不时的还由于生病住院需要拿钱。她妈妈身高165，是个大美女，但是她长成这样，可以揣测锅一定是她爸爸的。她妈妈结婚两次，但没一次幸福，这说明了指望男人是指望不上的。</p><p data-pid=\"3XdPT7Uu\">想想也是，如果我是她的情况，结什么婚，为什么要别人评论。</p><p></p>",
            "excerpt": "感觉这位表姐嫁出去的概率基本为零了。 身高估计145，体胖，肤黄，貌丑。现在年龄应该39了。 表哥的描述是：同学见到之后，纷纷说这位是艰难了。注意当年同学们说这话的时候，妹子年龄也就23。 由于担心她生活不愉快，她妈妈早早给她买了房，买了车，找了清闲的工作。这下好了，更没戏了，因为啥也不缺，对于男人的要求反而还提高了，就更凉的透彻了。 另一个不利因素是她妈妈结过两次婚。第一次婚姻失败之后，二婚的男人在结婚…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjF1P23CyCP9NYJkgIlCgk1ODgzMDE5ODISCjMwNzAxOTIxOTcYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-06-12T14:09:26+08:00"
    },
    {
        "content": {
            "id": 3082247387,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/607360049/answer/3082247387",
            "created_time": 1687246092,
            "updated_time": 1687265288,
            "question": {
                "type": "question",
                "id": 607360049,
                "title": "如何看待长沙一女子因发视频吐槽鱿鱼须烧烤价格过高导致被抓？",
                "question_type": "normal",
                "created": 1687102220,
                "updated_time": 1687218371,
                "url": "https://www.zhihu.com/question/607360049",
                "is_deleted": false
            },
            "author": {
                "id": "7240b2ae38836f4837c2d7355b2ee72d",
                "url_token": "pansz",
                "name": "pansz",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/310d85e8d_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/310d85e8d.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/7240b2ae38836f4837c2d7355b2ee72d",
                "user_type": "people",
                "headline": "如果您有什么不同意见，您是对的，我是错的。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic2.zhimg.com/v2-cc828cd41dee0115424faf5c33f57411_r.png",
                        "night_mode_url": "https://picx.zhimg.com/v2-62d4f613b2a9f47697af991c9139232f.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://pic1.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19554298",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19554298",
                                "name": "编程",
                                "avatar_url": "https://pic1.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19554300",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19554300",
                                "name": "Linux",
                                "avatar_url": "https://picx.zhimg.com/v2-4d682e48d948fcdf430d23d376934b8d_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19555634",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19555634",
                                "name": "Android 开发",
                                "avatar_url": "https://picx.zhimg.com/8c9ca8319_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19559604",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19559604",
                                "name": "笔记本电脑",
                                "avatar_url": "https://pic1.zhimg.com/v2-0c57bd6c9d0df4d52184ae12f20f88b8_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19551676",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19551676",
                                "name": "手机",
                                "avatar_url": "https://picx.zhimg.com/v2-78617daceedb9e7402d5cc1932f48dc6_720w.jpg?source=32738c0c"
                            }
                        ]
                    },
                    {
                        "type": "identity",
                        "description": "纽卡斯尔大学 理学硕士"
                    }
                ],
                "badge_v2": {
                    "title": "知乎十年新知答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "新知答主",
                            "description": "知乎十年新知答主",
                            "url": "https://zhuanlan.zhihu.com/p/344234033",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "纽卡斯尔大学 理学硕士",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "reward",
                            "detail_type": "zhihu_10years_answerer",
                            "title": "新知答主",
                            "description": "知乎十年新知答主",
                            "url": "https://zhuanlan.zhihu.com/p/344234033",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "编程等 5 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://pic1.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19554300",
                                    "token": "19554300",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554300",
                                    "name": "Linux",
                                    "avatar_path": "v2-4d682e48d948fcdf430d23d376934b8d",
                                    "avatar_url": "https://picx.zhimg.com/v2-4d682e48d948fcdf430d23d376934b8d_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19555634",
                                    "token": "19555634",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19555634",
                                    "name": "Android 开发",
                                    "avatar_path": "8c9ca8319",
                                    "avatar_url": "https://picx.zhimg.com/8c9ca8319_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19559604",
                                    "token": "19559604",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19559604",
                                    "name": "笔记本电脑",
                                    "avatar_path": "v2-0c57bd6c9d0df4d52184ae12f20f88b8",
                                    "avatar_url": "https://pic1.zhimg.com/v2-0c57bd6c9d0df4d52184ae12f20f88b8_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19551676",
                                    "token": "19551676",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19551676",
                                    "name": "手机",
                                    "avatar_path": "v2-78617daceedb9e7402d5cc1932f48dc6",
                                    "avatar_url": "https://picx.zhimg.com/v2-78617daceedb9e7402d5cc1932f48dc6_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "reward",
                            "detail_type": "super_activity",
                            "title": "社区成就",
                            "description": "2023 好物推荐官",
                            "url": "",
                            "sources": [
                                {
                                    "id": "25",
                                    "token": "",
                                    "type": "content_potential_category",
                                    "url": "",
                                    "name": "数码家电",
                                    "avatar_path": "",
                                    "avatar_url": "",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "纽卡斯尔大学 理学硕士",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pic1.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1337,
            "comment_count": 171,
            "thanks_count": 155,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"WQo1cvSt\">简单翻译一下：</p><p data-pid=\"itHTc4J-\">WXB=网信办</p><p data-pid=\"iG4FD9uV\">QL=权力</p><p data-pid=\"r33cXQFe\">DC=调查</p><p data-pid=\"vX1S9l-b\">scjdglj=市场监督管理局</p><p data-pid=\"whbWA4bR\">WF嫌y=违法 嫌疑</p><p data-pid=\"P_dWvxje\">治Aj=治安拘</p><p data-pid=\"r5uIImRu\">ZJ=政绩</p><p data-pid=\"pPR_9oTq\">ld=领导</p><p data-pid=\"P0kudPjd\">JSB=精神病</p><p data-pid=\"FVgskfvn\">其它应该都好理解吧。</p>",
            "excerpt": "简单翻译一下： WXB=网信办 QL=权力 DC=调查 scjdglj=市场监督管理局 WF嫌y=违法 嫌疑 治Aj=治安拘 ZJ=政绩 ld=领导 JSB=精神病 其它应该都好理解吧。",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjbud29CyDY0K8ukgIlCgk1OTA0OTQ0MTMSCjMwODIyNDczODcYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-06-20T15:28:12+08:00"
    },
    {
        "content": {
            "id": 635581239,
            "title": "全局缓存导致的 Node.js 线上内存泄漏",
            "type": "article",
            "excerpt_title": "背景M 同学反映自己负责的 Next.js 项目疑似内存泄漏, 临近 618 需要尽快解决! 通过查看 Easy-Monitor 上的「堆内存趋势」曲线 在一直上涨且不会下降就基本确定了是内存泄漏问题排查M 同学也迅速定位到了造成内存泄漏的 commit, 我仔细 review 了一下并没有发现全局变量缓存、闭包引用等高危操作 Easy-Monitor 下载快照 下载的两个快照要是同一个实例的同一个进程接着就只能从 Easy-Monitor 上间隔一段时间前后下载了两个堆快照…",
            "url": "https://zhuanlan.zhihu.com/p/635581239",
            "image_url": "https://picx.zhimg.com/v2-aa48aadd3ccbdb1c817248462190674b_r.jpg?source=172ae18b",
            "created": 1686201619,
            "updated": 1686202003,
            "author": {
                "id": "ad63395755f741aac01274fead4507f8",
                "url_token": "xiao-xiao-7-92-64",
                "name": "多小凯",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-e58da3a843838d7303f20aabaccf35d2_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-e58da3a843838d7303f20aabaccf35d2.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/ad63395755f741aac01274fead4507f8",
                "user_type": "people",
                "headline": "一个前端工程师",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1463406049
            },
            "comment_permission": "all",
            "content": "<h2>背景</h2><p data-pid=\"APDTjolt\">M 同学反映自己负责的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/vercel/next.js\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Next.js</a> 项目疑似内存泄漏, 临近 618 需要尽快解决! 通过查看 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/hyj1991/easy-monitor\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Easy-Monitor</a> 上的「堆内存趋势」曲线 在一直上涨且不会下降就基本确定了是内存泄漏</p><h2>问题排查</h2><p data-pid=\"Tnj4B2k8\">M 同学也迅速定位到了造成内存泄漏的 commit, 我仔细 review 了一下并没有发现全局变量缓存、闭包引用等高危操作</p><h3>Easy-Monitor 下载快照</h3><blockquote data-pid=\"1aqS6-dr\">   下载的两个快照要是同一个实例的同一个进程</blockquote><p data-pid=\"BI0y2gFo\">接着就只能从 Easy-Monitor 上间隔一段时间前后下载了两个堆快照，最后通过 Chrome Devtool Memory 面板的 Comparison 功能进行对比, 发现 <code>StyleRule</code> 对象净新增了 57042 个 ⚠️ !</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ebe19d0e949740dd595c4ac6d9bbafaf_b.jpg\" data-size=\"normal\" data-rawwidth=\"1614\" data-rawheight=\"431\" class=\"origin_image zh-lightbox-thumb\" width=\"1614\" data-original=\"https://pic4.zhimg.com/v2-ebe19d0e949740dd595c4ac6d9bbafaf_r.jpg\" data-original-token=\"v2-cf390ec51f2196178b12fb0d572e030f\"/><figcaption>image</figcaption></figure><blockquote data-pid=\"NjZF1uli\"> 这里的一个小技巧是不要总盯着碎片化的<code>(array)</code>、<code>Object</code>、<code>(string)</code>以及系统的<code>(system)</code>、<code>system / Context</code> 等对象的内存变化, 这些对象既不好定位又不容易看懂, 它们通常只是某个对象的属性值, 受其他对象的泄漏而增长可能性大<br/> 所有我们需要<b><i>优先关注 App 应用中使用到的对象</i></b>, 比如上图中只在该项目中出现的 <code>StyleRule</code> 对象</blockquote><h3>使用 devtoolx 分析</h3><p data-pid=\"mYxAo9Zv\">Chrome Devtool Memory 面板冗余信息多、可读性也较差, 推荐大家使用开源的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/noslate-project/devtoolx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">devtoolx</a> 进行下一步的分析</p><div class=\"highlight\"><pre><code class=\"language-bash\">npm install devtoolx -g\n\ndevtoolx -s &lt;heapsnapshot file&gt; <span class=\"o\">[</span>-p &lt;port&gt;<span class=\"o\">]</span></code></pre></div><p data-pid=\"-zmWGxry\">尴尬的是开始跑 devtoolx 命令时遇见了下面的报错 </p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7540c3a5d8440b713926015f6a5b961a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"787\" data-rawheight=\"137\" class=\"origin_image zh-lightbox-thumb\" width=\"787\" data-original=\"https://pic3.zhimg.com/v2-7540c3a5d8440b713926015f6a5b961a_r.jpg\" data-original-token=\"v2-8903434189188752447c4a36c4948f8e\"/></figure><p data-pid=\"IkB-jT8y\"> 好吧, 我还是使用 <a href=\"https://link.zhihu.com/?target=https%3A//lldb.llvm.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">lldb</a> 先定位 devtoolx 启动失败的问题, 结果发现通过 lldb 启动 devtoolx 又能够正常跑起来</p><p data-pid=\"ptCXFosP\">此时排除了 devtoolx 不能识别该 v8 版本的 .heapsnapshot 文件以及系统调用 api 兼容性问题（松了口气, 还是能用 devtoolx ~）</p><div class=\"highlight\"><pre><code class=\"language-bash\">lldb -- /usr/local/bin/node /usr/local/bin/devtoolx -s /Users/duoxiaokai/Downloads/u-b259269e-6bd4-4336-8fc6-f04478496a47-u-x-heapdump-27-20230606-738634.heapsnapshot</code></pre></div><p data-pid=\"jPyucTyu\">看了一下 devtoolx 的代码, 猜想可能是打开 .heapsnapshot 文件失败了, 于是增加了如下代码再编译运行日志显示 <code>ParseError: Operation not permitted</code></p><div class=\"highlight\"><pre><code class=\"language-diff\">std::ifstream jsonfile(parser-&gt;filename_);\n<span class=\"gi\">+    if (!jsonfile.is_open()) {\n</span><span class=\"gi\">+      std::cout &lt;&lt; &#34;\\nfailed to open &#34; &lt;&lt; parser-&gt;filename_ &lt;&lt; &#39;\\n&#39;;\n</span><span class=\"gi\">+      std::cerr &lt;&lt; &#34;ParseError: &#34; &lt;&lt; strerror(errno);\n</span><span class=\"gi\">+      std::exit(1);\n</span><span class=\"gi\">+      return;\n</span><span class=\"gi\">+    }\n</span><span class=\"gi\"></span>    json profile;\n    jsonfile &gt;&gt; profile;\n</code></pre></div><p data-pid=\"xBioMmvu\">所以把 .heapsnapshot 文件从 Downloads 目录移了出来就愉快的跑了起来, 上面的代码也提交了一个 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/noslate-project/devtoolx/pull/18/files\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">devtoolx/pull/18/</a>, 最后作者发布了 <code>devtoolx@1.0.2</code> 版本 ❤️ </p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c56da3347a7ca562c2b83f997ac9f4ca_b.jpg\" data-size=\"normal\" data-rawwidth=\"1477\" data-rawheight=\"703\" class=\"origin_image zh-lightbox-thumb\" width=\"1477\" data-original=\"https://pic3.zhimg.com/v2-c56da3347a7ca562c2b83f997ac9f4ca_r.jpg\" data-original-token=\"v2-956a94d1bf5eccf257b5c3ef392c9434\"/><figcaption>image</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a633d0dd3b7c5d8dab7ce521e6de863d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1300\" data-rawheight=\"639\" class=\"origin_image zh-lightbox-thumb\" width=\"1300\" data-original=\"https://pic2.zhimg.com/v2-a633d0dd3b7c5d8dab7ce521e6de863d_r.jpg\" data-original-token=\"v2-74270d07eb0eed4b2bf33401448c293c\"/><figcaption>image</figcaption></figure><p data-pid=\"LsQC4d_P\">回归正题, 通过 devtoolx 分别对两个快照分析发现了 </p><ol><li data-pid=\"vW7shsO1\">对象 <code>Object(674385)</code> 的内存由 1.34MB 涨到了 34.95 MB ⚠️, 一展开发现是 <code>StyleRule</code> 的父对象 </li><li data-pid=\"OwTzMArR\"><code>StyleRule</code> 对象的引用关系是 <code>StyleSheet.RuleList.xxx.StyleRule</code></li></ol><p data-pid=\"Z-Cln6Af\">此时我们可以看看 Chrome Devtool Memory 面板的 Summary 功能查看是否有更多 <code>Object(674385)</code> 对象的信息, 最终确认了 <code>StyleRule</code> 对象的引用关系是 <code>StyleSheet.RuleList.map.StyleRule</code> </p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2de85f7f51efae3515011ab9c84c9c78_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"448\" class=\"origin_image zh-lightbox-thumb\" width=\"1184\" data-original=\"https://pic1.zhimg.com/v2-2de85f7f51efae3515011ab9c84c9c78_r.jpg\" data-original-token=\"v2-247a98553cde87367d6339c93101ffe1\"/></figure><p data-pid=\"Mr8mdVuH\"> 接着使用 Chrome Devtool Memory 面板的 Comparison 功能查看发现 <code>StyleRule</code> 的父对象 <code>StyleSheet</code> 与 <code>RuleList</code> 并没有新增</p><h3>定位泄漏点</h3><p data-pid=\"u88mjDEe\">根据引用关系定位到了 npm 包 <a href=\"https://link.zhihu.com/?target=https%3A//cssinjs.org/%3Fv%3Dv10.10.0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">jss</a> 的代码, 我们缩小范围直击 <code>RuleList</code> 对象在何种情况会新增子对象 <code>StyleRule</code> 即可</p><p data-pid=\"vBMStesa\">于是乎发现 <code>RuleList</code> 对象的 register 函数每调用一次会在 <code>this.map</code> 对象上挂载一个 <code>StyleRule</code> 对象, 这妥妥的是缓存泄漏啊 ?  </p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-24f53d16db04b9b22fcdb6b61b820eb6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1143\" data-rawheight=\"430\" class=\"origin_image zh-lightbox-thumb\" width=\"1143\" data-original=\"https://pic3.zhimg.com/v2-24f53d16db04b9b22fcdb6b61b820eb6_r.jpg\" data-original-token=\"v2-4e2744fcf3f4c652b1034e3bec5952bc\"/></figure><p data-pid=\"9h_fZwcS\">当我本地运行该项目也是印证了 <code>Object.keys(this.map).length</code> 一直在增长</p><h2>问题分析</h2><p data-pid=\"o-yvAmYb\">你和我说一个较为流行的仓库 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/cssinjs/jss\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">cssinjs/jss</a> 会内存泄漏我是不太会相信, 至少可能性很小, 大概率还是业务项目的使用姿势有问题</p><p data-pid=\"Rp9jTdjh\">让我们看看官方给的 Server-Side Rendering 使用的 demo, demo 代码很容易猜想到该代码的目的, 即每一次调用 render 函数需要先 <code>new SheetsRegistry()</code>, 然后通过 <code>JssProvider</code> 传递给子孙组件进行依赖收集。renderToString 函数运行结束即收集到了运行到的组件需要的样式, 最后通过 <code>sheets.toString()</code> 给吐出来</p><blockquote data-pid=\"gp6tGsyk\"> 这个行为和 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/jamiebuilds/react-loadable%23picking-up-a-server-side-rendered-app-on-the-client\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">react-loadable</a> 收集动态模块一毛一样 ~</blockquote><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">renderToString</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-dom/server&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">JssProvider</span><span class=\"p\">,</span> <span class=\"nx\">SheetsRegistry</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react-jss&#39;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">Button</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;./Button&#39;</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">sheets</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">SheetsRegistry</span><span class=\"p\">()</span>\n\n  <span class=\"kr\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">renderToString</span><span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">JssProvider</span> <span class=\"nx\">registry</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">sheets</span><span class=\"p\">}</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">Button</span> <span class=\"o\">/&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/JssProvider&gt;</span>\n  <span class=\"p\">)</span>\n\n  <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span> <span class=\"o\">+</span>\n<span class=\"sb\">`&lt;!DOCTYPE html&gt;\n</span><span class=\"sb\">  &lt;html&gt;\n</span><span class=\"sb\">  &lt;head&gt;\n</span><span class=\"sb\">    &lt;meta charset=&#34;utf-8&#34;&gt;\n</span><span class=\"sb\">    &lt;title&gt;Server-side rendering with rehydration&lt;/title&gt;\n</span><span class=\"sb\">    &lt;link rel=&#34;stylesheet&#34; href=&#34;../../example.css&#34; /&gt;\n</span><span class=\"sb\">    &lt;style type=&#34;text/css&#34; id=&#34;server-side-styles&#34;&gt;\n</span><span class=\"sb\">      </span><span class=\"si\">${</span><span class=\"nx\">sheets</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"sb\">\n</span><span class=\"sb\">    &lt;/style&gt;\n</span><span class=\"sb\">  &lt;/head&gt;\n</span><span class=\"sb\">  &lt;body&gt;\n</span><span class=\"sb\">    &lt;a href=&#34;https://github.com/cssinjs/examples/tree/gh-pages/react-ssr&#34; title=&#34;View on Github&#34; class=&#34;github-fork-ribbon&#34; target=&#34;_blank&#34;&gt;View on Github&lt;/a&gt;\n</span><span class=\"sb\">    &lt;div id=&#34;app&#34;&gt;</span><span class=\"si\">${</span><span class=\"nx\">app</span><span class=\"si\">}</span><span class=\"sb\">&lt;/div&gt;\n</span><span class=\"sb\">    &lt;script src=&#34;./app.js&#34;&gt;&lt;/script&gt;\n</span><span class=\"sb\">  &lt;/body&gt;\n</span><span class=\"sb\">&lt;/html&gt;`</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"LaTS4RuN\">而 M 同学本次刚好用到了内部组件库二次封装的 jss 组件, node_modules 中相关的代码是这样</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">exports</span><span class=\"p\">.</span><span class=\"nx\">sheetsRegistry</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">jss_1</span><span class=\"p\">.</span><span class=\"nx\">SheetsRegistry</span><span class=\"p\">();</span>\n</code></pre></div><p data-pid=\"W3fdnXGk\">这样串联起来就能破案了。官方是希望每次请求都新 new 一个 <code>SheetsRegistry</code> 进行依赖收集, 在 render 函数结束 <code>SheetsRegistry</code> 对象出了作用域就被 GC 了。而二次封装的 jss 组件却单例化缓存了一个 <code>SheetsRegistry</code> 对象, 导致每个请求都是同一个 SheetsRegistry 对象在收集依赖且由于全局引用不会被释放造成了本次的内存泄漏</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0b740c92869858bb99af3b7b17a11185_b.jpg\" data-size=\"normal\" data-rawwidth=\"897\" data-rawheight=\"333\" class=\"origin_image zh-lightbox-thumb\" width=\"897\" data-original=\"https://pic2.zhimg.com/v2-0b740c92869858bb99af3b7b17a11185_r.jpg\" data-original-token=\"v2-5219ec21fd2af6268122c08816d7b030\"/><figcaption>image</figcaption></figure><blockquote data-pid=\"pJh1pzFF\">原文地址: </blockquote><a href=\"https://link.zhihu.com/?target=https%3A//github.com/xiaoxiaojx/blog/issues/60\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-957c3c675190c4c6b2233a8f70289fc3_qhd.jpg\" data-image-width=\"1200\" data-image-height=\"600\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">全局缓存导致的 Node.js 线上内存泄漏 · Issue #60 · xiaoxiaojx/blog</a><p></p>",
            "voteup_count": 30,
            "column": {
                "id": "c_1388777021389021184",
                "type": "column",
                "url_token": "c_1388777021389021184",
                "title": "前端 debug 日志",
                "url": "https://zhuanlan.zhihu.com/c_1388777021389021184",
                "created": 1623890244,
                "updated": 1641486960,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 2
        },
        "created": "2023-06-08T13:20:19+08:00"
    },
    {
        "content": {
            "id": 359265292,
            "title": "Ant Design 4.0 的一些杂事儿 - maxLength 篇",
            "type": "article",
            "excerpt_title": "Ant Design 4.0 的一些杂事儿 - Overflow 篇 Ant Design 4.0 的一些杂事儿 - VirtualList 篇 Ant Design 4.0 的一些杂事儿 - Space 篇 Ant Design 4.0 的一些杂事儿 - CI 篇 Ant Design 4.0 的一些杂事儿 - Table 篇 Ant Design 4.0 的一些杂事儿 - Form 篇 Ant Design 4.0 的一些杂事儿 - Select 篇 开发过程中，不同组件对于同一种边界情况有时候会出现差别。这些并非有意为之，就好比盲人摸象，似乎从细节看每个都很合理，但是脱离出…",
            "url": "https://zhuanlan.zhihu.com/p/359265292",
            "image_url": "",
            "created": 1616505827,
            "updated": 1616563253,
            "author": {
                "id": "79a089f95502a153ab97ff037ee90885",
                "url_token": "smith-jiang",
                "name": "二货",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/19b5911fa_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/19b5911fa.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/79a089f95502a153ab97ff037ee90885",
                "user_type": "people",
                "headline": "《豆酱》漫画作者",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<ul><li data-pid=\"r3S_74HE\"><a href=\"https://zhuanlan.zhihu.com/p/340673293\" class=\"internal\">Ant Design 4.0 的一些杂事儿 - Overflow 篇</a></li><li data-pid=\"zsdvXUGM\"><a href=\"https://zhuanlan.zhihu.com/p/237996796\" class=\"internal\">Ant Design 4.0 的一些杂事儿 - VirtualList 篇</a></li><li data-pid=\"H0BT4mNE\"><a href=\"https://zhuanlan.zhihu.com/p/135446399\" class=\"internal\">Ant Design 4.0 的一些杂事儿 - Space 篇</a></li><li data-pid=\"KbvAnB5c\"><a href=\"https://zhuanlan.zhihu.com/p/113537427\" class=\"internal\">Ant Design 4.0 的一些杂事儿 - CI 篇</a></li><li data-pid=\"X-ctIOCN\"><a href=\"https://zhuanlan.zhihu.com/p/102037418\" class=\"internal\">Ant Design 4.0 的一些杂事儿 - Table 篇</a></li><li data-pid=\"2b7NJyRO\"><a href=\"https://zhuanlan.zhihu.com/p/102057196\" class=\"internal\">Ant Design 4.0 的一些杂事儿 - Form 篇</a></li><li data-pid=\"NWDmyWti\"><a href=\"https://zhuanlan.zhihu.com/p/102555441\" class=\"internal\">Ant Design 4.0 的一些杂事儿 - Select 篇</a></li></ul><p data-pid=\"WwUNkQzl\">开发过程中，不同组件对于同一种边界情况有时候会出现差别。这些并非有意为之，就好比盲人摸象，似乎从细节看每个都很合理，但是脱离出来又会发现很多矛盾的地方。</p><p data-pid=\"YfzVueCB\">今天，我们就从一个属性 <code>maxLength</code> 说起。看看我们在这个属性上，到底遇到了多少个坑。</p><h3>maxLength 是不是 single source of truth</h3><p data-pid=\"UwDZ3dxg\">第一反应，我们总是会认为当配置 <code>maxLength</code>  时，组件值展示应该按照这个值来截断。但是在业务中，我们发现这会导致展示值和实际值并不一致。举个例子，一个表单存在一个 TextArea，它设置了 <code>maxLength</code> 为 <code>10</code> ，但是从后来获取的初始值超过了这个数字：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"p\">&lt;</span><span class=\"nt\">Form.Item</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#34;comment&#34;</span> <span class=\"na\">initialValue</span><span class=\"o\">=</span><span class=\"s\">&#34;Hello World&#34;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">TextArea</span> <span class=\"na\">maxLength</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"mi\">5</span><span class=\"p\">}</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">Form.Item</span><span class=\"p\">&gt;</span>\n</code></pre></div><p data-pid=\"V06LxQzs\">直觉上看，TextArea 很明显应该截取后展示为 <code>Hello</code> ：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9327ad535bb535a23d7fd850241d3f13_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"140\" class=\"origin_image zh-lightbox-thumb\" width=\"830\" data-original=\"https://pic4.zhimg.com/v2-9327ad535bb535a23d7fd850241d3f13_r.jpg\" data-original-token=\"v2-e4160cc4d89a219cc63b8d4f3e4f88f6\"/></figure><p data-pid=\"78UiIoI7\">然而，当用户不修改该文本框时。Form 内 <code>comment</code> 的值将始终为 <code>Hello World</code> ，提交时就会把错误的值发送出去：</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n  <span class=\"nt\">&#34;comment&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;Hello World&#34;</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"ZG3RJrfF\"> 我们也遇到了很多相关问题：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9d2588f6281d6bf7846d7a1a7ec8f021_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1460\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"1460\" data-original=\"https://pic2.zhimg.com/v2-9d2588f6281d6bf7846d7a1a7ec8f021_r.jpg\" data-original-token=\"v2-fb04b0769eb2b00c7ed09bbd467f9a72\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>原生行为</h3><p data-pid=\"icfuLdDf\">综上所述，在受控状态下。组件展示值应该跟随受控值，而非截取值。我们测试了一下原生组件的行为，发现是相同的设计：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b937af5039a04f16d5b932c3afdaffc7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"762\" data-rawheight=\"446\" class=\"origin_image zh-lightbox-thumb\" width=\"762\" data-original=\"https://pic4.zhimg.com/v2-b937af5039a04f16d5b932c3afdaffc7_r.jpg\" data-original-token=\"v2-925569356649d464838ca1e2caadb64e\"/></figure><p data-pid=\"wv4Dk5py\">（题外话：使用原生表单时，如果 textarea 设置了 <code>maxlength</code> 且值超出了宽度，表单会无法提交并提示 <code>too long</code>  的错误。）</p><p data-pid=\"9ULOb0Uk\">因此， <code>maxLength</code> 的约束逻辑也很简单：</p><ul><li data-pid=\"xwXd6FxF\">受控时，不生效</li><li data-pid=\"I14AO3Rj\">非受控时，按照 <code>maxLength</code> 约束展示值</li></ul><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">setValue</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">mergedValue</span> <span class=\"o\">=</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">??</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">maxLength</span><span class=\"p\">);</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">textarea</span>\n  <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">mergedValue</span><span class=\"p\">}</span>\n  <span class=\"na\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">triggerValue</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">maxLength</span><span class=\"p\">);</span>\n    <span class=\"nx\">setValue</span><span class=\"p\">(</span><span class=\"nx\">triggerValue</span><span class=\"p\">);</span>\n    <span class=\"nx\">onChange</span><span class=\"o\">?</span><span class=\"p\">.(</span><span class=\"nx\">triggerValue</span><span class=\"p\">);</span>\n  <span class=\"p\">}}</span>\n<span class=\"p\">/&gt;</span>\n</code></pre></div><h3>emoji 之熵</h3><p data-pid=\"nJs0urQ4\">上述代码看起来一帆风顺，但是其实并不是所有字符的 length 都为 1。emoji 就是如此：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/ant-design/ant-design/issues/27612\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-d05ae6668404bf235c88add42fcb38a0_180x120.jpg\" data-image-width=\"1280\" data-image-height=\"628\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">textarea最大长度截取问题 · Issue #27612 · ant-design/ant-design</a><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-aee96660202f6049bf9ad0a2975466cd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1852\" data-rawheight=\"1288\" class=\"origin_image zh-lightbox-thumb\" width=\"1852\" data-original=\"https://pic2.zhimg.com/v2-aee96660202f6049bf9ad0a2975466cd_r.jpg\" data-original-token=\"v2-4905d29a89e3072a3749d4f53a8a35db\"/></figure><p data-pid=\"w2vZS9CA\">当用户传入的字符串最后一个为 emoji 且正好超出 <code>maxLength</code> 时，截取就会导致乱码。比如把 <code> </code> 一切为二变成  <code>?</code> 。为了解决这个问题，需要将 emoji 作为一个字符来处理。好在 js 的 <code>Array.from</code> 正好可以满足该需求：</p><div class=\"highlight\"><pre><code class=\"language-text\">Array.from(&#39; light&#39;);\n\n// [&#34; &#34;, &#34;l&#34;, &#34;i&#34;, &#34;g&#34;, &#34;h&#34;, &#34;t&#34;]</code></pre></div><p data-pid=\"GM0_lExN\"> 因此，我们的截取逻辑改如下即可：</p><div class=\"highlight\"><pre><code class=\"language-text\">const triggerValue = [...e.target.value].slice(0, maxLength).join(&#39;&#39;);</code></pre></div><h3>输入法之熵</h3><p data-pid=\"oXXxEp6l\">在搞定 emoji 后，一切仍然未完。当字符数接近 <code>maxLength</code> 时使用输入法时会遇到截取问题：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/ant-design/ant-design/issues/28940\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/ant-design/a</span><span class=\"invisible\">nt-design/issues/28940</span><span class=\"ellipsis\"></span></a><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d1385216707c24a67ff44b74a0ee7b9d_b.gif\" data-size=\"normal\" data-rawwidth=\"388\" data-rawheight=\"203\" data-thumbnail=\"https://pic2.zhimg.com/v2-d1385216707c24a67ff44b74a0ee7b9d_b.jpg\" class=\"content_image\" width=\"388\" data-original-token=\"v2-d1385216707c24a67ff44b74a0ee7b9d\"/><figcaption>上面为 TextArea，下面为原生 textarea</figcaption></figure><p data-pid=\"tWe9FU1Z\">这是由于在输入过程中，总体字符数已经到达了 <code>maxLength</code> 限制，因而被截取导致 textarea 的 <code>value</code> 被强制设置成了中间状态。比如 <code>maxLength</code> 为 <code>1</code> ，而我们需要通过输入法输入 <code>你</code> （ni）：</p><ol><li data-pid=\"_q0zvV9O\"><code>n</code> ：符合长度，触发 <code>onChange(&#39;n&#39;)</code> </li><li data-pid=\"G5ATu_iD\"><code>i</code> : <code>value</code> 为 <code>ni</code>，超出长度 <code>1</code> 。被截取为 <code>z</code> 并触发 <code>onChange(&#39;n&#39;)</code> </li><li data-pid=\"x8lmQ0ia\">textarea 强制赋值 <code>n</code> ，输入法状态丢失 </li></ol><p data-pid=\"JY3OFjQT\">为了解决输入法问题，我们需要暂时允许超出 <code>maxLength</code> 的情况。因而我们监听了 <code>onCompositionXXX</code> 事件，当正在使用输入法时暂时不做截取操作：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"nx\">setValue</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">compositing</span><span class=\"p\">,</span> <span class=\"nx\">setCompositing</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">mergedValue</span> <span class=\"o\">=</span> <span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">??</span> <span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">maxLength</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">triggerChange</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">compositing</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">triggerValue</span> <span class=\"o\">=</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">compositing</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">triggerValue</span> <span class=\"o\">=</span> <span class=\"p\">[...</span><span class=\"nx\">triggerValue</span><span class=\"p\">].</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nx\">maxLength</span><span class=\"p\">).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">setValue</span><span class=\"p\">(</span><span class=\"nx\">triggerValue</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">mergedValue</span> <span class=\"o\">!==</span> <span class=\"nx\">triggerValue</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">onChange</span><span class=\"o\">?</span><span class=\"p\">.(</span><span class=\"nx\">triggerValue</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">textarea</span>\n  <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">mergedValue</span><span class=\"p\">}</span>\n  <span class=\"na\">onCompositionStart</span><span class=\"o\">=</span><span class=\"p\">{()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setComposting</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)}</span>\n  <span class=\"na\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">triggerChange</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">compositing</span><span class=\"p\">);</span>\n  <span class=\"p\">}}</span>\n  <span class=\"na\">onCompositionEnd</span><span class=\"o\">=</span><span class=\"p\">{(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setComposting</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"nx\">triggerChange</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n  <span class=\"p\">}}</span>\n<span class=\"p\">/&gt;</span>\n</code></pre></div><p data-pid=\"FxHswCQP\"> 完整的输入流程如下：</p><figure data-size=\"small\"><img src=\"https://pic2.zhimg.com/v2-3251632e0c35409388332ab3fda2d5f1_b.jpg\" data-size=\"small\" data-rawwidth=\"698\" data-rawheight=\"1178\" class=\"origin_image zh-lightbox-thumb\" width=\"698\" data-original=\"https://pic2.zhimg.com/v2-3251632e0c35409388332ab3fda2d5f1_r.jpg\" data-original-token=\"v2-03ef45bb58b09f562e07199daae1e6cb\"/><figcaption>渲染</figcaption></figure><figure data-size=\"small\"><img src=\"https://pic3.zhimg.com/v2-80f45a6b1cebf5ddeb9d3a6efd821ce6_b.jpg\" data-size=\"small\" data-rawwidth=\"792\" data-rawheight=\"866\" class=\"origin_image zh-lightbox-thumb\" width=\"792\" data-original=\"https://pic3.zhimg.com/v2-80f45a6b1cebf5ddeb9d3a6efd821ce6_r.jpg\" data-original-token=\"v2-585670c444672116943a3706f73b1824\"/><figcaption>输入</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>完成</h3><p data-pid=\"wUky6MUX\">以上是我们对 TextArea 的 <code>maxLength</code> 处理逻辑的简单描述，antd 中由于我们返回的是 event 对象，因而对 React 的 event 做了一些额外的注入操作以与原生事件保持相同行为。感兴趣的同学可以直接到 github 阅读相关源码进行了解，此处不再详述。</p><p data-pid=\"ix5_qkA5\">除了 TextArea 意外，我们也对 InputNumber 进行了类似的处理。现在在受控模式下，InputNumber 的 <code>value</code> 在超出 <code>max</code> 和 <code>min</code> 范围时也会按照受控显示以防止展示值与实际值不一致的问题。此外，我们还做了额外的样式处理来表示超出范围的数值展示：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1a3a03869d7270eb79550afe432b9f65_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1246\" data-rawheight=\"472\" class=\"origin_image zh-lightbox-thumb\" width=\"1246\" data-original=\"https://pic2.zhimg.com/v2-1a3a03869d7270eb79550afe432b9f65_r.jpg\" data-original-token=\"v2-6efdb6329b550e2d562c3f1bffdd6226\"/></figure><p data-pid=\"b6sqqTAQ\">最后，目前我们体验技术部正在招人。如果你对前端充满热情，对细节锱铢必较，欢迎来私信勾搭哦 ~</p>",
            "voteup_count": 62,
            "column": {
                "id": "antdesign",
                "type": "column",
                "url_token": "antdesign",
                "title": "原 Ant Design",
                "url": "https://zhuanlan.zhihu.com/antdesign",
                "created": 1509420256,
                "updated": 1669952595,
                "description": "Ant Design 是一个致力于提升「用户」和「设计者」使用体验的企业级设计体系，利用统一的设计规范、前端实现、设计/研发工具链对产品研发赋能，全面提升企业级产品的使用体验和研发效率。",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 3
        },
        "created": "2021-03-23T21:23:47+08:00"
    },
    {
        "content": {
            "id": 3069873145,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/606122248/answer/3069873145",
            "created_time": 1686537988,
            "updated_time": 1686537988,
            "question": {
                "type": "question",
                "id": 606122248,
                "title": "韩国房价跌穿，有区域成交量暴跌 70%，大量房东因还不起钱紧急出逃，韩国楼市怎么了？接下来会如何发展？",
                "question_type": "normal",
                "created": 1686534036,
                "updated_time": 1686534036,
                "url": "https://www.zhihu.com/question/606122248",
                "is_deleted": false
            },
            "author": {
                "id": "86b4e03e7fbbe1c4adf161f86b47b088",
                "url_token": "shen-chen-7-10",
                "name": "阳光下的沈同学",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-eb04c3fa48ff3b8dbc2cafe8e7d4f353_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-eb04c3fa48ff3b8dbc2cafe8e7d4f353.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/86b4e03e7fbbe1c4adf161f86b47b088",
                "user_type": "people",
                "headline": "感恩每个朋友的点赞！祝大家健康  快乐  自由  赚钱～",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-0179d12c4affda6bd732c9c7ff01abd4_r.png",
                        "night_mode_url": "https://picx.zhimg.com/v2-7ea7f8d8e8b268e3e6502abe8f11d5d7.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19552981",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19552981",
                                "name": "经济",
                                "avatar_url": "https://pica.zhimg.com/v2-671059a6d5bf2ca92a657a5df5ffc5bb_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "经济话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "经济话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19552981",
                                    "token": "19552981",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552981",
                                    "name": "经济",
                                    "avatar_path": "v2-671059a6d5bf2ca92a657a5df5ffc5bb",
                                    "avatar_url": "https://pica.zhimg.com/v2-671059a6d5bf2ca92a657a5df5ffc5bb_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "经济话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19552981",
                                    "token": "19552981",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552981",
                                    "name": "经济",
                                    "avatar_path": "v2-671059a6d5bf2ca92a657a5df5ffc5bb",
                                    "avatar_url": "https://pica.zhimg.com/v2-671059a6d5bf2ca92a657a5df5ffc5bb_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "https://picx.zhimg.com/v2-90fca6178be97c82bfc67b46297eb2d7_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1873,
            "comment_count": 620,
            "thanks_count": 329,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "need_payment",
            "content": "<p data-pid=\"3C9IQYE4\"><b>为什么不提韩国房价最近5年平均涨幅80%？</b></p><p data-pid=\"g2sWI0Ib\">大涨之后有了泡沫必然大跌，这个是正常的周期规律</p><p data-pid=\"x_H8cfPM\">韩国的人口又跟不上，经济也不怎么样，房价还大涨，这么大的泡沫，这不就是注定了要崩盘吗？</p><p data-pid=\"f9noKmV8\">首尔房价暴跌30%，部分区域房价跌到40%，银行断供数百万人</p><p data-pid=\"tz_G4woI\">这些都是房价泡沫带来的恶果，本来就是莫名其妙没有基本面支撑的大涨</p><p data-pid=\"de_RY3tA\">能高位不跌才是神奇的事情，不是特别的调控几乎不可能</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"dqj_OtG4\"><b>因为韩国认为“发展房地产行业对出口导向的国家没有帮助，所以限制银行为房地产行业提供贷款”</b></p><p data-pid=\"-H7xPtLi\">韩国人自己搞什么“全租房”，你银行不借给我钱买房子，租客和房东就私下搞一种协议</p><p data-pid=\"dT_F8Wn2\">房东相当于把房子抵押给租客获得一笔钱去继续买房子</p><p data-pid=\"NM5jov5b\">租客给房东房价的50%-80%钱，然后房东免费给你房子住2年，两年以后钱还给你，你还房子</p><p data-pid=\"Dq2q8S1I\">房东拿着这些钱继续买很多房子，相当于次贷危机那种玩法，一旦资金量断裂就完蛋</p><p data-pid=\"ypLOKWNg\">房东拿着人家给的这笔钱，又买几套新房子，再继续这样搞钱，再继续买十件套新房子，再继续搞钱</p><p data-pid=\"ANiMvcHA\">相当于一套房子可以用这个方法搞到十几套房子，多的可能上百套</p><p data-pid=\"Fb4F8CTO\">那不就是韩国的房子都被少数人垄断吗？</p><p data-pid=\"kBkYmUZq\">这种左脚踩右脚的方法，都是少数人在买房子，最终没有人接盘，房价肯定大跌</p><figure data-size=\"small\"><img src=\"https://picx.zhimg.com/50/v2-fc62c4054acce3935ba1cf1633d2d6e3_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"3000\" data-rawheight=\"1800\" data-original-token=\"v2-90fca6178be97c82bfc67b46297eb2d7\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-cf6152872fbf7556a437fc1b2edc7f52_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"3000\" data-original=\"https://picx.zhimg.com/v2-fc62c4054acce3935ba1cf1633d2d6e3_r.jpg?source=2c26e567\"/></figure><p data-pid=\"4VZCwnsv\"><b>然后韩国又开始加息，不跟着美国加息货币就会大幅贬值，这一加息租客觉得不划算了，房东资金压力也大</b></p><p data-pid=\"lRRrg4LU\">很多资金链断裂的房东就跑路了，就留下很多租客崩溃</p><p data-pid=\"yW11VpVd\">其实租客也是想占小便宜，因为他们算了一下，觉得2年的房租还是没有银行利息高，觉得划得来，才会这样做</p><p data-pid=\"P_BMyl1A\">因为他们如果要租房子，2年的房租可能要10万，但是他们去银行借一笔钱给房东，利息可能就3-5万</p><p data-pid=\"2TbiELZT\">就是这个差价让他们觉得划得来，现在开始加息，这一切都变了，玩法完全不一样了，所以房价扛不住开始大跌</p><p data-pid=\"YU-lPS3z\">就是这样搞，导致首尔的房价最近5年涨了80%，核心地区相当于人民币15万一平</p><figure data-size=\"small\"><img src=\"https://picx.zhimg.com/50/v2-51ff5d82baf5aead8be89cd4b9beeba8_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"2000\" data-rawheight=\"2667\" data-original-token=\"v2-01ff7827133d86d91699cee886f7dd93\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-b84604967d67b14709d2e40e9b9fe0e2_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pica.zhimg.com/v2-51ff5d82baf5aead8be89cd4b9beeba8_r.jpg?source=2c26e567\"/></figure><p data-pid=\"nsLg_I_S\"><b>这种玩法不就相当于加杠杆炒房？</b></p><p data-pid=\"CuD3GGqP\">而且房东最后拿到一大笔钱直接润了，这些租客也没有办法，这些房子也不是他们的，而是房东自己买的</p><p data-pid=\"IsEJWZFI\">房东断供了，相当于房子是银行的，租客什么都拿不到</p><p data-pid=\"IgJSlH9X\">去年就有7千亿韩元这种房东跑路的事情，今年可能接近2万亿韩元</p><p data-pid=\"Br30rHW6\">连锁反应已经开始</p><p data-pid=\"2daN3C5d\">房东根本不知道去了哪里</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"9YtTp1mP\"><b>韩国房价必须跌到匹配目前的经济基本面，并且这些雷出清以后才会止跌</b></p><p data-pid=\"NQCzIB51\">首尔这个地方还是非常非常核心的，泡沫只要出清以后问题不大，关键是之前炒作价格太高，现在需要挤泡沫</p><p data-pid=\"Mm8-5Ezj\">房价问题不是最大的问题，贵了跌回来就好了</p><p data-pid=\"KdY22NDn\">关键是怎么多被坑的租客可能一辈子都搭进去了，一直没办法翻身</p>",
            "excerpt": "为什么不提韩国房价最近5年平均涨幅80%？大涨之后有了泡沫必然大跌，这个是正常的周期规律 韩国的人口又跟不上，经济也不怎么样，房价还大涨，这么大的泡沫，这不就是注定了要崩盘吗？ 首尔房价暴跌30%，部分区域房价跌到40%，银行断供数百万人 这些都是房价泡沫带来的恶果，本来就是莫名其妙没有基本面支撑的大涨 能高位不跌才是神奇的事情，不是特别的调控几乎不可能 因为韩国认为“发展房地产行业对出口导向的国家没有帮助，…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 2,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-90fca6178be97c82bfc67b46297eb2d7_720w.jpg?source=7e7ef6e2",
                        "width": 3000,
                        "height": 1800,
                        "token": "v2-90fca6178be97c82bfc67b46297eb2d7",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-01ff7827133d86d91699cee886f7dd93_720w.jpg?source=7e7ef6e2",
                        "width": 2000,
                        "height": 2667,
                        "token": "v2-01ff7827133d86d91699cee886f7dd93",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxj5l+q3CyCB6Z4ukgIlCgk1ODgyNDM3MjUSCjMwNjk4NzMxNDUYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-06-12T10:46:28+08:00"
    },
    {
        "content": {
            "id": 3020784980,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/492545174/answer/3020784980",
            "created_time": 1683650317,
            "updated_time": 1683650317,
            "question": {
                "type": "question",
                "id": 492545174,
                "title": "如果让你重新开始学计算机，你的学习路线会怎么选择?",
                "question_type": "normal",
                "created": 1634273458,
                "updated_time": 1666963613,
                "url": "https://www.zhihu.com/question/492545174",
                "is_deleted": false
            },
            "author": {
                "id": "89339def67c6d8ede01425b9b72b2cb4",
                "url_token": "wzporz",
                "name": "wzporz",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-22523fa881322bcb98f5a06cf9f2cf03_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-22523fa881322bcb98f5a06cf9f2cf03.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/89339def67c6d8ede01425b9b72b2cb4",
                "user_type": "people",
                "headline": "一个废物 想有学上",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1634562581
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 799,
            "comment_count": 20,
            "thanks_count": 442,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"AnCW77Pa\">如果还没有人推荐<a href=\"https://link.zhihu.com/?target=https%3A//csdiy.wiki/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CS自学指南 (csdiy.wiki)</a></p><p data-pid=\"mw-lp1gI\">那么我来推荐。</p><p data-pid=\"wK6O95Bz\">以下是原文</p><hr/><h2>梦开始的地方 —— CS61A</h2><p data-pid=\"RnXQdtsn\">大一入学时我是一个对计算机一无所知的小白，装了几十个 G 的 Visual Studio 天天和 OJ 你死我活。凭着高中的数学底子我数学课学得还不错，但在专业课上对竞赛大佬只有仰望。提到编程我只会打开那笨重的 IDE，新建一个我也不知道具体是干啥的命令行项目，然后就是 <code>cin</code>, <code>cout</code>, <code>for</code> 循环，然后 CE, RE, WA 循环。当时的我就处在一种拼命想学好但不知道怎么学，课上认真听讲但题还不会做，课后做作业完全是用时间和它硬耗的痛苦状态。我至今电脑里还存着自己大一上学期计算概论大作业的源代码 —— 一个 1200 行的 C++ 文件，没有头文件、没有类、没有封装、没有 unit test、没有 Makefile、没有 Git，唯一的优点是它确实能跑，缺点是“能跑”的补集。我一度怀疑我是不是不适合学计算机，因为童年对于极客的所有想象，已经被我第一个学期的体验彻底粉碎了。</p><p data-pid=\"g-Oy0AgB\">这一切的转机发生在我大一的寒假，我心血来潮想学习 Python。无意间看到知乎有人推荐了 CS61A 这门课，说是 UC Berkeley 的大一入门课程，讲的就是 Python。我永远不会忘记那一天，打开 <a href=\"https://link.zhihu.com/?target=https%3A//cs61a.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CS61A</a> 课程网站的那个瞬间，就像哥伦布发现了新大陆一样，我开启了新世界的大门。</p><p data-pid=\"ny9nyUjM\">我一口气 3 个星期上完了这门课，它让我第一次感觉到原来 CS 可以学得如此充实而有趣，原来这世上竟有如此精华的课程。</p><p data-pid=\"bbKxeTuu\">为避免有崇洋媚外之嫌，我单纯从一个学生的视角来讲讲自学 CS61A 的体验：</p><ul><li data-pid=\"VbdMfoLV\">独立搭建的课程网站: 一个网站将所有课程资源整合一体，条理分明的课程 schedule、所有 slides, hw, discussion 的文件链接、详细明确的课程给分说明、历年的考试题与答案。这样一个网站抛开美观程度不谈，既方便学生，也让资源公正透明。</li><li data-pid=\"ftlUH59T\">课程教授亲自编写的教材：CS61A 这门课的开课老师将MIT的经典教材 <i>Structure and Interpretation of Computer Programs</i> (SICP) 用Python这门语言进行改编（原教材基于 Scheme 语言），保证了课堂内容与教材内容的一致性，同时补充了更多细节，可以说诚意满满。而且全书开源，可以直接线上阅读。</li><li data-pid=\"euySwh2Y\">丰富到让人眼花缭乱的课程作业：14 个 lab 巩固随堂知识点，10 个 homework，还有 4 个代码量均上千行的 project。与大家熟悉的 OJ 和 Word 文档式的作业不同，所有作业均有完善的代码框架，保姆级的作业说明。每个 Project 都有详尽的 handout 文档、全自动的评分脚本。CS61A 甚至专门开发了一个<a href=\"https://link.zhihu.com/?target=https%3A//okpy.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">自动化的作业提交评分系统</a>（据说还发了论文）。当然，有人会说“一个 project 几千行代码大部分都是助教帮你写好的，你还能学到啥？”。此言差矣，作为一个刚刚接触计算机，连安装 Python 都磕磕绊绊的小白来说，这样完善的代码框架既可以让你专注于巩固课堂上学习到的核心知识点，又能有“我才学了一个月就能做一个小游戏了！”的成就感，还能有机会阅读学习别人高质量的代码，从而为自己所用。我觉得在低年级，这种代码框架可以说百利而无一害。唯一的害也许是苦了老师和助教，因为开发这样的作业可想而知需要相当的时间投入。</li><li data-pid=\"DTN9l_4r\">每周 Discussion 讨论课，助教会讲解知识难点和考试例题：类似于北京大学 ICS 的小班研讨，但习题全部用 LaTeX 撰写，相当规范且会明确给出 solution。</li></ul><p data-pid=\"e6FBs8kP\">这样的课程，你完全不需要任何计算机的基础，你只需要努力、认真、花时间就够了。此前那种有劲没处使的感觉，那种付出再多时间却得不到回报的感觉，从此烟消云散。这太适合我了，我从此爱上了自学。</p><p data-pid=\"Q5Vv3i_I\">试想如果有人能把艰深的知识点嚼碎嚼烂，用生动直白的方式呈现给你，还有那么多听起来就很 fancy，种类繁多的 project 来巩固你的理论知识，你会觉得他们真的是在倾尽全力想方设法地让你完全掌握这门课，你会觉得不学好它简直是对这些课程建设者的侮辱。</p><p data-pid=\"9RoROxO-\">如果你觉得我在夸大其词，那么不妨从 <a href=\"https://link.zhihu.com/?target=https%3A//cs61a.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CS61A</a> 开始，因为它是我的梦开始的地方。</p><h2>为什么写这本书</h2><p data-pid=\"Wy-D2HQl\">在我2020年秋季学期担任《深入理解计算机系统》（CSAPP）这门课的助教时，我已经自学一年多了。这一年多来我无比享受这种自学模式，为了分享这种快乐，我为自己的小班同学做过一个 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/PKUFlyingPig/Self-learning-Computer-Science\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CS自学资料整理仓库</a>。当时纯粹是心血来潮，因为我也不敢公然鼓励大家翘课自学。</p><p data-pid=\"qV5kNWQp\">但随着又一年时间的维护，这个仓库的内容已经相当丰富，基本覆盖了计科、智能系、软工系的绝大多数课程，我也为每个课程都建了各自的 GitHub 仓库，汇总我用到的自学资料以及作业实现。</p><p data-pid=\"5HMWDKBh\">直到大四开始凑学分毕业的时候，我打开自己的培养方案，我发现它已经是我这个自学仓库的子集了，而这距离我开始自学也才两年半而已。于是，一个大胆的想法在我脑海中浮现：也许，我可以打造一个自学式的培养方案，把我这三年自学经历中遇到的坑、走过的路记录下来，以期能为后来的学弟学妹们贡献自己的一份微薄之力。</p><p data-pid=\"Bl781uFt\">如果大家可以在三年不到的时间里就能建立起整座CS的基础大厦，能有相对扎实的数学功底和代码能力，经历过数十个千行代码量的 Project 的洗礼，掌握至少 C/C++/Java/JS/Python/Go/Rust 等主流语言，对算法、电路、体系、网络、操统、编译、人工智能、机器学习、计算机视觉、自然语言处理、强化学习、密码学、信息论、博弈论、数值分析、统计学、分布式、数据库、图形学、Web开发、云服务、超算等等方面均有涉猎。我想，你将有足够的底气和自信选择自己感兴趣的方向，无论是就业还是科研，你都将有相当的竞争力。</p><p data-pid=\"le_b20MK\">因为我坚信，既然你能坚持听我 BB 到这里，你一定不缺学好 CS 的能力，你只是没有一个好的老师，给你讲一门好的课程。而我，将力图根据我三年的体验，为你挑选这样的课程。</p><h2>自学的好处</h2><p data-pid=\"R5wyo_P0\">对我来说，自学最大的好处就在于可以完全根据自己的进度来调整学习速度。对于一些疑难知识点，我可以反复回看视频，在网上谷歌相关的内容，上 StackOverflow 提问题，直到完全将它弄明白。而对于自己掌握得相对较快的内容，则可以两倍速甚至三倍速略过。</p><p data-pid=\"vMFrGse_\">自学的另一大好处就是博采众长。计算机系的几大核心课程：体系、网络、操统、编译，每一门我基本都上过不同大学的课程，不同的教材、不同的知识点侧重、不同的 project 将会极大丰富你的视野，也会让你理解错误的一些内容得到及时纠正。</p><p data-pid=\"C8xxPhPM\">自学的第三个好处是时间自由，具体原因省略。</p><h2>自学的坏处</h2><p data-pid=\"vqB8rb1x\">当然，作为 CS 自学主义的忠实拥趸，我不得不承认自学也有它的坏处。</p><p data-pid=\"aHf0SN3b\">第一就是交流沟通的不便。我其实是一个很热衷于提问的人，对于所有没有弄明白的点，我都喜欢穷追到底。但当你面对着屏幕听到老师讲了一个你没明白的知识点的时候，你无法顺着网线到另一端向老师问个明白。我努力通过独立思考和善用 Google 来缓解这一点，但是，如果能有几个志同道合的伙伴结伴自学，那将是极好的。关于交流群的建立，大家可以参考仓库 <code>README</code> 中的教程。</p><p data-pid=\"sTPwumLE\">第二就是这些自学的课程基本都是英文的。从视频到slides到作业全是英文，所以有一定的门槛。不过我觉得这个挑战如果你克服了的话对你是极为有利的。因为在当下，虽然我很不情愿，但也不得不承认，在计算机领域，很多优质的文档、论坛、网站都是全英文的。养成英文阅读的习惯，在赤旗插遍世界之前，还是有一定好处的（狗头保命）。</p><p data-pid=\"F3IwriKR\">第三，也是我觉得最困难的一点，就是自律。因为没有 DDL 有时候真的是一件可怕的事情，特别是随着学习的深入，国外的很多课程是相当虐的。你得有足够的驱动力强迫自己静下心来，阅读几十页的 Project Handout，理解上千行的代码框架，忍受数个小时的 debug 时光。而这一切，没有学分，没有绩点，没有老师，没有同学，只有一个信念 —— 你在变强。</p><h2>这本书适合谁</h2><p data-pid=\"2CkxTV8l\">正如我在前言里说的，任何有志于自学计算机的朋友都可以参考这本书。如果你已经有了一定的计算机基础，只是对某个特定的领域感兴趣，可以选择性地挑选你感兴趣的内容进行学习。当然，如果你是一个像我当年一样对计算机一无所知的小白，初入大学的校门，我希望这本书能成为你的攻略，让你花最少的时间掌握你所需要的知识和能力。某种程度上，这本书更像是一个根据我的体验来排序的课程搜索引擎，帮助大家足不出户，体验世界顶级名校的计算机优质课程。</p><p data-pid=\"y0Zw6oP-\">当然，作为一个还未毕业的本科生，我深感自己没有能力也没有权利去宣扬一种学习方式，我只是希望这份资料能让那些同样有自学之心和毅力朋友可以少走些弯路，收获更丰富、更多样、更满足的学习体验。</p><h2>特别鸣谢</h2><p data-pid=\"0YnC9in6\">在这里，我怀着崇敬之心真诚地感谢所有将课程资源无偿开源的各位教授们。这些课程倾注了他们数十年教学生涯的积淀和心血，他们却选择无私地让所有人享受到如此高质量的CS教育。没有他们，我的大学生活不会这样充实而快乐。很多教授在我给他们发了感谢邮件之后，甚至会回复上百字的长文，真的让我无比感动。他们也时刻激励着我，做一件事，就得用心做好，无论是科研，还是为人。</p><p></p>",
            "excerpt": "如果还没有人推荐 CS自学指南 (csdiy.wiki) 那么我来推荐。 以下是原文 梦开始的地方 —— CS61A大一入学时我是一个对计算机一无所知的小白，装了几十个 G 的 Visual Studio 天天和 OJ 你死我活。凭着高中的数学底子我数学课学得还不错，但在专业课上对竞赛大佬只有仰望。提到编程我只会打开那笨重的 IDE，新建一个我也不知道具体是干啥的命令行项目，然后就是 cin, cout, for 循环，然后 CE, RE, WA 循环。当时的我就处在一种拼…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjUiragCyC3tZoikgIlCgk1NzkzMTkyMzYSCjMwMjA3ODQ5ODAYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-05-10T00:38:37+08:00"
    },
    {
        "content": {
            "id": 486268285,
            "title": "我的前端技术思考",
            "type": "article",
            "excerpt_title": "又名 -- 《 深入浅出 Angular 前端开发的几座大山 》 前言主要分享自己做前端 3 年多以来的技术思考，主题内容也是大概都是围绕我们比较熟悉的那一套东西，比如： 组件化开发、状态管理、Dialog、Angular 服务等，框架上以 Angular 为主，但也会有一些和 React 在代码组织上的对比分析。技术思考 部分属于一些个人理解，每个人都应该有自己对技术的理解和思考，期待和大家达到共识， 大家有任何想法或者观点可以在评论中沟通。 …",
            "url": "https://zhuanlan.zhihu.com/p/486268285",
            "image_url": "https://pica.zhimg.com/v2-3c5bfeee94a33e5185976b05bbbbe300_r.jpg?source=172ae18b",
            "created": 1648037188,
            "updated": 1648464188,
            "author": {
                "id": "f13c467a090ae829af7db8f4509ef5e9",
                "url_token": "pubuzhixing",
                "name": "pubuzhixing",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/80695af59b726b1989449969f3bf7316_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/80695af59b726b1989449969f3bf7316.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/f13c467a090ae829af7db8f4509ef5e9",
                "user_type": "people",
                "headline": "执剑天涯、快意江湖",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1456130843
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"x19qO6gG\">又名 -- 《  深入浅出 Angular 前端开发的几座大山  》</p><h2>前言</h2><p data-pid=\"E-sw0Zie\">主要分享自己做前端 3 年多以来的技术思考，主题内容也是大概都是围绕我们比较熟悉的那一套东西，比如：<b>组件化开发</b>、<b>状态管理</b>、<b>Dialog、Angular 服务</b>等，框架上以 Angular 为主，但也会有一些和 React 在代码组织上的对比分析。</p><blockquote data-pid=\"zG94ZIuk\"><b>技术思考</b>  部分属于一些个人理解，每个人都应该有自己对技术的理解和思考，期待和大家达到共识， 大家有任何想法或者观点可以在评论中沟通。<br/><b>免责声明</b>   - 分享中涉及一些个人的理解，比如和 React 理念和思路的对比，仅代表个人看待技术的一个角度。</blockquote><p data-pid=\"HbrKvAv2\"><b>主题目录</b></p><p data-pid=\"Iumq0ab9\">1、技术体系</p><p data-pid=\"GPaEaW5O\">2、组件化</p><p data-pid=\"z2H0ofcF\">3、Angular 服务</p><p data-pid=\"-Ea2iyII\">4、状态管理</p><p data-pid=\"jZ-Go7D7\">5、弹出层</p><h2>技术体系</h2><figure data-size=\"small\"><img src=\"https://pic2.zhimg.com/v2-5257b36c3034f3ce12b757a24fe3fa9d_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"644\" data-rawheight=\"1194\" class=\"origin_image zh-lightbox-thumb\" width=\"644\" data-original=\"https://pic2.zhimg.com/v2-5257b36c3034f3ce12b757a24fe3fa9d_r.jpg\" data-original-token=\"v2-522c81c563d3f4a693ef4853c1fbe29a\"/></figure><p data-pid=\"xN0yyzpB\">因为我们公司是 ToB 的业务，比较重前端，需要处理复杂交互、复杂状态管理以及多团队的开发管理，所以整个技术体系还是比较复杂的，但对于开发者来说也是比较有意思、有挑战的。</p><p data-pid=\"Z5s2M3uS\">说难不难，说容易也不容易。</p><blockquote data-pid=\"E7EvvA8o\"><a href=\"https://link.zhihu.com/?target=https%3A//material.angular.cn/cdk/categories\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CDK</a>  全称 Component Development Kit 是 Angular 官方提供组件开发包，前端组件开发的圣经。</blockquote><p data-pid=\"U8ZI4ppp\">个人建议：</p><ol><li data-pid=\"HErTcQ0F\">首先基础方面是必须扎实的比如 JavaScript、Angular 框架，再者就是要对后面的几项精通 1~2 项。</li><li data-pid=\"KhYjRdQX\">另外就是做业务开发的过程中要敢于去深入技术细节，基于业务实践去熟悉技术链上的技术点、结构设计，针对不完善的部分提出改进意见。</li><li data-pid=\"B-QhN-AA\">珍惜这样的业务机会，让自己的技术往深度方向延伸。</li></ol><h2>组件化</h2><p data-pid=\"hM6dQaZZ\"><b>组件</b></p><p data-pid=\"neyjMHY0\">组件是前端交互逻辑封装的  <b>基本单元</b>  ，根据复用程度可以分为：组件库、业务组件库、业务组件。</p><p data-pid=\"fTajzKvl\">我们这边的开发大概也是这样，写业务组件、基础组件，业务组件中通用的部分抽取到基础组件中作为基础组件库或者基础业务组件库，以最大化实现代码复用，风格交互统一。</p><p data-pid=\"i6ZFr-tW\">我们这边目前开发的一个难点也在于此，就是需要经验去确定哪些是可以复用的，组件库业务组件库都已经进行了那些封装，确定基础组件库是否满足业务需求等等。</p><p data-pid=\"lX6gJh_S\"><b>组件本质</b></p><p data-pid=\"5HZE9-AY\">组件作为基础逻辑单元，本质上就是   <b>DOM 结构设计</b>  、  <b>交互控制</b>  （MVC 中的 View 和 Control），从这个层面看来说三大框架都差不多，并且我们现在所讨论的组件通常是框架组件，因为现在浏览器虽然支持了原生组件（Web Component），但是现在基于 Web Component 去封装的组件库还很少，一方面是 Web Component 对比 Angular、React 等框架的在组件特性方面还有些落后，另以方面是 angular、react、vue 的生态已经很成熟，唯一不足的是组件库不能通用，但是公司内部可以选择统一的技术栈，那么这个问题也不是那么突出了。</p><p data-pid=\"07RfYbcB\"><b>Angular 组件/指令</b></p><p data-pid=\"oScKsED0\">Angular 组件有两种形态：组件和指令，这块简单的讲就是组件提供完成逻辑处理、DOM结构的封装，指令通常是只提供逻辑封装，指令需要附加到宿主 HTML 元素上。</p><p data-pid=\"WxkCPyic\">组件的话不用过多介绍，这里额外谈谈:   <b>指令</b>  ，Angular 指令是不允许提供模板的，它需要绑定到一个宿主上，对宿主元素进行额外的逻辑处理。</p><p data-pid=\"05nUPuAU\">如果大家基于 Angular 写过新的组件库组件应该比较清楚，在实现一个基础组件的时候，我们通常有三种对外使用的方式：全局服务、组件、指令，组件设计阶段最先考虑的应该是  <b>组件的划分</b>  、  <b>是否提供指令</b>  、  <b>是否提供服务</b>  等。</p><p data-pid=\"vuD7TT8S\">比如通常 Angular 组件库中的   <b>Tooltip</b>   模块就是对外提供一个全局服务和一个指令，因为它是在已有 HTML 元素上进行的交互处理，这种场景下指令是一种更方便的使用方式，使用者只需在原有的 HTML 元素上绑定即可具备 tooltip 的功能。</p><p data-pid=\"2qVVKZoD\">tooltip 模块代码过于复杂，下面以一个简单的指令 thyStopPropagation 说明指令的特点：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-28e52304ff5e57eef3fd491bbd052b32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2074\" data-rawheight=\"1242\" class=\"origin_image zh-lightbox-thumb\" width=\"2074\" data-original=\"https://pic3.zhimg.com/v2-28e52304ff5e57eef3fd491bbd052b32_r.jpg\" data-original-token=\"v2-04107786c99df3b8b3e96fcd7672571b\"/></figure><p data-pid=\"rFQ42gP4\">它的功能就是阻止冒泡，形态上和组件基本一致，可以在构造函数获取到宿主元素（DOM节点），然后监听事件，阻止事件默认的冒泡行为，且可以通过参数指定阻止冒泡的事件类型。</p><p data-pid=\"ZCCV6V_D\"><b><i>可以看出指令是纯粹的逻辑复用，它是很好的代码封装的一种方式。</i></b></p><p data-pid=\"ytTr3XYY\"><i>大家可以考虑下，React 中只有组件的概念如果要实现类似于 Angular 中 thyStopPropagation 指令的这中需求该是怎么封装和和使用呢？</i></p><p data-pid=\"THQ5lu7_\"><b>组件治理</b></p><p data-pid=\"A1tjxtvL\">大部分情况下组件是由框架管理的，我们开发者通常是按照框架规定的方式编写组件，然后使用组件其实就是交给框架去执行组件逻辑，框架承担了组件的大部分的管理工作，比如组件的创建、销毁以及其他声明周期函数，组件树的管理，组件状态的更新，组件对应的 DOM 的维护，我们现在写的前端是比较高级的代码，因为框架帮我们做了太多的事情。</p><p data-pid=\"IZc0sBwl\">有些情况下我们需要自己创建组件（Angular），比如弹出层场景，这个时候就需要开发者自己管理组件了，即是手动创建组件实例，但是这也不是完全脱离框架，一定程度上还要受框架的管理，比如开发者自己动态创建组件的时候使用的 <b><i>viewContainerRef</i></b> 对象，它其实就是 Angular 的组件上线文容器，组件实例通过 viewContainerRef 跟框架的组件树建立关联，运行状态、销毁等还是受框架控制。</p><p data-pid=\"ddRHnA0K\">基础组件树：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-29bbd5604d76cb8d92bf381a996ad41b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"792\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb\" width=\"792\" data-original=\"https://pic4.zhimg.com/v2-29bbd5604d76cb8d92bf381a996ad41b_r.jpg\" data-original-token=\"v2-29ead62e9cf328096f3857d8b70d1d6d\"/></figure><p data-pid=\"KS2Ix1rF\">动态创建组件 D：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4eb1f349f8f0e61729c2731f17f746a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1151\" data-rawheight=\"497\" class=\"origin_image zh-lightbox-thumb\" width=\"1151\" data-original=\"https://pic3.zhimg.com/v2-4eb1f349f8f0e61729c2731f17f746a6_r.jpg\" data-original-token=\"v2-e237f4531ad45eeb98ff027893de6c5f\"/></figure><p data-pid=\"GlEQNiMs\">上图示意的是动态创建的组件与 Angular 组件树的关系，注意这里示意的只是与组件树的关系，组件对应的 DOM 结构是可以随意控制。</p><p data-pid=\"0cfe4W_a\">组件化的这部分到这里基本结束，主要谈谈对组件化的理解，以及 Angular 框架下组件的组织形态。</p><h2>Angular 服务</h2><p data-pid=\"QLNRwLSE\">Angular 服务是区别其它框架的一个特色点，我说的不是服务本身，而是包含了依赖注入、Rxjs等的组合技术，它是组件、应用之间状态共享、消息通讯的桥梁，也是代码组织的一种重要方式。</p><p data-pid=\"gNWS4Jcp\"><b>应用场景</b></p><p data-pid=\"R8vqjGxt\"><b>① Angular 状态管理</b>  ：Angular的状态管理技术相关技术基本都是以服务为基础实现的。</p><p data-pid=\"JrFmOiaN\"><b>② 单例服务</b>  ：注入组件库中的 ThyDialog、ThyPopover，这类的代码组织是处理函数和数据状态组合的一个形态，比如 ThyDialog 服务的实例可以打开弹框，那么这个弹框的实例状态就在服务中维护了，可以同时打开多个弹框，可以控制最大打开3个弹窗，就需要在服务中维护一个实例状态的列表。</p><p data-pid=\"ni4aTVMG\"><b>③ 组件内配置服务</b>  ：  这类通常对应到我们的业务实现，比如 Wiki 产品中需要实现一个跨组件的事件或状态传递，层层传递参数或者层层抛出事件都太麻烦了，于是一个自然而然的方案出来了，通过一个服务存储共享状态，或者在服务中基于 Rxjs 做一个通知流，实现跨组件的通讯。</p><p data-pid=\"jJjCWDjU\">其中，[③ 组件内配置服务] 是一把双刃剑，使用服务它解决跨组件通信问题是一个利器，也存在被滥用或者不规范使用的问题：</p><ol><li data-pid=\"g4cgZHFj\">需要明确服务是单例的还是组件内配置提供商</li><ol><li data-pid=\"6hmkh1Dg\">组件内配置提供商需要考虑配置的层级</li><li data-pid=\"10lJAxoF\">组件内配置提供商的情况需要考虑到对应组件的各种使用场景下是否都能取到服务实例</li></ol><li data-pid=\"G8CUfUl0\">注意服务中的状态维护（严谨的维护数据状态）</li><li data-pid=\"7oVelZh0\">对于数据流要注意取消订阅</li><li data-pid=\"mbBPml0U\">注意服务中依赖注入的上线文，比如服务所依赖的服。</li></ol><p data-pid=\"cuhvZWEv\"><b>思辨点</b></p><p data-pid=\"ynxbC89i\">服务在 Angular 中被认为是一个很好的组织业务逻辑的方式，但是在函数式编程中像服务这样的特性却被嗤之以鼻，因为它不符合纯函数的思想，服务中可以存储局部状态，那么服务中的方法就不再纯粹，这可能是代码坏味道的开始。</p><p data-pid=\"sJWWY61d\">还有一点就是组件间的通讯增加了一层服务会使应用的数据流向、组件间通信方向变得不再直观，所以我也觉得服务是个好东西，但是要想清楚了才能用。</p><p data-pid=\"d3fa9oSy\"><b>React 场景方案</b></p><p data-pid=\"KRw6Niz4\">React 不存在服务的概念，React 的核心就是组件，其它一些概念设计全部围绕组件开展，那么前面提到的 Angular 中使用服务处理的业务场景在 React 中它是如何处理的呢？</p><p data-pid=\"2p7C2uu8\">这也是 React 中的基础，我不是特别精通，这里算是卖弄一下：</p><p data-pid=\"Pmx49e5m\"><b>① 父子级通讯</b>   - 参数传递，事件回调  </p><p data-pid=\"ETzv5M4r\"><b>② context</b>   - 一个上下文用于在有层级关系的组件中共享状态，这个在 React 中用的非常多，实现了组件属性穿透。</p><p data-pid=\"HSztE0Hh\"><b>③ 状态管理</b>   - 毫无疑问，React 中状态管理是一种常见的跨组件通讯的解决方案   </p><p data-pid=\"BwzK4X1N\"><b>④ 自定义事件</b>   - 用自定义事件来实现非嵌套组件结构下的消息通信问题，定义一个事件源，一个组件绑定事件处理函数，一个组件根据行为触发事件，思路大概是这样。  </p><blockquote data-pid=\"-9o9autV\"> 可以看出这类场景的处理本质上是一样的，状态共享、发布订阅，Angular 和 React 最大的差异是理念，React 推崇纯函数，所以在设计上不允许服务这样的概念存在，因为服务可以存储局部状态，违背了纯函数的理念，这是代码方式或者说是模式的引导，并不代表者 React 开发者不能使用类似服务的东西（也有人把依赖注入和服务引入到 React 中，但它注定主动不会被主流接纳），个人有兴趣可以拐个弯或者换个形态也是可以用的。</blockquote><p data-pid=\"76CRZEfi\"><b>服务的限制</b></p><p data-pid=\"hMHnmSq0\">不知道大家在用 Angular 框架开发应用的过程中有没有遇到过服务使用的场景限制，就是有那些那些场景我用不了服务或者用服务很费劲？</p><p data-pid=\"XPum_7xG\"><b>① 组件注入场景</b>   - 新手经常遇到的一个问题，就是服务在组件内配置，因为依赖注入上下文的关系，这个服务只能在该组件以及子组件去注入，同级组件或者父级组件（以及全局服务）是无法通过构造函数注入获取的。这种隐含关系的构建有它的灵活性，也增加了代码的复杂度，我觉得这是服务使用限制之一。</p><p data-pid=\"zGbVq1V1\"><b>② 工具函数场景</b>   - 大家都知道服务只能通过构造函数注入的方式获取实例，那么工具函数场景下使用服务就比较麻烦了，这个限制在编辑器中经常遇到，Wiki 编辑器的一些配置参数（只读状态、默认字号大小）获取或者是组件上下文服务，有时候需要在组件中用到、有时候需要在工具函数中用到，这个时候在工具函数中获取就比较麻烦。</p><p data-pid=\"7PT36TVt\">可以给大家看下我们是如何解决这个问题的，就是工具函数中获取 Angular 服务的思路，下面是 Wiki 编辑器中设置字体大小工具函数的实现代码：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d2228222ad6e950329b11b53a67e2da1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1962\" data-rawheight=\"1012\" class=\"origin_image zh-lightbox-thumb\" width=\"1962\" data-original=\"https://pic2.zhimg.com/v2-d2228222ad6e950329b11b53a67e2da1_r.jpg\" data-original-token=\"v2-715af2a127ff4f488e82ab2a0169d3cc\"/></figure><p data-pid=\"c5o6qGYt\">核心是在编辑器初始化的时候给对象赋值一个依赖注入的   <b>injector</b>   对象，这个 injector 对象的依赖注上下文就是编辑器组件的上下文，有了这个 injector 对象在工具函数中就可以为所欲为了，就像开挂一样。</p><p data-pid=\"dgF9emj8\">上面的例子用 injector 获取 Wiki 编辑器的上下文服务，除此之外还可以使用 injector 获取一些全局的 Angular 服务，比如我希望在工具函数处理中打开一个快捷菜单，那么我就可以通过 injector 获取全局的 ThyPopover 服务，去执行它的 open 函数打开菜单。</p><p data-pid=\"IwTl3R2g\"><b>基于 Weakmap 的状态共享方案</b></p><p data-pid=\"Njo45zZG\">前面主要是说用 injector 对象可以为工具函数和 Angular 服务之间的调用架起一组桥梁，其实在基于 Slate 开发富文本编辑器的过程中还有一部分的代码设计可以解决这方面的问题，可以理解为它也是 [一种状态共享方案]，这里把它称为：[基于 Weakmap 的状态共享方案]。</p><p data-pid=\"wHY1XGXz\">理论上在应用中共享数据直接把数据存到一个全局变量中就可以了，然后就可以在工具函数中、Angular 组件中功能使用（回到了最原始的方式），但是这种情况下有一个问题，就是多编辑器情况下数据可能会相互影响，所以一般不建议将组件的数据存成全局数据，用 WeakMap 可以解决这个问题，可以把 Weakmap 的 key 指定为编辑器应用对象，这样每个编辑器的数据旧会起到隔离的作用，WeakMap 在 Wiki 编辑器中有很多应用：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5790361528ed6b9460b68e5b74665b9c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1948\" data-rawheight=\"504\" class=\"origin_image zh-lightbox-thumb\" width=\"1948\" data-original=\"https://pic1.zhimg.com/v2-5790361528ed6b9460b68e5b74665b9c_r.jpg\" data-original-token=\"v2-41bf5e83bfcfd5c1bbbf0d294ec26f41\"/></figure><p data-pid=\"U2dyCY5k\">从上图 Weakmap 的定义可以看出 Weakmap 的实际上单例的，key 的类型指定为 Editor 可以隔离多编辑器数据，这种数据设计方案非常简洁、实用。</p><p data-pid=\"RRG2G_VC\">到这里 Angular 服务的部分节本结束了，Angular 服务在 Angular 框架承担了桥梁的作用，让 Angular 框架的组织能力、代码设计能力大幅度增强。</p><h2>状态管理</h2><p data-pid=\"iLKAbBfs\">状态管理也是我个人的一个痛，因为在以前我一直搞不明白状态管理有什么作用，来到 Worktile 以后才算弄明白，所以这里核心说下我对状态管理的一个理解，当然也会结合 PingCode 中状态管理形态介绍下我们的应用场景：全局数据，业务数据，微前端数据等。</p><blockquote data-pid=\"lR5EDQ_P\"><i>值得一提的是没有状态管理是绝对合理的，严格来说它都不能算作一种技术，因为状态管理就是数据的一种组织方式，而且它不是必须的。</i> <i>状态管理的本质是规范数据的使用，包括数据的初始化、修改、页面更新，属于应用技术方案。</i></blockquote><p data-pid=\"XwpHL5Ei\"><b>状态管理思想</b></p><p data-pid=\"a65il7q4\">状态管理核心体现的是管理的思想，提供数据修改的统一路径，让数据的修改规范化，数据修改本身可以  <b>被记录</b>  和  <b>统一处理</b>  。</p><p data-pid=\"D2GpQegQ\">对于普通的应用状态管理不是必须的，但是随着 React 的发展以及状态管理相关开源库的普及，状态管理逐步变成了一种潮流，当然状态管理的思想本身也有它的进步性，所以现在大家通常按照状态管理的思想去处理数据。</p><p data-pid=\"dUKnJjXH\"><b>基础理论</b></p><p data-pid=\"EmzgAjyH\">最简单的状态管理包含两个概念：不可变数据、Action。</p><p data-pid=\"vGWvfezX\"><b>① Immutable - </b>  数据是不可以修改，如果修改只能重新创建一个新的对象，代表库：immutable.js、immer。</p><p data-pid=\"JsRzIbor\"><b>② Action - </b>  描述数据修改，也可以理解为给每一次的数据需改增加一个类型标识。</p><p data-pid=\"FrBr3kDM\">而状态管理的鼻祖 Redux 还有一些更复杂的概念，这里再做过多介绍，核心关注这两个就可以了。</p><p data-pid=\"A8P1reeV\"><b>Redux Dev Tool</b></p><p data-pid=\"tJksrU65\">这是一个帮助开发者监控状态管理数据的浏览器插件，一般写过 React 的都用过，这是一个很不错的调试工具，它可以记录应用中的每一次数据修改，也可以对比出数据修改前后的数据变化，可以有效帮助开发者排查问题，梳理复杂数据的修改流程，我觉得这也是 Redux 成功的一个原因，就是配套工具做的很完善，开发者享受到了切切实实的便利，不枉学了那么多的概念。</p><p data-pid=\"b0E4kKNe\"><b>思想延伸</b></p><p data-pid=\"2TiUf2pe\">状态管理作为一种优秀的数据管理的思想，在我们的富文本编辑器中也有用到，而且在富文本编辑器中这种对数据修改的设计和控制则是刚需，它是实现  <i>协同编辑</i>  、  <i>Redos/Undos</i>   的基础。</p><p data-pid=\"Kk_pWthy\">下面是一个  <b>图片节点</b>  的数据示意：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;image&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">&#39;https://altas.pingcode.com/xxx&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">align</span><span class=\"o\">:</span> <span class=\"s1\">&#39;center&#39;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre></div><p data-pid=\"PMQaGl61\">现在用通过界面把对齐方式调整为居左，新的数据如下：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;image&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">url</span><span class=\"o\">:</span> <span class=\"s1\">&#39;https://altas.pingcode.com/xxx&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">align</span><span class=\"o\">:</span> <span class=\"s1\">&#39;left&#39;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</code></pre></div><p data-pid=\"zRR86h6S\">大家想一想这个过程该怎么发生？，以及如何应对 协同编辑 和 Undo 场景？</p><p data-pid=\"bh9KLjLK\"><b>简单的方式：</b></p><p data-pid=\"OmRwKQlp\">直接修改数据，Undo 时直接恢复上一个的状态，协同编辑则需要把全量数据发送给协同方</p><p data-pid=\"FTQTz293\"><b>管控的方式：</b></p><ul><li data-pid=\"z7TksR9M\">统一数据修改的方式</li><li data-pid=\"s_ab7owd\">给每一个种数据的修改设计一类  <b>数据操作类型</b></li></ul><p data-pid=\"OcKVJr4P\">这种方式其实对应于 Slate 中的 Transforms 模块，无论数据结构变化的多复杂，数据的修改可以转化为一种基础操作类型（类似于前面说到的 Action 的概念），这样一来和前面的状态管理类似，我可以记录数据的修改操作，准确的知道本次数据修改的信息，包括数据修改的类型，变化前后的数据（对应 Slate 中的 Operation 对象）。</p><p data-pid=\"gq_fp-QD\">基于这个 Operation 对象实现协同和Undo操作：</p><ul><li data-pid=\"onXnB6h0\">Undo 时只需要执行这个 Operation 的反操作（一个插入字符的操作 insert_text 对应的反操作就是 remove_text，通过执行一个操作的反操作可以实现撤回的目的）。</li><li data-pid=\"e_b8irIN\">协同是只需要把这个 Operation 发送给协同方，协同方就可以基于这个 Operation 的信息实现数据的同步。</li></ul><blockquote data-pid=\"50R__1Z2\"> 这个是我的一个类比，如果不是很理解也没有关系。</blockquote><p data-pid=\"Rl2zWOxb\"><b>框架绑定</b></p><p data-pid=\"schJPs0m\">我认为状态管理技术可以大概分为三个部分：  <b>规范修改</b>  、  <b>修改通知</b>  、  <b>框架绑定</b>  。</p><p data-pid=\"OyHAf2k7\">框架绑定是我抽取的一个阶段，我的理解是状态管理本身以及它和框架绑定应该是两个层，理论上状态管理中的规范修改、修改通知可以是框架无关的，只有框架绑定层才是与框架有关的。</p><p data-pid=\"ZYtno-Ig\">因为状态数据最终是需要在界面上进行显示的，所以框架绑定就是结合框架的数据更新机制、把数据修改告诉框架，在框架的渲染机制内驱动界面刷新。</p><p data-pid=\"ryVuaQuL\"><b>Angular</b>   界面更新的核心机制是变化检测，如果组件不是 OnPush 模式，那么 Store 中的数据只要更新，界面就会自动更新，这很方便。但是如果组件是 OnPush 模式，那么组件需要订阅 Store 中数据的更新，手动执行 markForCheck 或者 detectChanges 去驱动界面刷新。</p><blockquote data-pid=\"pYaHV2ll\"> OnPush 模式是 Angular 对组件进行性能优化的一个方式，组件是 OnPush 模式意味着只有当组件的参数的引用更新后才会执行组件极其子组件的变化检测，参数无变化的情况下是会跳过变化检测的，就跟 React 的 useMemo 类似。</blockquote><p data-pid=\"FJCRD7dh\"><b>React</b>   - React 中驱动组件更新的方式主要靠 setState，那么 React 中可能会基于高阶组件去封装由状态管理数据到组件状态更新这块的逻辑，进而驱动数据更新时的界面刷新。</p><p data-pid=\"mMj1lkkH\"><b>状态管理的基本形态</b></p><p data-pid=\"uYB6IYmh\">这里想要想对比  @tethys/store、Redux、Mobx 的基础使用、表现形态。</p><p data-pid=\"gBdVl8p_\"><b>@tethys/store</b>   我们的状态管理库，它是一种非常灵活的方式，Store 可以通过全局注入作为全局状态 ，也可以在组件内注入作为局部状态，主要是以 Angular 服务的方式存储和使用数据，只不过是数据的修改和存储是被组织化的。</p><p data-pid=\"nNfxJxgd\"><b>Redux</b>   完全遵循纯函数，是最 React 方式的状态，但是代码是比较离散。</p><p data-pid=\"SvuHCORl\">Dva 国人封装的一个库，是 Redux、Thunk、Sagas 三种方式的结合，Redux 中不允许有异步，但是获取数据的 http 请求一定是异步的，所以提出一层专门处理异步请求，异步请求完成了再调用同步的数据修改，redux 因为太过离散，actions、reduces 等都是定义在独立的文件中所以，dva 对这种情况进行了封装，让状态定义、同步修改、异步修改等统一封装到一个 Model 中，不同业务模块的可以定义多个 Model。</p><p data-pid=\"faOOWlTl\"><b>Mobx</b>   可能就是一步到位了，就是以 Store 的形态存储业务数据，在 Store 上提供数据修改方法。</p><p data-pid=\"rKpQ8MM1\">我们的 Store （@tethys/store）形态上和 Mobx 类似，管什么纯函数，方便就完事，干就完了。</p><p data-pid=\"zaNe96r_\">某种意义上 Redux 下的是一盘大棋，整出一套思想，整出一套巨复杂、变态的流程去约束你的数据的操作，然后为你提供了巨牛逼的调试工具，然后就搭载 React 一起火了起来，火起来之后开发者还是觉得它很麻烦，然后有了 Dva、Mobx 这类更易用的方式去状态管理。</p><p data-pid=\"zH2a6Pje\">其实我对这些东西向来不敏感，让我使用 Redux 那种写法我也觉得没啥，让我用我们的   <b>@tethys/store</b>   我也觉得 OK ，它就是一种代码架构方式，只要团队能够达成共识就行。</p><p data-pid=\"h8dKc5h8\"><b>PingCode 前端状态数据</b></p><p data-pid=\"7zzPBTBq\">这块是我们 PingCode 产品中状态管理的一个典型场景的分析：全局数据、应用数据管理（封装在业务组件库实现逻辑复用）、复杂状态管理方案。</p><p data-pid=\"kFaAVtMI\"><b>① 全局数据</b></p><p data-pid=\"_FHrUyza\"><b>AppRootContext</b>   - 个人信息、全局配置的信息管理，单例模式</p><p data-pid=\"tbDVwmp_\"><b>GlobalUsersStore</b>   - 全局用户信息的管理，单例模式</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7619fc39d03dda65934d8ebc6538f8ba_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2058\" data-rawheight=\"1750\" class=\"origin_image zh-lightbox-thumb\" width=\"2058\" data-original=\"https://pic3.zhimg.com/v2-7619fc39d03dda65934d8ebc6538f8ba_r.jpg\" data-original-token=\"v2-a597873affd1283379265386c6105f0f\"/></figure><p data-pid=\"oW158cBm\"><b>GlobalUsersStore</b>   数据获取流程大概如下：</p><ul><li data-pid=\"OuBubOSU\">Portal 应用通过 API 获取初始化的数据</li><li data-pid=\"CZApxu08\">把初始化数据存放到 window 对象上</li><li data-pid=\"4g2svUX5\">子应用通过构造函数注入时在 window 读取这些数据或者对象</li></ul><blockquote data-pid=\"Bapa_twR\"> Portal 属于 PingCode 产品中的基础应用，对应于微前端架构下的基座应用，我们用的微前端架构是基于 Angular 自研 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/worktile/ngx-planet\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ngx-planet</a> 有兴趣的可以关注。</blockquote><p data-pid=\"C2K7rmk5\">这块的代码是在业务组件库中：styx/module.ts 中</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0069781ff640278152b920dd1ae7800e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1640\" data-rawheight=\"864\" class=\"origin_image zh-lightbox-thumb\" width=\"1640\" data-original=\"https://pic3.zhimg.com/v2-0069781ff640278152b920dd1ae7800e_r.jpg\" data-original-token=\"v2-ac3526d6762cf76962578b3bd764ca12\"/></figure><p data-pid=\"2_JK7nkp\">使用 useFactory 配置服务的提供商，保证微前端模式子应用使用服务的是单例的。</p><p data-pid=\"MfpsVSzV\">useFactory 定义如下：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-280929074ac111e67132b82263b99a3d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1936\" data-rawheight=\"770\" class=\"origin_image zh-lightbox-thumb\" width=\"1936\" data-original=\"https://pic2.zhimg.com/v2-280929074ac111e67132b82263b99a3d_r.jpg\" data-original-token=\"v2-ed86b9ed3f5e0f1bc317b06e7a39ec06\"/></figure><p data-pid=\"9c3pVScn\">可以看出背后的技术也很简单，就是把取到的数据挂到 window 对象上。</p><blockquote data-pid=\"cjL56H3o\"> 这块是通过业务组件库注入这些全局的数据的，因为要实现多应用共享，采用了相对传统的方式存储值，把数据挂载到 window 对象上了，感觉技术到了又回归到了不推荐的方式上，可能好一些的是我们这种方式是有节制的使用，没有滥用。</blockquote><p data-pid=\"O9dk2Yss\"><b>应用数据管理</b></p><p data-pid=\"euwcZeIc\"><b>PilotStore</b>   - 这是我们应用中比较典型的一个数据管理场景，首先它在各个子应用中有一定的通用性，API 一致（查询、搜索、收藏）、界面也比较类似，所以在业务组件库对 Pilot 有一定的封装，包括数据封装和组件封装。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-40e5a229c349c7c85697d641d4624874_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1750\" class=\"origin_image zh-lightbox-thumb\" width=\"2880\" data-original=\"https://pic1.zhimg.com/v2-40e5a229c349c7c85697d641d4624874_r.jpg\" data-original-token=\"v2-5043799ba69e747c44f66cc4aa48fb34\"/></figure><blockquote data-pid=\"KQEmNmAH\"> Pilot 是我们内部抽象的一个  <b>领航</b>  的一个概念，代码每个应用的主体，比如：项目管理产品Pilot 就代表项目、Wiki 产品 Pilot 就代表知识库。</blockquote><p data-pid=\"MtY_ekCb\">有一个共识就是业务组件的封装更难一些，因为开发者需要平衡那些可以写死、那些不能写死、还要使用方尽可能的简单。</p><p data-pid=\"NoXytHBu\">具体到 Pilot 数据管理的场景，每个子应用界面交互、数据结构基本相同，只有 API 不同，API 结构如下： </p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"nx\">https</span><span class=\"o\">:</span><span class=\"c1\">//{sub_domain}.pingcode.com/api/wiki/pilot\n</span><span class=\"c1\"></span><span class=\"err\">↓</span>\n<span class=\"nx\">https</span><span class=\"o\">:</span><span class=\"c1\">//{sub_domain}.pingcode.com/api/{applicationName}/pilot\n</span></code></pre></div><p data-pid=\"0nqIXCmu\">对于 Url 的不同业务组件可以有两种做法：</p><ul><li data-pid=\"VzTE2MUK\">子应用在使用这块的时候传递一个 Url</li><li data-pid=\"2shqRiTw\">业务组件库读取子应用的配置自动拼接这个 Url </li></ul><p data-pid=\"1FVq4d6g\">两种方式都差不多，没有本质区别，因为我们每个子应用在初始化的时候都会增加一个全局的参数配置StyxConfig的实例，包含应用的标识名称，所以在 Pilot 封装的过程中直接读取这个标识就可以了，所以我们是用了第二种方案。</p><p data-pid=\"zLqX0541\"><b>PingCode 前端状态管理技术</b></p><p data-pid=\"6vXeW7Vn\">Angular 服务和 Rxjs 基本上是构成 PingCode 前端状态管理的核心技术，主要的使用场景是在组件中，通过依赖注入获取服务实例（Store），通过订阅 Store 中的数据（Rxjs 流）获取数据的更新推送，Store 本身也提供快照如果只需要读取一次可以直接通过快照获取无需订阅。</p><p data-pid=\"F93nrKSX\">具体实现代码已经完全开源，这里不在做细节介绍，感兴趣的可以参考：</p><p data-pid=\"ML71C4my\">github 仓储：  <a href=\"https://link.zhihu.com/?target=https%3A//github.com/tethys-org/store\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/tethys-org/s</span><span class=\"invisible\">tore</span><span class=\"ellipsis\"></span></a> </p><p data-pid=\"ke84ueS6\">文档地址：  <a href=\"https://link.zhihu.com/?target=https%3A//tethys-org.github.io/store/guides/intro\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">tethys-org.github.io/st</span><span class=\"invisible\">ore/guides/intro</span><span class=\"ellipsis\"></span></a> </p><p data-pid=\"IhYc1yMW\"><b>复杂状态管理</b></p><p data-pid=\"k0yF4QB0\">Wiki 中有一块相对复杂的逻辑，就是页面数据更新的同步，以前总是出问题，经过去年的一次重构现在问题已经很少了，我们采用的是  <b><i>总线模式</i></b>  ：整体思路和实现都非常直观简洁，这里在进行简单介绍，供大家参考：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3a25f795411278888055633b31d10aa2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1521\" data-rawheight=\"628\" class=\"origin_image zh-lightbox-thumb\" width=\"1521\" data-original=\"https://pic3.zhimg.com/v2-3a25f795411278888055633b31d10aa2_r.jpg\" data-original-token=\"v2-dcacb397929edb4d8b01741869e47435\"/></figure><p data-pid=\"ti3iAyie\">modify origin : 页面数据修改源，可以是修改标题、修改内容、修改发布人等可能有无数个。</p><p data-pid=\"VA347Ja0\">page event bus：全局的页面数据修改的 Bus ，基于发布订阅模式。</p><p data-pid=\"8sdVnV8_\">sync target：对应于要同步的修改的 store，也就是页面要同步数据修改的部分，也有可能有无数个。</p><p data-pid=\"B5tCHMfr\">数据修改源修改数据时 emit 一个数据修改事件，page-event-bus 接收到修改事件通知把它转发给订阅者，需要同步数据修改的地方订阅只需要订阅 page-event-bus 就可以了。整体的的关系是：  <b>多对 1</b>  、  <b>1 再对多</b>  。</p><p data-pid=\"MGMBz3pk\">针对这个以前写了一篇技术文章：  <a href=\"https://zhuanlan.zhihu.com/p/339607139\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/33</span><span class=\"invisible\">9607139</span><span class=\"ellipsis\"></span></a> ，但是最终核心思路应该就是上面说的<b>总线模式</b>。</p><h2>弹出层</h2><p data-pid=\"E_aV3On6\">弹出层是我特别想讲的，也是我最熟悉的，感觉我们 PingCode 产品的交互皆是弹框。</p><p data-pid=\"d_-Ahvae\"><b>弹出层交互</b></p><p data-pid=\"7pB_csjV\">弹出层交互在 PingCode 中无处不在，大半的交互都是基于弹出层做的，Wiki 的页面详情弹框、页面编辑、Project 的工作项详情，Portal 的展开侧边栏，弹框详情中的内容选择、应用内的 Pilot 切换搜索，操作成功、失败提醒，提及选择、关联选择等等，总之弹出层很重要。</p><p data-pid=\"Qb14M5KO\">从另外一个角度考虑，弹出层是脱离路由交互的另外一种形态，它可以脱离当前的路由完成交互，是单页面应用交互的重要特色，脱离路由意味着它可以是跨应用、跨模块交互的一种形态，比如我们可以在一个应用中打开另外一个应用的页面详情。</p><p data-pid=\"6PraMtRY\"><b>弹出层技术</b></p><p data-pid=\"UHF2h4Hf\">Angular 框架下应用程序的弹出层技术大多是基于 CDK Overlay 和 CDK Portals 实现的。</p><p data-pid=\"D_TgYFia\">Overlay 负责弹出层的整体结构和交互处理，Protals 主要是对 Angular 动态创建组件的封装，因为弹出层是基于动态创建组件，所以一定程度上弹出层组件的声明周期是自主控制的，而且通过 Overlay 弹出的组件在 DOM 结构上也脱离了原始的文档结构。</p><blockquote data-pid=\"j005UqU8\"><i>Angular 框架下的弹出层技术是框架设计典范，弹出层技术和框架配合的非常巧妙，开发者使用时也非常顺手，好像代码本该如此。</i></blockquote><p data-pid=\"6eugff1R\"><b>使用场景</b></p><p data-pid=\"bJxLsSlr\"><b>① Dialog - </b>  打开 Wiki 页面详情</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-090306146e6d8b70b1e6a0a86f4135e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1750\" class=\"origin_image zh-lightbox-thumb\" width=\"2880\" data-original=\"https://pic1.zhimg.com/v2-090306146e6d8b70b1e6a0a86f4135e4_r.jpg\" data-original-token=\"v2-4ed336e9e58714874a9b7b1e15f43d66\"/></figure><p data-pid=\"z7uOZzSv\">代码</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9895c7c0d2beba51f719196e106afe20_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1708\" data-rawheight=\"1366\" class=\"origin_image zh-lightbox-thumb\" width=\"1708\" data-original=\"https://pic1.zhimg.com/v2-9895c7c0d2beba51f719196e106afe20_r.jpg\" data-original-token=\"v2-338fc04dd91de5fa4434b145662f2c89\"/></figure><p data-pid=\"s7cG9KS3\"><b>② Popover</b>   - 打开排序菜单</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-08f2fcd32d5f5424783f60f775f4c7de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1750\" class=\"origin_image zh-lightbox-thumb\" width=\"2880\" data-original=\"https://pic3.zhimg.com/v2-08f2fcd32d5f5424783f60f775f4c7de_r.jpg\" data-original-token=\"v2-be1b7e489b783d491a44147ce97264d6\"/></figure><p data-pid=\"D-w3F5vS\">代码</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8f2e17657ac271830c558256da7b1cbb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1776\" data-rawheight=\"972\" class=\"origin_image zh-lightbox-thumb\" width=\"1776\" data-original=\"https://pic4.zhimg.com/v2-8f2e17657ac271830c558256da7b1cbb_r.jpg\" data-original-token=\"v2-dc70616fb183084836e539bade6e81e9\"/></figure><p data-pid=\"Byi52dBR\"><b>结构分析</b></p><p data-pid=\"2FWb7K2R\"><b>① CDK Overlay 结构</b>   - Dialog</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-976529999bcabc0449d573f290d7c566_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2424\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb\" width=\"2424\" data-original=\"https://pic3.zhimg.com/v2-976529999bcabc0449d573f290d7c566_r.jpg\" data-original-token=\"v2-21bc0bb07dbfb7f9f69b3b2e52eb6d8c\"/></figure><p data-pid=\"O_3Evq1e\"><b>① CDK Overlay 结构</b>   - Popover</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-87961f4d458c5bad6a11a16ed4bf0426_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"629\" class=\"origin_image zh-lightbox-thumb\" width=\"1200\" data-original=\"https://pic3.zhimg.com/v2-87961f4d458c5bad6a11a16ed4bf0426_r.jpg\" data-original-token=\"v2-e7e3f54e1bf040f51c9a5db4afbdb50c\"/></figure><blockquote data-pid=\"F3ComufZ\"><i>这个 popover 弹出层和 dialog 弹出层共用一个容器，因为他们都是基于 overlay 实现的</i></blockquote><p data-pid=\"C20YPlud\"><b>② Bootstrap 弹出层结构</b>   - Modal </p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-03cadd81f67965b31fa68fdec23fa93e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2424\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb\" width=\"2424\" data-original=\"https://pic3.zhimg.com/v2-03cadd81f67965b31fa68fdec23fa93e_r.jpg\" data-original-token=\"v2-95e84bd058fab6b8bdd4ac83239d7954\"/></figure><p data-pid=\"8ZGj7mza\">多个弹出层叠加需要累加 z-index ，新的弹出层在上一个弹出层的 z-index 基础上 +50 ，这个是在 bootstrap 底层维护。</p><p data-pid=\"RcP9WSdB\"><b>③ Ant 结构</b>   - Modal</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-16828442f6a0158901dc023121faf70c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"693\" class=\"origin_image zh-lightbox-thumb\" width=\"1156\" data-original=\"https://pic1.zhimg.com/v2-16828442f6a0158901dc023121faf70c_r.jpg\" data-original-token=\"v2-009c22e112331adce53169827d6b4cf1\"/></figure><p data-pid=\"uw6kp5Py\"><b>③ Ant 结构</b>   - Popover</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5d0a621f84168619d1bcde7123c6030c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"693\" class=\"origin_image zh-lightbox-thumb\" width=\"1156\" data-original=\"https://pic1.zhimg.com/v2-5d0a621f84168619d1bcde7123c6030c_r.jpg\" data-original-token=\"v2-1ccf1e3cee9d5074381f6ee621372bee\"/></figure><blockquote data-pid=\"Ovwqee8e\"><i>Ant 弹出层的结构设计与 CDK Overlay 如出一辙，具体的实现也被抽取到了组件库之外：</i> <i><a href=\"https://link.zhihu.com/?target=https%3A//github.com/react-component/dialog\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">rc-dialog</a></i> <i>，但是它的封装程度远不如 CDK Overlay。</i></blockquote><p data-pid=\"0--Taxil\"><b>弹出层独立性</b></p><p data-pid=\"9scpNVgv\">在前面   <b><i>[弹出层技术]</i></b>   中说到了：  <i>Angular 的弹出层技术是更独立的</i>  。</p><p data-pid=\"VTqPC4Sh\"><b>① 组件独立</b>   - 在前面   <b><i>[使用场景]</i></b>   中简单的介绍了 Overlay 弹出层组件是基于全局的服务打开的，用到了 Angular 的动态创建组件，说明组件的创建、销毁是开发者维护的，一定程度上脱离 Angular 框架的控制，说明了 Angular 的弹出层是  <b>组件独立</b>  的。</p><p data-pid=\"7oh-DIYy\">这个组件独立代表着弹出层组件不会在应用初始化时创建，而是在需要弹出的时候创建，这点是有别于 Ant Design 的，下面可以简单了解下 React 中是如何使用 Modal 和 Popover 的。</p><p data-pid=\"oSin7wrg\"><b>Modal 使用</b></p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9130ed3eb7aa0f3a6ef93c67f3c875be_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2220\" data-rawheight=\"1504\" class=\"origin_image zh-lightbox-thumb\" width=\"2220\" data-original=\"https://pic3.zhimg.com/v2-9130ed3eb7aa0f3a6ef93c67f3c875be_r.jpg\" data-original-token=\"v2-885933ae0720a6b298628a9a2faa53da\"/></figure><p data-pid=\"SKLn0WN8\"><b>Modal 提示</b></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9a909ae926a86faa09521de6be8bf8d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1111\" data-rawheight=\"751\" class=\"origin_image zh-lightbox-thumb\" width=\"1111\" data-original=\"https://pic4.zhimg.com/v2-9a909ae926a86faa09521de6be8bf8d7_r.jpg\" data-original-token=\"v2-0363722059b370280b7445c63bb7c31a\"/></figure><p data-pid=\"4GjqA_fE\"><b>Popover 使用</b></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7bce666f3c7966d2ef6f89c9eabb386b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2222\" data-rawheight=\"1508\" class=\"origin_image zh-lightbox-thumb\" width=\"2222\" data-original=\"https://pic4.zhimg.com/v2-7bce666f3c7966d2ef6f89c9eabb386b_r.jpg\" data-original-token=\"v2-cd26981b5d41430a395d3eec8430d1ff\"/></figure><p data-pid=\"epVZa3pd\">可以看出 React 中针对弹出层这块的使用形态通常是组件，而 Angular 这块则被设计成了服务，我个人觉得基于服务的方式还是比较优雅的，当然 Modal 也提供了类似服务的全局调用的那种形式，但是限制了使用场景（info、success、error 等），而 Ant Desgin 对于 Popover 的使用则采用  <b>组件包裹</b>  的形式来组织，这个时候 Popover 组件则类似于一种虚拟组件，对包括的 DOM 进行交互增强处理（和 Angular 指令起的作用类似）。</p><p data-pid=\"wJIcxLZZ\"><b>② DOM 独立</b>   - 与 Bootstrap 的结构组织相比，Overlay 实现的弹出层在 DOM 结构上脱离了原始的文档结构，布局不受弹出源的影响。</p><blockquote data-pid=\"E44l40Ni\"><i>Bootstrap 的那种 DOM 结构理论上受布局的限制，比如因为布局或者滚动条的原因，可能会在页面中设置 overflow: hidden 样式，那么弹出层的显示就会受到影响，当然也这种问题 Bootstrap 应该也会有解决方案。</i></blockquote><p data-pid=\"Y6dfNP64\"><b>③ 位置策略、滚动策略</b>   - 位置策略和滚动策略的起源我觉得应该都是   <b>[② DOM 独立]</b>   的产物。</p><p data-pid=\"2V5O64sX\"><b>位置策略</b>   - 最新的 CDK 代码只包含 global 和 flexible 两种位置策略，global 比较简单对应全局弹出 Dialog 的场景（这种场景下 DOM 本来就应该是独立的，因为弹框的位置是全局固定的，不是基于某一个已经存在的 DOM 的相对位置），flexible 则复杂一些，它的位置应当是基于已经存在的 DOM 的相对位置，那么它的核心就是解决基于位置源弹出的问题，因为弹出层 DOM 脱离了原始的文档结构，所以弹出位置需要基于原始位置去计算，flexible 就对应这种场景的代码封装。</p><p data-pid=\"KVDbzNHd\"><b>滚动策略 </b>  - 因为弹出层是   <b>[DOM 独立]</b>   的，默认页面滚动时弹出层是不会自动跟随的，这点跟 Bootstrap 那种结构有本质区别。所以 Overlay 专门设计了滚动策略处理这个场景，可以配置滚动策略：滚动跟随、滚动阻塞、滚动关闭。</p><p data-pid=\"mloDm-k7\">可以看出基于 Angular 的 CDK Overlay 是一套完整的解决方案，它把弹出层的 DOM 结构从原始的文档中提出来，解放了弹出层组件 DOM 与原始文档结构的耦合，然后为此设计了一套这种结构下所带来的问题的处理方法，并且实现了与全局弹框的统一，除了 Dialog、Popover 的弹出层场景，它的应用还包括了 Select 组件、Tootip 组件、Dropdown 组件等，实现底层技术的大统一，这也太强了。</p><p data-pid=\"mA0H86hi\"><b>设计的艺术</b></p><p data-pid=\"33vv5ZL5\">其实 Overlay 的本质体现的是代码的设计，包含：DOM 结构设计、组件结构设计、实例 Ref 结构设计、场景策略设计、样式设计等。</p><p data-pid=\"YT8m1SuO\">从我们的实践来看，基于 Overlay 的弹出层技术方案整体是更优雅、问题更少的，也更容易写出松耦合的代码。DOM 结构上的独立性解除了对原始文档布局的依赖，以服务的形式使用也让弹出层的调用更灵活，是非常完美的设计。</p><h2>总结</h2><p data-pid=\"-X3LjxF2\">零零散散分享了一些不太有体系的东西吧，算是自己的一些拙见，希望可以借此引起大家的一些思考或者共鸣。</p><p data-pid=\"knSFck2w\">总的来说还是希望大家在实际的开发的过程中，除了要关注基础框架（库）的使用、还要多思考一些思考，多去看一些优秀开源库的架构方式，遇到问题追根溯源，把这些架构、库为自己所用，而不是陷入框架或者逻辑的泥潭。</p><p data-pid=\"pICArIyo\">现在的前端开发已经不在像纯 JavaScript、HTML 时代那样简单了，现在的技术体系一般都会很复杂，比如说我们公司有自研的组件库、业务组件库、状态管理、微前端，这样一来对公司的每一个前端开发者都有一定的挑战，产品出现一个缺陷它的问题链排查起来就很长，但这也是机遇，越是复杂的场景越能扩展开发人员的技术深度。</p><p data-pid=\"Ods0lNEW\">我印象最深的就是我以前刚学 React 那会无论如何都搞不懂状态管理是咋会事，面试经常被问住，来到我们公司才算真正搞懂，我觉得最重要的一个点就是实际开发中没有遇到真正匹配的场景，那时候遇到的都是一些可用、可不用的场景，自然理解不到精髓。</p><p data-pid=\"bRuF4PM2\">本文首发于 PingCode 研发中心：<a href=\"https://zhuanlan.zhihu.com/p/485592499\" class=\"internal\">PingCode研发：我的前端技术思考</a></p>",
            "voteup_count": 46,
            "column": {
                "id": "ng-nice",
                "type": "column",
                "url_token": "ng-nice",
                "title": "Angular Dev",
                "url": "https://zhuanlan.zhihu.com/ng-nice",
                "created": 1538125928,
                "updated": 1699298617,
                "description": "Angular 爱好者学习和交流的地方, http://ngnice.com",
                "image_url": "https://pica.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 4
        },
        "created": "2022-03-23T20:06:28+08:00"
    },
    {
        "content": {
            "id": 2902775582,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/286216674/answer/2902775582",
            "created_time": 1676891925,
            "updated_time": 1677038432,
            "question": {
                "type": "question",
                "id": 286216674,
                "title": "大家怎么看待发朋友圈喜欢先设为私密，过一段时间再公开这种情况？",
                "question_type": "normal",
                "created": 1532152602,
                "updated_time": 1532152687,
                "url": "https://www.zhihu.com/question/286216674",
                "is_deleted": false
            },
            "author": {
                "id": "7e5efe2670dd967efe2c61a299f806c7",
                "url_token": "qi-lai-liao-l",
                "name": "有点好奇先生",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/ff0d6355fd324b4e1a9e832129b56b4e_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/ff0d6355fd324b4e1a9e832129b56b4e.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/7e5efe2670dd967efe2c61a299f806c7",
                "user_type": "people",
                "headline": "资深码农",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1450200531
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 268,
            "comment_count": 52,
            "thanks_count": 56,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"6MNwlUxE\">今天发现一个有趣的事情</p><p data-pid=\"-GcQ7l7G\">正常来讲，你发朋友圈先设置成私密，然后过一段时间再公开。这样好友在朋友圈刷不到这条，打开你的主页才能看到。</p><p data-pid=\"XWDVW7K7\">但是，如果他点赞或者评论，这条内容就能在朋友圈刷到。</p><p data-pid=\"fKJz7sQP\">原因是这样的，用户以私密状态发布这条内容后，没有触发分发机制，没有分发到每个人的朋友圈；当用户设置为公开，并且朋友进到主页点赞或者评论，这条内容就被激活，重新分发。</p><p data-pid=\"ZQ56eSS8\">所以如果不想被好友在朋友圈刷到，建议过几天再公开。没人点赞或者评论的话，它永远不会分发到好友的朋友圈；即使被点赞评论，触发了内容分发，好友也要回刷到前几天才看得到</p><p data-pid=\"GdZhbhyS\">一般人不至于无聊去回刷那么久的朋友圈吧</p>",
            "excerpt": "今天发现一个有趣的事情 正常来讲，你发朋友圈先设置成私密，然后过一段时间再公开。这样好友在朋友圈刷不到这条，打开你的主页才能看到。 但是，如果他点赞或者评论，这条内容就能在朋友圈刷到。 原因是这样的，用户以私密状态发布这条内容后，没有触发分发机制，没有分发到每个人的朋友圈；当用户设置为公开，并且朋友进到主页点赞或者评论，这条内容就被激活，重新分发。 所以如果不想被好友在朋友圈刷到，建议过几天再公开。…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxierpPoCiDl0asMkgIlCgk1NTc4NjExODESCjI5MDI3NzU1ODIYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-02-20T19:18:45+08:00"
    },
    {
        "content": {
            "author": {
                "id": "bafb7c9aadd6407eba81bf1290c8a533",
                "url_token": "dandoliya",
                "name": "乌合之野",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-941a206e875440cbfc3a92b1b1aee3e2_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-941a206e875440cbfc3a92b1b1aee3e2.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/bafb7c9aadd6407eba81bf1290c8a533",
                "user_type": "people",
                "headline": "无穷的远方，无数的人们，都和我有关。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-db97dabb6dac0bc83fa05084aa8d45fc_r.png",
                        "night_mode_url": "https://picx.zhimg.com/v2-ed20b95bc2e50e20178c5bb42b51a08f.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-aa8a1823abfc46f14136f01d55224925.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-aa8a1823abfc46f14136f01d55224925.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19556554",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19556554",
                                "name": "电视剧",
                                "avatar_url": "https://picx.zhimg.com/v2-af70b614c80e120c3d14ddc950f98fa2_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19550429",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550429",
                                "name": "电影",
                                "avatar_url": "https://picx.zhimg.com/v2-8f6afc735f1369ed827c4ec2e5b6366a_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19573998",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19573998",
                                "name": "中国动漫",
                                "avatar_url": "https://picx.zhimg.com/v2-e448f703351f6af5f8b589f5870bd4ad_720w.jpg?source=32738c0c"
                            }
                        ]
                    },
                    {
                        "type": "identity",
                        "description": "四川师范大学 文艺美学博士"
                    }
                ],
                "badge_v2": {
                    "title": "电视剧等 3 个话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "电视剧等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19556554",
                                    "token": "19556554",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19556554",
                                    "name": "电视剧",
                                    "avatar_path": "v2-af70b614c80e120c3d14ddc950f98fa2",
                                    "avatar_url": "https://picx.zhimg.com/v2-af70b614c80e120c3d14ddc950f98fa2_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19550429",
                                    "token": "19550429",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550429",
                                    "name": "电影",
                                    "avatar_path": "v2-8f6afc735f1369ed827c4ec2e5b6366a",
                                    "avatar_url": "https://picx.zhimg.com/v2-8f6afc735f1369ed827c4ec2e5b6366a_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19573998",
                                    "token": "19573998",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19573998",
                                    "name": "中国动漫",
                                    "avatar_path": "v2-e448f703351f6af5f8b589f5870bd4ad",
                                    "avatar_url": "https://picx.zhimg.com/v2-e448f703351f6af5f8b589f5870bd4ad_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "四川师范大学 文艺美学博士",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "电视剧等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19556554",
                                    "token": "19556554",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19556554",
                                    "name": "电视剧",
                                    "avatar_path": "v2-af70b614c80e120c3d14ddc950f98fa2",
                                    "avatar_url": "https://picx.zhimg.com/v2-af70b614c80e120c3d14ddc950f98fa2_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19550429",
                                    "token": "19550429",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550429",
                                    "name": "电影",
                                    "avatar_path": "v2-8f6afc735f1369ed827c4ec2e5b6366a",
                                    "avatar_url": "https://picx.zhimg.com/v2-8f6afc735f1369ed827c4ec2e5b6366a_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19573998",
                                    "token": "19573998",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19573998",
                                    "name": "中国动漫",
                                    "avatar_path": "v2-e448f703351f6af5f8b589f5870bd4ad",
                                    "avatar_url": "https://picx.zhimg.com/v2-e448f703351f6af5f8b589f5870bd4ad_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "reward",
                            "detail_type": "super_activity",
                            "title": "社区成就",
                            "description": "2023 城市发现官",
                            "url": "",
                            "sources": [
                                {
                                    "id": "22",
                                    "token": "",
                                    "type": "content_potential_category",
                                    "url": "",
                                    "name": "旅行",
                                    "avatar_path": "",
                                    "avatar_url": "",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "四川师范大学 文艺美学博士",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_count": 54,
            "content": [
                {
                    "content": "盛夏儿童节之时，关注 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/bafb7c9aadd6407eba81bf1290c8a533\" data-hash=\"bafb7c9aadd6407eba81bf1290c8a533\" data-hovercard=\"p$b$bafb7c9aadd6407eba81bf1290c8a533\">@乌合之子</a> ，为本条想法一键三联，抽4个小伙伴，各送一册神奇图书馆。<br><br>《莫莎莎的神奇图书馆》是一套结合世界经典名著与幻想冒险故事的原创少儿奇幻作品。该书由原贝塔斯曼书友会总编辑、贝塔斯曼亚洲出版公司总经理阮小芳历时5年打磨创作，已出版四册：《金银岛的美人鱼》《魔镜暗影》《迷失仙境》《神灯魅影》。打开书，小读者会跟随小主人公们进入经典名著的书中世界，找寻故事被篡改的蛛丝马迹，将经典故事恢复成原本的模样。该套作品不仅拥有天马行空的想象、生动鲜活的人物和瑰丽俏皮的语言，更在故事和冒险中传递了发现自我、直面困境、团结协作的积极力量。书中还有丰富的拓展内容，并配套有精心制作的音频广播剧，是一套制作精良的原创少儿幻想文学。<br><a href=\"zhihu://pin/feedaction/fold/\">收起</a>",
                    "fold_content": "盛夏儿童节之时，关注 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/bafb7c9aadd6407eba81bf1290c8a533\" data-hash=\"bafb7c9aadd6407eba81bf1290c8a533\" data-hovercard=\"p$b$bafb7c9aadd6407eba81bf1290c8a533\">@乌合之子</a> ，为本条想法一键三联，抽4个小伙伴，各送一册神奇图书馆。<br/><br/>《莫莎莎的神奇图书馆》是一套结合世界经典名著与幻想冒险故事的原创少儿奇幻作品。该书由原贝塔斯曼…<br/><a href=\"zhihu://pin/feedaction/unfold/\">展开</a>",
                    "fold_type": "normal_fold",
                    "own_text": "盛夏儿童节之时，关注 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/bafb7c9aadd6407eba81bf1290c8a533\" data-hash=\"bafb7c9aadd6407eba81bf1290c8a533\" data-hovercard=\"p$b$bafb7c9aadd6407eba81bf1290c8a533\">@乌合之子</a> ，为本条想法一键三联，抽4个小伙伴，各送一册神奇图书馆。<br><br>《莫莎莎的神奇图书馆》是一套结合世界经典名著与幻想冒险故事的原创少儿奇幻作品。该书由原贝塔斯曼书友会总编辑、贝塔斯曼亚洲出版公司总经理阮小芳历时5年打磨创作，已出版四册：《金银岛的美人鱼》《魔镜暗影》《迷失仙境》《神灯魅影》。打开书，小读者会跟随小主人公们进入经典名著的书中世界，找寻故事被篡改的蛛丝马迹，将经典故事恢复成原本的模样。该套作品不仅拥有天马行空的想象、生动鲜活的人物和瑰丽俏皮的语言，更在故事和冒险中传递了发现自我、直面困境、团结协作的积极力量。书中还有丰富的拓展内容，并配套有精心制作的音频广播剧，是一套制作精良的原创少儿幻想文学。",
                    "text_link_type": "internal",
                    "title": "抽奖送书：《莫莎莎的神奇图书馆》",
                    "type": "text"
                },
                {
                    "cropped_url": "https://pic4.zhimg.com/100/v2-759601bf7ea06fdf4d2b0ceb6bca07d7_720w.jpg",
                    "height": 800,
                    "is_gif": false,
                    "is_long": false,
                    "is_watermark": false,
                    "original_url": "https://pic3.zhimg.com/100/v2-d270551222e47767251eaa2a4a748b22_r.jpg",
                    "thumbnail": "",
                    "type": "image",
                    "url": "https://pic3.zhimg.com/100/v2-d270551222e47767251eaa2a4a748b22_720w.jpg",
                    "watermark_url": "https://pic4.zhimg.com/100/v2-e1e4d9498d3dd0c05f6d7829b6fe6ef3_720w.jpg",
                    "width": 800
                },
                {
                    "cropped_url": "https://pic4.zhimg.com/100/v2-f01e59644fc3a57286ce07a7c844cfd7_720w.jpg",
                    "height": 800,
                    "is_gif": false,
                    "is_long": false,
                    "is_watermark": false,
                    "original_url": "https://pic1.zhimg.com/100/v2-91df315ffc50c7448e0e3c934763cc8c_r.jpg",
                    "thumbnail": "",
                    "type": "image",
                    "url": "https://pic1.zhimg.com/100/v2-91df315ffc50c7448e0e3c934763cc8c_720w.jpg",
                    "watermark_url": "https://pic4.zhimg.com/100/v2-bc72565261b485f699b16edd14b4fa53_720w.jpg",
                    "width": 800
                },
                {
                    "cropped_url": "https://pic1.zhimg.com/100/v2-50e808494fa1b836dddb5863a3649524_720w.jpg",
                    "height": 800,
                    "is_gif": false,
                    "is_long": false,
                    "is_watermark": false,
                    "original_url": "https://pic1.zhimg.com/100/v2-449b6f497a73c37a1dd7dc4be547f968_r.jpg",
                    "thumbnail": "",
                    "type": "image",
                    "url": "https://pic1.zhimg.com/100/v2-449b6f497a73c37a1dd7dc4be547f968_720w.jpg",
                    "watermark_url": "https://pic2.zhimg.com/100/v2-0afaf5b2770bb80ec2d68e097b4d4631_720w.jpg",
                    "width": 800
                },
                {
                    "height": 800,
                    "is_gif": false,
                    "is_long": false,
                    "is_watermark": false,
                    "original_url": "https://pic3.zhimg.com/100/v2-24f6ff22d75c47c4de270a6787f0b4d2_r.jpg",
                    "thumbnail": "",
                    "type": "image",
                    "url": "https://pic3.zhimg.com/100/v2-24f6ff22d75c47c4de270a6787f0b4d2_720w.jpg",
                    "watermark_url": "https://pic3.zhimg.com/100/v2-20cbed7e3de9bc7a845b7f44ab91f886_720w.jpg",
                    "width": 800
                },
                {
                    "height": 800,
                    "is_gif": false,
                    "is_long": false,
                    "is_watermark": false,
                    "original_url": "https://pic4.zhimg.com/100/v2-07b013a014fceaf464b77c8207e60b6f_r.jpg",
                    "thumbnail": "",
                    "type": "image",
                    "url": "https://pic4.zhimg.com/100/v2-07b013a014fceaf464b77c8207e60b6f_720w.jpg",
                    "watermark_url": "https://pic3.zhimg.com/100/v2-678433620c3638770d48ae754323863e_720w.jpg",
                    "width": 800
                },
                {
                    "height": 800,
                    "is_gif": false,
                    "is_long": false,
                    "is_watermark": false,
                    "original_url": "https://pic4.zhimg.com/100/v2-ae12b826c414f911b31e389e5faaa72b_r.jpg",
                    "thumbnail": "",
                    "type": "image",
                    "url": "https://pic4.zhimg.com/100/v2-ae12b826c414f911b31e389e5faaa72b_720w.jpg",
                    "watermark_url": "https://pic3.zhimg.com/100/v2-54205ae5f5e3825cb6496134e1a4983e_720w.jpg",
                    "width": 800
                },
                {
                    "height": 800,
                    "is_gif": false,
                    "is_long": false,
                    "is_watermark": false,
                    "original_url": "https://pic2.zhimg.com/100/v2-98186480de21f7967409193eb2081c0d_r.jpg",
                    "thumbnail": "",
                    "type": "image",
                    "url": "https://pic2.zhimg.com/100/v2-98186480de21f7967409193eb2081c0d_720w.jpg",
                    "watermark_url": "https://pic3.zhimg.com/100/v2-2d9ef57d6d2a886a7787f4415ff10f7a_720w.jpg",
                    "width": 800
                },
                {
                    "height": 800,
                    "is_gif": false,
                    "is_long": false,
                    "is_watermark": false,
                    "original_url": "https://pic3.zhimg.com/100/v2-fedaa41e7b059d4a016798aa8039253a_r.jpg",
                    "thumbnail": "",
                    "type": "image",
                    "url": "https://pic3.zhimg.com/100/v2-fedaa41e7b059d4a016798aa8039253a_720w.jpg",
                    "watermark_url": "https://pic1.zhimg.com/100/v2-db267c001d1072dd56ba12ba460b79f0_720w.jpg",
                    "width": 800
                },
                {
                    "height": 800,
                    "is_gif": false,
                    "is_long": false,
                    "is_watermark": false,
                    "original_url": "https://pic3.zhimg.com/100/v2-76f371547c9dc11e0fee047510adf05a_r.jpg",
                    "thumbnail": "",
                    "type": "image",
                    "url": "https://pic3.zhimg.com/100/v2-76f371547c9dc11e0fee047510adf05a_720w.jpg",
                    "watermark_url": "https://pic1.zhimg.com/100/v2-a7347a67a0bafff5daaf002ac4e72848_720w.jpg",
                    "width": 800
                }
            ],
            "created": 1685708739,
            "excerpt_title": "盛夏儿童节之时，关注 @乌合之子 ，为本…",
            "id": "1648062584405471232",
            "like_count": 0,
            "reaction_count": 56,
            "type": "pin",
            "updated": 1685708739,
            "url": "https://www.zhihu.com/pin/1648062584405471232?native=0",
            "virtuals": {
                "is_liked": false,
                "is_favorited": false
            }
        },
        "created": "2023-06-02T20:25:39+08:00"
    },
    {
        "content": {
            "id": 3028553940,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/302495721/answer/3028553940",
            "created_time": 1684122448,
            "updated_time": 1684122448,
            "question": {
                "type": "question",
                "id": 302495721,
                "title": "青藏铁路给藏族人民带来什么，除开物质？",
                "question_type": "normal",
                "created": 1542260750,
                "updated_time": 1600243321,
                "url": "https://www.zhihu.com/question/302495721",
                "is_deleted": false
            },
            "author": {
                "id": "0595ab7c31f0cfab6578f93b1dcbd521",
                "url_token": "12-51-7-25",
                "name": "知乎用户AggALK",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/0595ab7c31f0cfab6578f93b1dcbd521",
                "user_type": "people",
                "headline": "",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 0
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 2172,
            "comment_count": 138,
            "thanks_count": 217,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"dQXroVPF\">2021年去西藏旅游，看到八廓街上的藏族大姐已经用上了电动转经筒了</p>",
            "excerpt": "2021年去西藏旅游，看到八廓街上的藏族大姐已经用上了电动转经筒了",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjUoZCkCyDQsIgOkgIlCgk1ODA3MzE3ODISCjMwMjg1NTM5NDAYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-05-15T11:47:28+08:00"
    },
    {
        "content": {
            "id": 3050389368,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/543816700/answer/3050389368",
            "created_time": 1685372952,
            "updated_time": 1685373012,
            "question": {
                "type": "question",
                "id": 543816700,
                "title": "数学到底在哪里支撑着编程？",
                "question_type": "normal",
                "created": 1658063128,
                "updated_time": 1658063128,
                "url": "https://www.zhihu.com/question/543816700",
                "is_deleted": false
            },
            "author": {
                "id": "1cd3dc9b0426a88a95892a9d256b563b",
                "url_token": "chi-mao-de-lao-shu-66",
                "name": "给爷整笑了",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-bc341d22c782effd981e3d1138edb11f_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-bc341d22c782effd981e3d1138edb11f.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/1cd3dc9b0426a88a95892a9d256b563b",
                "user_type": "people",
                "headline": "给爷整笑了",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1560169908
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 11,
            "comment_count": 0,
            "thanks_count": 12,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"k-Y6jleN\">推荐一本书 A First Course in Logic: An Introduction to Model Theory, Proof Theory, Computability, and Complexity 有高中的数学就能读懂了</p>",
            "excerpt": "推荐一本书 A First Course in Logic: An Introduction to Model Theory, Proof Theory, Computability, and Complexity 有高中的数学就能读懂了",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxj4/sSuCyD28tEnkgIlCgk1ODQ3MDE2ODESCjMwNTAzODkzNjgYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-05-29T23:09:12+08:00"
    },
    {
        "content": {
            "id": 3044973372,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/602951657/answer/3044973372",
            "created_time": 1685062213,
            "updated_time": 1685580205,
            "question": {
                "type": "question",
                "id": 602951657,
                "title": "为什么举报完比亚迪后长城自己的股票跌得更多？",
                "question_type": "normal",
                "created": 1684998756,
                "updated_time": 1684998756,
                "url": "https://www.zhihu.com/question/602951657",
                "is_deleted": false
            },
            "author": {
                "id": "db2a25583c3adea12f51048fe369f54c",
                "url_token": "LHLplayZH",
                "name": "刘三姐",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-55ddd7dd710a72e263fd909485b469e7_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-55ddd7dd710a72e263fd909485b469e7.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/db2a25583c3adea12f51048fe369f54c",
                "user_type": "people",
                "headline": "汽车爱好者/数码控/独立思考，欢迎友善讨论，合作请注明来意",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic4.zhimg.com/v2-74effb7eb43e0ff62000c68dee1d8a23.png?source=6a64a727",
                        "night_mode_url": "https://pic3.zhimg.com/v2-74effb7eb43e0ff62000c68dee1d8a23.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "汽车制造业 零件设计"
                    }
                ],
                "badge_v2": {
                    "title": "2023 好物推荐官",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "社区成就",
                            "description": "2023 好物推荐官",
                            "url": "",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "汽车制造业 零件设计",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "reward",
                            "detail_type": "super_activity",
                            "title": "社区成就",
                            "description": "2023 好物推荐官",
                            "url": "",
                            "sources": [
                                {
                                    "id": "17",
                                    "token": "",
                                    "type": "content_potential_category",
                                    "url": "",
                                    "name": "汽车",
                                    "avatar_path": "",
                                    "avatar_url": "",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "汽车制造业 零件设计",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pic1.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c"
                },
                "actived_at": 1445576813
            },
            "thumbnail": "https://pic1.zhimg.com/v2-44c2e2de411a30f95967396ad4a041cf_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 2265,
            "comment_count": 377,
            "thanks_count": 143,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"uF7LQb1c\">现在的人到底被那些自媒体和黑粉节奏带成什么样子了，说什么比亚迪只字不提排放，又说比亚迪变相承认，你们有认真看比亚迪的公告吗？</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-dcc042ac634e9e5c40b6beee711d7a8b_720w.jpg?source=2c26e567\" data-rawwidth=\"1164\" data-rawheight=\"754\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-44c2e2de411a30f95967396ad4a041cf\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-efa585de6b5688c74ffc8b7326e17cf5_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1164\" data-original=\"https://pic1.zhimg.com/v2-dcc042ac634e9e5c40b6beee711d7a8b_r.jpg?source=2c26e567\"/></figure><p data-pid=\"TPiBrTbw\"><b>公告清楚明白的写明了：长城测试违规→我们通过国标认真→欢迎随时检测。</b>有什么问题吗？一点问题都没有！</p><p data-pid=\"PpWHLbuE\">———————以下原答案————————</p><p data-pid=\"Y89vz_Rv\">3个原因：</p><p data-pid=\"xMthH83H\"><b>第一：</b>市场上违规的外企很多，长城却没做过任何事情。</p><p data-pid=\"242vkPzr\">大众a柱断裂排放超标，长城在哪里？特斯拉召回110w汽车，长城又在哪？</p><p data-pid=\"wBEvz2F7\">反而是一个比亚迪，你却逮着不放，这对于消费者和路人而言，是一种很典型的对外软弱对内重拳出击的行为，大部分国人都很讨厌这种，大家更愿意看到的是，国内汽车崛起超越外资汽车。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-9db97fcf8bd436835f135e68ba046722_720w.jpg?source=2c26e567\" data-rawwidth=\"604\" data-rawheight=\"902\" data-size=\"normal\" data-original-token=\"v2-60f19da7142bb195cf74ad93ada75b1b\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-95cc672e9a558e70ce91a998a9293cef_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"604\" data-original=\"https://pic1.zhimg.com/v2-9db97fcf8bd436835f135e68ba046722_r.jpg?source=2c26e567\"/></figure><p data-pid=\"NQ-aPPyv\">而且长城拆解的比亚迪汽车后，只得到一个排放不达标的结果，还是非国产环境下。我说句很实在的话，你说刹车，悬架，座椅这种，消费者回觉得比亚迪不行，但是你举报这个哪个消费者在意？</p><p data-pid=\"3IQghl2r\">你还拿这个做文章一不做二不休，颇有一种读书时候没东西弄你，就只能乱打小报告同学的味道，行为很不讨喜。更何况他是在非国标规定的环境测试，多离谱？</p><p data-pid=\"ZY5gzoB2\"><b>“我拆你车不是要研究你汽车怎么做的好，而是要找出你的缺点去举报你”</b>对，大部分人就这感觉。</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-4e30b2d8df9aeaf27acd618933223127_720w.jpg?source=2c26e567\" data-rawwidth=\"720\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-f2da588c3738629b2b233df12bf37ae1\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-292c300793fc896f37dc7ee4bdf9dd91_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://picx.zhimg.com/v2-4e30b2d8df9aeaf27acd618933223127_r.jpg?source=2c26e567\"/></figure><p data-pid=\"oqGgVJ4C\">你要知道现在车企也和手机圈、饭圈一样，这种很败坏路人缘的事情给带来的最大结果就是：两个品牌大家都不买，但是长城肯定被骂死。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"Sw3dfsNp\"><b>第二：</b>原本长城的基本盘是那些持家有道的理工男或者直男，然而一通咖啡汽车、水果混动，甚至用原谅绿做营销点还请了杨笠，直接就把这群基本盘用户打得一脸懵。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-494b82715fc59d1772447a419b10ba4f_720w.jpg?source=2c26e567\" data-rawwidth=\"720\" data-rawheight=\"1033\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-964a5f9bbf26c0578a7d30e553b8d202\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-976e6b34b03feb6d43182c2c3f2ebec8_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://picx.zhimg.com/v2-494b82715fc59d1772447a419b10ba4f_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-39ee750df5e4a9bddd7786dda9ef86b2_720w.jpg?source=2c26e567\" data-rawwidth=\"1020\" data-rawheight=\"1000\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-7c31c1d16e6f64d4a314f17fa046f061\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-2c0a9f197c4b02cf39d765f27d7ebae7_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1020\" data-original=\"https://picx.zhimg.com/v2-39ee750df5e4a9bddd7786dda9ef86b2_r.jpg?source=2c26e567\"/></figure><p data-pid=\"GQ1XOGAw\">你要知道他们可是根本不愿意去消费什么玛奇朵的，对他们而言茶叶的吸引力或许比咖啡更大。而在互联网JPX的攻击下，这些理工男直男消费者被贴上“娘炮”、“绿帽子”标签后，这负面打击可是远比特斯拉“孝子”、“刹车失灵”严重得多。</p><p data-pid=\"q2uig2O9\">那些原本冲着名字去的小资青年，看到又是安全另一幅印象的汽车，自然也会失望而归，所以这些车销量都很不行。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"yOqAdd4h\"><b>第三：</b>长城老的汽车质量并不优秀小毛病挺多的，H6车主一定明白，但是自己的售后体系又做得不好，诟病也很多。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-fbba3df0d056c60b5c144bd04a061334_720w.jpg?source=2c26e567\" data-rawwidth=\"1148\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-a6016648937e29e416b0ae078ae7f24f\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-b48de455f8d2a30c1bd5568f40381fc7_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1148\" data-original=\"https://pic1.zhimg.com/v2-fbba3df0d056c60b5c144bd04a061334_r.jpg?source=2c26e567\"/></figure><p data-pid=\"CM94v-NY\">你一个长城自己问题一大堆我就不多展开了，举报同行这种事就不应该你来你却亲自下场，你觉得你在汽车圈还有亲人吗？同事可能都没了！</p><p data-pid=\"1cLkuLEL\">格力当年举报奥克斯就是最好的例子了，长城却重蹈覆辙，如此犯错也只怪掌门人已不是魏建军了吧？？</p><p data-pid=\"4ciA8J1V\">三种结合自然就反而落得自损1000，别人还没啥大事的结果。</p><p data-pid=\"z3tTkL_k\">PS昨天盘中一度暴跌至7.5%，本来还是站稳5周线，这回5月线可能也站不稳了，股价要回到正常位置可是要以年为单位了……何必呢</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-8dc821bb45cffdec3d9bb9dc856642bb_720w.jpg?source=2c26e567\" data-rawwidth=\"2532\" data-rawheight=\"1170\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-df46be4a336ab1415b25b0a42a4b1248\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-7dd53955cec91048a0b950f2a593550b_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"2532\" data-original=\"https://picx.zhimg.com/v2-8dc821bb45cffdec3d9bb9dc856642bb_r.jpg?source=2c26e567\"/></figure><p></p>",
            "excerpt": "现在的人到底被那些自媒体和黑粉节奏带成什么样子了，说什么比亚迪只字不提排放，又说比亚迪变相承认，你们有认真看比亚迪的公告吗？ [图片] 公告清楚明白的写明了：长城测试违规→我们通过国标认真→欢迎随时检测。有什么问题吗？一点问题都没有！———以下原答案——— 3个原因： 第一：市场上违规的外企很多，长城却没做过任何事情。大众a柱断裂排放超标，长城在哪里？特斯拉召回110w汽车，长城又在哪？ 反而是…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 7,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-44c2e2de411a30f95967396ad4a041cf_720w.jpg?source=7e7ef6e2",
                        "width": 1164,
                        "height": 754,
                        "token": "v2-44c2e2de411a30f95967396ad4a041cf",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-60f19da7142bb195cf74ad93ada75b1b_720w.jpg?source=7e7ef6e2",
                        "width": 604,
                        "height": 902,
                        "token": "v2-60f19da7142bb195cf74ad93ada75b1b",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-f2da588c3738629b2b233df12bf37ae1_720w.jpg?source=7e7ef6e2",
                        "width": 720,
                        "height": 720,
                        "token": "v2-f2da588c3738629b2b233df12bf37ae1",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxi8tvqrCyCT6vMtkgIlCgk1ODM3MTYyODkSCjMwNDQ5NzMzNzIYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-05-26T08:50:13+08:00"
    },
    {
        "content": {
            "id": 2234746955,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/65560694/answer/2234746955",
            "created_time": 1637459217,
            "updated_time": 1637459518,
            "question": {
                "type": "question",
                "id": 65560694,
                "title": "怎样判断面试者是否有扎实的前端基础？",
                "question_type": "normal",
                "created": 1505807447,
                "updated_time": 1505807447,
                "url": "https://www.zhihu.com/question/65560694",
                "is_deleted": false
            },
            "author": {
                "id": "c0e2a6c332e573b37d6f5387074ead98",
                "url_token": "doodlewind",
                "name": "doodlewind",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-e5351633ad642a651ed925656c64b76b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-e5351633ad642a651ed925656c64b76b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/c0e2a6c332e573b37d6f5387074ead98",
                "user_type": "people",
                "headline": "github.com/doodlewind",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19550901",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550901",
                                "name": "前端开发",
                                "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "前端开发话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "https://picx.zhimg.com/v2-f13fa5b526dc0900316da8b32cf061f7_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1514,
            "comment_count": 118,
            "thanks_count": 235,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"UwdklFSL\">目前国内业界的面试风格大致可以分成剑宗（工程派）和气宗（理论派）两种，出发点都很好但卷得比较畸形。前者体现为题库八股和叶公好龙式的造火箭问题，后者体现为军备竞赛式的算法题。</p><p data-pid=\"PWyxkmma\">据个人观察，激进的剑宗面试官喜欢问这些东西：</p><ul><li data-pid=\"cxFqLt4E\">「<b>JavaScript 基础</b>」：指原型链、寄生混合继承、==、this 指向之类的坑人细节，凡是越被业界嫌弃的地方就越当成宝。尤其是得问你一段 shit code 的执行结果，仿佛本公司代码仓库里遍地都在滥用 JS 设计失误一样。</li><li data-pid=\"ZRjJyipL\">「<b>JS 引擎底层原理</b>」：问你熟不熟悉 V8，这可是前端技术深度上的明珠啊！别管面试双方是不是从来没编译过 V8 源码，这博客文章必须要熟读，免得被啥 TurboFan 啊 Crankshaft 啊击穿心智，最好能把 JavaScript 靠嘴 JIT 编译成机器码，这样就稳了。</li><li data-pid=\"0Ef0yHZv\">「<b>网页渲染底层原理</b>」：这类问题需要你拿出 Chromium 首席架构师级别的自信，轻描淡写地对浏览器渲染引擎里各种什么 RenderObject 啊 LayerTree 啊之类的中间数据结构进行一下报菜名。你也别管人家为什么要设计成这样，名词到位了咱们就是一路人。</li><li data-pid=\"RxEw6bEo\">「<b>网络基础</b>」：HTTP 有哪些状态码？跨域有哪几种方式？GET 和 POST 有什么区别？TCP 和 UDP 又有什么区别？什么你跟我说这些 Google 一下就有？你在教我做事？是我考你还是你考我？</li><li data-pid=\"pieLealS\">「<b>CSS 基础</b>」：吃我十种垂直居中大礼包啦！以及话说同学你兼容过 IE 吗？</li><li data-pid=\"ItT0pdA3\">「<b>前端框架基础</b>」：熟读 Vue 和 React 的源码难道不是天经地义的吗？就算从来没有贡献过社区，这框架底层原理咱们可都是得熟练掌握的！不然简单点请先背一遍 React fiber 的 PPT 吧？注意有几个常用洋词诸如什么 immutable、functional、stateful 记得一定要发音正确。</li></ul><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-f13fa5b526dc0900316da8b32cf061f7_720w.jpg?source=2c26e567\" data-rawwidth=\"816\" data-rawheight=\"526\" data-size=\"normal\" data-original-token=\"v2-f13fa5b526dc0900316da8b32cf061f7\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-3d2120fc6c609f49b4e8f0f79c890223_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"816\" data-original=\"https://picx.zhimg.com/v2-f13fa5b526dc0900316da8b32cf061f7_r.jpg?source=2c26e567\"/><figcaption>这是真实的剑宗面试题，说实话我不会……</figcaption></figure><p data-pid=\"TOA-hyHH\">和剑宗相比，沉迷气宗的面试官就不 care 这些花里胡哨的玩意了，主要就是上算法题伺候：动态规划、最大最小堆、红黑树、快排、Trie、KMP、LCS……再不然咱们体操来个 type level 的 URL 解析？什么你都不会？你心里有没有点 B 树就敢投我司啊？一套友善送别三连再见了您嘞。</p><p data-pid=\"kXaB1mZz\">可以看出，极端的「剑宗」路线会过度看重非必要的领域知识，而「气宗」则可能逐渐走向脱离实际的智力测试。但问题在于，如果我们承认这两种方向面试题的脱离实际之处，那么就相当于变向承认了这个现实：<b>日常 P6 级 CRUD 的活但凡有手有脑过得了四六级的人，换谁基本都能做……</b>承认这个很难吗？倒不是贬低啊，<b>这真是开源和软件工程的伟大成就</b>。而这里又有个矛盾：虽然前端开发的入门门槛已经被大幅降低了，但头部企业的岗位永远是稀缺的，只需筛选出一小群人即可。于是这时对人的打分函数就可以被玩成充分发挥东亚做题家气质的修罗场了，直接养活一条培训产业链呢。</p><p data-pid=\"SS7UGcpV\">回到原本的问题，我们怎样判断前端开发者的「基础」呢？这恐怕很难说得太具体，个人认为可以从这两种定义出发：</p><ul><li data-pid=\"UrhOGfck\"><b>前端是个开发 UI 软件的工程师角色</b>，因此应该熟悉计算机的通识性知识，以及应对日常工作必备的领域知识，最后当然还有普适性的工程技能（调试、测试、方案设计等）。</li><li data-pid=\"sgFT5RdY\"><b>前端是个实现企业需求的员工角色</b>，因此应该熟悉互联网技术岗螺丝钉的自我修养。什么 ownership 啊沟通协作能力啊这些不用多说了吧，千言万语汇成四个字：找到抓手……</li></ul><p data-pid=\"PCPQ5wKo\">从这两个角度出发再结合上务实的目标，我们的尝试是在面试中引入这样的风格：</p><ul><li data-pid=\"Vrvu-R2t\">找一段难度不高于 LeetCode easy 的业务逻辑给候选人 review，讨论具体代码层面的细节。这里甚至新代码都未必要实际写出来，但往往需要候选人主动提问来逐渐澄清其理解，并把自己改进的思路传达清楚。个人认为这样的「<b>技术沟通能力</b>」很影响团队的实际工作体验，而这个维度在目前的应试型面试中反而被轻视了。</li><li data-pid=\"8ICGcp1K\">对越资深的人，越需要其讲解自己的 track record 以证明其没有一年经验用 N 年。这个其实比较容易感受得出来，就不展开了。</li></ul><p data-pid=\"5gtIV89u\">最后值得注意的是，所谓剑宗和气宗的类比容易给大家带来一些不切实际的幻想。请看金庸先生的原文是怎么写的：</p><blockquote data-pid=\"J5abQSe8\">剑宗和气宗的功夫各练<b>十年</b>，定是剑宗占上风。各练<b>二十年</b>，各擅胜场，难分上下。二十年之后气宗的功夫才渐渐越练越强。到得<b>三十年</b>时，剑宗的功夫便再也不能望气宗的项背了。</blockquote><p data-pid=\"5BjGlWJ5\">道理都懂，但你确定现在的国内环境能让人不焦虑地安心在一线写需求三十年？十年后，剑宗前端和气宗前端一起直接 35 岁中年危机失业啦！全剧终。</p><figure data-size=\"small\"><img src=\"https://pica.zhimg.com/50/v2-f494b4c33979b6f724bd10037094f209_720w.jpg?source=2c26e567\" data-rawwidth=\"1242\" data-rawheight=\"1924\" data-size=\"small\" data-original-token=\"v2-f494b4c33979b6f724bd10037094f209\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-61a17f6c1edbf7df357d26410aa29cf4_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1242\" data-original=\"https://picx.zhimg.com/v2-f494b4c33979b6f724bd10037094f209_r.jpg?source=2c26e567\"/><figcaption>相信这位前辈应该有扎实的后端基础，so what？</figcaption></figure><p></p><hr/><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1445688109098405888\"></a><p></p>",
            "excerpt": "目前国内业界的面试风格大致可以分成剑宗（工程派）和气宗（理论派）两种，出发点都很好但卷得比较畸形。前者体现为题库八股和叶公好龙式的造火箭问题，后者体现为军备竞赛式的算法题。 据个人观察，激进的剑宗面试官喜欢问这些东西： 「JavaScript 基础」：指原型链、寄生混合继承、==、this 指向之类的坑人细节，凡是越被业界嫌弃的地方就越当成宝。尤其是得问你一段 shit code 的执行结果，仿佛本公司代码仓库里遍地都在滥用 …",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 2,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-f13fa5b526dc0900316da8b32cf061f7_720w.jpg?source=7e7ef6e2",
                        "width": 816,
                        "height": 526,
                        "token": "v2-f13fa5b526dc0900316da8b32cf061f7",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pica.zhimg.com/v2-f494b4c33979b6f724bd10037094f209_720w.jpg?source=7e7ef6e2",
                        "width": 1242,
                        "height": 1924,
                        "token": "v2-f494b4c33979b6f724bd10037094f209",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxjLkM6pCCCFluYIkgIlCgk0MzYzOTg1MzQSCjIyMzQ3NDY5NTUYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2021-11-21T09:46:57+08:00"
    },
    {
        "content": {
            "id": 572209747,
            "title": "用typescript类型实现ThreeSum",
            "type": "article",
            "excerpt_title": "写在前面 本文执行环境typescript，版本4.7.4简介不使用typescript的计算能力，通过类型来实现ThreeSum ThreeSum： 枚举一个数组中 a + b = c 的三元组数量，每个三元组都不重复 [图片] 思路整理实现ThreeSum之前我们先降低下难度，实现TwoSum，因为TwoSum可以作为ThreeSum的基础泛型。 TwoSum需要准备什么呢？ • 递归元组，模拟for循环 • 减法，递归过程中求出差值 • 对每一项差值判断是否存在 完成TwoSum后如何实现ThreeSum？ • …",
            "url": "https://zhuanlan.zhihu.com/p/572209747",
            "image_url": "",
            "created": 1665391737,
            "updated": 1665391737,
            "author": {
                "id": "70bbf4bb8e84b1fe41513b5828f0c31a",
                "url_token": "dou-pi-fan-er",
                "name": "豆皮范儿",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-035190a7b27e58deee450522d208e829_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-035190a7b27e58deee450522d208e829.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/70bbf4bb8e84b1fe41513b5828f0c31a",
                "user_type": "people",
                "headline": "微信订阅号”豆皮范儿“",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1604816851
            },
            "comment_permission": "all",
            "content": "<blockquote data-pid=\"V6G-AT1x\">写在前面 本文执行环境typescript，版本4.7.4</blockquote><h3>简介</h3><p data-pid=\"f9KONOnr\">不使用typescript的计算能力，通过类型来实现ThreeSum</p><p data-pid=\"EV7ujMy5\">ThreeSum： 枚举一个数组中 a + b = c 的三元组数量，每个三元组都不重复</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-57fcc6addfbd06cc7346c611e01301e6_b.jpg\" data-caption=\"\" data-size=\"normal\" class=\"content_image\" data-original-token=\"v2-57fcc6addfbd06cc7346c611e01301e6\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>思路整理</h3><p data-pid=\"IhOb0EnB\">实现ThreeSum之前我们先降低下难度，实现TwoSum，因为TwoSum可以作为ThreeSum的基础泛型。</p><p data-pid=\"oFVISsNx\">TwoSum需要准备什么呢？</p><p data-pid=\"GkkyIWzj\">• 递归元组，模拟for循环</p><p data-pid=\"U2Ut4n3K\">• 减法，递归过程中求出差值</p><p data-pid=\"-CoVH8gp\">• 对每一项差值判断是否存在</p><p data-pid=\"7P_7FIP2\">完成TwoSum后如何实现ThreeSum？</p><p data-pid=\"SiIIDQq5\">• 每一项和剩余元组走一遍 TwoSum泛型，筛选满足条件的</p><p data-pid=\"B1l7xtOM\">• 为了保证每一项能够走TwoSum泛型，对于元组大到小排序</p><h3>实现TwoSum</h3><h3>减法</h3><p data-pid=\"ITKvaCi0\">因为元组下标是递增有序数列，我们在每次递归的时候返回一个长度+1的新元组并获取长度，就可以对非负整数依次点名了。</p><p data-pid=\"9eQ5qPhd\">如求A - B，我们假设A - B永远是非负整数数，无限递归产生新元组的过程中，排查掉A和B相等后，必定是先点名到B，然后点名到A，而B到A的递归次数就是差值，也就是求得的结果。</p><p data-pid=\"wQKV38Qg\">实现这个差值的计算：</p><p data-pid=\"ghR5oYBV\">• A作为被减数，R作为长度与减数相等的数组，Z则用于递归累增</p><p data-pid=\"2rMfWDHG\">• 当被减数R长度等于A的过程中，Z则是被减数和减数的差值</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">type GetLen&lt;A extends number, R extends number[], Z extends number[] = []&gt; =\n  A extends R[&#39;length&#39;] ? Z[&#39;length&#39;] : GetLen&lt;A, [...R, 0], [...Z, 0]&gt;;</code></pre></div><p data-pid=\"rciUnLSq\">减法如下：</p><p data-pid=\"Vm9qVm5W\">• 排除掉A和B相等的情况</p><p data-pid=\"uRFBHXcp\">• 前提条件：A大于或者等于B</p><p data-pid=\"J5_SW_wh\">• 用差值泛型求A 和 B的差</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">type Subtract&lt;A extends number, B extends number, R extends number[] = []&gt; =\n  A extends B ? 0 :\n  A extends R[&#39;length&#39;] ? never :\n  B extends R[&#39;length&#39;] ? GetLen&lt;A, R&gt; :\n  Subtract&lt;A, B, [...R, 0]&gt;;</code></pre></div><h3>元组中是否包含差值</h3><p data-pid=\"mCZy2z7r\">求出每一项的差值后，需要判断元组中是否存在，存在则满足 被减数和减数 都存在元组，作为符合条件的一组返回：</p><p data-pid=\"sWSovjAn\">• 从元组第一项开始递归至末尾，则返回false</p><p data-pid=\"pMPH78sl\">• 若某一项的值满足寻找的值，返回ture，否则递归</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">type Includes&lt;A extends number[], T extends number, L extends number[] = []&gt; =\n  A[&#39;length&#39;] extends L[&#39;length&#39;] ? false :\n  A[L[&#39;length&#39;]] extends T ? true : Includes&lt;A, T, [...L, 0]&gt;;</code></pre></div><h3>递归元组</h3><p data-pid=\"Av37ymb2\">根据最开始的思路可以实现：</p><p data-pid=\"tBHiObxg\">• 依次递归元组</p><p data-pid=\"gZauHKvZ\">• 对每一项求差值</p><p data-pid=\"KffZ7i92\">• 判断差值是否存在于数组中</p><p data-pid=\"AmSMknGR\">• R是返回的结果，N是递归计数，Item是被减数，SubItem是减数</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">type TwoSum&lt;\n  T extends number,\n  L extends number[],\n  R extends number[][] = [],\n  N extends number[] = [],\n  Item extends number = L[N[&#39;length&#39;]],\n  SubItem extends number = Subtract&lt;T, Item&gt;,\n&gt; = L[&#39;length&#39;] extends N[&#39;length&#39;] ?\n  R : TwoSum&lt;\n    T,\n    L,\n    Includes&lt;L, SubItem&gt; extends true ? [\n      ...R,\n      [Item, SubItem]\n    ] : R,\n    [...N, 0]\n  &gt;;\n\ntype t1 = TwoSum&lt;4, [1, 2, 3]&gt;;\n// [[1, 3], [2, 2], [3, 1]]</code></pre></div><p data-pid=\"buxW6uDi\">存在缺陷：</p><p data-pid=\"QwItgDFE\">1. 如果被减数和减数值相同，且只存在一个，那结果也是满足的。如：4 和 [1, 2, 3]，我们要的是 [1, 3]，需要排除掉 [2, 2]</p><p data-pid=\"ODbZoMjE\">1. 递归到被减数和减数都会满足条件，会存在重复的两个结果。如：4 和 [1, 2, 3]，我们要的是 [1, 3]，需要排除掉 [3, 1]</p><p data-pid=\"7yB6CutQ\">出现这两个问题，是因为递归过的被减数仍然保留在元组中，所以我们需要把递归过的被减数移除掉。</p><p data-pid=\"yPaAgP7I\">优化一下：</p><p data-pid=\"pzcWe4CZ\">• 每次递归后移除当前项</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">type GetNext&lt;T extends number[]&gt; = T extends [number, ...infer U] ? U : [];\n\ntype TwoSum&lt;\n  T extends number,\n  L extends number[],\n  R extends number[][] = [],\n  Item extends number = L[0],\n  SubItem extends number = Subtract&lt;T, Item&gt;,\n  NextL extends number[] = GetNext&lt;L&gt;,\n&gt; = L[&#39;length&#39;] extends 0 ?\n  R : TwoSum&lt;\n    T,\n    NextL,\n    Includes&lt;NextL, SubItem&gt; extends true ? [\n      ...R,\n      [Item, SubItem]\n    ] : R\n  &gt;;</code></pre></div><h3>测试</h3><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">type t1 = TwoSum&lt;7, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&gt;;\n// [[0, 7], [1, 6], [2, 5], [3, 4]]\n\ntype t2 = TwoSum&lt;12, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&gt;;\n// [[3, 9], [4, 8], [5, 7]]\n\ntype t3 = TwoSum&lt;20, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]&gt;;\n// []\n\ntype t4 = TwoSum&lt;10, [0, 8, 2, 1, 4, 7, 6, 3, 4, 9]&gt;;\n// [[8, 2], [1, 9], [4, 6], [7, 3], [6, 4]]</code></pre></div><h3>实现ThreeSum</h3><h3>排序</h3><p data-pid=\"AaNcoQqW\">为什么需要实现排序，因为上文中 TwoSum泛型的实现，需要满足：</p><p data-pid=\"xCXfkRgh\">1. 输入参数 - 被减数 = 减数。所以 输入参数 &gt; 被减数 、 输入参数 &gt; 减数</p><p data-pid=\"dJLe7Xz2\">1. 从头选取参数、被减数、减数</p><p data-pid=\"T8UEkvQo\">所以排序后可以直接使用TwoSum泛型。</p><h3>ThreeSum</h3><p data-pid=\"dCcO15xu\">• 递归元组</p><p data-pid=\"-2fWK7Av\">• 依次选择 TwoSum的参数，剩余元组</p><p data-pid=\"hha_FY_k\">• 剩余元组中挑选符合条件的被减数、减数并返回</p><p data-pid=\"ixzgSQ2E\">• R为返回结果，NextL为剩余元组，NewList为合并TwoSum的结果</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">// 合并参数到TwoSum的结果，因为TwoSum返回的二元数组\ntype GetNewList&lt;\n  A extends number,\n  T extends number[][],\n  N extends number[] = [],\n  R extends number[][] = []\n&gt; = T[&#39;length&#39;] extends N[&#39;length&#39;] ? R :\n  GetNewList&lt;A, T, [...N, 0], [...R, [A, ...T[N[&#39;length&#39;]]]]&gt;;\n\ntype IsArray2&lt;T&gt; = T extends number[][] ? T : [];\n\ntype ThreeSumLoop&lt;\n  L extends number[],\n  R extends number[][] = [],\n  NextL extends number[] = GetNext&lt;L&gt;,\n  NewList extends number[][] = IsArray2&lt;TwoSum&lt;L[0], NextL&gt;&gt;\n&gt; = L[&#39;length&#39;] extends 0 | 1 ? R :\n  ThreeSumLoop&lt;NextL, NewList[&#39;length&#39;] extends 0 ? R :\n  IsArray2&lt;[...R, ...GetNewList&lt;L[0], NewList&gt;]&gt;&gt;;\n\ntype ThreeSum&lt;L extends number[]&gt; = ThreeSumLoop&lt;IsArray&lt;QuickSort&lt;L&gt;&gt;&gt;;</code></pre></div><h3>测试</h3><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">type l1 = ThreeSum&lt;[1, 3, 2, 4]&gt;;\n// [[4, 3, 1], [3, 2, 1]]\n\ntype l2 = ThreeSum&lt;[1, 6, 3, 7, 5, 4, 2]&gt;;\n// [[7, 6, 1], [7, 5, 2], [7, 4, 3], [6, 5, 1], [6, 4, 2], [5, 4, 1], [5, 3, 2], [4, 3, 1], [3, 2, 1]]\n\ntype l3 = ThreeSum&lt;[0, 5, 15, 10, 5, 25, 20]&gt;;\n// [[25, 20, 5], [25, 15, 10], [20, 15, 5], [15, 10, 5], [10, 5, 5], [5, 5, 0]]\n\ntype l4 = ThreeSum&lt;[1, 16, 3, 17, 5, 4, 21]&gt;;\n// [[21, 17, 4], [21, 16, 5], [17, 16, 1], [5, 4, 1], [4, 3, 1]]</code></pre></div><p></p>",
            "voteup_count": 1,
            "column": {
                "id": "c_1312345098374299648",
                "type": "column",
                "url_token": "c_1312345098374299648",
                "title": "豆皮前端范儿",
                "url": "https://zhuanlan.zhihu.com/c_1312345098374299648",
                "created": 1605667453,
                "updated": 1605667569,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 0
        },
        "created": "2022-10-10T16:48:57+08:00"
    },
    {
        "content": {
            "id": 564256981,
            "title": "用typescript类型来实现快排",
            "type": "article",
            "excerpt_title": "写在前面 本文执行环境typescript，版本4.7.4元组快排能否将元组 [3, 1, 2, 4] 通过泛型转换成 [1, 2, 3, 4] 如何实现快排？ • 遍历元组 • 元组每个值的大小比较 • 每次比较中挑选出符合条件的值，也就是实现 Filter 实现逻辑数字的大小比较在typescript类型中没有比较符，那如何判断 5 和 6 谁更大？ typescript类型不知道，所以需要找到在typescript中已经存在的递增数列，通过这个数列来实现 怎么理解呢类似有 张三 …",
            "url": "https://zhuanlan.zhihu.com/p/564256981",
            "image_url": "",
            "created": 1663130112,
            "updated": 1663130112,
            "author": {
                "id": "70bbf4bb8e84b1fe41513b5828f0c31a",
                "url_token": "dou-pi-fan-er",
                "name": "豆皮范儿",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-035190a7b27e58deee450522d208e829_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-035190a7b27e58deee450522d208e829.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/70bbf4bb8e84b1fe41513b5828f0c31a",
                "user_type": "people",
                "headline": "微信订阅号”豆皮范儿“",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1604816851
            },
            "comment_permission": "all",
            "content": "<blockquote data-pid=\"UH-zOdfq\">写在前面 本文执行环境typescript，版本4.7.4</blockquote><h2>元组快排</h2><p data-pid=\"tMc-mHC-\">能否将元组 [3, 1, 2, 4] 通过泛型转换成 [1, 2, 3, 4]</p><p data-pid=\"EMjdyScu\">如何实现快排？</p><p data-pid=\"gw1KnaSn\">• 遍历元组</p><p data-pid=\"1c5cehnK\">• 元组每个值的大小比较</p><p data-pid=\"oYnwEUJg\">• 每次比较中挑选出符合条件的值，也就是实现 Filter</p><h2>实现逻辑</h2><h3>数字的大小比较</h3><p data-pid=\"LMeKfdIv\">在typescript类型中没有比较符，那如何判断 5 和 6 谁更大？</p><p data-pid=\"0HwqxCQ8\">typescript类型不知道，所以需要找到在typescript中已经存在的递增数列，通过这个数列来实现</p><p data-pid=\"DFvHLYn_\"><b>怎么理解呢</b></p><p data-pid=\"-ZqiroyR\">类似有 张三 和 李四 两个人，要比较他们谁的位置靠前，需要有一个他们排队的数列，然后依次查看，先看到 张三，那么 张三 的位置明显靠前</p><p data-pid=\"upgMqM30\">typescript中有这样的递增数列吗？</p><p data-pid=\"SZDvh4vI\">有的：元组下标（取元祖长度，元祖push的时候长度是递增的数列），只需要递归元组，就可以实现依次点名</p><h3>A 是否 小于或等于 B</h3><p data-pid=\"xHth1qQE\">• 无限递归，直到匹配到 A 或者 B</p><p data-pid=\"wzCjT3SS\">• 先匹配到 A 返回true（表示A小于或等于B），否则返回false</p><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-text\">type SmallerThan&lt;\n    A extends number,\n    B extends number,\n    T extends number[] = []\n&gt; = T[&#39;length&#39;] extends A ? true :\n    T[&#39;length&#39;] extends B ? false :\n    SmallerThan&lt;A, B, [...T, 0]&gt;;</code></pre></div><h3>A 是否 大于或等于 B</h3><p data-pid=\"zczdX9tA\">逻辑同理</p><p data-pid=\"_pGtlvbd\">• 无限递归，直到匹配到 A 或者 B</p><p data-pid=\"mKC9FAcV\">• 先匹配到 A 返回false，否则返回true（表示A大于或等于B）</p><div class=\"highlight\"><pre><code class=\"language-text\">type LargerThan&lt;\n    A extends number,\n    B extends number,\n    T extends number[] = []\n&gt; = T[&#39;length&#39;] extends A ? false :\n    T[&#39;length&#39;] extends B ? true :\n    LargerThan&lt;A, B, [...T, 0]&gt;;</code></pre></div><p data-pid=\"zA9POywV\">当然也可以依赖 SmallerThan 泛型来实现</p><p data-pid=\"dEVeKFHl\">• 与SmallerThan的布尔值取反</p><div class=\"highlight\"><pre><code class=\"language-text\">type LargerThan&lt;\n    A extends number,\n    B extends number,\n    T extends number[] = []\n&gt; = SmallerThan&lt;A, B, T&gt; extends true ? false : true;</code></pre></div><h3>Filter</h3><p data-pid=\"Qq21JN2Y\">• 根据元组长度递归，直到递归次数与元祖长度相等</p><p data-pid=\"JKZiYqxG\">• 当满足条件（比如：大于等于某个值），将值存储到新元组中，否则不操作</p><p data-pid=\"K8pThBHb\">• 依赖上面实现的大小值比较 分别实现 对应的Filter</p><p data-pid=\"zN6A4N6Z\">基于已有的 LargerThan 泛型实现 FilterLargerThan</p><div class=\"highlight\"><pre><code class=\"language-text\">type FilterLargerThan&lt;\n    T extends number[],\n    A extends number,\n    Z extends number[] = [],\n    R extends number[] = []\n&gt; = T[&#39;length&#39;] extends R[&#39;length&#39;] ?\n    Z : FilterLargerThan&lt;\n        T,\n        A,\n        LargerThan&lt;T[R[&#39;length&#39;]], A&gt; extends true ? [...Z, T[R[&#39;length&#39;]]] : Z,\n        [...R, 0]\n    &gt;;</code></pre></div><p data-pid=\"21_sP0cI\">同理，基于已有的 SmallerThan 泛型实现 FilterSmallerThan</p><div class=\"highlight\"><pre><code class=\"language-text\">type FilterSmallerThan&lt;\n    T extends number[],\n    A extends number,\n    Z extends number[] = [],\n    R extends number[] = []\n&gt; = T[&#39;length&#39;] extends R[&#39;length&#39;] ?\n    Z : FilterSmallerThan&lt;\n        T,\n        A,\n        SmallerThan&lt;T[R[&#39;length&#39;]], A&gt; extends true ? [...Z, T[R[&#39;length&#39;]]] : Z,\n        [...R, 0]\n    &gt;;</code></pre></div><h3>优化Filter</h3><p data-pid=\"8KPRuvl0\">Filter写的很重复了，根据DRY原则（don&#39;t repeat yourself），需要将泛型作为参数传进去，来避免冗余重复的代码</p><h3>重构数字的大小值比较</h3><p data-pid=\"dIKh_7AI\">如何把泛型作为参数传入，然后在参数中限定？</p><p data-pid=\"Fa3Rdw58\">嗯...好问题</p><div class=\"highlight\"><pre><code class=\"language-text\">// 目标是实现这种\ntype Test&lt;A extends number, T extends ?&gt; = T&lt;A&gt;;</code></pre></div><p data-pid=\"KRQ6rzI2\">貌似不太行，那变个思路：</p><p data-pid=\"q0fpMIG0\">实现一个泛型对象，每个键值对实现对应的处理，最后只需要传入这个对象的key来获取泛</p><p data-pid=\"pTZbMB0I\">型，在参数的限定可以变成对key的限定，通过keyof 对象即可实现</p><p data-pid=\"GQcNppnv\">• 实现一个泛型对象Demo</p><p data-pid=\"Kx-UTR6q\">• 每个键值对实现对应的处理，如 a: F</p><p data-pid=\"kX4jYIEh\">• 传入这个对象的key来获取泛型，如 T extends keyof Demo</p><div class=\"highlight\"><pre><code class=\"language-text\">type F&lt;A extends number&gt; = A;\n\ntype Demo&lt;A extends number&gt; = {\n    a: F&lt;A&gt;;\n}\n\ntype Test&lt;A extends number, T extends keyof Demo&lt;number&gt;&gt; = Demo&lt;A&gt;[T];\n\ntype t1 = Test&lt;1, &#39;a&#39;&gt;;</code></pre></div><p data-pid=\"Bsp3VLF1\">•   根据上述原则，将对应的泛型组合成泛型对象 Compare</p><p data-pid=\"ig7ZYEEX\">•   SmallerThan 实现之前的 SmallerThan 泛型</p><p data-pid=\"A1WbIPMW\">•   LargerThan 实现之前的 LargerThan 泛型</p><div class=\"highlight\"><pre><code class=\"language-text\">type Compare&lt;A extends number, B extends number, T extends number[] = []&gt; = {\n    [&#39;SmallerThan&#39;]:\n        T[&#39;length&#39;] extends A ? true :\n            T[&#39;length&#39;] extends B ? false :\n                Compare&lt;A, B, [...T, 0]&gt;[&#39;SmallerThan&#39;];\n\n    [&#39;LargerThan&#39;]:\n        T[&#39;length&#39;] extends A ? false :\n            T[&#39;length&#39;] extends B ? true :\n            Compare&lt;A, B, [...T, 0]&gt;[&#39;LargerThan&#39;];\n}</code></pre></div><h3>重构Filter</h3><p data-pid=\"FK7kgiOv\">• 将对应的泛型改成 Compare</p><p data-pid=\"dGECuNbv\">• key需要手动传入，即为字符串 SmallerThan 和 LargerThan</p><div class=\"highlight\"><pre><code class=\"language-text\">type Filter&lt;\n    T extends number[],\n    A extends number,\n    key extends keyof Compare&lt;number, number&gt;,\n    Z extends number[] = [],\n    R extends number[] = [],\n&gt; = T[&#39;length&#39;] extends R[&#39;length&#39;] ?\n    Z : Filter&lt;\n        T,\n        A,\n        key,\n        Compare&lt;T[R[&#39;length&#39;]], A&gt;[key] extends true ? [...Z, T[R[&#39;length&#39;]]] : Z,\n        [...R, 0]\n    &gt;;</code></pre></div><h3>快排</h3><p data-pid=\"sNk9_COx\">• 递归元组，直到拆解为长度 0 或者 1 的元祖</p><p data-pid=\"VDU-2vto\">• 元组长度小于等于 1 的时候返回自身</p><p data-pid=\"LPlMK_Z8\">• 默认取第一项作为对比值，并用泛型 UNSHIFT 移除第一项</p><p data-pid=\"7fq-tUqC\">• 通过filter和第一项比较筛选出对应的新元祖</p><div class=\"highlight\"><pre><code class=\"language-text\">type UNSHIFT&lt;T extends number[]&gt; = T extends [number, ...infer U] ? U: [];\n\n// 确保 Smaller 和 Larger 为元祖/数组\ntype IsArray&lt;T&gt; = T extends number[] ? T : [];\n\n// 快排\ntype QuickSort&lt;\n  T extends number[],\n  Smaller extends number[] = IsArray&lt;Filter&lt;UNSHIFT&lt;T&gt;, T[0], &#39;SmallerThan&#39;&gt;&gt;,\n  Larger extends number[] = IsArray&lt;Filter&lt;UNSHIFT&lt;T&gt;, T[0], &#39;LargerThan&#39;&gt;&gt;\n&gt; = T[&#39;length&#39;] extends 0 | 1 ?\n    T : [\n        ...QuickSort&lt;Smaller&gt;,\n        T[0],\n        ...QuickSort&lt;Larger&gt;\n    ];</code></pre></div><h3>测试快排</h3><div class=\"highlight\"><pre><code class=\"language-text\">type ARR1 = [5, 2, 4, 1, 0, 6];\ntype test1 = QuickSort&lt;ARR1&gt;;\n// [0, 1, 2, 4, 5, 6]\n\ntype ARR2 = [3, 2, 7, 1, 0, 6, 9, 5, 8, 4];\ntype test2 = QuickSort&lt;ARR2&gt;;\n// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\ntype ARR3 = [1, 1, 0, 1, 1, 0, 0];\ntype test3 = QuickSort&lt;ARR3&gt;;\n// [0, 0, 0, 1, 1, 1, 1]</code></pre></div><p data-pid=\"7-PfygHc\">看起来一切正常，可以发现遗漏了负数</p><p data-pid=\"9bW1oScV\">测试负数的时候问题出现了</p><p data-pid=\"6YskGkeZ\">因为最开始的大小值对比，是从0开始无限递归的</p><p data-pid=\"SIdka9F9\">结束条件是命中其中一个数，然而负数是永远不会命中，这就是致命bug！</p><h2>优化：负数</h2><h3>负数的判断</h3><p data-pid=\"KMBCjbup\">负数的特点：多了一个符号，也就是 &#34;-&#34;</p><p data-pid=\"oQwHmmfD\">• 转换成字符串后取第一个字符判断是否为 &#34;-&#34;</p><p data-pid=\"tENfm17T\">• 通过 infer 来获取第一个字符</p><div class=\"highlight\"><pre><code class=\"language-text\">type isFuShu&lt;T extends number&gt; = `${T}` extends `${infer P}${string}` ?\n    P extends &#39;-&#39; : true : false;\n\ntype i1 = isFuShu&lt;6&gt;;  // false\ntype i2 = isFuShu&lt;-6&gt;;  // true</code></pre></div><h3>字符串转数字</h3><p data-pid=\"BcUVqkh2\">但是这样拿到的是字符串，还要把字符串转成数字</p><p data-pid=\"a6KH4kvA\">和大小比较的逻辑一样</p><p data-pid=\"Ik6MaDiT\">• 无限递归，每次递归传入新元组</p><p data-pid=\"Jsz9a2Mx\">• 元组长度（模板字符串） 等于 参数后结束递归，并返回元组长度</p><div class=\"highlight\"><pre><code class=\"language-text\">type ToNumber&lt;S extends string, R extends number[] = []&gt; =\n    S extends `${R[&#39;length&#39;]}` ?\n        R[&#39;length&#39;] : ToNumber&lt;S, [...R, 0]&gt;;</code></pre></div><h3>获取负数的值</h3><p data-pid=\"AgFNZXGX\">判断是负数后要拿到负数的值</p><p data-pid=\"kRwa2vIt\">• 和负数符号判断类似，获取除开符号之后的字符串</p><p data-pid=\"9d65hH43\">• 字符串通过泛型 ToNumber 转数字</p><div class=\"highlight\"><pre><code class=\"language-text\">type GetFushu&lt;T extends number&gt; = `${T}` extends `${string}${infer U}` ?\n    ToNumber&lt;U&gt; : 0;</code></pre></div><h3>完善获取绝对值</h3><p data-pid=\"RdsCzzNs\">• 非负数返回自身，负数通过泛型 GetFushu 来获取</p><div class=\"highlight\"><pre><code class=\"language-text\">type GetAbs&lt;T extends number&gt; = isFuShu&lt;T&gt; extends true ? GetFushu&lt;T&gt; : T;</code></pre></div><h3>重构数字的大小比较</h3><p data-pid=\"DfpjGV_2\">负数的对比和正数相反，且正数一定比负数大</p><p data-pid=\"8t-_xHMv\">• 判断比较的值是负数还是非负数</p><p data-pid=\"wBEUkIVR\">• 非负数通过泛型 CompareV2 比较大小</p><p data-pid=\"6KBB1EKN\">• 负数获取绝对值后，通过泛型 CompareV2 取反比较大小</p><p data-pid=\"3XOKwwth\">• 非负数一定大于负数</p><p data-pid=\"Y3FOStwk\">• 泛型 SmallerThan 实现非负数的比较，泛型SmallerThanV2 实现负数和非负数的比较</p><p data-pid=\"nJHExtlL\">• 泛型 LargerThan 和泛型 LargerThanV2 同理</p><div class=\"highlight\"><pre><code class=\"language-text\">type CompareV2&lt;A extends number, B extends number, T extends number[] = []&gt; = {\n    [&#39;SmallerThan&#39;]:\n        T[&#39;length&#39;] extends A ? true :\n            T[&#39;length&#39;] extends B ? false :\n                CompareV2&lt;GetAbs&lt;A&gt;, GetAbs&lt;B&gt;, [...T, 0]&gt;[&#39;SmallerThan&#39;];\n\n    [&#39;SmallerThanV2&#39;]:\n        isFuShu&lt;A&gt; extends true ?\n            (isFuShu&lt;B&gt; extends true ?\n                CompareV2&lt;A, B&gt;[&#39;LargerThan&#39;] :\n                true) :\n            (isFuShu&lt;B&gt; extends true ?\n                false :\n                CompareV2&lt;A, B&gt;[&#39;SmallerThan&#39;]);\n\n    [&#39;LargerThan&#39;]:\n        T[&#39;length&#39;] extends A ? false :\n            T[&#39;length&#39;] extends B ? true :\n                CompareV2&lt;GetAbs&lt;A&gt;, GetAbs&lt;B&gt;, [...T, 0]&gt;[&#39;LargerThan&#39;];\n\n    [&#39;LargerThanV2&#39;]:\n        isFuShu&lt;A&gt; extends true ?\n            (isFuShu&lt;B&gt; extends true ?\n                CompareV2&lt;A, B&gt;[&#39;SmallerThan&#39;] :\n                false) :\n            (isFuShu&lt;B&gt; extends true ?\n                true :\n                CompareV2&lt;A, B&gt;[&#39;LargerThan&#39;]);\n}</code></pre></div><p data-pid=\"3ZJmKyuH\">测试用例</p><div class=\"highlight\"><pre><code class=\"language-text\">type h1 = CompareV2&lt;-8, -6&gt;[&#39;SmallerThanV2&#39;]; // true\ntype h2 = CompareV2&lt;8, -6&gt;[&#39;SmallerThanV2&#39;]; // false\ntype h3 = CompareV2&lt;6, 8&gt;[&#39;SmallerThanV2&#39;]; // true\ntype h4 = CompareV2&lt;-8, 6&gt;[&#39;SmallerThanV2&#39;]; // true\n\ntype i1 = CompareV2&lt;-8, -6&gt;[&#39;LargerThanV2&#39;]; // false\ntype i2 = CompareV2&lt;8, -6&gt;[&#39;LargerThanV2&#39;]; // true\ntype i3 = CompareV2&lt;6, 8&gt;[&#39;LargerThanV2&#39;]; // false\ntype i4 = CompareV2&lt;-8, 6&gt;[&#39;LargerThanV2&#39;]; // false</code></pre></div><h3>重构快排</h3><p data-pid=\"tbwQ9o5H\">重构泛型 FilterV2（更换 Compare -&gt; CompareV2）</p><div class=\"highlight\"><pre><code class=\"language-text\">type FilterV2&lt;\n    T extends number[],\n    A extends number,\n    key extends keyof CompareV2&lt;number, number&gt;,\n    Z extends number[] = [],\n    R extends number[] = [],\n&gt; = T[&#39;length&#39;] extends R[&#39;length&#39;] ?\n    Z : FilterV2&lt;\n        T,\n        A,\n        key,\n        CompareV2&lt;T[R[&#39;length&#39;]], A&gt;[key] extends true ? [...Z, T[R[&#39;length&#39;]]] : Z,\n        [...R, 0]\n    &gt;;\n\n// 快排\ntype QuickSortV2&lt;\n    T extends any[], \n    Smaller extends number[] = IsArray&lt;FilterV2&lt;UNSHIFT&lt;T&gt;, T[0], &#39;SmallerThanV2&#39;&gt;&gt;,\n    Larger extends number[] = IsArray&lt;FilterV2&lt;UNSHIFT&lt;T&gt;, T[0], &#39;LargerThanV2&#39;&gt;&gt;\n&gt; = T[&#39;length&#39;] extends 0 | 1 ?\n    T : [\n        ...QuickSortV2&lt;Smaller&gt;,\n        T[0],\n        ...QuickSortV2&lt;Larger&gt;\n    ];</code></pre></div><h3>测试快排V2</h3><div class=\"highlight\"><pre><code class=\"language-text\">type ARR4 = [-5, -2, -4, -1, 0, -6];\ntype test4 = QuickSortV2&lt;ARR4&gt;;\n// [-6, -5, -4, -2, -1, 0]\n\ntype ARR5 = [-5, -2, 4, -1, 0, -6, 2, -3, 7];\ntype test5 = QuickSortV2&lt;ARR5&gt;;\n// [-6, -5, -3, -2, -1, 0, 2, 4, 7]\n\ntype ARR6 = [3, -2, 7, -1, 0, -6, 9, -5, 8, -4];\ntype test6 = QuickSortV2&lt;ARR6&gt;;\n// [-6, -5, -4, -2, -1, 0, 3, 7, 8, 9]</code></pre></div><p></p>",
            "voteup_count": 2,
            "column": {
                "id": "c_1312345098374299648",
                "type": "column",
                "url_token": "c_1312345098374299648",
                "title": "豆皮前端范儿",
                "url": "https://zhuanlan.zhihu.com/c_1312345098374299648",
                "created": 1605667453,
                "updated": 1605667569,
                "description": "",
                "image_url": "https://pic1.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 1
        },
        "created": "2022-09-14T12:35:12+08:00"
    },
    {
        "content": {
            "id": 374225239,
            "title": "我的package-lock.json被谁改了？",
            "type": "article",
            "excerpt_title": "豆皮粉儿们，大家好呀。一转眼又陪伴大家来到了不负春光和时行，人间最美的四月天。 作者：羯磨 大家在提交代码时，是否会经常遇到提示package-lock.json有莫名其妙变动的提示？下面就跟这篇文章一起来一探究竟吧。 [图片] 介绍之前我们项目经常会出现执行npm i后 package-lock.json被更改的问题，但是经常是我们觉得不应该出现被更改的情况而被更改了，看了一下 package-locks | npm Docs 官方文档，并结合实践分析了一下可能的原因，下…",
            "url": "https://zhuanlan.zhihu.com/p/374225239",
            "image_url": "",
            "created": 1621594240,
            "updated": 1621594240,
            "author": {
                "id": "70bbf4bb8e84b1fe41513b5828f0c31a",
                "url_token": "dou-pi-fan-er",
                "name": "豆皮范儿",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-035190a7b27e58deee450522d208e829_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-035190a7b27e58deee450522d208e829.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/70bbf4bb8e84b1fe41513b5828f0c31a",
                "user_type": "people",
                "headline": "微信订阅号”豆皮范儿“",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1604816851
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"gXoUsXsl\">豆皮粉儿们，大家好呀。一转眼又陪伴大家来到了不负春光和时行，人间最美的四月天。</p><blockquote data-pid=\"xASQ_CUd\"> 作者：羯磨<br/> </blockquote><p data-pid=\"qLMjNCC2\">大家在提交代码时，是否会经常遇到提示package-lock.json有莫名其妙变动的提示？下面就跟这篇文章一起来一探究竟吧。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d423c616a0762fe9d73cbaa585c76cd0_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" data-thumbnail=\"https://pic1.zhimg.com/v2-d423c616a0762fe9d73cbaa585c76cd0_b.jpg\" class=\"content_image\" width=\"240\" data-original-token=\"v2-d423c616a0762fe9d73cbaa585c76cd0\"/></figure><h2><b>介绍</b></h2><p data-pid=\"w_dvn8pG\">之前我们项目经常会出现执行npm i后 package-lock.json被更改的问题，但是经常是我们觉得不应该出现被更改的情况而被更改了，看了一下<a href=\"https://link.zhihu.com/?target=https%3A//docs.npmjs.com/cli/v6/configuring-npm/package-locks\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">package-locks | npm Docs</a>官方文档，并结合实践分析了一下可能的原因，下面的内容都是针对 npm@7 以下的情况而言的，npm@7 更新了 lockfiles 的版本，具体会在别的文章中介绍</p><h2><b>package-lock.json 生成逻辑</b></h2><p data-pid=\"6ztiGkYN\">npm@5 以后 npm 会根据 package.json 生成 lockfiles 文件，目的就是为了保证生产和线上编译或者团队开发时大家生成 node_modules tree是一致的，但是即使是这样不同版本的 npm 对于 lockfiles 的处理逻辑是不同的<a href=\"https://www.zhihu.com/question/62331583/answer/275248129\" class=\"internal\">npm install 生成的package-lock.json是什么文件?有什么用? - 知乎</a>。</p><h3><b>5.0.x</b></h3><p data-pid=\"Df6IErbG\">该版本下 npm 忽略 package.json 的变化，只会根据 lockfiles 下载 node_modules</p><h3><b>5.1.0 - 5.4.2</b></h3><p data-pid=\"rzfL9cc2\">npm 又变成了会错误的忽略 lockfiles 去下载 node_modules</p><h3><b>5.4.2</b></h3><p data-pid=\"XEG40RTK\">这版的逻辑我觉得是最自洽的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/npm/npm/issues/17979%23issuecomment-332701215\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/npm/npm/issu</span><span class=\"invisible\">es/17979#issuecomment-332701215</span><span class=\"ellipsis\"></span></a></p><blockquote data-pid=\"6uToJ8J9\"> If you have a package.json and you run npm i we generate a package-lock.json from it.<br/> If you run npm i against that package.json and package-lock.json, the latter will never be updated, even if the package.json would be happy with newer versions.<br/> If you manually edit your package.json to have different ranges and run npm i and those ranges aren&#39;t compatible with your package-lock.json then the latter will be updated with version that <i>are</i> compatible with your package.json. Further runs of npm i will be as with 2 above.<br/> </blockquote><p data-pid=\"TRhcvZCG\">总结起来就是如果我们修改了 package.json 里包的版本，如果新的包的版本和与 lockfiles 里包的版本对照是不符合<a href=\"https://link.zhihu.com/?target=https%3A//docs.npmjs.com/cli/v6/using-npm/semver\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">semver</a>规范的，那么，lockfiles 里对应的 version 就会被更新。</p><h2><b>package-lock.json 生成的逻辑</b></h2><p data-pid=\"dM27AzgM\">只是简单描述一下 lockfiles 生成的逻辑<br/>我们现在有三个 package,</p><div class=\"highlight\"><pre><code class=\"language-text\">// package lock-test\n{\n    &#34;name&#34;: &#34;lock-test&#34;,\n    &#34;dependencies&#34;: {\n        &#34;A&#34;: &#34;^1.0.0&#34;\n    }\n}\n\n// package A\n{\n  &#34;name&#34;: &#34;A&#34;,\n  &#34;version&#34;: &#34;1.0.0&#34;,\n  &#34;dependencies&#34;: {\n    &#34;B&#34;: &#34;^1.0.0&#34;\n  }\n}\n\n// package B\n{\n  &#34;name&#34;: &#34;B&#34;,\n  &#34;version&#34;: &#34;1.0.0&#34;,\n  &#34;dependencies&#34;: {\n    &#34;C&#34;: &#34;^1.0.0&#34;\n  }\n}\n\n// package C\n{\n  &#34;name&#34;: &#34;C&#34;,\n  &#34;version&#34;: &#34;1.0.0&#34;\n}\n</code></pre></div><p data-pid=\"awrkzOap\">在这种情况下 package-lock.json, 会生成类似下面铺平的结构</p><div class=\"highlight\"><pre><code class=\"language-text\">// package-lock.json\n{\n  &#34;name&#34;: &#34;lock-test&#34;,\n  &#34;version&#34;: &#34;1.0.0&#34;,\n  &#34;dependencies&#34;: {\n    &#34;A&#34;: {\n      &#34;version&#34;: &#34;1.0.0&#34;\n    },\n    &#34;B&#34;: {\n      &#34;version&#34;: &#34;1.0.0&#34;\n    },\n    &#34;C&#34;: {\n      &#34;version&#34;: &#34;1.0.0&#34;\n    }\n  }\n}\n</code></pre></div><p data-pid=\"EsLtvoKQ\">简单说会以当前 package.json 包里对应包符合要求的最新版记录在 lockfiles 里，如果后续无论是直接依赖的 A 发版，或者间接依赖的B, C 发版，只要我们不动 package.json, lockfiles 都不会重新生成。</p><p data-pid=\"M8To6Yvn\">A 发布了新版本 1.1.0，虽然我们 package.json 写的是 ^1.0.0 但是因为 lockfiles 的存在，npm i 并不会自动升级，我们可以手动运行 <code>npm i A@1.1.0</code> 来实现升级。因为 1.1.0 版本与lockfiles 里记录的 <code>A@1.0.0</code> 是不一致的，因此会更新 lockfiles 里的 A 的版本为 1.1.0。</p><p data-pid=\"L1VkqNFl\">B 发布了新版本 1.0.1, 1.0.2, 1.1.0, 此刻如果我们不做操作是不会自动升级 B 的版本的，但如果此刻 A 发布了 1.1.1，虽然并没有升级 B 的依赖，但是如果我们项目里升级 <code>A@1.1.1</code>，此时 lockfiles 里会把 B 直接升到 1.1.0 ,因为此刻^1.0.0的最新版本就是 1.1.0。</p><p data-pid=\"eFmM48xv\">经过这些操作后 package.json 变成</p><div class=\"highlight\"><pre><code class=\"language-text\">// package lock-test\n{\n    &#34;dependencies&#34;: {\n        &#34;A&#34;: &#34;^1.1.0&#34;\n    }\n}\n</code></pre></div><p data-pid=\"SCRnsEFE\">对应的package-lock.json文件</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n  &#34;name&#34;: &#34;lock-test&#34;,\n  &#34;version&#34;: &#34;1.0.0&#34;,\n  &#34;dependencies&#34;: {\n    &#34;A&#34;: {\n      &#34;version&#34;: &#34;1.1.0&#34;\n    },\n    &#34;B&#34;: {\n      &#34;version&#34;: &#34;1.1.0&#34;\n    },\n    &#34;C&#34;: {\n      &#34;version&#34;: &#34;1.0.0&#34;\n    }\n  }\n}\n</code></pre></div><p data-pid=\"sA1XD-kK\">这个时候我们将 B加入我们项目的依赖, <code>B@^1.0.0</code>，package.json如下</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n    &#34;dependencies&#34;: {\n        &#34;A&#34;: &#34;^1.1.0&#34;,\n        &#34;B&#34;: &#34;^1.0.0&#34;\n    }\n}\n</code></pre></div><p data-pid=\"EBrecpP9\">我们执行这个操作后，lockfiles 并没有被改变，因为现在 lockfiles 里 <code>B@1.1.0</code> 满足 ^1.0.0 的要求</p><p data-pid=\"zcShk76u\">但是如果我们将 B 的版本固定到 2.x 版本, lockfiles 就会发生改变</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n    &#34;dependencies&#34;: {\n        &#34;A&#34;: &#34;^1.1.0&#34;,\n        &#34;B&#34;: &#34;^2.0.0&#34;\n    }\n}\n</code></pre></div><p data-pid=\"EyJqeUjy\">因为存在了两个冲突的B版本，package-lock.json文件会变成如下形式</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n  &#34;name&#34;: &#34;lock-test&#34;,\n  &#34;version&#34;: &#34;1.0.0&#34;,\n  &#34;dependencies&#34;: {\n    &#34;A&#34;: {\n      &#34;version&#34;: &#34;1.1.0&#34;,\n      &#34;dependencies&#34;: {\n        &#34;B&#34;: {\n          &#34;version&#34;: &#34;1.1.0&#34;\n        }\n      }\n    },\n    &#34;B&#34;: {\n      &#34;version&#34;: &#34;2.0.0&#34;\n    },\n    &#34;C&#34;: {\n      &#34;version&#34;: &#34;1.0.0&#34;\n    }\n  }\n}\n</code></pre></div><p data-pid=\"pcX8KS8E\">因为 B 的版本出现了冲突，npm 使用嵌套描述了这种行为</p><p data-pid=\"Um-0h2r0\">我们实际开发中并不需要关注这种生成的算法逻辑，我们只需要了解，lockfiles 的生成逻辑是为了能够精准的反映出我们 node_modules 的结构，并保证能够这种结构被还原。</p><h2><b>package-lock.json 可能被意外更改的原因</b></h2><ol><li data-pid=\"Ez8AyuVL\">新增或者删除了一些包，但是没有及时 install</li></ol><p data-pid=\"At2YsyjI\">我们可以想象出现这样一种场景，a 同学给 package.json 添加了一个 package，但是没有执行 npm install，代码被 push 上去后，b 同学执行 npm i，就会发现 lockfiles 被更改了</p><ol><li data-pid=\"yk5xCvhO\">挪动了包的位置</li></ol><p data-pid=\"-2xSL8H5\">将部分包的位置从 dependencies 移动到 devDependencies这种操作，虽然包未变，但是也会影响 lockfiles，会将部分包的 dev 字段设置为 true</p><ol><li data-pid=\"RwsWjJ9D\">registry 的影响</li></ol><p data-pid=\"gHWHKI_M\">经过实际使用发现，如果我们 node_modules 文件夹下的包中下载时的的 registry 与 lockfiles 中包即使 version 相同，但是registry是不同，执行 npm i 时也会修改。</p><p data-pid=\"BV2dX9OD\">可能还存在其他的原因，但是 lockfiles 是不会无缘无故被更改的，一定是因为 package.json 或者 node_modules 被更改了，因为 正如上面提到的 lockfiles 为了能够精准的反映出我们 node_modules 的结构</p><h2><b>开发的建议</b></h2><p data-pid=\"jdiRpXRC\">目前来看，npm install 是足够可靠的，他能保证根据 lockfiles 还原出开发时的 node_modules，但是为了防止出现刚刚提到的意外情况，除非涉及到对包的调整，其他情况下建议使用 npm ci 来安装依赖，会避免异常的修改 lockfiles，持续集成工具中更推荐是用 npm ci，保证构建环境的准确性，npm i 和 npm ci 的区别可以参考官方文档 <a href=\"https://link.zhihu.com/?target=https%3A//docs.npmjs.com/cli/v7/commands/npm-install\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">npm-install | npm Docs</a>，<a href=\"https://link.zhihu.com/?target=https%3A//docs.npmjs.com/cli/v6/commands/npm-ci\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">npm-ci | npm Docs</a></p><p data-pid=\"4GQOiOtl\">更多精彩内容：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ad62d7a2f0db827c8ee16ee3b418b076_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"516\" data-rawheight=\"258\" data-thumbnail=\"https://pic3.zhimg.com/v2-ad62d7a2f0db827c8ee16ee3b418b076_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"516\" data-original=\"https://pic3.zhimg.com/v2-ad62d7a2f0db827c8ee16ee3b418b076_r.jpg\" data-original-token=\"v2-ad62d7a2f0db827c8ee16ee3b418b076\"/></figure><p></p>",
            "voteup_count": 7,
            "column": {
                "id": "c_1312345098374299648",
                "type": "column",
                "url_token": "c_1312345098374299648",
                "title": "豆皮前端范儿",
                "url": "https://zhuanlan.zhihu.com/c_1312345098374299648",
                "created": 1605667453,
                "updated": 1605667569,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 0
        },
        "created": "2021-05-21T18:50:40+08:00"
    },
    {
        "content": {
            "id": 629012614,
            "title": "带你了解JS引擎的性能优化手段：Inline Caches",
            "type": "article",
            "excerpt_title": "最近在学习React的时候无意中了解到JS引擎有一项性能优化手段叫Inline Caches，顿时产生浓厚的兴趣。于是研究了一番，并整理成文。 JS执行过程目前市面上所有的JS引擎包括Chrome的V8、Mozilla的SpiderMonkey、微软的Chakra以及苹果的JSC，它们执行JS代码的过程都是类似的。 [图片] 首先，JS源码经过解析器（ Parser）的词法分析和语法分析，生成抽象语法树（AST）。然后，解释器（Interpreter）将AST转成字节码并执行。解释器生成字节…",
            "url": "https://zhuanlan.zhihu.com/p/629012614",
            "image_url": "https://picx.zhimg.com/v2-cdf75103c9b5fe96b91cae520713dd88_r.jpg?source=172ae18b",
            "created": 1683907417,
            "updated": 1683907417,
            "author": {
                "id": "fe803b258dd17c69e9ac34af4b818b2f",
                "url_token": "liang-jian-wen-80",
                "name": "文言前端",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-847da1e2394e2019d573cc2fc01af6e2_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-847da1e2394e2019d573cc2fc01af6e2.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/fe803b258dd17c69e9ac34af4b818b2f",
                "user_type": "people",
                "headline": "用代码构筑世界，公众号：文言前端",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1455511050
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"DWjsiyLX\">最近在学习React的时候无意中了解到JS引擎有一项性能优化手段叫Inline Caches，顿时产生浓厚的兴趣。于是研究了一番，并整理成文。</p><h3>JS执行过程</h3><p data-pid=\"m9tBqhCg\">目前市面上所有的JS引擎包括Chrome的V8、Mozilla的SpiderMonkey、微软的Chakra以及苹果的JSC，它们执行JS代码的过程都是类似的。 </p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7980090f842ee3cbf8ac5cfa242f684b_b.jpg\" data-size=\"normal\" data-rawwidth=\"1926\" data-rawheight=\"986\" class=\"origin_image zh-lightbox-thumb\" width=\"1926\" data-original=\"https://pic4.zhimg.com/v2-7980090f842ee3cbf8ac5cfa242f684b_r.jpg\" data-original-token=\"v2-b3da8bbc54ddf036c9cb4ca31b207835\"/><figcaption>image.png</figcaption></figure><p data-pid=\"BpA9Ugr5\"> 首先，JS源码经过解析器（<code>Parser</code>）的词法分析和语法分析，生成抽象语法树（<code>AST</code>）。然后，解释器（<code>Interpreter</code>）将AST转成字节码并执行。</p><p data-pid=\"fK3V-4nS\">解释器生成字节码的速度很快，但字节码的执行效率没有机器码高。</p><p data-pid=\"00mrudPa\">为了提升性能，JS引擎引入优化编译器（<code>Optimizing Compiler</code>）。优化编译器通过字节码和分析数据（<code>Profiling Data</code>）或者说反馈信息（<code>Feedback</code>）推断出可优化的点，从而生成优化的机器码，最后由CPU执行。</p><p data-pid=\"uN3obGwN\">有的时候优化编译器的推断会产生不正确的结果，这时候会去优化（<code>deoptimize</code>），回到解释器，执行字节码。</p><p data-pid=\"riEvSfvK\">虽然机器码执行效率比较高，但优化编译器将字节码转成机器码也需要消耗一些时间。综合考虑下来，大部分代码以字节码的形式执行，少部分会优化成机器码执行。</p><p data-pid=\"5SjtWqPu\">值得一提的是，V8引擎的解释器叫<code>Ignition</code>，优化编译器叫<code>TurboFan</code>。这时再去看V8的原理就可能更容易理解了。</p><h3>JS对象的表示</h3><p data-pid=\"NmN7q6Rj\">JS对象是以字典的形式存在，每一个字符串key映射到对应的value。但更底层一点，应该是映射到对应的property属性。回想一下，我们可以通过<code>Object.defineProperty</code>修改对象属性的隐藏属性：<code>value</code>、<code>writable</code>、<code>enumerable</code>和<code>configurable</code>。 </p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0c8d518374a1882ba0f0750bc054dae2_b.jpg\" data-size=\"normal\" data-rawwidth=\"1688\" data-rawheight=\"1146\" class=\"origin_image zh-lightbox-thumb\" width=\"1688\" data-original=\"https://pic3.zhimg.com/v2-0c8d518374a1882ba0f0750bc054dae2_r.jpg\" data-original-token=\"v2-2e07a7c09dbc05870f58f8492bad1dc5\"/><figcaption>image.png</figcaption></figure><p data-pid=\"BrQuOYf2\"> 上面的对象<code>a</code>，它的两个属性<code>x</code>、<code>y</code>分别指向对应的property属性，value分别为1和2。</p><p data-pid=\"H7y7AdZ7\">当我们需要创建大量相似的对象时，比如通过下面的构造函数<code>Person</code>出3个实例：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">age</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">;</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"nx\">age</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"s1\">&#39;Thomas&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"s1\">&#39;John&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person</span><span class=\"p\">(</span><span class=\"s1\">&#39;Lucy&#39;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">);</span>\n</code></pre></div><p data-pid=\"KtHtix2M\"><code>a</code>、<code>b</code>、<code>c</code>三个对象有相同的属性key：<code>name</code>和<code>age</code>，包括<code>writable</code>等隐藏属性也想通，只是value值不同而已。是否可以把这些对象相似的地方拎出来复用，从而减少内存占用？可以的，下面讲到的Shapes就可以给相似对象复用。</p><h3>Shapes</h3><p data-pid=\"r2r6VTQy\">在学术论文中一般叫<code>Hidden Classes</code>，在V8里叫<code>Maps</code>（跟ES6里的Map不是一个概念）。这里用<code>Shapes</code>表示会更容易理解。</p><p data-pid=\"OBFm1A66\">前面通过构造函数Person创建的3个对象有相同的属性结构，可以说它们有相同的Shape。每个对象只保存它的values，然后指向共同的Shape。Shape里每个key都关联了property属性的信息和一个偏移量，通过这个偏移量可以找到<code>JSObject</code>里存储的value值。 </p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2835a9c4ca876d21fb6a321283e5a4d5_b.jpg\" data-size=\"normal\" data-rawwidth=\"1626\" data-rawheight=\"1146\" class=\"origin_image zh-lightbox-thumb\" width=\"1626\" data-original=\"https://pic2.zhimg.com/v2-2835a9c4ca876d21fb6a321283e5a4d5_r.jpg\" data-original-token=\"v2-3f3c413a23c1d77448683fd98a74da4a\"/><figcaption>image.png</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>Shape转变链</h3><p data-pid=\"tr-XENgB\">对象动态添加属性会形成Shape转变链。比如下图： </p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-25245d30ea498c57d6adae8924633165_b.jpg\" data-size=\"normal\" data-rawwidth=\"1794\" data-rawheight=\"1058\" class=\"origin_image zh-lightbox-thumb\" width=\"1794\" data-original=\"https://pic2.zhimg.com/v2-25245d30ea498c57d6adae8924633165_r.jpg\" data-original-token=\"v2-1fcac6ebaf1685457fb7be486f029946\"/><figcaption>image.png</figcaption></figure><p data-pid=\"FFOOaXo4\"> 对象<code>a</code>一开始指向一个空Shape，添加<code>name</code>属性后，空Shape转变成含有<code>name</code>的Shape，再添加<code>age</code>属性后，Shape又转变成含有<code>age</code>的Shape。</p><p data-pid=\"2sVp8O5H\">这里有个问题，就是Shape转变之后，对象<code>a</code>指向最后一个Shape，如果现在要访问<code>a.name</code>，如何找到对应的偏移量和value呢？这个问题后面会解答。</p><p data-pid=\"nd5ewFM6\">属性不同或者属性添加的顺序不同都会形成不同的Shape转变链。</p><p data-pid=\"TWhaJXvK\">属性不同时的Shape转变链举例： </p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-25d0d94f9891ae934e12fe715143d23b_b.jpg\" data-size=\"normal\" data-rawwidth=\"1888\" data-rawheight=\"1114\" class=\"origin_image zh-lightbox-thumb\" width=\"1888\" data-original=\"https://pic4.zhimg.com/v2-25d0d94f9891ae934e12fe715143d23b_r.jpg\" data-original-token=\"v2-9b957c78b49b108bbb587828de8cb2c5\"/><figcaption>image.png</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5ca8fccda05df2cc722c0746a9c9f359_b.jpg\" data-size=\"normal\" data-rawwidth=\"1888\" data-rawheight=\"1114\" class=\"origin_image zh-lightbox-thumb\" width=\"1888\" data-original=\"https://pic2.zhimg.com/v2-5ca8fccda05df2cc722c0746a9c9f359_r.jpg\" data-original-token=\"v2-40b4ace3a3bd417e13b01915fde4dcdf\"/><figcaption>image.png</figcaption></figure><p data-pid=\"YuYgsOVA\"> 属性添加的顺序不同时的Shape转变链举例： </p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-920f8d7f6452b1ca7e64a72629a9271c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1888\" data-rawheight=\"1114\" class=\"origin_image zh-lightbox-thumb\" width=\"1888\" data-original=\"https://pic1.zhimg.com/v2-920f8d7f6452b1ca7e64a72629a9271c_r.jpg\" data-original-token=\"v2-4ec5c01052ec4fa2c8c2d398dafbdfb3\"/><figcaption>image.png</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e5ebb49316b8b9a319a5556107e6ddc1_b.jpg\" data-size=\"normal\" data-rawwidth=\"1888\" data-rawheight=\"1114\" class=\"origin_image zh-lightbox-thumb\" width=\"1888\" data-original=\"https://pic2.zhimg.com/v2-e5ebb49316b8b9a319a5556107e6ddc1_r.jpg\" data-original-token=\"v2-5272350567918f3a88863e403d64ac36\"/><figcaption>image.png</figcaption></figure><p data-pid=\"VAwCPKut\"> 可以看到，即使<code>a</code>、<code>b</code>两个对象最终都有相同的属性值，但它们的Shape转变链是不一样的。</p><h3>属性访问</h3><p data-pid=\"Mc6vFj47\">前面遗留了一个问题，就是形成Shape转变链之后，对象指向了最后一个Shape，如果需要访问其他对象属性，该如何操作？</p><p data-pid=\"axLB4GMQ\">一个办法是像下图这样从转变链的反方向去查找： </p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c516964974a95083f97eaedea670d18c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1888\" data-rawheight=\"1114\" class=\"origin_image zh-lightbox-thumb\" width=\"1888\" data-original=\"https://pic1.zhimg.com/v2-c516964974a95083f97eaedea670d18c_r.jpg\" data-original-token=\"v2-dc47697bdf44530f8c68c62481c23ba3\"/><figcaption>image.png</figcaption></figure><p data-pid=\"ffu3Ft7R\"> 但这样的话，属性访问的时间将会是O(n)复杂度。所以JS引擎通过一个叫<code>ShapeTable</code>的字典，将属性key映射到对应的Shape上，这样属性访问时间就是常数级别。 </p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ed084924f0b48ab964fb3f2183bf73ec_b.jpg\" data-size=\"normal\" data-rawwidth=\"1728\" data-rawheight=\"1112\" class=\"origin_image zh-lightbox-thumb\" width=\"1728\" data-original=\"https://pic1.zhimg.com/v2-ed084924f0b48ab964fb3f2183bf73ec_r.jpg\" data-original-token=\"v2-a2a4edb7cc4542092f21134f5352052d\"/><figcaption>image.png</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>Shapes的作用</h3><p data-pid=\"xlUs8Efn\">为什么JS引擎要大费周章构造Shapes呢？除了通过复用减少内存，更重要的是它为JS引擎的<code>Inline Caches</code>优化提供了反馈信息。</p><h3>Inline Caches</h3><p data-pid=\"t6YqyejE\">假设有这样一段代码：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">getName</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">getName</span><span class=\"p\">({</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Thomas&#39;</span> <span class=\"p\">});</span>\n<span class=\"nx\">getName</span><span class=\"p\">({</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"s1\">&#39;John&#39;</span> <span class=\"p\">});</span>\n</code></pre></div><p data-pid=\"BaIIGvwl\"><code>getName</code>函数获取用户名字，多次调用时传入的user对象有相同的Shapes。</p><p data-pid=\"vNuve2n7\">正常来说，属性访问时比较慢的，需要经过Shape转变链和ShapeTable才能找到属性的偏移量（Offset），从而定位到<code>JSObject</code>里的value。</p><p data-pid=\"QYnoaFFo\">当多次调用<code>getName</code>传入的对象具有相同的Shapes时，JS引擎就会假定以后都会传入类似的对象，这时会把前面的对象的<code>name</code>属性对应的偏移量<code>0</code>缓存起来，下次执行<code>getName</code>时就可以通过缓存的偏移量直接访问到value值。这就是<code>Inline Caches</code>。</p><p data-pid=\"d7cbnLNa\">当然，<code>Inline Caches</code>推断出错后会回退到最初的属性访问方式。</p><h3>如何判断对象是否有相同Shapes</h3><p data-pid=\"v_42aoYj\">经过前面的介绍，我们知道，要想利用JS引擎<code>Inline Caches</code>的优化，就要尽量创建相同Shapes的对象。</p><p data-pid=\"xqlCg3GD\">而且我们知道如何判断两个对象是否有相同的Shapes（相同属性以及属性添加顺序）。</p><p data-pid=\"7pgUF6Bg\">如果心里还是没底，这里有一个办法，可以利用nodejs判断：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// index.js\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Thomas&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;John&#39;</span><span class=\"p\">;</span>\n<span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"p\">{};</span>\n<span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n<span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Lucy&#39;</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"nx\">HaveSameMap</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">));</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"nx\">HaveSameMap</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">c</span><span class=\"p\">));</span> <span class=\"c1\">// false\n</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-bash\">node --allow-natives-syntax index.js</code></pre></div><p data-pid=\"0PpVNJvp\"><code>HaveSameMap</code>是V8的方法，用来判断两个对象的Shapes是否相同，<code>--allow-natives-syntax</code>表示允许使用V8内置的一些方法，其他方法可以参考<a href=\"https://link.zhihu.com/?target=https%3A//github.com/v8/v8/blob/main/src/runtime/runtime.h\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>。</p><p data-pid=\"ygywRory\">可以看到，打印结果和前面的分析是一致的。</p><h3>Inline Caches优化前后性能差距</h3><p data-pid=\"djr_3fWW\">我用benchmark.js简单写了个测试用例：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">Benchmark</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;benchmark&#39;</span><span class=\"p\">);</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getName</span><span class=\"p\">(</span><span class=\"nx\">person</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">person</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">suite</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Benchmark</span><span class=\"p\">.</span><span class=\"nx\">Suite</span><span class=\"p\">();</span>\n\n<span class=\"nx\">suite</span>\n  <span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">&#39;没有Inline Caches&#39;</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">Person1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Thomas&#39;</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">Person2</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;John&#39;</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">Person3</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Lucy&#39;</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 不同构造函数new出来的对象Shapes不同\n</span><span class=\"c1\"></span>    <span class=\"kr\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person1</span><span class=\"p\">();</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person2</span><span class=\"p\">();</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person3</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">getName</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span>\n    <span class=\"nx\">getName</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span>\n    <span class=\"nx\">getName</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">&#39;有Inline Caches&#39;</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">function</span> <span class=\"nx\">Person1</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Thomas&#39;</span><span class=\"p\">;</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person1</span><span class=\"p\">();</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person1</span><span class=\"p\">();</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Person1</span><span class=\"p\">();</span>\n\n    <span class=\"nx\">getName</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">);</span>\n    <span class=\"nx\">getName</span><span class=\"p\">(</span><span class=\"nx\">b</span><span class=\"p\">);</span>\n    <span class=\"nx\">getName</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;cycle&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">benchmark</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">;</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">benchmark</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;complete&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">suite</span> <span class=\"o\">=</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">currentTarget</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">fastestOption</span> <span class=\"o\">=</span> <span class=\"nx\">suite</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"s1\">&#39;fastest&#39;</span><span class=\"p\">).</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">);</span>\n\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`更快的是：</span><span class=\"si\">${</span><span class=\"nx\">fastestOption</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n  <span class=\"p\">.</span><span class=\"nx\">run</span><span class=\"p\">();</span>\n</code></pre></div><p data-pid=\"rQ4EtnMY\">运行之后得到以下输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">没有Inline Caches x 284,413 ops/sec ±1.04% (92 runs sampled)\n有Inline Caches x 800,217 ops/sec ±0.96% (91 runs sampled)\n更快的是：有Inline Caches</code></pre></div><p data-pid=\"Re_ltbQM\">有Inline Caches是没有Inline Caches的2.8倍运行速度，对象越复杂性能差距越大。</p><h3>总结</h3><ol><li data-pid=\"RqozfmT0\">属性相同和属性添加顺序相同的对象具有相同的Shapes；</li><li data-pid=\"Nuuy1hz1\">重复使用有相同Shapes的对象会触发JS引擎的<code>Inline Caches</code>优化；</li><li data-pid=\"rx4TrrA1\">nodejs的<code>--allow-natives-syntax</code> flag和V8的<code>HaveSameMap</code>方法可以帮助我们判断两个对象的Shapes是否相同。</li></ol><h3>参考资料</h3><ol><li data-pid=\"Fcx6aOKC\"><a href=\"https://link.zhihu.com/?target=https%3A//mathiasbynens.be/notes/shapes-ics\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">mathiasbynens.be/notes/</span><span class=\"invisible\">shapes-ics</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"aq4956Sm\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/v8/v8/blob/main/src/runtime/runtime.h\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/v8/v8/blob/m</span><span class=\"invisible\">ain/src/runtime/runtime.h</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"BvRPUqHJ\"><a href=\"https://link.zhihu.com/?target=https%3A//richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">richardartoul.github.io</span><span class=\"invisible\">/jekyll/update/2015/04/26/hidden-classes.html</span><span class=\"ellipsis\"></span></a></li></ol>",
            "voteup_count": 45,
            "comment_count": 3
        },
        "created": "2023-05-13T00:03:37+08:00"
    },
    {
        "content": {
            "id": 104238120,
            "title": "函数式的动态规划",
            "type": "article",
            "excerpt_title": "函数式的动态规划动态规划是一类很常用的算法，在C/C++/Java中一般使用于数组进行记忆化。而函数式编程语言一般无法方便地操作数组这些依赖副作用的数据结构，函数式的记忆化便要另寻他法。 本文就是一个简单的笔记，用一些代码片段展示我所知的函数式动态规划的技巧。 （2020/5/17，时隔五个月后的更新，新增Memocombinators） Course-of-Values Recursion Course-of-Values Recursion是我认为最直观的一种技巧，就是将遍历过的…",
            "url": "https://zhuanlan.zhihu.com/p/104238120",
            "image_url": "https://pica.zhimg.com/v2-9a78a9c6e24193617a4cadf4b6b59d41_r.jpg?source=172ae18b",
            "created": 1580224926,
            "updated": 1589948239,
            "author": {
                "id": "ced4c857b6085b56613bc37a1cf8ca7f",
                "url_token": "XyztToe",
                "name": "脚趾头",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-05503f3b31a59a9176e3e9d7e9804bd5_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-05503f3b31a59a9176e3e9d7e9804bd5.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/ced4c857b6085b56613bc37a1cf8ca7f",
                "user_type": "people",
                "headline": "",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1449380203
            },
            "comment_permission": "all",
            "content": "<h2>函数式的动态规划</h2><p data-pid=\"XaQ_s2-d\">动态规划是一类很常用的算法，在C/C++/Java中一般使用于数组进行记忆化。而函数式编程语言一般无法方便地操作数组这些依赖副作用的数据结构，函数式的记忆化便要另寻他法。</p><p data-pid=\"MbQd7PE4\">本文就是一个简单的笔记，用一些代码片段展示我所知的函数式动态规划的技巧。</p><p data-pid=\"1g_cUDHR\">（2020/5/17，时隔五个月后的更新，新增Memocombinators）</p><h2>Course-of-Values Recursion</h2><p data-pid=\"PaYn_nW_\"><i>Course-of-Values Recursion</i>是我认为最直观的一种技巧，就是将遍历过的结果当作返回值的一部分保留下来，在递归的时候可以取得运算过的值。</p><p data-pid=\"pGtWeE2A\">对于递归函数<code>f</code>，定义一个辅助的函数<code>bar</code></p><p data-pid=\"in72n7ck\"><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Balign%7D+%5Coverline%7Bf%7D%28n%29+%3D+%5Bf%28n%29%2C+f%28n-1%29%2C...%2Cf%280%29%5D+%5Cend%7Balign%7D\" alt=\"\\begin{align} \\overline{f}(n) = [f(n), f(n-1),...,f(0)] \\end{align}\" eeimg=\"1\"/> </p><p data-pid=\"aju4xI39\">则原递归函数<code>f</code>可以用<code>bar</code>表示出来：</p><p data-pid=\"lsKr92io\"><img src=\"https://www.zhihu.com/equation?tex=head%28%5Coverline%7Bf%7D%28n%29%29\" alt=\"head(\\overline{f}(n))\" eeimg=\"1\"/> </p><p data-pid=\"iK7_meE4\"><b>斐波那契数列：</b></p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">fibBar</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Int</span><span class=\"p\">]</span>\n<span class=\"nf\">fibBar</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"nf\">fibBar</span> <span class=\"mi\">1</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span><span class=\"kt\">:</span><span class=\"n\">fibBar</span> <span class=\"mi\">0</span>\n<span class=\"nf\">fibBar</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span> <span class=\"n\">course</span> <span class=\"ow\">=</span> <span class=\"n\">fibBar</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"kr\">in</span> <span class=\"c1\">-- [fib(n-1)..fib(0)]</span>\n           <span class=\"kr\">let</span> <span class=\"n\">p</span>  <span class=\"ow\">=</span> <span class=\"n\">course</span> <span class=\"o\">!!</span> <span class=\"mi\">0</span> <span class=\"kr\">in</span> <span class=\"c1\">-- fib(n-1)</span>\n           <span class=\"kr\">let</span> <span class=\"n\">pp</span> <span class=\"ow\">=</span> <span class=\"n\">course</span> <span class=\"o\">!!</span> <span class=\"mi\">1</span> <span class=\"kr\">in</span> <span class=\"c1\">-- fib(n-2)</span>\n           <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">pp</span> <span class=\"kt\">:</span> <span class=\"n\">course</span>\n\n<span class=\"c1\">-- &gt;&gt;&gt; fibBar 10</span>\n<span class=\"c1\">-- [55,34,21,13,8,5,3,2,1,1,0]</span>\n<span class=\"c1\">--</span></code></pre></div><p data-pid=\"41QKfRUX\"><b>Binary Partitions：</b></p><p data-pid=\"stTUSa2G\">数的二次幂拆分方法有多少种，其状态转移方程为：</p><p data-pid=\"T8eCLHFs\"><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Balign%7D++a_0+%26+%3D+1+%5C%5C+a_%7B2n%7D+%26+%3D+a_%7B2n+-+1%7D+%2B+a_%7Bn%7D+%5C%5C+a_%7Bn%7D+%26+%3D+a_%7Bn-1%7D++%5Cend%7Balign%7D+\" alt=\"\\begin{align}  a_0 &amp; = 1 \\\\ a_{2n} &amp; = a_{2n - 1} + a_{n} \\\\ a_{n} &amp; = a_{n-1}  \\end{align} \" eeimg=\"1\"/> </p><p data-pid=\"habFUAai\">则：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">bpBar</span> <span class=\"n\">n</span>\n  <span class=\"o\">|</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n  <span class=\"o\">|</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span> <span class=\"n\">course</span> <span class=\"ow\">=</span> <span class=\"n\">bpBar</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"kr\">in</span>\n             <span class=\"kr\">let</span> <span class=\"n\">pred</span> <span class=\"ow\">=</span> <span class=\"n\">course</span> <span class=\"o\">!!</span> <span class=\"mi\">0</span> <span class=\"kr\">in</span>                 <span class=\"c1\">-- bp (n-1)</span>\n             <span class=\"kr\">let</span> <span class=\"n\">half</span> <span class=\"ow\">=</span> <span class=\"n\">course</span> <span class=\"o\">!!</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">n</span> <span class=\"p\">`</span><span class=\"n\">div</span><span class=\"p\">`</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"kr\">in</span> <span class=\"c1\">-- bp (n/2)</span>\n             <span class=\"n\">pred</span> <span class=\"o\">+</span> <span class=\"n\">half</span> <span class=\"kt\">:</span> <span class=\"n\">course</span>\n  <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span> <span class=\"n\">course</span> <span class=\"ow\">=</span> <span class=\"n\">bpBar</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"kr\">in</span> <span class=\"n\">head</span> <span class=\"n\">course</span> <span class=\"kt\">:</span> <span class=\"n\">course</span>\n\n<span class=\"c1\">-- &gt;&gt;&gt; bpBar 20</span>\n<span class=\"c1\">-- [60,46,46,36,36,26,26,20,20,14,14,10,10,6,6,4,4,2,2,1,1]</span>\n<span class=\"c1\">--</span></code></pre></div><p data-pid=\"TTDIlbOE\">但遗憾的是，其复杂度并不是<code>O(n)</code>，因为每次都会索引链表，这很糟糕。</p><p data-pid=\"vZaaSAqy\"><b>0-1背包问题：</b></p><p data-pid=\"WFhDfKlx\">其状态转移方程为：</p><p data-pid=\"pbbPICZS\"><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Balign%7D+Knapsack%280%2C+y%29+%26+%3D+0+%5C%5C+Knapsack%28i%2C+y%29+%26+%3D+Knapsack%28i-1%2C+y%29+%26+%5Ctext%7Bif%7D%5C+w_i+%5Cge+y+%5C%5C+Knapsack%28i%2C+y%29+%26+%3D+max%28Knapsack%28i-1%2C+y%29%2C+v_j+%2B+Knapsack%28i-1%2C+y-w_i%29%29+%26+%5Ctext%7Botherwise%7D+%5Cend%7Balign%7D\" alt=\"\\begin{align} Knapsack(0, y) &amp; = 0 \\\\ Knapsack(i, y) &amp; = Knapsack(i-1, y) &amp; \\text{if}\\ w_i \\ge y \\\\ Knapsack(i, y) &amp; = max(Knapsack(i-1, y), v_j + Knapsack(i-1, y-w_i)) &amp; \\text{otherwise} \\end{align}\" eeimg=\"1\"/> </p><p data-pid=\"grK1q0zh\">这里也需要将这个<code>n*W</code>状态空间塞到<code>course</code>里：</p><p data-pid=\"iLBNliEI\"><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Balign%7D%5Coverline%7BKnapsack%7D%28i%2C+y%29+%3D++%26%5BKnapsack%28i%2C+y%29%2C+Knapsack%28i%2C+y-1%29%2C...%2CKnapsack%28i%2C+0%29%2C%5C%5C+++%26Knapsack%28i-1%2C+capacity%29%2C...%2CKnapscak%280%2C+0%29%5D%5Cend%7Balign%7D\" alt=\"\\begin{align}\\overline{Knapsack}(i, y) =  &amp;[Knapsack(i, y), Knapsack(i, y-1),...,Knapsack(i, 0),\\\\   &amp;Knapsack(i-1, capacity),...,Knapscak(0, 0)]\\end{align}\" eeimg=\"1\"/> </p><p data-pid=\"B2QA3_TC\">则：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">type</span> <span class=\"kt\">Weight</span> <span class=\"ow\">=</span> <span class=\"kt\">Int</span>\n<span class=\"kr\">type</span> <span class=\"kt\">Value</span> <span class=\"ow\">=</span> <span class=\"kt\">Double</span>\n<span class=\"kr\">type</span> <span class=\"kt\">Items</span> <span class=\"ow\">=</span> <span class=\"p\">[(</span><span class=\"kt\">Weight</span><span class=\"p\">,</span> <span class=\"kt\">Value</span><span class=\"p\">)]</span>\n\n<span class=\"nf\">knapsack</span> <span class=\"ow\">::</span> <span class=\"kt\">Items</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Weight</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Value</span>\n<span class=\"nf\">knapsack</span> <span class=\"n\">items</span> <span class=\"n\">capacity</span> <span class=\"ow\">=</span> <span class=\"n\">head</span> <span class=\"o\">$</span> <span class=\"n\">bar</span> <span class=\"n\">items</span> <span class=\"n\">capacity</span> <span class=\"kr\">where</span>\n    <span class=\"n\">bar</span> <span class=\"ow\">::</span> <span class=\"kt\">Items</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Weight</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Value</span><span class=\"p\">]</span>\n    <span class=\"n\">bar</span> <span class=\"kt\">[]</span>             <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">bar</span> <span class=\"p\">(</span><span class=\"kr\">_</span><span class=\"kt\">:</span><span class=\"n\">items</span><span class=\"p\">)</span>      <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span> <span class=\"kt\">:</span> <span class=\"n\">bar</span> <span class=\"n\">items</span> <span class=\"n\">capacity</span>\n    <span class=\"n\">bar</span> <span class=\"kt\">[]</span>             <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span> <span class=\"kt\">:</span> <span class=\"n\">bar</span> <span class=\"kt\">[]</span>    <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">bar</span> <span class=\"p\">((</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span><span class=\"kt\">:</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"n\">y</span>\n        <span class=\"o\">|</span> <span class=\"n\">w</span> <span class=\"o\">&lt;=</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span> <span class=\"n\">course</span> <span class=\"ow\">=</span> <span class=\"n\">bar</span> <span class=\"p\">((</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span><span class=\"kt\">:</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"kr\">in</span>\n                   <span class=\"kr\">let</span> <span class=\"n\">v1</span>     <span class=\"ow\">=</span> <span class=\"n\">course</span> <span class=\"o\">!!</span> <span class=\"n\">capacity</span> <span class=\"kr\">in</span>        <span class=\"c1\">-- knapsack(i-1, y)</span>\n                   <span class=\"kr\">let</span> <span class=\"n\">v2</span>     <span class=\"ow\">=</span> <span class=\"n\">course</span> <span class=\"o\">!!</span> <span class=\"p\">(</span><span class=\"n\">capacity</span> <span class=\"o\">+</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"kr\">in</span>  <span class=\"c1\">-- knapsack(i-1, y-wi)</span>\n                   <span class=\"kr\">let</span> <span class=\"n\">new</span>    <span class=\"ow\">=</span> <span class=\"n\">max</span> <span class=\"n\">v1</span> <span class=\"p\">(</span><span class=\"n\">v2</span> <span class=\"o\">+</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"kr\">in</span>\n                   <span class=\"n\">new</span> <span class=\"kt\">:</span> <span class=\"n\">course</span>\n        <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span> <span class=\"n\">course</span> <span class=\"ow\">=</span> <span class=\"n\">bar</span> <span class=\"p\">((</span><span class=\"n\">w</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span><span class=\"kt\">:</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"kr\">in</span> \n                      <span class=\"n\">course</span> <span class=\"o\">!!</span> <span class=\"n\">capacity</span> <span class=\"kt\">:</span> <span class=\"n\">course</span>\n\n\n<span class=\"c1\">-- &gt;&gt;&gt; knapsack [(2, 6.0), (2, 3.0), (6, 5.0), (5, 4.0), (4, 6.0)] 10</span>\n<span class=\"c1\">-- 15.0</span>\n<span class=\"c1\">--</span></code></pre></div><p data-pid=\"HuVtO9jW\">CoV除了经常要索引链表意外还有其它限制，并非所有的递归函数都能转化为这种形式，比如阿克曼函数（Ackermann&#39;s function）。</p><h2>Streaming</h2><p data-pid=\"Q3wTVfJh\">这是专属于Haskell的优雅的方法。</p><p data-pid=\"4mX1Bg9j\">斐波那契数列就是一个经典的例子：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">fibs</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Integer</span><span class=\"p\">]</span>\n<span class=\"nf\">fibs</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span><span class=\"kt\">:</span><span class=\"mi\">1</span><span class=\"kt\">:</span><span class=\"n\">zipWith</span> <span class=\"p\">(</span><span class=\"o\">+</span><span class=\"p\">)</span> <span class=\"n\">fibs</span> <span class=\"p\">(</span><span class=\"n\">tail</span> <span class=\"n\">fibs</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- &gt;&gt;&gt; take 10 fibs</span>\n<span class=\"c1\">-- [1,1,2,3,5,8,13,21,34,55]</span></code></pre></div><p data-pid=\"64R95EVw\">需要把<code>fibs</code>看作一个流，<code>fibs</code>前两个元素为<code>1</code>且剩余部分由其自身(<code>fibs</code>)与自身去首(<code>tail fibs</code>)合成(<code>zipWith (+)</code>)。取“下一个”的时候才会计算，并且不会重复计算，这就是Haskell惰性求值的威力。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1675f7b414cad247defe6750650885e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"938\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb\" width=\"938\" data-original=\"https://pic4.zhimg.com/v2-1675f7b414cad247defe6750650885e3_r.jpg\" data-original-token=\"v2-9a78a9c6e24193617a4cadf4b6b59d41\"/></figure><p data-pid=\"w08aUgdZ\">类似的，阶乘流由[1..]和其自身合成：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">facts</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Integer</span><span class=\"p\">]</span>\n<span class=\"nf\">facts</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span> <span class=\"kt\">:</span> <span class=\"n\">zipWith</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">]</span> <span class=\"n\">facts</span>\n\n<span class=\"c1\">-- &gt;&gt;&gt; take 10 facts</span>\n<span class=\"c1\">-- [1,1,2,6,24,120,720,5040,40320,362880]</span>\n<span class=\"c1\">--</span></code></pre></div><p data-pid=\"C-67vDBc\">流还可以表达更复杂的问题，比如刚刚的Binary Partitions：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">bps</span> <span class=\"ow\">::</span> <span class=\"p\">[</span><span class=\"kt\">Integer</span><span class=\"p\">]</span>\n<span class=\"nf\">bps</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span><span class=\"kt\">:</span><span class=\"n\">zipWith3</span> <span class=\"n\">reduce</span> \n          <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"p\">]</span> \n          <span class=\"n\">bps</span> \n          <span class=\"p\">(</span><span class=\"n\">tail</span> <span class=\"o\">$</span> <span class=\"n\">dup</span> <span class=\"n\">bps</span><span class=\"p\">)</span> <span class=\"c1\">-- bp (n/2) 组成的流</span>\n  <span class=\"kr\">where</span>\n  <span class=\"n\">dup</span> <span class=\"n\">xs</span> <span class=\"ow\">=</span> <span class=\"n\">xs</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"nf\">\\</span><span class=\"n\">x</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"c1\">-- 每个元素个数*2</span>\n\n  <span class=\"n\">reduce</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n    <span class=\"o\">|</span> <span class=\"n\">even</span> <span class=\"n\">n</span>    <span class=\"ow\">=</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n    <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">-- &gt;&gt;&gt; take 21 bps</span>\n<span class=\"c1\">-- [1,1,2,2,4,4,6,6,10,10,14,14,20,20,26,26,36,36,46,46,60]</span>\n<span class=\"c1\">--</span></code></pre></div><p data-pid=\"CBD4nk3M\">可以发现顺序是和CoV的反过来的。同时，这里还没有了索引的开销，很<code>O(n)</code>，很棒。</p><p data-pid=\"AYpETXJJ\">流的形式很优美，当然也很少的情况能将流写的很优美，毕竟算法本身就是丑陋的，比如刚刚0-1背包问题换成什么写法都只能写得这样丑陋（但这已经是很简单的算法了）。</p><h2>Dynamorphism</h2><p data-pid=\"5FZf8aHX\"><i>dynamorphism</i>是<i>recursion schemes</i>的一种，是<i>anamorphism</i>和<i>histomorphism</i>的组合，由<i>anamorphism</i>构造递归树，由<i>histomorphism</i>完成记忆化和规约。</p><p data-pid=\"XdZFU1lZ\">过程上可以看作是CoV的抽象，自动完成<i>记忆化</i>和<i>递归</i>，并且推广了course的结构（但一般还是用List）。</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"c1\">-- dynamorphism</span>\n<span class=\"nf\">dyna</span> <span class=\"ow\">::</span> <span class=\"kt\">Functor</span> <span class=\"n\">f</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"kt\">Cofree</span> <span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">c</span><span class=\"p\">)</span>  <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">c</span>\n<span class=\"nf\">dyna</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span> <span class=\"n\">x</span> <span class=\"kt\">:&lt;</span> <span class=\"kr\">_</span> <span class=\"ow\">=</span>  <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"kr\">in</span> <span class=\"n\">x</span> <span class=\"kr\">where</span>\n  <span class=\"n\">h</span> <span class=\"ow\">=</span> <span class=\"n\">uncurry</span> <span class=\"p\">(</span><span class=\"kt\">:&lt;</span><span class=\"p\">)</span> <span class=\"o\">.</span> <span class=\"p\">(</span><span class=\"nf\">\\</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">psi</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">))</span> <span class=\"o\">.</span> <span class=\"n\">fmap</span> <span class=\"n\">h</span> <span class=\"o\">.</span> <span class=\"n\">phi</span>\n<span class=\"c1\">-- dyna phi psi = histo psi . ana phi</span></code></pre></div><p data-pid=\"d5E4Gtjx\"><b>Binary Partitions：</b></p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">bpDyna</span> <span class=\"ow\">::</span> <span class=\"kt\">Integer</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Integer</span>\n<span class=\"nf\">bpDyna</span> <span class=\"ow\">=</span> <span class=\"n\">dyna</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"kr\">where</span>\n  <span class=\"n\">phi</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"kt\">Nil</span>\n  <span class=\"n\">phi</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kt\">Cons</span> <span class=\"n\">n</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n  <span class=\"n\">psi</span> <span class=\"kt\">Nil</span>             <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">psi</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"n\">n</span> <span class=\"n\">course</span><span class=\"p\">)</span> \n    <span class=\"o\">|</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"kr\">let</span> <span class=\"n\">pred</span> <span class=\"ow\">=</span> <span class=\"n\">fromJust</span> <span class=\"o\">$</span> <span class=\"n\">lookupCourse</span> <span class=\"n\">course</span> <span class=\"mi\">0</span> <span class=\"kr\">in</span>\n               <span class=\"kr\">let</span> <span class=\"n\">half</span> <span class=\"ow\">=</span> <span class=\"n\">fromJust</span> <span class=\"o\">$</span> <span class=\"n\">lookupCourse</span> <span class=\"n\">course</span> <span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">n</span> <span class=\"p\">`</span><span class=\"n\">div</span><span class=\"p\">`</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"kr\">in</span>\n               <span class=\"n\">pred</span> <span class=\"o\">+</span> <span class=\"n\">half</span>\n    <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"n\">fromJust</span> <span class=\"o\">$</span> <span class=\"n\">lookupCourse</span> <span class=\"n\">course</span> <span class=\"mi\">0</span>\n\n<span class=\"nf\">lookupCourse</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Num</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"kt\">Eq</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Cofree</span> <span class=\"p\">(</span><span class=\"kt\">ListF</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">n</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Maybe</span> <span class=\"n\">a</span>\n<span class=\"nf\">lookupCourse</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"kt\">:&lt;</span> <span class=\"kr\">_</span><span class=\"p\">)</span>    <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"kt\">Just</span> <span class=\"n\">x</span>\n<span class=\"nf\">lookupCourse</span> <span class=\"p\">(</span><span class=\"kr\">_</span> <span class=\"kt\">:&lt;</span> <span class=\"n\">hole</span><span class=\"p\">)</span> <span class=\"n\">n</span> <span class=\"ow\">=</span>\n  <span class=\"kr\">case</span> <span class=\"n\">hole</span> <span class=\"kr\">of</span>\n    <span class=\"kt\">Nil</span>         <span class=\"ow\">-&gt;</span> <span class=\"kt\">Nothing</span>\n    <span class=\"kt\">Cons</span> <span class=\"kr\">_</span> <span class=\"n\">next</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">lookupCourse</span> <span class=\"n\">next</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\">-- &gt;&gt;&gt; map bpDyna [0..20]</span>\n<span class=\"c1\">-- [1,1,2,2,4,4,6,6,10,10,14,14,20,20,26,26,36,36,46,46,60]</span>\n<span class=\"c1\">--</span></code></pre></div><p data-pid=\"uPBePllJ\"><b>最长公共子序列：</b></p><p data-pid=\"SE78eu8y\">也是一道经典的dp题，我也不再赘述内容，其状态转移方程为：</p><p data-pid=\"ZNgkA5DL\"><img src=\"https://www.zhihu.com/equation?tex=%5Cbegin%7Balign%7D+lcs%28%5B%5D%2C+ys%29+%26+%3D+%5B%5D+%5C%5C+lcs%28xs%2C+%5B%5D%29+%26+%3D+%5B%5D+%5C%5C+lcs%28x%3Axs%2C+y%3Ays%29+%26+%3D+x%3Alcs%28xs%2C+ys%29+%26+%5Ctext%7Bif+%7D+x%3Dy+%5C%5C+lcs%28x%3Axs%2C+y%3Ays%29+%26+%3D+lcs%28x%3Axs%2C+ys%29+%26+%5Ctext%7Bif+%7D+%5C%23lcs%28x%3Axs%2C+ys%29+%5Cgt+%5C%23lcs%28xs%2C+y%3Ays%29+%5C%5C+lcs%28x%3Axs%2C+y%3Ays%29+%26+%3D+lcs%28xs%2C+y%3Ays%29+%26+%5Ctext%7Botherwise%7D+%5Cend%7Balign%7D\" alt=\"\\begin{align} lcs([], ys) &amp; = [] \\\\ lcs(xs, []) &amp; = [] \\\\ lcs(x:xs, y:ys) &amp; = x:lcs(xs, ys) &amp; \\text{if } x=y \\\\ lcs(x:xs, y:ys) &amp; = lcs(x:xs, ys) &amp; \\text{if } \\#lcs(x:xs, ys) \\gt \\#lcs(xs, y:ys) \\\\ lcs(x:xs, y:ys) &amp; = lcs(xs, y:ys) &amp; \\text{otherwise} \\end{align}\" eeimg=\"1\"/> </p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">lcsDyna</span> <span class=\"ow\">::</span> <span class=\"kt\">Eq</span> <span class=\"n\">a</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]</span>\n<span class=\"nf\">lcsDyna</span> <span class=\"n\">as</span> <span class=\"n\">bs</span> <span class=\"ow\">=</span> <span class=\"n\">dyna</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"p\">(</span><span class=\"n\">as</span><span class=\"p\">,</span> <span class=\"n\">bs</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">aslen</span> <span class=\"ow\">=</span> <span class=\"n\">length</span> <span class=\"n\">as</span>\n\n  <span class=\"n\">phi</span>     <span class=\"p\">(</span><span class=\"kt\">[]</span><span class=\"p\">,</span> <span class=\"kt\">[]</span><span class=\"p\">)</span>   <span class=\"ow\">=</span> <span class=\"kt\">Nil</span>\n  <span class=\"n\">phi</span> <span class=\"n\">all</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"kt\">[]</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"kt\">:</span><span class=\"n\">ys</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Cons</span> <span class=\"n\">all</span> <span class=\"p\">(</span><span class=\"n\">as</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)</span>\n  <span class=\"n\">phi</span> <span class=\"n\">all</span><span class=\"o\">@</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Cons</span> <span class=\"n\">all</span> <span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">,</span> <span class=\"n\">ys</span><span class=\"p\">)</span>\n\n  <span class=\"n\">psi</span> <span class=\"kt\">Nil</span> <span class=\"ow\">=</span> <span class=\"kt\">[]</span>\n  <span class=\"n\">psi</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"kt\">[]</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">[]</span>\n  <span class=\"n\">psi</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"kr\">_</span><span class=\"p\">,</span> <span class=\"kt\">[]</span><span class=\"p\">)</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">[]</span>\n  <span class=\"n\">psi</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"kt\">:</span><span class=\"kr\">_</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"kt\">:</span><span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"n\">course</span><span class=\"p\">)</span>\n    <span class=\"o\">|</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">y</span> <span class=\"ow\">=</span> <span class=\"n\">x</span> <span class=\"kt\">:</span> <span class=\"n\">zs</span>\n    <span class=\"o\">|</span> <span class=\"n\">length</span> <span class=\"n\">xs</span> <span class=\"o\">&gt;</span> <span class=\"n\">length</span> <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">xs</span>\n    <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"n\">ys</span>\n    <span class=\"kr\">where</span>\n      <span class=\"n\">xs</span> <span class=\"ow\">=</span> <span class=\"n\">fromJust</span> <span class=\"o\">$</span> <span class=\"n\">lookupCourse</span> <span class=\"n\">course</span> <span class=\"mi\">0</span>\n      <span class=\"n\">ys</span> <span class=\"ow\">=</span> <span class=\"n\">fromJust</span> <span class=\"o\">$</span> <span class=\"n\">lookupCourse</span> <span class=\"n\">course</span> <span class=\"n\">aslen</span>\n      <span class=\"n\">zs</span> <span class=\"ow\">=</span> <span class=\"n\">fromJust</span> <span class=\"p\">(</span><span class=\"n\">lookupCourse</span> <span class=\"n\">course</span> <span class=\"p\">(</span><span class=\"n\">aslen</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">))</span></code></pre></div><p data-pid=\"yBXUmOBy\"><b>0-1背包问题</b></p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">knapsackDyna</span> <span class=\"ow\">::</span> <span class=\"kt\">Items</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Weight</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Value</span>\n<span class=\"nf\">knapsackDyna</span> <span class=\"n\">goods</span> <span class=\"n\">w</span> <span class=\"ow\">=</span> <span class=\"n\">dyna</span> <span class=\"n\">phi</span> <span class=\"n\">psi</span> <span class=\"p\">(</span><span class=\"n\">goods</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"kr\">where</span>\n  <span class=\"n\">phi</span> <span class=\"p\">(</span><span class=\"kt\">[]</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>       <span class=\"ow\">=</span> <span class=\"kt\">Nil</span>\n  <span class=\"n\">phi</span> <span class=\"p\">(</span><span class=\"n\">wv</span><span class=\"kt\">:</span><span class=\"n\">goods</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"n\">wv</span><span class=\"kt\">:</span><span class=\"n\">goods</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">goods</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n  <span class=\"n\">phi</span> <span class=\"p\">(</span><span class=\"n\">goods</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span>    <span class=\"ow\">=</span> <span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"n\">goods</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">goods</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n  <span class=\"n\">psi</span> <span class=\"kt\">Nil</span>              <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">psi</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"p\">(</span><span class=\"kt\">[]</span><span class=\"p\">,</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"kr\">_</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n  <span class=\"n\">psi</span> <span class=\"p\">(</span><span class=\"kt\">Cons</span> <span class=\"p\">((</span><span class=\"n\">w&#39;</span><span class=\"p\">,</span> <span class=\"n\">v&#39;</span><span class=\"p\">)</span><span class=\"kt\">:</span><span class=\"n\">goods&#39;</span><span class=\"p\">,</span> <span class=\"n\">rest</span><span class=\"p\">)</span> <span class=\"n\">course</span><span class=\"p\">)</span> \n    <span class=\"o\">|</span> <span class=\"n\">w&#39;</span> <span class=\"o\">&gt;</span> <span class=\"n\">rest</span>  <span class=\"ow\">=</span> <span class=\"n\">fromJust</span> <span class=\"o\">$</span> <span class=\"n\">lookupCourse</span> <span class=\"n\">course</span> <span class=\"n\">w</span>  <span class=\"c1\">-- course[i-1][w]</span>\n    <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span>\n      <span class=\"kr\">let</span> <span class=\"n\">v1</span> <span class=\"ow\">=</span> <span class=\"n\">fromJust</span> <span class=\"o\">$</span> <span class=\"n\">lookupCourse</span> <span class=\"n\">course</span> <span class=\"n\">w</span>      \n          <span class=\"n\">v2</span> <span class=\"ow\">=</span> <span class=\"n\">fromJust</span> <span class=\"o\">$</span> <span class=\"n\">lookupCourse</span> <span class=\"n\">course</span> <span class=\"p\">(</span><span class=\"n\">w&#39;</span> <span class=\"o\">+</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"c1\">-- course[i-1][w - w&#39;]</span>\n      <span class=\"kr\">in</span>  <span class=\"n\">max</span> <span class=\"n\">v1</span> <span class=\"p\">(</span><span class=\"n\">v2</span> <span class=\"o\">+</span> <span class=\"n\">v&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\">-- &gt;&gt;&gt; knapsackDyna [(2, 6.0), (2, 3.0), (6, 5.0), (5, 4.0), (4, 6.0)] 10</span>\n<span class=\"c1\">-- 15.0</span>\n<span class=\"c1\">--</span></code></pre></div><p data-pid=\"Bku6OwgX\">另外，这里的recursion schemes的库是直接在hackage里找的。懒得自己写了。dynamorphisim的介绍，我可能会令写一篇文章吧（咕咕咕）。其实我觉得这也没减少什么复杂度。。。</p><hr/><h2><b>Memocombinators</b></h2><p data-pid=\"iNouRHpA\">（更新于2020/5/17，就不新开水文了）</p><p data-pid=\"y78_304u\">这是个十分简洁美观，几乎在各方面吊打上面几种写法。但这方法本身又挺tricky的，和haskell处理partial application的方式有关。</p><p data-pid=\"i8L_zzOH\">记忆化最直接的方式，便是维护一个表，用于缓存已计算的结果。比如：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"c1\">-- 接受一个函数，返回其记忆化的版本</span>\n<span class=\"nf\">memoize</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">memoize</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">]</span> <span class=\"o\">!!</span> <span class=\"n\">n</span> </code></pre></div><p data-pid=\"ctjxhseI\">缓存的内容便是<code>map f [0..]</code>。我们希望该函数有记忆化的效果，那么斐波那契数列就可以写成这样：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">fibMemo</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Integer</span>\n<span class=\"nf\">fibMemo</span> <span class=\"ow\">=</span> <span class=\"n\">memoize</span> <span class=\"n\">fib</span> <span class=\"kr\">where</span>\n    <span class=\"n\">fib</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">fib</span> <span class=\"mi\">1</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">fibMemo</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fibMemo</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span> \n    <span class=\"c1\">-- 这不能调用fib本身，因为fib本身并没有通过memoize进行记忆化</span></code></pre></div><p data-pid=\"64z1Sw2P\">但很遗憾，根本没有起到记忆化的效果。究其原因，当每次调用<code>memoize</code>的时候，都会重新计算一次<code>map f [0..]</code>。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-22953183ec185f7bf861fdf882b17b61_b.jpg\" data-size=\"normal\" data-rawwidth=\"515\" data-rawheight=\"291\" class=\"origin_image zh-lightbox-thumb\" width=\"515\" data-original=\"https://pic2.zhimg.com/v2-22953183ec185f7bf861fdf882b17b61_r.jpg\" data-original-token=\"v2-79e849d4ba689c7ff1068395a93e7473\"/><figcaption>没有记忆化，空间占用还巨大</figcaption></figure><p data-pid=\"QYZBwudZ\">那正确的写法究竟是怎样呢——partial application：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">memoize</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">memoize</span> <span class=\"n\">f</span> <span class=\"ow\">=</span> <span class=\"p\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"p\">]</span> <span class=\"o\">!!</span><span class=\"p\">)</span> \n<span class=\"c1\">-- eq to `(!!) (map f [0..])` </span>\n<span class=\"c1\">-- but not `\\n -&gt; map f [0..] !! n`</span></code></pre></div><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-117a7b321b78d6fca9879df166578216_b.jpg\" data-size=\"normal\" data-rawwidth=\"506\" data-rawheight=\"271\" class=\"origin_image zh-lightbox-thumb\" width=\"506\" data-original=\"https://pic3.zhimg.com/v2-117a7b321b78d6fca9879df166578216_r.jpg\" data-original-token=\"v2-c846941439334727e8956b015d48a55a\"/><figcaption>Magically, it works! </figcaption></figure><p data-pid=\"n0KzDFbs\">这是因为，在hs中，partial application是不会进行reduce的，仅仅绑定了参数。在<code>memoize</code>中参数<code>map f [0..]</code>与函数<code>(!!)</code>绑定，于是整个过程<code>map f [0..]</code>只会产生一次（一个thunk）。于是利用<code>map f [0..]</code>缓存下<code>f</code>计算过的值，从而达到memoization的效果。（补充：<code>let cache = map f [0..] in \\n -&gt; cache !! n</code> 这样也可以）</p><p data-pid=\"NwbIKmkg\">但是<code>\\n -&gt; map f [0..] !! n</code>这样是不行的，每次调用都会重新计算一遍<code>map f [0..]</code>。</p><p data-pid=\"TmbzSiX_\"><b>在hs中，只有在“完整调用”的时候会进行reduce(call)，而在“部分调用”（partial application）的时候做的只是参数的绑定（bind）。这就导致了η变换在hs中并不完全等价，而且会导致记忆化的“丢失”。</b>（这里应该还可以引入CAF(Constant applicative form)，此处不展开了）</p><p data-pid=\"ib3UKN5R\">同理，如果将<code>fibMemo</code>写为：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">fibMemo</span> <span class=\"ow\">::</span> <span class=\"kt\">Int</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Integer</span>\n<span class=\"nf\">fibMemo</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">memoize</span> <span class=\"n\">fib</span> <span class=\"n\">n</span> <span class=\"kr\">where</span>\n    <span class=\"c1\">-- ...</span></code></pre></div><p data-pid=\"o-EA6B8H\">也将没有了记忆化的效果。所以这个方法是一个很tricky的方法，利用了hs不那么一致的“feature”，才有这样的效果。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"FF7CMXLF\">另外，单链表索引太慢，我们也可以使用其它的数据结构来进行缓存——二叉搜索树、(hs中只读的)数组、哈希表等等（上面的CoV也可以）。总之<code>memoize</code>的一个通用的形式为：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">memoize</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"nf\">memoize</span> <span class=\"n\">f</span> <span class=\"ow\">=</span> <span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">table</span> <span class=\"n\">f</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"7oKofoH-\">可以抽象为一个typeclass：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">class</span> <span class=\"kt\">Memoizable</span> <span class=\"n\">k</span> <span class=\"kr\">where</span>\n    <span class=\"n\">memoize</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">v</span><span class=\"p\">)</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"BJGDm4wS\">对于复杂类型的记忆化，可以基于Map的以下几条性质：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kt\">Map</span> <span class=\"nb\">()</span> <span class=\"n\">v</span>           <span class=\"o\">~</span> <span class=\"n\">v</span>\n<span class=\"kt\">Map</span> <span class=\"p\">(</span><span class=\"kt\">Either</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"n\">v</span> <span class=\"o\">~</span> <span class=\"p\">(</span><span class=\"kt\">Map</span> <span class=\"n\">a</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"kt\">Map</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n<span class=\"kt\">Map</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"n\">v</span>       <span class=\"o\">~</span> <span class=\"kt\">Map</span> <span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"kt\">Map</span> <span class=\"n\">b</span> <span class=\"n\">v</span><span class=\"p\">)</span></code></pre></div><p data-pid=\"dOx2lz0X\">可以导出<code>Memoizable k</code>的性质：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kt\">Memoizable</span> <span class=\"nb\">()</span>\n<span class=\"p\">(</span><span class=\"kt\">Memoizable</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">Memoizable</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Memoizable</span> <span class=\"p\">(</span><span class=\"kt\">Either</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"kt\">Memoizable</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">Memoizable</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"kt\">Memoizable</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n<span class=\"c1\">-- 分别实现</span></code></pre></div><p data-pid=\"7_ckqFjG\">我们可以得到一些很有用的函数：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"c1\">-- 记忆化两个参数。</span>\n<span class=\"nf\">memoize2</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"kt\">Memoizable</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">Memoizable</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">r</span><span class=\"p\">)</span>\n<span class=\"nf\">memoize2</span> <span class=\"ow\">=</span> <span class=\"n\">curry</span> <span class=\"o\">.</span> <span class=\"n\">memoize</span> <span class=\"o\">.</span> <span class=\"n\">uncurry</span>\n<span class=\"err\">​</span>\n<span class=\"c1\">-- 记忆化第二个参数</span>\n<span class=\"c1\">-- memoizeSecond :: Memoizable b =&gt; (a -&gt; b -&gt; r) -&gt; (a -&gt; b -&gt; r)</span>\n<span class=\"c1\">-- memoizeSecond = flip . memoize . flip</span>\n<span class=\"c1\">-- 这是不行的，记忆化的是 `a -&gt; r` 而不是 `r`</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"djPsJ-L6\">现在可以来做个背包问题：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">knapsackMemo</span> <span class=\"ow\">::</span> <span class=\"kt\">Weight</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Index</span> <span class=\"ow\">-&gt;</span> <span class=\"kt\">Value</span>\n<span class=\"nf\">knapsackMemo</span> <span class=\"ow\">=</span> <span class=\"n\">memoize2</span> <span class=\"n\">knapsack</span> <span class=\"kr\">where</span>\n    <span class=\"n\">knapsack</span> <span class=\"n\">y</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">knapsack</span> <span class=\"n\">y</span> <span class=\"n\">i</span>\n        <span class=\"o\">|</span> <span class=\"n\">wi</span> <span class=\"o\">&gt;=</span> <span class=\"n\">y</span>   <span class=\"ow\">=</span> <span class=\"n\">knapsackMemo</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"o\">|</span> <span class=\"n\">otherwise</span> <span class=\"ow\">=</span> <span class=\"n\">max</span> <span class=\"p\">(</span><span class=\"n\">knapsack</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">vi</span> <span class=\"o\">+</span> <span class=\"n\">knapsack</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">-</span> <span class=\"n\">wi</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"kr\">where</span>\n            <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"n\">wi</span><span class=\"p\">,</span> <span class=\"n\">vi</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"n\">items</span> <span class=\"o\">!!</span> <span class=\"n\">i</span></code></pre></div><p data-pid=\"jX_E1LNH\">十分简洁，就是直接写上状态转移方程。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"jNd5--o_\">但总的来说，这种美观却tricky的方法是没有保障的，hs也并没有承诺它会对partial application进行bind的处理，更是一种接近于UB的存在。写起来也要十分的小心，当代码复杂起来，可能一个不小心写法上不对，就丢掉了“记忆化”。<b>慎用</b>。</p><p data-pid=\"AFNpDhIh\">Addition：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"c1\">-- 记忆化函数更好的写法</span>\n<span class=\"nf\">fib</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"ow\">=</span> <span class=\"mi\">0</span>\n<span class=\"nf\">fib</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"ow\">=</span> <span class=\"mi\">1</span>\n<span class=\"nf\">fib</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"ow\">=</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"err\">​</span>\n<span class=\"nf\">fibMemo</span> <span class=\"ow\">=</span> <span class=\"n\">fix</span> <span class=\"p\">(</span><span class=\"n\">memoize</span> <span class=\"o\">.</span> <span class=\"n\">fib</span><span class=\"p\">)</span>\n<span class=\"c1\">-- -&gt; memoize (fib fibMemo)</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h2>总结</h2><p data-pid=\"asyrj3fw\">没啥想总结的23333。总之，我觉得除了streaming以外，都很丑陋。recursion schemes也是，还是最多用到hylomorphism就算了，同时我认为应用将recursion schemes在“不是处理数据”的递归上，也不是正确的用途，因为这并不直观。</p><hr/><p data-pid=\"PDEd2CSv\">新更新的Memocombinators在hackage中有同名的库：</p><a href=\"https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/data-memocombinators\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">data-memocombinators: Combinators for building memo tables.</a><p data-pid=\"lF4jetgY\">前两天hs群里提到了该方法：</p><a href=\"https://link.zhihu.com/?target=https%3A//wiki.haskell.org/Memoization\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Memoization - HaskellWiki</a><p data-pid=\"3KZduqMq\">看到该方法的时候，我便感到十分地羞愧（因为本文之前提到的方法过于繁杂，甚至可以说没啥用），十分的兴奋，却也同样十分地不解——究竟是怎么利用thunk进行记忆化的？后来得到店里的指导（我太菜了，不好意思@ 他们），才了解到区别，对此十分感谢。</p>",
            "voteup_count": 224,
            "column": {
                "id": "marisa",
                "type": "column",
                "url_token": "marisa",
                "title": "雾雨魔法店",
                "url": "https://zhuanlan.zhihu.com/marisa",
                "created": 1450165978,
                "updated": 1599126154,
                "description": "http://zhuanlan.zhihu.com/marisa/20419321",
                "image_url": "https://picx.zhimg.com/73fa95e05c4d73bd51b34eb72057ae95_720w.jpg?source=d16d100b"
            },
            "comment_count": 22
        },
        "created": "2020-01-28T23:22:06+08:00"
    },
    {
        "content": {
            "id": 808399749,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/27821340/answer/808399749",
            "created_time": 1567171611,
            "updated_time": 1572524160,
            "question": {
                "type": "question",
                "id": 27821340,
                "title": "如何轻松阅读 GitHub 上的项目源码 ?",
                "question_type": "normal",
                "created": 1422359627,
                "updated_time": 1567424716,
                "url": "https://www.zhihu.com/question/27821340",
                "is_deleted": false
            },
            "author": {
                "id": "b50644ff6e611664f9518847da1d2e05",
                "url_token": "niu-dai-68-44",
                "name": "牛岱",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-da1f1ae897ac98824abfca8bdc268abc_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-da1f1ae897ac98824abfca8bdc268abc.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/b50644ff6e611664f9518847da1d2e05",
                "user_type": "people",
                "headline": "创业 ing",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "字节跳动 Web Infra Engineer"
                    }
                ],
                "badge_v2": {
                    "title": "字节跳动 Web Infra Engineer",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "字节跳动 Web Infra Engineer",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "字节跳动 Web Infra Engineer",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1471190688
            },
            "thumbnail": "https://pic1.zhimg.com/v2-992bf6460a8a93c7052b7b5361852230_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 9407,
            "comment_count": 138,
            "thanks_count": 4088,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"cw4T8OVw\">在 Chrome 浏览器上浏览的话，装上这两个插件，就足够你畅游了。</p><p data-pid=\"I0hwZEDF\">我试过 Octotree，但它只是支持在浏览器左侧生成文件树，我也试过 GitHub Linker，它可以让你进行 import 的包跳转，我也试过 Github 新出的代码跳转功能，可惜支持的项目有限。</p><p data-pid=\"CeyvlMWa\">我用过的这些辅助浏览插件里面，个人觉得最好的，一个可以顶所有的就是：</p><h2><b>SourceGraph </b>插件</h2><p data-pid=\"vhO-iU09\">插件市场搜 <b>SourceGraph </b>即可：</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-992bf6460a8a93c7052b7b5361852230_720w.jpg?source=2c26e567\" data-rawwidth=\"1576\" data-rawheight=\"606\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-992bf6460a8a93c7052b7b5361852230\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-5733ed53b761f6368598df45049fe8bc_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1576\" data-original=\"https://picx.zhimg.com/v2-992bf6460a8a93c7052b7b5361852230_r.jpg?source=2c26e567\"/></figure><p data-pid=\"ydsTKXbQ\"><b>SourceGraph 可以同时提供 Octotree 提供的文件树浏览和 Github Jump to definition 的定义跳转功能，而且还支持 Jump to reference 引用跳转。</b></p><p data-pid=\"wdh7bcwR\">使用十分方便，安装上它后，随便打开一个 Github 项目：</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-617ea46cd8863a8aca2e736c8336f75c_720w.jpg?source=2c26e567\" data-rawwidth=\"1353\" data-rawheight=\"790\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-617ea46cd8863a8aca2e736c8336f75c\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-a3e42604a084d7d811dcc564f4963e33_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1353\" data-original=\"https://picx.zhimg.com/v2-617ea46cd8863a8aca2e736c8336f75c_r.jpg?source=2c26e567\"/></figure><p data-pid=\"y65W9TgM\">我们会发现项目首页多了一个图标，它就是 Source Graph，点击它，即可打开 Source Graph 项目浏览页面：</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-653ce13da666dc7b270cb41aeb3f929b_720w.jpg?source=2c26e567\" data-rawwidth=\"1920\" data-rawheight=\"916\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-653ce13da666dc7b270cb41aeb3f929b\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-807fd2f76809d7bbf78d794ac7d41e27_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pica.zhimg.com/v2-653ce13da666dc7b270cb41aeb3f929b_r.jpg?source=2c26e567\"/></figure><p data-pid=\"d4sba6qx\">可以看到类似于 Octotree 插件提供给我们的文件树，也支持快速搜索。</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-9231d8662959401a184cd7e88421dc56_720w.jpg?source=2c26e567\" data-rawwidth=\"1451\" data-rawheight=\"486\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-9231d8662959401a184cd7e88421dc56\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-af86a3d7d1cd1fead4ccc82da94d2346_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1451\" data-original=\"https://picx.zhimg.com/v2-9231d8662959401a184cd7e88421dc56_r.jpg?source=2c26e567\"/></figure><p data-pid=\"k1jSnuL6\">基本上，在代码的浏览这个层面，已经具备了 IDE 的样子，而且整个过程都在网页里进行，十分方便，无需将代码 clone 至本地，方便快速浏览代码。</p><p data-pid=\"GqOEgIeD\">第二个我要推荐的，不是辅助浏览的插件，但是胜似辅助浏览。</p><p data-pid=\"l_4tUzVf\">很多时候，我们发现一个 Github 项目中装着很多东西，比如有的代码仓库中装着几十个教学实例代码，但是你只是想把其中的一个教学实例下载下来。</p><p data-pid=\"KsFvcP12\">使用 git clone 命令克隆的是整个代码仓库，如何你轻松地获取一个仓库中的部分代码？</p><h2>GitZip 插件：下载仓库中部分代码</h2><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-bd6ba13ec87fdcf1b7fa53afed74df8c_720w.jpg?source=2c26e567\" data-rawwidth=\"1543\" data-rawheight=\"427\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-bd6ba13ec87fdcf1b7fa53afed74df8c\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-350fd3282ff2174e4ff1d910f21e1138_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1543\" data-original=\"https://pic1.zhimg.com/v2-bd6ba13ec87fdcf1b7fa53afed74df8c_r.jpg?source=2c26e567\"/></figure><p data-pid=\"9XMwLZiR\">装上即可，即装即用，非常方便。</p><p data-pid=\"mKxiRB5e\">只需定位到某个项目子文件夹上，在空白区域右键点击：</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-049da7d4408b48e68f80cd0c4748f3d2_720w.jpg?source=2c26e567\" data-rawwidth=\"1233\" data-rawheight=\"658\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-049da7d4408b48e68f80cd0c4748f3d2\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-434ab7fb266371828801548489bb06a6_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1233\" data-original=\"https://pic1.zhimg.com/v2-049da7d4408b48e68f80cd0c4748f3d2_r.jpg?source=2c26e567\"/></figure><p data-pid=\"xsmdaZDd\">选择 <b>Download [XXX] </b>即可，图中我们下载了 spring-boot-autoconfigure 这个子模块的代码。</p><p data-pid=\"GgOjanFC\">宁缺毋滥，有这两个完全够用了，不用再找别的了。</p>",
            "excerpt": "在 Chrome 浏览器上浏览的话，装上这两个插件，就足够你畅游了。 我试过 Octotree，但它只是支持在浏览器左侧生成文件树，我也试过 GitHub Linker，它可以让你进行 import 的包跳转，我也试过 Github 新出的代码跳转功能，可惜支持的项目有限。 我用过的这些辅助浏览插件里面，个人觉得最好的，一个可以顶所有的就是： SourceGraph 插件插件市场搜 SourceGraph 即可： [图片] SourceGraph 可以同时提供 Octotree 提供的文件树浏览和 Git…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 6,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-992bf6460a8a93c7052b7b5361852230_720w.jpg?source=7e7ef6e2",
                        "width": 1576,
                        "height": 606,
                        "token": "v2-992bf6460a8a93c7052b7b5361852230",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-617ea46cd8863a8aca2e736c8336f75c_720w.jpg?source=7e7ef6e2",
                        "width": 1353,
                        "height": 790,
                        "token": "v2-617ea46cd8863a8aca2e736c8336f75c",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-653ce13da666dc7b270cb41aeb3f929b_720w.jpg?source=7e7ef6e2",
                        "width": 1920,
                        "height": 916,
                        "token": "v2-653ce13da666dc7b270cb41aeb3f929b",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxiF57yBAyCljsoBkgIkCgkxNzcwNDg3NTgSCTgwODM5OTc0ORgEIgpJTUFHRV9URVhU",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2019-08-30T21:26:51+08:00"
    },
    {
        "content": {
            "id": 498954175,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/35776654/answer/498954175",
            "created_time": 1538002914,
            "updated_time": 1538062956,
            "question": {
                "type": "question",
                "id": 35776654,
                "title": "考入重点大学，却因沉迷游戏而频频挂科，这些人是怎么想的？",
                "question_type": "normal",
                "created": 1442712296,
                "updated_time": 1540274205,
                "url": "https://www.zhihu.com/question/35776654",
                "is_deleted": false
            },
            "author": {
                "id": "4248933125d95268d3fe90a89c1fd175",
                "url_token": "huo-gu-itpang-zi",
                "name": "硅谷IT胖子",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-0d19f9c15e94caa0634be16d2ef041ea_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-0d19f9c15e94caa0634be16d2ef041ea.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/4248933125d95268d3fe90a89c1fd175",
                "user_type": "people",
                "headline": "正要收杆，咬钩的大鱼忽然开口说话了：脱钩！脱钩！",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1515283762
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 6513,
            "comment_count": 206,
            "thanks_count": 1291,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"roBnSeDq\">谨以此回答致敬我大学本科时的教授、师长某某某老师。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"yipLhl5P\">这位老师当年课上对这个问题的回答对我一生颇有影响。我读的是国内非清华北大的名校，但同学中不少人分数都是到清华北大线了（我差20分），总体算是底子不错的。而且我是200X年读的大学，那时候加分也很少，都是裸考为主。这是背景。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"UpY52o7r\">老师当年说，她在美国交流时，发现美国本科生比较勤奋（后来我没验证过，虽然来美了），不像我们中国学生沉溺于电脑游戏和QQ等。但她没有责备我们，她觉得是因为高考太苦太累了，很多人学习虽然好，但是在高中三年拼尽了力气，为了一个单一而固定明确的目标，其实也早已厌恶了学习，变得非常非常疲惫了。而大学里面无人督促，又缺乏高考一样的目标，所以很容易就失去方向而沉沦。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"Pm17oZWl\">后来我毕业多年，经历很多事情（比如换专业、找工、移民），尤其是从我自身，发现老师说得的确是对的：人，不能太疲惫，不能把某一个目标看得太重，否则很容易后劲不足。读书或是学习是一个很漫长的过程，但高考这个节点却太重要，以至于本来应该是一个比较均匀发力、有多个目标的过程，被压缩到高中三年和高考一件事了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"H8yI0N8s\">我就是一直沉溺于电脑游戏的，整个大学里。但我沉溺程度比较有限，GPA还能保证年级前10%没问题，最后出国也很顺利。我觉得一方面是我底子还算不错而且对应试教育比较擅长，另一方面毕竟我还有出国留学的梦想，所以有种力量一直拉扯着我学习。但大学里没交女朋友，因为除了学习就是打游戏了，可见我有多沉迷游戏。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"-ClK7oW_\">后来，我大概是在工作以后开始终于感觉到了“高考式疲惫”：这么多年高中三年+大学四年+转专业浪费一年+读书两年，一下子10年过去了，一直在努力，所以忽然感觉到了巨大的疲惫，一下子就感受到了我当初那些不学习频频挂科的同学的感受：完全不想动弹的那种疲惫。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"OQZ14Xgb\">这种疲惫大概持续了整整5年——差不多是我工作的头5年，我才缓过来，而且这么多年我一直比较沉迷于游戏，一把年纪了还在玩，反而是疲惫消失后，我再也不沉迷游戏了，20年的沉迷，几乎一夜消失，我原以为这辈子我肯定离不开了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"-RVe12GB\">想起老师的话，虽然平平无奇，但是非常有道理：我觉得每个人的承受能力是不一样的，恕我直言，本身应试教育的压力水平是相当高的，很多人到了大学忽然垮下来，其实是天性和人性——体力和精神力耗尽了，不是这些人堕落，当然有个人的因素在里面比如家庭变故、失去目标、眼界问题等，但是我觉得一味地责备个人、强迫自己，最后也早晚会经历这个疲惫期，比如我在26岁才开始这个疲惫期。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"WeXe9Jwy\">所以说实话，回头看，还是觉得挺悲哀的：因为资源少、好大学少，普通人上重点大学绝对是人生的好选择，但为此需要付出很大的代价，在年纪轻轻的时候，日夜为一些毫无意义的题而过早地压榨自己。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"-AMAud1V\">而当人生到了更重要的20s，30s，40s时，却发现过得很累，有时候不想努力了。我观察为什么美国人不觉得40岁老，是因为他们年少时在玩，所以不累，而中国人年少时在学在为了考试焦头烂额，所以40岁时已经很累了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"6DWvNU9a\">这也是为什么本科之前，中国学生碾压美国学生，本科以后，中国学生的水平越来越接近，因为整体来说，美国学生开始发力。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"ysmAK8eJ\">中式教育总说要赢在起跑线上，却跑到半途累趴下了不少人。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"CyaGlMIs\">我觉得，我不是在抱怨中式教育，我觉得还是教育资源缺乏的问题。比如我自己回想自己的高考，觉得拼命还是值得的，因为前面再累，后面休息几年也能调整过来；如果前面不拼命，很可能后面的故事都没有了。现实就是这样。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"JOXQrdBh\">对个人来说，我在想两点：</p><p data-pid=\"rTp4dqcG\">第一，不要让自己太疲惫，尽可能地边拼命边玩耍；</p><p data-pid=\"MMBnTxcy\">第二，如果觉得太累，一定要休息，但尽可能坚持到爬上山坡再休息，以防摔下去。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"hXnW8aEt\">===第二天补充：Sep 27th, 2018===</p><p data-pid=\"B2YZpV43\">一晚上过去竟然290赞。我就在展开说一下，前方高能量鸡汤预警。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"EY84jrdT\">根据我这十几年的浮沉，我觉得关键还是要安抚自身的精神状态，尽可能地达到内心的平和和自我激励，以及自我满足。换句话俗说，随时保证自身的状态良好。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"L4VmgHjW\">一是豁达和目标。人要能想开，想广，而不是想窄，心灵比大海天空宽广。我特别崇信的一句话就是：人无远虑，必有近忧。我的理解是：不去思考未来和长远，则必然担心眼前鸡毛蒜皮的小事情，容易堕落和缺乏动力。比如我18岁时就想移民因为高考太苦，所以即使大学课程没用，也努力学，为了GPA等，我过去这十几年很多时候失去斗志但是因为目标在，自己还会本能地向目标挪动。对于大学生，大学期间就要思考自己去过什么样的生活——搞科研的去哪里，做技术的做什么，当官的如何成长，搞教育的专长什么，出国的更是要做起来。一旦有目标和眼界，不容易迷失，即使迷失，残存的注意力还是会带着你向目标移动。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"IU89EucQ\">二是宽容自己。中国文化太苦了，period。这种苦，不仅仅是能吃苦，更是一种习惯性自虐，比如国内的996。有人说是资源问题，我觉得是，但不全是。所以对自己好些，甚至有时候可以纵容一点。举个也许很误导青少年的例子：我2015年前后工作和跳槽压力很大，就经常去赌场（合法的），一次也就玩个一两小时老虎机、几十最多上百美元，但非常放松，其实简直是最廉价和有效的放松方式了（从赌场回来接着加班和刷题）。老婆家强烈反对，认为去赌博不是正经人做的事情，后来也不得不接受。有时候找到放松自己的方法，在长期劳累和辛苦中能够暂时地有效休息完全放松，其实非常非常重要。（有人可能问会不会因此而堕落，我觉得根本不会，能因为赌堕落的人，本身就是堕落的，赌只是其中一种方式）</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"PwYvD0LW\">我的理解，人一辈子的时间其实是很多的，根本不怕失败和沮丧，最怕的是被打倒一次就好几年爬不起来。如果做一个无论碰到什么事情和打击都能很快恢复过来，1个月恢复正常状态，那这人其实就效率非常高了。所以沮丧不可怕，但是有底下评论说两三学期都没动力，就需要赶紧恢复正常了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"ymK3teUi\">三是培养内在的动力。高考是外在的动力和压力，但人是有内在的动力和精神的，是可以培养的。举个例子，战场上的士兵不撤退，是因为督战队在后面监视（外在动力）；但战场上的骑士（或贵族）不撤退，是因为荣誉感和使命感（内在动力）。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"iTL4RiWK\">我觉得内在的动力来源可以很丰富，比如来自家族来自血统来自某件事情来自某个人来自责任感兴趣甚至歧视。生活中逐渐形成自己内在的动力，就根本感觉不到努力和生活的痛苦。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"-iw1MVga\">初高中教育其实是人逐渐形成世界观和性格的时期，所以一味地强调学习最后缺课在世界观和性格上，导致人生长远来看缺乏内在动力是很多人走不远的原因。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"82airY7r\">我到三十多岁的今天，感觉到推动自己前进的力量主要是内在动力了。外界根本没有太大的压力了（虽然房贷、孩子教育等压力一直存在，但在可控范围内），但我的努力程度却超过年轻时。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"icns9x2o\">最后的最后，高考真的很苦，苦在于高考时我们太年轻。我这辈子高考后十几年一直很辛苦，经历很多奋战和压力很大的时期，都是过了就算，过了就不在乎了。唯独高考，就像一场噩梦一样永远笼罩着，很难想象，我30多岁了，偶尔做噩梦，全是高考的场景。</p>",
            "excerpt": "谨以此回答致敬我大学本科时的教授、师长某某某老师。 这位老师当年课上对这个问题的回答对我一生颇有影响。我读的是国内非清华北大的名校，但同学中不少人分数都是到清华北大线了（我差20分），总体算是底子不错的。而且我是200X年读的大学，那时候加分也很少，都是裸考为主。这是背景。 老师当年说，她在美国交流时，发现美国本科生比较勤奋（后来我没验证过，虽然来美了），不像我们中国学生沉溺于电脑游戏和QQ等。但她没有责…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxi/3/XtASDF5I0DkgIkCgkxMjA3ODgwMjkSCTQ5ODk1NDE3NRgEIgpJTUFHRV9URVhU",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2018-09-27T07:01:54+08:00"
    },
    {
        "content": {
            "id": 583114206,
            "title": "Monad 简单引言",
            "type": "article",
            "excerpt_title": "这是我尝试翻译的第一篇技术文章，旨对非函数式编程语言背景的开发者讲解什么是 Monad。适用于对函数式编程语言感兴趣的开发者建立对 Monad 的初步直觉，如有语义不通 / 疏漏之处可以在评论区指正，谢谢！ 原文 以 GPLv3 许可发布，ChristianNeumanns 版权所有。简介许多纯函数式语言中都大量使用 Monads。例如在 Haskell 中，它们必不可少，并且出现在各种应用和库 （轮子）中。 另一方面，Monads 却很少用于流行的、非纯函数式…",
            "url": "https://zhuanlan.zhihu.com/p/583114206",
            "image_url": "https://picx.zhimg.com/v2-349b9ded273ba97416fe8555e35c4ffe_r.jpg?source=172ae18b",
            "created": 1668356139,
            "updated": 1668422979,
            "author": {
                "id": "ddb066078e2a41db86c9a926b7462933",
                "url_token": "kirraobj",
                "name": "闲蛋",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-e3765214f0f50635b75323bdb2d2488f_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-e3765214f0f50635b75323bdb2d2488f.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/ddb066078e2a41db86c9a926b7462933",
                "user_type": "people",
                "headline": "永远保持对探索未知事物的热情。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://pic1.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1530266146
            },
            "comment_permission": "all",
            "content": "<blockquote data-pid=\"Xgn6Nhrt\">这是我尝试翻译的第一篇技术文章，旨对非函数式编程语言背景的开发者讲解什么是 Monad。适用于对函数式编程语言感兴趣的开发者建立对 Monad 的初步直觉，如有语义不通 / 疏漏之处可以在评论区指正，谢谢！<br/><br/><a href=\"https://link.zhihu.com/?target=https%3A//www.codeproject.com/Articles/5290753/Simple-Introduction-to-Monads\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">原文</a>以 GPLv3 许可发布，ChristianNeumanns 版权所有。</blockquote><h3>简介</h3><p data-pid=\"4W2TYpWw\">许多纯函数式语言中都大量使用 Monads。例如在 Haskell 中，它们必不可少，并且出现在各种应用和库 （轮子）中。</p><p data-pid=\"PbSS0ejz\">另一方面，Monads 却很少用于流行的、非纯函数式的编程语言中，例如 C#、Java 和 Python 等。</p><p data-pid=\"GvWSnRho\">为什么会有这么大的差异？</p><p data-pid=\"8tw0Dq38\">要找到答案，我们首先要知道：</p><ul><li data-pid=\"tjEeMKKf\">什么是 Monad？</li><li data-pid=\"gWNFASOv\">为什么它们会被用在函数式编程语言中？它们解决了什么问题？</li><li data-pid=\"w5QwEME_\">我们如何在 C#、Java、Python 等语言中使用 Monad？我们应该这么做么？</li></ul><p data-pid=\"d9OXbnuc\">希望你在看完本篇文章后能够准确理解以上的问题。</p><blockquote data-pid=\"_2S45xLQ\"> 本文针对的是具有良好的非函数式编程语言背景的软件开发人员。<br/><br/>文章中的例子使用 Java 编写，但不要求你是 Java 专家，因为它们仅涉及基本的 Java 知识。这些例子在 C# 中看起来非常相似，而且可以容易地用其他支持范型 （类型参数）和高阶函数（可以将一个函数作为输入参数的函数，以及返回函数）的语言来重写它们。<br/><br/> <a href=\"https://link.zhihu.com/?target=https%3A//gitlab.com/ppl-lang/blog/-/tree/master/2020-03-Monad_Intro/Java_examples/monadtests\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Gitlab</a> 上提供了完整的源代码</blockquote><h3>简单的问题</h3><p data-pid=\"GaFTAa1l\">假设我们必须编写一个简单的函数，它会对输入的字符串进行如下转换：</p><ul><li data-pid=\"HVzkRVyz\">移除两侧空格。</li><li data-pid=\"xvJQMTWu\">将所有字母转换为大写。</li><li data-pid=\"Tof6Ttbe\">在尾部附加一个感叹号。</li></ul><p data-pid=\"u_iLCzEP\">举个例子，用 <code>&#34; Hello bob&#34;</code> 作为函数输入应返回 <code>&#34;HELLO BOB!&#34;</code>。</p><h3>Java 里的简单解决方案</h3><p data-pid=\"liZkCHDW\">在大多数编程语言中，这是很容易做到的。这里是一个 Java 的解决方案：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">enthuse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">sentence</span><span class=\"o\">.</span><span class=\"na\">trim</span><span class=\"o\">().</span><span class=\"na\">toUpperCase</span><span class=\"o\">().</span><span class=\"na\">concat</span><span class=\"o\">(</span><span class=\"s\">&#34;!&#34;</span><span class=\"o\">);</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"uovq4U6D\">为了编写一个包含基本测试的完整 Java “应用程序”，我们将以下代码放在文件 <i>MonadTest_01.java</i> 里：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MonadTest_01</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">enthuse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">sentence</span><span class=\"o\">.</span><span class=\"na\">trim</span><span class=\"o\">().</span><span class=\"na\">toUpperCase</span><span class=\"o\">().</span><span class=\"na\">concat</span><span class=\"o\">(</span><span class=\"s\">&#34;!&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">enthuse</span><span class=\"o\">(</span><span class=\"s\">&#34;  Hello bob  &#34;</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"NrKSWtlr\">然后我们可以通过以下命令编译和运行该程序：</p><div class=\"highlight\"><pre><code class=\"language-bash\">javac MonadTest_01.java\njava MonadTest_01</code></pre></div><p data-pid=\"CyyE-oFc\">输出看起来符合预期：</p><div class=\"highlight\"><pre><code class=\"language-text\">HELLO BOB!</code></pre></div><p data-pid=\"mD2J-1gp\">到目前为止还不错。</p><h3>只要函数！</h3><p data-pid=\"l_YGJ6qw\">在之前的 Java 例子中，我们使用例如像 <code>sentence.trim()</code> 的对象方法。然而，由于这篇文章是关于 Monads 的，我们必须意识到纯函数式语言并没有在对象上执行的方法。基于 <a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25CE%259B%25E6%25BC%2594%25E7%25AE%2597\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Lambda 演算</a> 的函数式编程语言只有无副作用的函数，接受一个输入，然后返回一个结果。</p><p data-pid=\"Ef3VFkv_\">因此，让我们仅使用纯函数来重写之前的代码，依然使用 Java。这一点很重要，因为我们必须使用函数，才能最终理解为什么要发明 Monads。</p><p data-pid=\"uckg3Re-\">这里是重写后的代码：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">trim</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"na\">trim</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"na\">toUpperCase</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"na\">concat</span><span class=\"o\">(</span><span class=\"s\">&#34;!&#34;</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">enthuse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">)));</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">test</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">enthuse</span><span class=\"o\">(</span><span class=\"s\">&#34;  Hello bob  &#34;</span><span class=\"o\">));</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"F0qHjPZN\">代码从三个纯函数 （<code>trim</code>、<code>toUppercase</code>、<code>appendExclam</code>）开始，它们接收一个字符串作为输入，并返回一个字符串作为结果。也许你会觉得我在作弊，因为我仍然在函数体内使用对象方法（例如：<code>string.trim()</code>）。但这在这里并不重要，因为在这个练习中，我们并不关心这个函数的实现，我们关注的是它的<b>类型签名</b>。</p><p data-pid=\"QXcNj5AR\">有趣的部分是 <code>enthuse</code> 函数体。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">return</span> <span class=\"n\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">)));</span></code></pre></div><p data-pid=\"3AUEqM4X\">我们可以看到里面只有函数调用（就像在纯函数式语言中一样）。调用是嵌套的，并像这样执行。</p><ul><li data-pid=\"De4z5EtI\">第一步：执行 <code>trim(sentense)</code>。</li><li data-pid=\"bHj70l8N\">第二步：将第一步的结果输入给 <code>toUpperCase</code>。</li><li data-pid=\"_hPSQB_u\">第三步：将第二步的结果输入给 <code>appendExclam</code>。</li><li data-pid=\"2ywd9V2Q\">第四步：将第三步的结果作为函数 <code>enthuse</code> 的结果返回。</li></ul><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b9e531a252ebf9ce8859f6c47b86dce3_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"797\" data-rawheight=\"46\" class=\"origin_image zh-lightbox-thumb\" width=\"797\" data-original=\"https://pic4.zhimg.com/v2-b9e531a252ebf9ce8859f6c47b86dce3_r.jpg\" data-original-token=\"v2-b9e531a252ebf9ce8859f6c47b86dce3\"/></figure><p data-pid=\"SeqjC57n\">为了查看一切是否仍然正常，我们可以执行测试，结果仍然是一样的。</p><div class=\"highlight\"><pre><code class=\"language-text\">HELLO BOB!</code></pre></div><h3>函数复合</h3><p data-pid=\"lhJdn-_j\">在函数式编程语言中，嵌套的函数调用（例如我们的：<code>appendExclam(toUpperCase(trim(sentence)))</code>）被称为<b>函数复合</b>。</p><blockquote data-pid=\"NNLKK5qb\"> 函数复合 (<i>Function Composition</i>) 是函数式编程语言里的面包和黄油。在 Lambda 演算中，一个函数体是一个单一的表达式，复杂的表达式可以通过函数复合来创建。<br/> </blockquote><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-38f901c32df7c166fe10a787c3443ce1_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"577\" data-rawheight=\"47\" class=\"origin_image zh-lightbox-thumb\" width=\"577\" data-original=\"https://pic2.zhimg.com/v2-38f901c32df7c166fe10a787c3443ce1_r.jpg\" data-original-token=\"v2-38f901c32df7c166fe10a787c3443ce1\"/></figure><p data-pid=\"xXSnhTWN\">正如我们将在后面看到的，Monad 为我们复合函数时可能出现的问题提供了一个解决方案。但是在深入之前，让我们看看不同环境下的函数复合。熟悉这一重要概念的读者可以跳到下一章。</p><h3>Unix 管道</h3><p data-pid=\"6XT87nW5\">首先值得注意的是，函数复合的想法与 Unix/Linux 中的管道类似。第一条命令的输出作为输入被送入第二条命令。然后，第二条命令的输出被作为输入送到第三个命令中以此类推。在 Unix/Linux 中，符号 <code>|</code> 被用于管道命令。下面是一个计算文件名中含有 &#34;page&#34; 的文件数量的命令例子（借用自 <a href=\"https://link.zhihu.com/?target=https%3A//www.howtogeek.com/438882/how-to-use-pipes-on-linux/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">How to Use Pipes on Linux</a>）。</p><div class=\"highlight\"><pre><code class=\"language-bash\">ls - <span class=\"p\">|</span> grep <span class=\"s2\">&#34;page&#34;</span> <span class=\"p\">|</span> wc -l</code></pre></div><h3>管道操作符 (Pipe Operator)</h3><p data-pid=\"TQUJsgKN\">因为管道在许多情况下都十分有用，一些编程语言有专门的管道操作符。例如 F# 使用 <code>|&gt;</code> 来链化函数调用。如果 Java 有这个操作符，则函数 enthuse 就可以写成下面这种形式：</p><div class=\"highlight\"><pre><code class=\"language-text\">static String enthuse(String sentence) {\n    return trim(sentence) |&gt; toUpperCase |&gt; appendExclam;\n}</code></pre></div><p data-pid=\"D2KCIxM1\">它们拥有相同的语意，但这种形式比使用嵌套函数进行调用的 Java 更易读。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">enthuse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">)));</span>\n<span class=\"o\">}</span></code></pre></div><h3>函数复合操作符</h3><p data-pid=\"P333EhV0\">由于函数复合是必不可少的，大多数函数式编程语言都有一个专门的函数复合操作符，使函数的复合变得非常简单。</p><p data-pid=\"QSHkN5mL\">例如在 Haskell 中，点 (<code>.</code>) 被用来复合函数 （源自数学中的环形运算符号 <code>∘</code>）。点本身就是一个函数，其类型签名定义如下：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"p\">)</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">c</span></code></pre></div><p data-pid=\"j9qvav6i\">该函数接收两个函数作为输入 (<code>b → c</code> 和 <code>a → b</code>)，并返回另一个函数 (<code>a → c</code>)，它是两个输入函数的复合。</p><p data-pid=\"pcKGc7mQ\">因此，要声明函数 <code>h</code> 是函数 <code>f</code> 和 <code>g</code> 的复合，在 Haskell 可以这样表示：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"nf\">h</span> <span class=\"ow\">=</span> <span class=\"n\">f</span> <span class=\"o\">.</span> <span class=\"n\">g</span></code></pre></div><p data-pid=\"I-nM5wLX\">注意，点运算符在 Haskell 和像 C#、Java 等面向对象语言中的语义完全不同。在 Java 中，<code>f.g</code> 意味着在对象 <code>f</code> 上应用 <code>g</code> (例如：<code>person.name</code>)。在 Haskell 中，它意味着将函数 <code>f</code> 和 <code>g</code> 进行复合。</p><p data-pid=\"MUgM9ssf\">F# 使用 <code>&gt;&gt;</code> 来复合函数，它的定义是这样的：</p><div class=\"highlight\"><pre><code class=\"language-fsharp\"><span class=\"k\">let</span> <span class=\"o\">(&gt;&gt;)</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span></code></pre></div><p data-pid=\"ePMaH8UA\">而他的使用方法如下：</p><div class=\"highlight\"><pre><code class=\"language-fsharp\"><span class=\"k\">let</span> <span class=\"nv\">h</span> <span class=\"o\">=</span> <span class=\"n\">f</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">g</span></code></pre></div><blockquote data-pid=\"9a9zBBNj\"> 不要把 F# 的 <code>&gt;&gt;</code> 操作符与 Haskell 中的 Monad 排序操作符相混淆，后者也使用符号 <code>&gt;&gt;</code>。</blockquote><p data-pid=\"tYb4SiOx\">如果 Java 有一个类似于 F# 的函数复合语法，那么函数 <code>enthuse</code> 可以简单地写成这样：</p><div class=\"highlight\"><pre><code class=\"language-text\">static String enthuse (String sentence) = trim &gt;&gt; toUpperCase &gt;&gt; appendExclam;</code></pre></div><h3>错误，但不是异常</h3><p data-pid=\"utpaFtez\">为了本教程的目的，假设我们的函数可能会因以下几点导致执行失败：</p><ul><li data-pid=\"57DTyM_c\">如果输入的字符串是空的或仅包含空格，则函数 <code>trim</code> 执行失败 （即结果并不能是一个空字符串）。</li><li data-pid=\"JsBNaLz3\">如果输入的字符串是空的或者包含字母或空格以外的字符，则函数 <code>toUpperCase</code> 执行失败。</li><li data-pid=\"A_AWwdy6\">如果输入的字符串超过二十个字符，则函数 <code>appendExclam</code> 执行失败。</li></ul><p data-pid=\"aNh35lIf\">在 Java 中，我们习惯性的抛出异常 (<i>Exception</i>) 来表示一个错误。但是纯函数式语言不支持异常，因为函数不能有副作用。一个可能失败的函数必须将错误信息作为函数返回结果的一部分。例如函数在执行成功的情况下返回一个字符串，在出现错误的情况下返回一个错误数据。</p><p data-pid=\"yJ-DWZgE\">所以让我们用 Java 来实现吧！首先，我们定义一个简单的错误类，其中有一个描述错误信息的字段。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SimpleError</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">info</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">SimpleError</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">info</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">info</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getInfo</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">info</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">info</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"FkLsp5qb\">如前所述，这些函数必须能够在执行成功的情况下返回一个字符串，否则就是一个错误对象。为了实现这一点，我们可以定义 <code>ResultOrError</code> 类：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ResultOrError</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">SimpleError</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">ResultOrError</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">error</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">ResultOrError</span><span class=\"o\">(</span><span class=\"n\">SimpleError</span> <span class=\"n\">error</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">getResult</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">SimpleError</span> <span class=\"nf\">getError</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">error</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isResult</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">error</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isError</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;Result: &#34;</span> <span class=\"o\">+</span> <span class=\"n\">result</span><span class=\"o\">;</span> \n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;Error: &#34;</span> <span class=\"o\">+</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"na\">getInfo</span><span class=\"o\">();</span> \n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"JL3KXVcM\">正如我们所看到的：</p><ul><li data-pid=\"iNkpguOX\">该类有两个不可变的字段，用来保存结果或错误。</li><li data-pid=\"19PN6ygr\">有两个构造函数 (<i>Constructor</i>)：</li><li data-pid=\"BbMgwJ_B\">第一个构造函数用于成功的情况（例：<code>return new ResultOrError(&#34;hello&#34;);</code>）。</li><li data-pid=\"o0n6jvDc\">第二个构造函数用于失败的情况（例：<code>return new ResultOrError(new Error(&#34;Something went wrong&#34;));</code>）。</li><li data-pid=\"Dyq3sKqV\"><code>isResult</code> 和 <code>isError</code> 是工具函数。</li><li data-pid=\"oj28iPD8\"><code>toString</code> 是为了调试目的 (<code>Debugging</code>) 而复写的。</li></ul><p data-pid=\"zcLGd-z9\">为了包含错误处理，我们重写上面的三个工具函数：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">StringFunctions</span> <span class=\"o\">{</span>\n\n   <span class=\"kd\">public</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">trim</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"na\">trim</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ResultOrError</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">SimpleError</span><span class=\"o\">(</span><span class=\"s\">&#34;String must contain non-space characters.&#34;</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ResultOrError</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"na\">matches</span><span class=\"o\">(</span><span class=\"s\">&#34;[a-zA-Z ]+&#34;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ResultOrError</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">SimpleError</span><span class=\"o\">(</span><span class=\"s\">&#34;String must contain only letters and spaces.&#34;</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ResultOrError</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"na\">toUpperCase</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">string</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">20</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ResultOrError</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"n\">SimpleError</span><span class=\"o\">(</span><span class=\"s\">&#34;String must not exceed 20 characters.&#34;</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ResultOrError</span><span class=\"o\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"na\">concat</span><span class=\"o\">(</span><span class=\"s\">&#34;!&#34;</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><blockquote data-pid=\"cZYXmAMu\"> 为了使这个练习代码变得简单，我们不会像在生产环境下检查和处理空值。假设上述代码中其中一个函数被调用，输入值为 <code>null</code>，我们只需接受。即使它会抛出 <code>NullPointerException</code>。</blockquote><p data-pid=\"yYjCBdCP\">重要的是，之前返回字符串的三个函数现在都返回了一个 <code>ResultOrNull</code> 对象。</p><p data-pid=\"1sVBV1_I\">因此，函数 <code>enthuse</code> 的定义如下：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">String</span> <span class=\"nf\">enthuse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">)));</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"RAR2z57T\">······然而并没有起任何作用。</p><p data-pid=\"Z3zxpfyA\">不幸的，现在的函数复合无效了，因为现在的函数返回一个 <code>ResultOrError</code> 对象。但需要一个字符串作为输入，输入和输出类型不再匹配了，这些函数不能再被链接起来了。</p><p data-pid=\"H7AOOJcf\">在之前的代码中，当函数返回字符串时，一个函数的输出可以输入到下一个函数中。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0fdebcaaa02047e1140bac209878f8c7_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"45\" class=\"origin_image zh-lightbox-thumb\" width=\"777\" data-original=\"https://pic4.zhimg.com/v2-0fdebcaaa02047e1140bac209878f8c7_r.jpg\" data-original-token=\"v2-0fdebcaaa02047e1140bac209878f8c7\"/></figure><p data-pid=\"pKLoDocQ\">但现在这样做是不行的了。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ca06cc3d87709c429ca6122d248636df_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"48\" class=\"origin_image zh-lightbox-thumb\" width=\"777\" data-original=\"https://pic4.zhimg.com/v2-ca06cc3d87709c429ca6122d248636df_r.jpg\" data-original-token=\"v2-ca06cc3d87709c429ca6122d248636df\"/></figure><p data-pid=\"towjrKF5\">然而，我们仍然在 Java 中像这样实现 <code>enthuse</code>：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">enthuse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">ResultOrError</span> <span class=\"n\">trimmed</span> <span class=\"o\">=</span> <span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">);</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">trimmed</span><span class=\"o\">.</span><span class=\"na\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">ResultOrError</span> <span class=\"n\">upperCased</span> <span class=\"o\">=</span> <span class=\"n\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">trimmed</span><span class=\"o\">.</span><span class=\"na\">getResult</span><span class=\"o\">());</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">upperCased</span><span class=\"o\">.</span><span class=\"na\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">upperCased</span><span class=\"o\">.</span><span class=\"na\">getResult</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">upperCased</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">trimmed</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"4eS7Q9nh\">不太好！最开始一行实现的代码已然变成一个丑陋的怪物，我们可以改进一下。</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">enthuse_2</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">ResultOrError</span> <span class=\"n\">trimmed</span> <span class=\"o\">=</span> <span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">);</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">trimmed</span><span class=\"o\">.</span><span class=\"na\">isError</span><span class=\"o\">())</span> <span class=\"k\">return</span> <span class=\"n\">trimmed</span><span class=\"o\">;</span>\n\n    <span class=\"n\">ResultOrError</span> <span class=\"n\">upperCased</span> <span class=\"o\">=</span> <span class=\"n\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">trimmed</span><span class=\"o\">.</span><span class=\"na\">getResult</span><span class=\"o\">());</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">upperCased</span><span class=\"o\">.</span><span class=\"na\">isError</span><span class=\"o\">())</span> <span class=\"k\">return</span> <span class=\"n\">upperCased</span><span class=\"o\">;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">upperCased</span><span class=\"o\">.</span><span class=\"na\">getResult</span><span class=\"o\">());</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"bYP67WGK\">这种代码在 Java 与其他许多编程语言中都可以使用，但它肯定不是我们想要反复编写的代码。错误处理和正常流程代码混在一起，使得代码难以阅读、编写和维护。</p><p data-pid=\"s5w_KFDU\">更重要的是，我们根本无法在纯函数式编程语言中编写这样的代码。<b>一个函数返回的表达式只能由函数复合组成</b>。</p><p data-pid=\"pLFtQNEL\">我们很容易想象出其他导致同样困境的案例。那么，在同一问题出现多种变化的情况下，我们应该怎么做呢？是的，我们应该尝试找到一个可以在最多情况下使用的一般解决方案。</p><p data-pid=\"cVPcFCca\">Monads 来拯救我们了！ 它为这种问题提供了一个通用的解决方案，而且它们还有其他的好处。正如我们在后面所看到的，Monad 使所谓的 Monadic 函数能够被复合。这些函数不能被直接复合，因为它们的类型是不兼容的。</p><p data-pid=\"p4ptR5Br\">有些人说：“如果 Monads 不存在，你可以发明它们”（Brian Beckman 在他的精彩演讲 <a href=\"https://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DZhuHCtR3xq8\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Don&#39;t Fear the Monad</a> 中提到），这是真的！</p><p data-pid=\"P_zO9U5_\">因此，我们先抛下 Monad，让我们自己一步步地思考来找到解决方案。</p><h3>“绑定” 函数 (bind)</h3><p data-pid=\"NBjyJ-JN\">在函数式编程语言中，一切都由函数的方式来呈现。所以我们已经知道必须创建一个函数来解决我们的问题。</p><p data-pid=\"Vxtu8kQD\">我们把这个函数称为 <code>bind</code>，因为它的作用是绑定两个不能直接复合的函数。</p><p data-pid=\"XS6azrB2\">接下来我们必须决定 <code>bind</code> 的输入是什么，以及它应该返回什么。让我们来考虑链接函数 <code>trim</code> 和 <code>toUpperCase</code> 的情况。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-36c167b5087be59aae12322e9b76f2af_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"497\" data-rawheight=\"47\" class=\"origin_image zh-lightbox-thumb\" width=\"497\" data-original=\"https://pic4.zhimg.com/v2-36c167b5087be59aae12322e9b76f2af_r.jpg\" data-original-token=\"v2-36c167b5087be59aae12322e9b76f2af\"/></figure><p data-pid=\"TJZenOGV\">要实现的逻辑必须按以下方式工作：</p><ul><li data-pid=\"mnbMU_nw\">如果 <code>trim</code> 返回一个字符串，那么就可以调用 <code>toUpperCase</code>。因为它需要一个字符串作为输入，所以最后的输出将会是 <code>toUpperCase</code> 的输出。</li><li data-pid=\"JAbwf4y4\">如果 <code>trim</code> 返回一个错误，那么 <code>toUpperCase</code> 就不能被调用。必须简单地转发这个错误。所以最后的输出将会是 <code>trim</code> 的输出。</li></ul><p data-pid=\"RHxEXji_\">我们可以推断，<code>bind</code> 需要两个参数。</p><ul><li data-pid=\"x1_NwAFx\"><code>trim</code> 的返回结果，其类型为 <code>ResultOrError</code>。</li><li data-pid=\"qFjq4rPc\">函数 <code>toUpperCase</code>，因为如果 <code>trim</code> 是一个字符串，那么 <code>bind</code> 必须调用 <code>toUpperCase</code>。</li></ul><p data-pid=\"KX-EtEkD\"><code>bind</code> 的输出类型很容易确定。如果 <code>trim</code> 返回一个字符串，那么 <code>bind</code> 的输出就是 <code>toUpperCase</code> 的输出，它的类型是 <code>ResultOrError</code>。如果 <code>trim</code> 失败了，那么 <code>bind</code> 的输出就是 <code>trim</code> 的输出，它也是 <code>ResultOrError</code> 类型的。由于两种情况下的输出类型都是 <code>ResultOrError</code>，所以 <code>bind</code> 的输出类型也必须是 <code>ResultOrError</code>。</p><p data-pid=\"KglgBIPH\">所以现在我们知道了 <code>bind</code> 的类型签名：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0e432df0152dd0c394d3025b1c05a171_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"342\" data-rawheight=\"92\" class=\"content_image\" width=\"342\" data-original-token=\"v2-968e39541f3f2b5453ae1fcab85cd615\"/></figure><p data-pid=\"DNtU53en\">在 Java 里，我们可以这样写：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">ResultOrError</span> <span class=\"nf\">bind</span><span class=\"o\">(</span><span class=\"n\">ResultOrError</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">ResultOrError</span><span class=\"o\">&gt;</span> <span class=\"n\">function</span><span class=\"o\">)</span></code></pre></div><p data-pid=\"XzBb1UDF\">实现 <code>bind</code> 很简单，因为我们清楚地知道我们要做什么：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">bind</span><span class=\"o\">(</span><span class=\"n\">ResultOrError</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">ResultOrError</span><span class=\"o\">&gt;</span> <span class=\"n\">function</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">function</span><span class=\"o\">.</span><span class=\"na\">apply</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">getResult</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"huCx-S08\">现在可以将函数 <code>enthuse</code> 重写成这样：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">enthuse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">ResultOrError</span> <span class=\"n\">trimmed</span> <span class=\"o\">=</span> <span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">);</span>\n\n    <span class=\"n\">ResultOrError</span> <span class=\"n\">upperCased</span> <span class=\"o\">=</span> <span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"n\">trimmed</span><span class=\"o\">,</span> <span class=\"n\">StringFunctions</span><span class=\"o\">::</span><span class=\"n\">toUpperCase</span><span class=\"o\">);</span>\n    <span class=\"c1\">// alternative:\n</span><span class=\"c1\"></span>    <span class=\"c1\">// ResultOrError upperCased = bind ( trimmed, string -&gt; toUpperCase(string) );\n</span><span class=\"c1\"></span>\n    <span class=\"n\">ResultOrError</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"n\">upperCased</span><span class=\"o\">,</span> <span class=\"n\">StringFunctions</span><span class=\"o\">::</span><span class=\"n\">appendExclam</span><span class=\"o\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"oBef_gh0\">但这依旧是命令式的代码 （一连串的语句）。如果我们做的很好，那么我们一定能够通过函数复合来重写 <code>enthuse</code>。而事实上，我们可以这么做：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">enthuse_2</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">),</span> <span class=\"n\">StringFunctions</span><span class=\"o\">::</span><span class=\"n\">toUpperCase</span><span class=\"o\">),</span> <span class=\"n\">StringFunctions</span><span class=\"o\">::</span><span class=\"n\">appendExclam</span><span class=\"o\">);</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"hSSy4on1\">乍一看，<code>bind</code> 的函数体可能有点混乱。我们会在后面改进这一点，重点是我们在 <code>enthuse</code> 函数体内只使用了函数复合。</p><blockquote data-pid=\"Y1A3CxMZ\"> 如果你从未见过这种风格的代码，那么请你慢慢消化并充分理解在这个函数内发生了什么。理解 <code>bind</code> 是理解 Monads 的关键！<br/> <code>bind</code> 是在 Haskell 中的函数名，还有一些替代名称。例如：<code>flatMap</code>、<code>chain</code> 和 <code>andThen</code>。</blockquote><p data-pid=\"GeWdMCNs\">它是否能够正常工作？让我们来测试一下。这里有一个包含 <code>bind</code> 的类，<code>enthuse</code> 的两种编码风格版本（命令式与函数式）。以及一些简单的测试，涵盖了成功和所有失败的情况：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">MonadTest_04</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">bind</span><span class=\"o\">(</span><span class=\"n\">ResultOrError</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">,</span> <span class=\"n\">ResultOrError</span><span class=\"o\">&gt;</span> <span class=\"n\">function</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">function</span><span class=\"o\">.</span><span class=\"na\">apply</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">getResult</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">enthuse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">ResultOrError</span> <span class=\"n\">trimmed</span> <span class=\"o\">=</span> <span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">);</span>\n\n        <span class=\"n\">ResultOrError</span> <span class=\"n\">upperCased</span> <span class=\"o\">=</span> <span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"n\">trimmed</span><span class=\"o\">,</span> <span class=\"n\">StringFunctions</span><span class=\"o\">::</span><span class=\"n\">toUpperCase</span><span class=\"o\">);</span>\n        <span class=\"c1\">// alternative:\n</span><span class=\"c1\"></span>        <span class=\"c1\">// ResultOrError upperCased = bind ( trimmed, string -&gt; toUpperCase(string) );\n</span><span class=\"c1\"></span>\n        <span class=\"n\">ResultOrError</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"n\">upperCased</span><span class=\"o\">,</span> <span class=\"n\">StringFunctions</span><span class=\"o\">::</span><span class=\"n\">appendExclam</span><span class=\"o\">);</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">enthuse_2</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">),</span> <span class=\"n\">StringFunctions</span><span class=\"o\">::</span><span class=\"n\">toUpperCase</span><span class=\"o\">),</span> <span class=\"n\">StringFunctions</span><span class=\"o\">::</span><span class=\"n\">appendExclam</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">test</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">enthuse</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">));</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">enthuse_2</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">tests</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">test</span><span class=\"o\">(</span><span class=\"s\">&#34;  Hello bob  &#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">test</span><span class=\"o\">(</span><span class=\"s\">&#34;   &#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">test</span><span class=\"o\">(</span><span class=\"s\">&#34;hello 123&#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">test</span><span class=\"o\">(</span><span class=\"s\">&#34;Krungthepmahanakhon is the capital of Thailand&#34;</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"G9WGBWre\"><code>test</code> 函数的运行输出：</p><div class=\"highlight\"><pre><code class=\"language-text\">Result: HELLO BOB!\nResult: HELLO BOB!\nError: String must contain non-space characters.\nError: String must contain non-space characters.\nError: String must contain only letters and spaces.\nError: String must contain only letters and spaces.\nError: String must not exceed 20 characters.\nError: String must not exceed 20 characters.</code></pre></div><p data-pid=\"Sl7TXhcV\">上面定义的 <code>bind</code> 函数仅为我们的需求服务。为了让它成为 Monad 的一部分，我们必须让它变得更加通用。我们将很快做到这一点。</p><blockquote data-pid=\"tA1Cpc8S\"> 如上所示，使用 <code>bind</code> 是解决函数复合问题的常见方法。但这并不是唯一的方法。另一种方法叫做 Kleisli 复合 (<i>Kleisli composition</i>)，这不在本文的讨论范围内。</blockquote><h3>终于，一个 Monad！</h3><p data-pid=\"fdDLpCJx\">现在我们有了 <code>bind</code>，剩下的步骤就很容易了。我们只需要做一些改进，以便有一个可以适用于其他情况的解决方案。</p><p data-pid=\"9vpOlUk9\">在这一章内我们的目标很明确，掌握这一模式，改进 <code>ResultOrError</code>。</p><h3>第一步改进</h3><p data-pid=\"qyE9GzmE\">在之前的章节中，我们将 <code>bind</code> 声明成一个独立的函数，满足了我们的特殊需求。第一步改进是将 <code>bind</code> 函数移到 <code>ResultOrError</code> 类中，函数 <code>bind</code> 必须是 Monad 类的一部分。原因是 <code>bind</code> 的实现基于使用 <code>bind</code> 的 Monad。虽然 <code>bind</code> 的类型签名总是相同的，但对于不同的 Monad 我们使用不同的实现 (<i>Implementions</i>) 。</p><h3>第二步改进</h3><p data-pid=\"Q7G0wd52\">在我们的范例代码中，复合的函数都需要一个字符串作为输入，并返回一个字符串或一个错误对象。如果我们想要复合的函数接收一个整数 (<i>Integer</i>)，并返回一个整数或一个错误对象呢？我们可以改进 <code>ResultOrError</code> 使其适用于任何类型的结果吗？当然可以。我们只需要给 <code>ResultOrError</code> 加上一个类型参数 (<i>Type Parameter</i>)。</p><p data-pid=\"YTk9PhAl\">这是将 <code>bind</code> 移入类并加上类型参数后的新版本：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ResultOrErrorMona</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">R</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">SimpleError</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">ResultOrErrorMona</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">error</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">ResultOrErrorMona</span><span class=\"o\">(</span><span class=\"n\">SimpleError</span> <span class=\"n\">error</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">R</span> <span class=\"nf\">getResult</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">SimpleError</span> <span class=\"nf\">getError</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isResult</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">error</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isError</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">ResultOrErrorMona</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span> <span class=\"nf\">bind</span><span class=\"o\">(</span><span class=\"n\">ResultOrErrorMona</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">ResultOrErrorMona</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">function</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">function</span><span class=\"o\">.</span><span class=\"na\">apply</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">getResult</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;Result: &#34;</span> <span class=\"o\">+</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;Error: &#34;</span> <span class=\"o\">+</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"na\">getInfo</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"NzYL4mDC\"><code>ResultOrErrorMona</code>，注意看这个类名。我并没有拼错它，因为这个类目前还不是一个 Monad，这么命名它仅是为了有趣。</p><h3>第三步改进</h3><p data-pid=\"FtvIyLab\">假设我们必须将下面两个函数链接起来：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">ResultOrError</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"nf\">f1</span><span class=\"o\">(</span><span class=\"n\">Integer</span> <span class=\"n\">value</span><span class=\"o\">)</span>\n<span class=\"n\">ResultOrError</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span>  <span class=\"nf\">f2</span><span class=\"o\">(</span><span class=\"n\">Integer</span> <span class=\"n\">value</span><span class=\"o\">)</span></code></pre></div><p data-pid=\"cmA2cf7S\">这是一张用来说明这一点的图片：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d9400da97ec1f0f9c94eaa14abcc1a46_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"47\" class=\"origin_image zh-lightbox-thumb\" width=\"657\" data-original=\"https://pic3.zhimg.com/v2-d9400da97ec1f0f9c94eaa14abcc1a46_r.jpg\" data-original-token=\"v2-d9400da97ec1f0f9c94eaa14abcc1a46\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"aPbQVpTL\">我们的 <code>bind</code> 函数还不能处理这种情况，因为两个函数的输出类型不同 （<code>ResultOrError&lt;Integer&gt;</code> 和 <code>ResultOrError&lt;String&gt;</code>）。我们必须使 <code>bind</code> 更加通用，以便不同值类型的函数能够被链接起来。<code>bind</code> 的类型签名必须改变，从：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">Monad</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span> <span class=\"nf\">bind</span><span class=\"o\">(</span><span class=\"n\">Monad</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span> <span class=\"n\">monad</span><span class=\"o\">,</span> <span class=\"n\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">Monad</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">function</span><span class=\"o\">)</span></code></pre></div><p data-pid=\"14Rn9H1l\">······到：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"n\">R1</span><span class=\"o\">,</span> <span class=\"n\">R2</span><span class=\"o\">&gt;</span> <span class=\"n\">Monad</span><span class=\"o\">&lt;</span><span class=\"n\">R2</span><span class=\"o\">&gt;</span> <span class=\"nf\">bind</span><span class=\"o\">(</span><span class=\"n\">Monad</span><span class=\"o\">&lt;</span><span class=\"n\">R1</span><span class=\"o\">&gt;</span> <span class=\"n\">monad</span><span class=\"o\">,</span> <span class=\"n\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">R1</span><span class=\"o\">,</span> <span class=\"n\">Monad</span><span class=\"o\">&lt;</span><span class=\"n\">R2</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">function</span><span class=\"o\">)</span></code></pre></div><p data-pid=\"mcbJY0P-\"><code>bind</code> 的实现也必须调整，这里是新的类：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ResultOrErrorMonad</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">R</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">SimpleError</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">ResultOrErrorMonad</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">error</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">ResultOrErrorMonad</span><span class=\"o\">(</span><span class=\"n\">SimpleError</span> <span class=\"n\">error</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">result</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">R</span> <span class=\"nf\">getResult</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">SimpleError</span> <span class=\"nf\">getError</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isResult</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">error</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isError</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"n\">R1</span><span class=\"o\">,</span> <span class=\"n\">R2</span><span class=\"o\">&gt;</span> <span class=\"n\">ResultOrErrorMonad</span><span class=\"o\">&lt;</span><span class=\"n\">R2</span><span class=\"o\">&gt;</span> <span class=\"nf\">bind</span><span class=\"o\">(</span><span class=\"n\">ResultOrErrorMonad</span><span class=\"o\">&lt;</span><span class=\"n\">R1</span><span class=\"o\">&gt;</span> <span class=\"n\">value</span><span class=\"o\">,</span> <span class=\"n\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">R1</span><span class=\"o\">,</span> <span class=\"n\">ResultOrErrorMonad</span><span class=\"o\">&lt;</span><span class=\"n\">R2</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">function</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">function</span><span class=\"o\">.</span><span class=\"na\">apply</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">result</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ResultOrErrorMonad</span><span class=\"o\">&lt;</span><span class=\"n\">R2</span><span class=\"o\">&gt;(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"na\">error</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;Result: &#34;</span> <span class=\"o\">+</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;Error: &#34;</span> <span class=\"o\">+</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"u1zRZW0O\">注意看类名，<code>ResultOrErrorMonad</code>。是的，这是一个 Monad。</p><blockquote data-pid=\"hrIgYP-K\"> 在现实中，我们不会为属于 Monad 的类型添加 &#34;Monad&#34; 后缀，之所以把这个类命名为 <code>ResultOrErrorMonad</code> 是为了给读者表明这个类是一个 Monad。</blockquote><p data-pid=\"YZKQqIeO\">我们怎么能确认这个类就是一个 Monad 呢？</p><p data-pid=\"oI4FbFLo\">虽然 Monad 这个词在数学中拥有非常精确的定义 （就像在数学中的所有东西一样），但是在编程语言的世界里，这个词还没有明确的定义。然而，维基百科上有一个<a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%258D%2595%25E5%25AD%2590_%28%25E5%2587%25BD%25E6%2595%25B0%25E5%25BC%258F%25E7%25BC%2596%25E7%25A8%258B%29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">常见的定义</a>。一个 Monad 由三部分组成：</p><blockquote data-pid=\"bewJOwCi\"> 译者著：下面的定义摘抄自维基百科，其中的单子指 Monad。</blockquote><ul><li data-pid=\"MZI9byKJ\"><b><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E7%25B1%25BB%25E5%259E%258B%25E6%259E%2584%25E9%2580%25A0%25E5%25AD%2590\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">类型构造器</a> (<i>Type Constructor</i>) <code>M</code>，构造一个单子类型 <code>M T</code>。</b></li><ul><li data-pid=\"Wloy65OM\">换句话说，Monad 中包含的值有一个类型参数，在我们的例子中，它是该类声明中的类型参数 <code>R</code>。<br/><code>class ResultOrErrorMonad&lt;R&gt;</code> </li></ul><li data-pid=\"dMzqR2wI\"><b><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E7%25B1%25BB%25E5%259E%258B%25E8%25BD%25AC%25E6%258D%25A2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">类型转换子</a> (Type Converter)，经常叫做 <code>unit</code> 或 <code>return</code>，将一个对象 <code>x</code> 嵌入到单子中。</b></li><ul><li data-pid=\"UwmjLEge\">在 Haskell 中，类型转换器的定义是：<code>return :: a -&gt; m a</code></li><li data-pid=\"h3lpZLHP\">在类 Java 这样的语言中，这意味着必须有一个构造函数，它接收一个 <code>R</code> 类型的值，并返回一个包含该值，类型参数为 <code>M&lt;R&gt;</code> 的 Monad。</li><li data-pid=\"Mz-YTDGh\">在我们的代码中，它是 <code>ResultOrErrorMonad</code> 类的构造函数。</li></ul><li data-pid=\"kA4haEAq\"><b><a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E7%25BB%2584%25E5%2590%2588%25E5%25AD%2590\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">组合子</a> (<i>Combinator</i>)，典型的叫做 <code>bind</code>（<a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E7%25BA%25A6%25E6%259D%259F%25E5%258F%2598%25E9%2587%258F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">约束变量</a>的那个 bind），并表示为<a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E4%25B8%25AD%25E7%25BC%2580%25E8%25A1%25A8%25E7%25A4%25BA%25E6%25B3%2595\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中缀算子</a></b> <b><code>&gt;&gt;=</code>，去包装一个单体变量，接着把它插入到一个单体函数/表达式之中，结果为一个新的单体值：</b><code>(mx &gt;&gt;= f) :: (M T, T -&gt; M U) -&gt; M U</code> </li><ul><li data-pid=\"IxvUnomg\">在 Haskell 中，<code>bind</code> 定义为 <code>(&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</code>。</li><li data-pid=\"ggRz7YWW\">在我们的代码中，它是 <code>bind</code> 函数：</li><li data-pid=\"A1vA_YW-\"><code>&lt;R1, R2&gt; ResultOrErrorMonad&lt;R2&gt; bind(ResultOrErrorMonad&lt;R1&gt; value, Function&lt;R1, ResultOrErrorMonad&lt;R2&gt;&gt; function)</code></li></ul></ul><p data-pid=\"BTLLFI9M\">维基百科上随后指出：“但要完全具备单子资格，这三部分还必须遵守一些定律：······”。</p><p data-pid=\"zCPP5bTj\">在 <a href=\"https://link.zhihu.com/?target=https%3A//hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad.html%23t%3AMonad\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Haskell</a> 中，三条定律定义如下：</p><ul><li data-pid=\"UlriVdSo\"><code>return a &gt;&gt;= k = k a</code><br/> </li><li data-pid=\"FH5cUZNO\"><code>m &gt;&gt;= return = m</code><br/> </li><li data-pid=\"nmXPGarS\"><code>m &gt;&gt;= (\\x -&gt; k x &gt;&gt;= h) = (m &gt;&gt;= k) &gt;&gt;= h</code> </li></ul><p data-pid=\"YhVHqJ_v\">讨论这些定律超出了本文的范围 （本篇文章仅是关于 Monad 的介绍），这些定律确保了 Monads 在任何情况都能良好运行。违反这些定律会导致微妙和痛苦的 Bug，<a href=\"https://link.zhihu.com/?target=https%3A//www.reddit.com/r/haskell/comments/16iakr/what_happens_when_a_monad_violates_monadic_laws/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>、<a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/12617664/a-simple-example-showing-that-io-doesnt-satisfy-the-monad-laws\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>、和<a href=\"https://link.zhihu.com/?target=https%3A//www.quora.com/What-would-be-the-practical-implications-if-an-implementation-of-Haskells-Monad-typeclass-didnt-satisfy-the-monadic-laws\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这里</a>都有解释。据我所知，目前还没有任何一个编译器能够强制执行 Monad 定律。因此保证这些定律是否正确的被应用成为了开发者的责任，我只想说上面的 <code>ResultOrErrorMonad</code> 满足了 Monad 定律。</p><h3>最大程度的提高复用性</h3><p data-pid=\"qlI2Z_7e\">除了给结果提供一个类型参数外，我们还可以为错误提供一个类型参数。这使得 Monad 更加可重用，因为现在你可以自由决定他们想要哪种类型的错误。举个例子，你可以看一下 F# 的 <code><a href=\"https://link.zhihu.com/?target=https%3A//learn.microsoft.com/en-us/dotnet/fsharp/language-reference/results\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Result</a></code> 类型。</p><p data-pid=\"Ifi-wVoK\">最后，我们通过让程序员定义两个值的含义来让 Monad 更加可重复使用。在我们的例子中，一个值代表结果，而另一个代表错误。但是我们可以更抽象一点，我们可以创建一个 Monad，简单地容纳两个可能出现的值中的其中一个 —— <code>value_1</code> 或 <code>value_2</code>。而每个值的类型都可以由一个类型参数自由定义，这个 Monad 确实被一些函数式编程语言所支持。在 Haskell 中，它被称为 <code>Either</code>。它的构造函数被这样定义：</p><div class=\"highlight\"><pre><code class=\"language-haskell\"><span class=\"kr\">data</span> <span class=\"kt\">Either</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"ow\">=</span> <span class=\"kt\">Left</span> <span class=\"n\">a</span> <span class=\"o\">|</span> <span class=\"kt\">Right</span> <span class=\"n\">b</span></code></pre></div><p data-pid=\"ZGlFq-h_\">以我们的 <code>ResultOrErrorMonad</code> 作为起点，在 Java 实现一个 <code>Either Monad</code> 是轻松的。</p><blockquote data-pid=\"2x__xxpt\"> 有些项目对可能执行失败的函数使用 <code>Either Monad</code>。在我看来，使用 <code>ResultOrError</code> 类型是一个更好的、不容易出错的选择（原因不在这里解释）。</blockquote><h3>面向对象化</h3><p data-pid=\"NAap11Fp\">现在我们知道了 Monad 在函数式编程语言的作用，让我们回到 OOP （<i>Object-Oriented Programming</i>，面向对象编程）的世界。我们能不能创建一个类似 OO-Monad 的东西？</p><p data-pid=\"gPaMbZBr\">如果我们看一下 <code>ResultOrErrorMonad</code> 类，我们可以看到这个类里的所有东西都十分标准。只有一个例外，函数 <code>bind</code> 是该类的一个静态成员。这意味着我们不能对 <code>bind</code> 使用对象方法的点语法来调用。目前调用 <code>bind</code> 的语法为 <code>bind(v, f)</code>。但如果 <code>bind</code> 如果是类的非静态成员，我们就可以写成 <code>v.bind(f)</code>。这将使语法在嵌套调用的情况下更具可读性。</p><p data-pid=\"LjGYKSuj\">幸运的是，使 <code>bind</code> 变为非静态成员是容易的。</p><p data-pid=\"Ez6IA4x3\">为了使 Monad 的功能更全面，我们也为错误值引入第二个类型参数。那么程序员就不需要使用 <code>SimpleError</code> 了，他们可以定义并使用自己的错误类。下面是面向对象风格的 <code>ResultOrError</code> 类：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ResultOrError</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">R</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">E</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"nf\">ResultOrError</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">error</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">&gt;</span> <span class=\"n\">ResultOrError</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">&gt;</span> <span class=\"nf\">createResult</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">result</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ResultOrError</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">&gt;(</span><span class=\"n\">result</span><span class=\"o\">,</span> <span class=\"kc\">null</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">&gt;</span> <span class=\"n\">ResultOrError</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">&gt;</span> <span class=\"nf\">createError</span><span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">error</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"n\">ResultOrError</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">&gt;(</span><span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"n\">error</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">R</span> <span class=\"nf\">getResult</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">E</span> <span class=\"nf\">getError</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">error</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isResult</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">error</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isError</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"o\">&lt;</span><span class=\"n\">R2</span><span class=\"o\">&gt;</span> <span class=\"n\">ResultOrError</span><span class=\"o\">&lt;</span><span class=\"n\">R2</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">&gt;</span> <span class=\"nf\">bind</span><span class=\"o\">(</span><span class=\"n\">Function</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">ResultOrError</span><span class=\"o\">&lt;</span><span class=\"n\">R2</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">function</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">function</span><span class=\"o\">.</span><span class=\"na\">apply</span><span class=\"o\">(</span><span class=\"n\">result</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">createError</span><span class=\"o\">(</span><span class=\"n\">error</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">toString</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;Result: &#34;</span> <span class=\"o\">+</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;Error: &#34;</span> <span class=\"o\">+</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"lUqm-GIE\">现在 <code>enthuse</code> 函数体中使用 <code>bind</code> 的代码变得更加可读了，下面是之前的代码：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">return</span> <span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"n\">bind</span><span class=\"o\">(</span><span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)),</span> <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">));</span></code></pre></div><p data-pid=\"J3rLXz2q\">我们可以避免嵌套写法，下面是现在的代码：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"k\">return</span> <span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">).</span><span class=\"na\">bind</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)).</span><span class=\"na\">bind</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">));</span></code></pre></div><p data-pid=\"yIP8bV1k\">所以 Monad 在面向对象语言的世界中有用么？是的，它们<b>可以有用</b>。</p><p data-pid=\"17nRfxbu\">需要强调一下 “可以” 这个词，因为这通常取决于我们想要实现什么。比方说，我们有一些很好的理由来 “不使用异常” 来处理错误，还记得我们在 <i>错误，但不要异常</i> 章节中不得不写的丑陋错误处理代码么？：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">enthuse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">ResultOrError</span> <span class=\"n\">trimmed</span> <span class=\"o\">=</span> <span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">);</span>\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">trimmed</span><span class=\"o\">.</span><span class=\"na\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"n\">ResultOrError</span> <span class=\"n\">upperCased</span> <span class=\"o\">=</span> <span class=\"n\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">trimmed</span><span class=\"o\">.</span><span class=\"na\">getResult</span><span class=\"o\">());</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">upperCased</span><span class=\"o\">.</span><span class=\"na\">isResult</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">upperCased</span><span class=\"o\">.</span><span class=\"na\">getResult</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">upperCased</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">trimmed</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"oWl5Jcg9\">使用 Monad 来干掉样板代码：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">static</span> <span class=\"n\">ResultOrError</span> <span class=\"nf\">enthuse</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">sentence</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">trim</span><span class=\"o\">(</span><span class=\"n\">sentence</span><span class=\"o\">).</span><span class=\"na\">bind</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">toUpperCase</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">)).</span><span class=\"na\">bind</span><span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">appendExclam</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span></code></pre></div><p data-pid=\"wkyAxdbc\">太棒了！</p><h3>摘要</h3><p data-pid=\"ViTDylmj\">理解 Monad 的关键是理解 <code>bind</code>（也叫 <code>chain</code>、<code>andThen</code> 等等）。函数 <code>bind</code> 是用来复合两个 Monadic 函数的。一个 Monadic 函数是一个接收 <code>T</code> 类型的值并返回一个包含该值对象的函数，Monadic 函数不能直接复合，因为调用的第一个函数类型输出类型与第二个函数的输入类型不兼容。<code>bind</code> 解决了这个问题。</p><p data-pid=\"y2qehRKH\">函数 <code>bind</code> 本身已经很有用了，但它仅是 Monad 的一部分。</p><p data-pid=\"cMbfE6HL\">像 Java 的世界里，一个 Monad 是具有以下特征的类 （类型）<code>M</code>。</p><ul><li data-pid=\"bXRRHY81\"> 一个类型参数 <code>T</code>，它定义了存储在 Monad 中的值类型 （例如：<code>M&lt;T&gt;</code>）。<br/> </li><li data-pid=\"D5f0XEuV\"> 一个构造函数，接收一个 <code>T</code> 类型的值，并返回一个 Monad 且包含了 <code>M&lt;T&gt;</code> 值。<br/> </li><ul><li data-pid=\"O1r6mxqi\"> 在类似于 Java 的语言中：<br/> <code>M&lt;T&gt; create(T value)</code><br/></li></ul></ul><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f93e9d6499432d5cbe96c2afca0d1483_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"257\" data-rawheight=\"48\" class=\"content_image\" width=\"257\" data-original-token=\"v2-1dcbddc48aab024e978f76410f8b99bb\"/></figure><ul><ul><li data-pid=\"aeTKzs93\">在 Haskell 中：<br/><code>return :: a -&gt; m a</code><br/> </li></ul><li data-pid=\"IvWluaAS\"> 用来复合两个 Monadic 函数的 <code>bind</code> 函数：<br/> </li><ul><li data-pid=\"vgr2yP8J\"> 在类似于 Java 的语言中：<br/> <code>M&lt;T2&gt; bind(M&lt;T1&gt; monad, Function&lt;T1, M&lt;T2&gt;&gt; function)</code><br/> </li></ul></ul><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e9920ce05d16e9e12b742c4a7373f684_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"322\" data-rawheight=\"92\" class=\"content_image\" width=\"322\" data-original-token=\"v2-1776d44081ef289706085b445a89d3d6\"/></figure><ul><ul><li data-pid=\"1ElgNNjt\">在 Haskell 中：<br/><code>(&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</code> </li></ul></ul><p data-pid=\"xZ56SQiM\">一个 Monad 必须遵守三条 Monad 定律，这些定律确保 Monad 在所有情况下都能良好运行。</p><p data-pid=\"xGiXvKuX\">Monad 主要用于函数式编程语言，因为这些语言依赖函数复合。但是它们也可以在其他范式的编程语言发挥作用，例如支持范型和高阶函数的面向对象编程语言。</p><h3>结语</h3><p data-pid=\"zn0IH9ly\">正如标题所提到的，这篇文章仅是对 Monad 的介绍。它没有涵盖 Monad 的所有范围，没有展示 Monad 其他有用的例子（例：<code>Maybe Monad</code>、<code>IO Momad</code>、<code>State Monad</code> 等）。而且它完全忽略了范畴论 (<i>Category Theory</i>)。即 Monad 的数学背景，对于那些想了解更多的人来说，互联网上有大量资料可以去查阅学习它们。</p><p data-pid=\"rGcPhe7P\">希望这篇文章帮助大家掌握 Monad 的要领，看到它们的魅力，并了解它们如何改进代码和简化你的生活。</p><p data-pid=\"SQ_QWHAI\"><b>&#34;HAPPY MONADING!&#34;</b></p>",
            "voteup_count": 38,
            "comment_count": 2
        },
        "created": "2022-11-14T00:15:39+08:00"
    },
    {
        "content": {
            "id": 2954195015,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/38036594/answer/2954195015",
            "created_time": 1679810191,
            "updated_time": 1679812139,
            "question": {
                "type": "question",
                "id": 38036594,
                "title": "如何用通俗易懂的语言解释 BASE64?",
                "question_type": "normal",
                "created": 1448873130,
                "updated_time": 1679897447,
                "url": "https://www.zhihu.com/question/38036594",
                "is_deleted": false
            },
            "author": {
                "id": "023a499a487511afd7443ea48ed45609",
                "url_token": "peng-an-dr-quest",
                "name": "蓬岸 Dr.Quest",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-2e223688c09af6bf6bcd97be1ba29b7c_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-2e223688c09af6bf6bcd97be1ba29b7c.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/023a499a487511afd7443ea48ed45609",
                "user_type": "people",
                "headline": "电脑博物馆 www.compumuseum.com 站长",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic3.zhimg.com/v2-5445f8df8b43508e51a483337a386bac.png?source=6a64a727",
                        "night_mode_url": "https://pica.zhimg.com/v2-5445f8df8b43508e51a483337a386bac.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "https://picx.zhimg.com/v2-520e03c0a65da3f378e8bd25acf40efd_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 420,
            "comment_count": 16,
            "thanks_count": 70,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"6X3A3Izz\"><b>要真正理解它们，就必须回到技术出现的历史背景下，去了解它们希望解决的问题。</b></p><p data-pid=\"8l8O0_MY\">我们的计算机教育出现了很大的问题，往往只背标准，不学历史，到头来只成为一个个“标准”的复读机，却根本不知道标准当时想解决的问题是什么，以及制定标准的技术条件是什么。</p><p data-pid=\"BO2NgJ7C\"><b>base64出现的目的，是为了让二进制流安全地通过为7-bit ASCII设计的电信网络</b></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-520e03c0a65da3f378e8bd25acf40efd_720w.jpg?source=2c26e567\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"683\" data-original-token=\"v2-520e03c0a65da3f378e8bd25acf40efd\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-4ad05cfb5e93f126ecbc3f0973f5c0dc_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://picx.zhimg.com/v2-520e03c0a65da3f378e8bd25acf40efd_r.jpg?source=2c26e567\"/><figcaption>ASCII码是为电传机设计的</figcaption></figure><p data-pid=\"JNxd1eE-\">ASCII码是1960年代为电传打字网络设计的编码，使用7-bit表示一个字符，其中包含了大量用于控制通信设备的代码，比如EM（1001001）代表着end-of-media，媒体结束，代表着打孔纸带打完了。EOT（0100000）代表着end-of-transmission传输结束，此时通信设备进入待机或者切断线路。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-459c0541f2f9f0c40c721088b0b785ed_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"546\" data-original-token=\"v2-459c0541f2f9f0c40c721088b0b785ed\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-c80207ee3bbaee1c8825ef13288fca08_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-459c0541f2f9f0c40c721088b0b785ed_r.jpg?source=2c26e567\"/></figure><p data-pid=\"7liqMkYv\">我们不难想象，当我们通过上述电信网络传输二进制文件时，很可能遇到混乱，因为1001001、0100000都是很常见的二进制序列。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-06c76e8f1b4a080d6253c51b3862f1cf_720w.jpg?source=2c26e567\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-original-token=\"v2-06c76e8f1b4a080d6253c51b3862f1cf\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-c0aebf2a4481e2a7584fb58b51483798_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-06c76e8f1b4a080d6253c51b3862f1cf_r.jpg?source=2c26e567\"/><figcaption>IBM 3278终端，典型的EBCDIC设备</figcaption></figure><p data-pid=\"8gekTbgX\">特别是当我们希望在7-bit ASCII电信网络上传输8-bit字节流，比如IBM大型机和BITNET所使用的8-bit EBCDIC编码，由于电信网络依次传输每个二进制位，因此可能会由于无法对齐而带来更多的故障</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-480aeb0aa7f841fdedb47dd13bcead0a_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1059\" data-rawheight=\"889\" data-original-token=\"v2-480aeb0aa7f841fdedb47dd13bcead0a\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-3a7f6de6fb6c6ca9b7337ec32041b233_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1059\" data-original=\"https://pic1.zhimg.com/v2-480aeb0aa7f841fdedb47dd13bcead0a_r.jpg?source=2c26e567\"/></figure><p data-pid=\"mvjxXX9f\">这时如果我们希望将EBCDIC的“hello”的二进制编码10001000 10000101 10010011 10010011 10010110</p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>字符</th><th>EBCDIC二进制</th></tr><tr><td>h</td><td>10001000</td></tr><tr><td>e</td><td>10000101</td></tr><tr><td>l</td><td>10010011</td></tr><tr><td>l</td><td>10010011</td></tr><tr><td>o</td><td>10010110</td></tr></tbody></table><p data-pid=\"PiYYQTI7\">通过7-bit ASCII传输，就会被通信设备解释成1000100 0100001 0110010 0111001 0011100 10110</p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>二进制</th><th>ASCII 7-bit含义</th></tr><tr><td>1000100</td><td>H</td></tr><tr><td>0100001</td><td>DC4，设备控制4，通常为暂停或关闭</td></tr><tr><td>0110010</td><td>&amp;</td></tr><tr><td>0111001</td><td>ETB，结束传输块</td></tr><tr><td>0011100</td><td>C</td></tr><tr><td>10110</td><td>未知（不完整的字符）</td></tr></tbody></table><p data-pid=\"ua2yVtXx\">因此这段二进制中有两个与“中止”或“结束”有关的控制字符，所以很可能传输就提前中断了。</p><p data-pid=\"-sN-G-UG\"><b>而base64的作用，是让8-bit字节流以6-bit一组，编码为字符串安全地通过7-bit ASCII设备。</b></p><p data-pid=\"QerZIlnC\">base64使用了大写字母A-Z，小写字母a-z，数字0-9，符号“+”和“/”这64个字母表示6-bit的数据。</p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>二进制范围</th><th>十进制</th><th>字符</th></tr><tr><td>000000~011001</td><td>0~25</td><td>A~Z</td></tr><tr><td>011010~110011</td><td>26~51</td><td>a~z</td></tr><tr><td>110100~111101</td><td>52~61</td><td>0~9</td></tr><tr><td>111110, 111111</td><td>62~63</td><td>+  /</td></tr></tbody></table><p data-pid=\"iq-hc18g\">然后上述EBDIC编码的“hello”就会被以6个bit一组被分成7组</p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>6-bit二进制串</th><th>Base64字符串</th></tr><tr><td>100010</td><td>i</td></tr><tr><td>001000</td><td>l</td></tr><tr><td>010110</td><td>W</td></tr><tr><td>010011</td><td>T</td></tr><tr><td>100100</td><td>k</td></tr><tr><td>111001</td><td>5</td></tr><tr><td>0110（以0填充最后两位为011000）</td><td>Y</td></tr></tbody></table><p data-pid=\"oY2UptiI\">因为<b>编码后的字符串不包含任何通信控制指令，它可以在7-bit ASCII电信网络上传输了</b>，但我们会发现为了让最后四个二进制数0110能够编码，我们填了两个0，那么如何让接收者知道我们想传输的数据里实际不包含这两个0呢？</p><p data-pid=\"-XJaPe4y\">当年base64的设计者们也遇到了同样的问题，他们的解决方法是用base64字符串中每个字符的6-bit和8-bit字节流的最小公倍数<b>24-bit作为一个编码块，这样每个编码块就包含4个字符或3个字节，而当字节数无法编码足够的字符时，就用等号“=”填充到四个字符</b>。</p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>EBCDIC数据</th><th>24-bit编码块</th><th>base64</th></tr><tr><td>hel</td><td>100010001000010110010011</td><td>ilWT</td></tr><tr><td>lo</td><td>1001001110010110(00)--------------</td><td>k5Y=</td></tr></tbody></table><p data-pid=\"RZyW5bq3\">有一个等号说明该编码块中只能解码出两个8-bit字节（18-bit中的16-bit），多出的零则不解析，而有两个等号则说明该编码块中只能解码出一个8-bit字节（12-bit中的8-bit），比如我们要把8-bit EBCDIC编码的“code”，二进制10000011 10010110 10000100  10000101编码到base64，结果就是。</p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>EBCDIC数据</th><th>24-bit编码块</th><th>base64</th></tr><tr><td>cod</td><td>100000111001011010000100</td><td>g5aE</td></tr><tr><td>e</td><td>10000101(0000)------------</td><td>hQ==</td></tr></tbody></table><p data-pid=\"sTmYXXFV\">base64编码最重要的应用领域是电子邮件，打通了不同网络间电子邮件的互通问题。让使用7-bit ASCII的通信网络及其它可以互操作的计算机和通信系统，例如使用EBCDIC的BITNET间可以互换二进制文件。</p><p data-pid=\"4puWgPRp\">可以电子邮件互通的Internet、UUCP、FidoNet（包括中国惠多网），BITNET、中国公众多媒体通信网网（即169网）和Compuserve、美国在线、国内的瀛海威时空等商业在线服务运营商构成了庞大的Email space，成为后来Internet整合诸多计算机网络的基础。</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-73917a798c512fb303ffafeeabb225a3_720w.jpg?source=2c26e567\" data-size=\"normal\" data-rawwidth=\"877\" data-rawheight=\"679\" data-original-token=\"v2-73917a798c512fb303ffafeeabb225a3\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-d5a8517d8e20412de1b45a8cd177ff2a_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"877\" data-original=\"https://picx.zhimg.com/v2-73917a798c512fb303ffafeeabb225a3_r.jpg?source=2c26e567\"/><figcaption>1995年的网络世界，今天我们所提到的Internet只是诸多数字空间之一</figcaption></figure><p><br/> </p>",
            "excerpt": "要真正理解它们，就必须回到技术出现的历史背景下，去了解它们希望解决的问题。我们的计算机教育出现了很大的问题，往往只背标准，不学历史，到头来只成为一个个“标准”的复读机，却根本不知道标准当时想解决的问题是什么，以及制定标准的技术条件是什么。 base64出现的目的，是为了让二进制流安全地通过为7-bit ASCII设计的电信网络 [图片] ASCII码是1960年代为电传打字网络设计的编码，使用7-bit表示一个字符，其中包含了大量用于控制…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 5,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-520e03c0a65da3f378e8bd25acf40efd_720w.jpg?source=7e7ef6e2",
                        "width": 1024,
                        "height": 683,
                        "token": "v2-520e03c0a65da3f378e8bd25acf40efd",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-459c0541f2f9f0c40c721088b0b785ed_720w.jpg?source=7e7ef6e2",
                        "width": 800,
                        "height": 546,
                        "token": "v2-459c0541f2f9f0c40c721088b0b785ed",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-06c76e8f1b4a080d6253c51b3862f1cf_720w.jpg?source=7e7ef6e2",
                        "width": 1280,
                        "height": 720,
                        "token": "v2-06c76e8f1b4a080d6253c51b3862f1cf",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxjH4NWACyCk/8QDkgIlCgk1NjcyMTA4NzkSCjI5NTQxOTUwMTUYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-03-26T13:56:31+08:00"
    },
    {
        "content": {
            "id": 613266541,
            "title": "TypeScript 突破类型体操天花板，如何绕过编译器三大限制",
            "type": "article",
            "excerpt_title": "自从 Typescript 加入了模板字符串类型，类型体操界就花样百出， 某些聚聚把这项娱乐活动推到了天花板水平 ，更有甚者企图用类型体操把 TypeScript 再实现一遍 。不过体操界有三座大山导致大家不能愉快的体操，它们分别是：“类型尾递归次数（tailCount）”，“类型实例化深度（instantiationDepth）”，“类型实例化数量（instantiationCount）”。编译器对这三个数值做了最大数量限制，会在超出时给出错误 TS2589 的大声指责，防…",
            "url": "https://zhuanlan.zhihu.com/p/613266541",
            "image_url": "https://pica.zhimg.com/v2-c42462bcb2d1f9b09686220480dc2213_r.jpg?source=172ae18b",
            "created": 1678554748,
            "updated": 1678598082,
            "author": {
                "id": "a9cda735b6868ee54dccc666c72b52a2",
                "url_token": "fightingcat",
                "name": "Square",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-fda32568956e6965192a9ac63e33842c_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-fda32568956e6965192a9ac63e33842c.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/a9cda735b6868ee54dccc666c72b52a2",
                "user_type": "people",
                "headline": "▷ı|ΙıΙı||Ιı 5″",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1442594809
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"mjnQltRg\">        自从 Typescript 加入了模板字符串类型，类型体操界就花样百出，<a href=\"https://zhuanlan.zhihu.com/p/427309936\" class=\"internal\">某些聚聚把这项娱乐活动推到了天花板水平</a>，更有甚者企图<a href=\"https://link.zhihu.com/?target=https%3A//github.com/ronami/HypeScript\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">用类型体操把 TypeScript 再实现一遍</a>。不过体操界有三座大山导致大家不能愉快的体操，它们分别是：“类型尾递归次数（<code>tailCount</code>）”，“类型实例化深度（<code>instantiationDepth</code>）”，“类型实例化数量（<code>instantiationCount</code>）”。编译器对这三个数值做了最大数量限制，会在超出时给出错误 <code>TS2589</code> 的大声指责，防止聚聚们真的捅破天花板。但天花板之上其实是有吊顶的，今天就让我们来捅破天花板，进入类型体操吊顶。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-de08b3317fe442a3502bc4b2e33c0449_b.jpg\" data-size=\"normal\" data-rawwidth=\"460\" data-rawheight=\"262\" class=\"origin_image zh-lightbox-thumb\" width=\"460\" data-original=\"https://pic2.zhimg.com/v2-de08b3317fe442a3502bc4b2e33c0449_r.jpg\" data-original-token=\"v2-de08b3317fe442a3502bc4b2e33c0449\"/><figcaption>Ceiling cat is watching you.</figcaption></figure><p data-pid=\"1bAVovYX\">       先让我们回到三年前，我在<a href=\"https://zhuanlan.zhihu.com/p/86008532\" class=\"internal\">一篇专栏</a>中写了如何实现一个递归向下式的分析器，那时还没有模板字符串类型，一些情况也和现在不太相同，使用递归向下式分析再尝试解释执行，很容易就超出编译器的限制，当时就萌生了改为自底向上式分析的想法，更容易用一些技巧绕过限制。后来随着 TypeScript 的更新，一些特性的加入使体操的可能性大大增加了，才终于尝试实现了<a href=\"https://link.zhihu.com/?target=https%3A//github.com/fightingcat/sits\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一个 LALR(1) 文法的体操 parser 生成器</a>，用它生成了一个 JavaScript 语法子集的 parser，在分析过程中直接编译出特别为了方便体操实现而制定的“字节码”（剩下一些体力活还没写完，拖延症中……）。最终我希望实现真正可以执行足够复杂代码的<span class=\"nolink\">体操脚本语言</span>，为了实现这个目标就先要解决上述三个限制。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7fac8439827a5a3e618f7faba7c5dfb8_b.jpg\" data-size=\"normal\" data-rawwidth=\"833\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb\" width=\"833\" data-original=\"https://pic1.zhimg.com/v2-7fac8439827a5a3e618f7faba7c5dfb8_r.jpg\" data-original-token=\"v2-7fac8439827a5a3e618f7faba7c5dfb8\"/><figcaption>如今的体操可以编译很长的代码到字节码</figcaption></figure><h3>山重水复疑无路，柳暗花明又一村。</h3><p data-pid=\"J20Vlhl9\">       先来看第一个限制，类型尾递归次数（tailCount）。体操经常会用到递归类型，在以前的版本还没有支持递归类型的时候，往往通过对象类型配合条件类型来实现递归，自从有了递归类型和类型实例化的尾递归，这类体操动作就优雅了许多，但同时也多了这个尾递归次数限制。在 TypeScript 源码中搜索 <code>tailCount</code> 可以看到，这个实现是和计算条件类型相关的，我们把代码精简一下来看看：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// 在 instantiateType 中被间接调用\n</span><span class=\"c1\"></span><span class=\"kd\">function</span> <span class=\"nx\">getConditionalType</span><span class=\"p\">(</span><span class=\"nx\">root</span>: <span class=\"kt\">ConditionalRoot</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">tailCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">tailCount</span> <span class=\"o\">===</span> <span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"mi\">2589</span><span class=\"p\">);</span>\n            <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">errorType</span><span class=\"p\">;</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// false 分支\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isTypeAssignableTo</span><span class=\"p\">(</span><span class=\"nx\">checkType</span><span class=\"p\">,</span> <span class=\"nx\">extendsType</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"kr\">const</span> <span class=\"nx\">falseType</span> <span class=\"o\">=</span> <span class=\"nx\">getTypeFromTypeNode</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">falseType</span><span class=\"p\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">canTailRecurse</span><span class=\"p\">(</span><span class=\"nx\">falseType</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// root = falseType;\n</span><span class=\"c1\"></span>                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 尾递归中止，调用新的过程来实例化类型\n</span><span class=\"c1\"></span>            <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">instantiateType</span><span class=\"p\">(</span><span class=\"nx\">falseType</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n        <span class=\"c1\">// true 分支\n</span><span class=\"c1\"></span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isTypeAssignableTo</span><span class=\"p\">(</span><span class=\"nx\">checkType</span><span class=\"p\">,</span> <span class=\"nx\">extendsType</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"kr\">const</span> <span class=\"nx\">trueType</span> <span class=\"o\">=</span> <span class=\"nx\">getTypeFromTypeNode</span><span class=\"p\">(</span><span class=\"nx\">root</span><span class=\"p\">.</span><span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">trueType</span><span class=\"p\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">canTailRecurse</span><span class=\"p\">(</span><span class=\"nx\">trueType</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"c1\">// root = trueType;\n</span><span class=\"c1\"></span>                <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"c1\">// 尾递归中止，调用新的过程来实例化类型\n</span><span class=\"c1\"></span>            <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">instantiateType</span><span class=\"p\">(</span><span class=\"nx\">trueType</span><span class=\"p\">);</span>\n            <span class=\"k\">break</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">function</span> <span class=\"nx\">canTailRecurse</span><span class=\"p\">(</span><span class=\"nx\">newType</span>: <span class=\"kt\">Type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">newType</span><span class=\"p\">.</span><span class=\"nx\">flags</span> <span class=\"o\">&amp;</span> <span class=\"nx\">TypeFlags</span><span class=\"p\">.</span><span class=\"nx\">Conditional</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kr\">const</span> <span class=\"nx\">newRoot</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">newType</span> <span class=\"kr\">as</span> <span class=\"nx\">ConditionalType</span><span class=\"p\">).</span><span class=\"nx\">root</span><span class=\"p\">;</span>\n            <span class=\"kr\">const</span> <span class=\"nx\">newCheckType</span> <span class=\"o\">=</span> <span class=\"nx\">newRoot</span><span class=\"p\">.</span><span class=\"nx\">isDistributive</span>\n                <span class=\"o\">?</span> <span class=\"nx\">newRoot.checkType</span>\n                : <span class=\"kt\">undefined</span><span class=\"p\">;</span>\n\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"o\">!</span><span class=\"nx\">newCheckType</span> <span class=\"o\">||</span>\n                <span class=\"o\">!</span><span class=\"p\">(</span><span class=\"nx\">newCheckType</span><span class=\"p\">.</span><span class=\"nx\">flags</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"nx\">TypeFlags</span><span class=\"p\">.</span><span class=\"nx\">Union</span> <span class=\"o\">|</span> <span class=\"nx\">TypeFlags</span><span class=\"p\">.</span><span class=\"nx\">Never</span><span class=\"p\">))</span>\n            <span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nx\">root</span> <span class=\"o\">=</span> <span class=\"nx\">newRoot</span><span class=\"p\">;</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">newRoot</span><span class=\"p\">.</span><span class=\"nx\">aliasSymbol</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"nx\">tailCount</span><span class=\"o\">++</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"EasvWPFo\">可以看到，只要条件类型命中的分支又是一个条件类型，并且新的条件类型既不是<a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/zh/docs/handbook/2/conditional-types.html%23%25E5%2588%2586%25E9%2585%258D%25E6%259D%25A1%25E4%25BB%25B6%25E7%25B1%25BB%25E5%259E%258B\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">分配（distributive）条件类型</a>，也不是<a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/zh/docs/handbook/2/everyday-types.html%23union-types\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">联合（union）类型</a>或 <code>never</code>，就将新的条件类型代入下轮循环计算。唯一的问题是，会在循环达到 1000 次时触发 TS2589 错误：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">ZeroFill</span><span class=\"o\">&lt;</span>\n    <span class=\"nx\">Output</span> <span class=\"kr\">extends</span> <span class=\"mi\">0</span><span class=\"p\">[],</span>\n    <span class=\"nx\">Count</span> <span class=\"kr\">extends</span> <span class=\"kt\">number</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Output</span><span class=\"p\">[</span><span class=\"s2\">&#34;length&#34;</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"nx\">Count</span> <span class=\"o\">?</span> <span class=\"nx\">Output</span> : <span class=\"kt\">ZeroFill</span><span class=\"o\">&lt;</span><span class=\"p\">[...</span><span class=\"nx\">Output</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nx\">Count</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Sized999</span> <span class=\"o\">=</span> <span class=\"nx\">ZeroFill</span><span class=\"o\">&lt;</span><span class=\"p\">[],</span> <span class=\"mi\">999</span><span class=\"o\">&gt;</span><span class=\"p\">;</span> <span class=\"c1\">// Okay.\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Sized1K</span> <span class=\"o\">=</span> <span class=\"nx\">ZeroFill</span><span class=\"o\">&lt;</span><span class=\"p\">[],</span> <span class=\"mi\">1000</span><span class=\"o\">&gt;</span><span class=\"p\">;</span> <span class=\"c1\">// Oops, TS2589.\n</span></code></pre></div><p data-pid=\"K9hVc9fx\">为了避免触发 1000 次递归的限制，我们可以在一定次数（用一个额外参数计数）的递归后故意打断尾递归，只要返回一个不满足上述条件的类型，而且不影响我们返回的类型的结果，例如返回一个<a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/2/objects.html%23intersection-types\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">交叉（intersection）类型</a>：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// 硬编码一个数字数组（代码略），数组索引对应加 1 后的值。\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Incr</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">...,</span> <span class=\"mi\">254</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">];</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">ZeroFill</span><span class=\"o\">&lt;</span>\n    <span class=\"nx\">Output</span> <span class=\"kr\">extends</span> <span class=\"mi\">0</span><span class=\"p\">[],</span>\n    <span class=\"nx\">Count</span> <span class=\"kr\">extends</span> <span class=\"kt\">number</span><span class=\"p\">,</span>\n    <span class=\"nx\">Iterations</span> <span class=\"kr\">extends</span> <span class=\"nx\">Incr</span><span class=\"p\">[</span><span class=\"kt\">number</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Iterations</span> <span class=\"kr\">extends</span> <span class=\"mi\">255</span>\n    <span class=\"o\">?</span> <span class=\"c1\">// 将递归类型变为交叉类型，打断类型尾递归，并且重置计数\n</span><span class=\"c1\"></span>      <span class=\"nx\">ZeroFill</span><span class=\"p\">&lt;</span><span class=\"nt\">Output</span><span class=\"err\">,</span> <span class=\"na\">Count</span><span class=\"err\">,</span> <span class=\"na\">0</span><span class=\"p\">&gt;</span> <span class=\"o\">&amp;</span> <span class=\"p\">{}</span>\n    <span class=\"o\">:</span> <span class=\"c1\">// 递归终止条件\n</span><span class=\"c1\"></span>    <span class=\"nx\">Output</span><span class=\"p\">[</span><span class=\"s2\">&#34;length&#34;</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"nx\">Count</span>\n    <span class=\"o\">?</span> <span class=\"c1\">// 最终结果\n</span><span class=\"c1\"></span>      <span class=\"nx\">Output</span>\n    <span class=\"o\">:</span> <span class=\"c1\">// 每次递归将计数加 1\n</span><span class=\"c1\"></span>      <span class=\"nx\">ZeroFill</span><span class=\"o\">&lt;</span><span class=\"p\">[...</span><span class=\"nx\">Output</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nx\">Count</span><span class=\"p\">,</span> <span class=\"nx\">Incr</span><span class=\"p\">[</span><span class=\"nx\">Iterations</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Sized3K</span> <span class=\"o\">=</span> <span class=\"nx\">ZeroFill</span><span class=\"o\">&lt;</span><span class=\"p\">[],</span> <span class=\"mi\">3000</span><span class=\"o\">&gt;</span><span class=\"p\">;</span> <span class=\"c1\">// Okay.\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Sized4K</span> <span class=\"o\">=</span> <span class=\"nx\">ZeroFill</span><span class=\"o\">&lt;</span><span class=\"p\">[],</span> <span class=\"mi\">4000</span><span class=\"o\">&gt;</span><span class=\"p\">;</span> <span class=\"c1\">// Okay (but?).\n</span></code></pre></div><h3>欲穷千里目，更上一层楼。</h3><p data-pid=\"7DxrwOuR\">现在上面的类型已经突破了 1000 次递归的限制，不过尝试注释掉 <code>Sized3K</code> 的话就会发现 <code>Sized4K</code> 会触发 TS2589。这就涉及到了第二个限制，类型实例化深度（instantiationDepth）。之所以注释掉会有影响，是因为 TypeScript 会缓存一切实例化的类型，这个暂且不说。依旧是在源码中搜索 <code>instantiationDepth</code>可以看到，它的实现是和所有带类型映射的类型实例化相关的（映射有几种，例如类型使用了泛型参数就会有类型映射，用来将参数映射为实际类型），相关代码简化如下：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kd\">function</span> <span class=\"nx\">instantiateType</span><span class=\"p\">(</span><span class=\"kr\">type</span><span class=\"o\">?:</span> <span class=\"nx\">Type</span><span class=\"p\">,</span> <span class=\"nx\">mapper?</span>: <span class=\"kt\">TypeMapper</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">Type</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kr\">type</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">mapper</span> <span class=\"o\">?</span> <span class=\"nx\">instantiateTypeWithAlias</span><span class=\"p\">(</span><span class=\"kr\">type</span><span class=\"p\">,</span> <span class=\"nx\">mapper</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"kr\">type</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">instantiateTypeWithAlias</span><span class=\"p\">(</span>\n    <span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"nx\">Type</span><span class=\"p\">,</span>\n    <span class=\"nx\">mapper</span>: <span class=\"kt\">TypeMapper</span><span class=\"p\">,</span>\n    <span class=\"nx\">aliasSymbol?</span>: <span class=\"kt\">Symbol</span><span class=\"p\">,</span>\n    <span class=\"nx\">aliasTypeArguments?</span>: <span class=\"kt\">readonly</span> <span class=\"nx\">Type</span><span class=\"p\">[]</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">instantiationDepth</span> <span class=\"o\">===</span> <span class=\"mi\">100</span> <span class=\"o\">||</span> <span class=\"nx\">instantiationCount</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">5000000</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"mi\">2589</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span> <span class=\"nx\">errorType</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">totalInstantiationCount</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"nx\">instantiationCount</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"nx\">instantiationDepth</span><span class=\"o\">++</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">instantiateTypeWorker</span><span class=\"p\">(</span>\n        <span class=\"kr\">type</span><span class=\"p\">,</span>\n        <span class=\"nx\">mapper</span><span class=\"p\">,</span>\n        <span class=\"nx\">aliasSymbol</span><span class=\"p\">,</span>\n        <span class=\"nx\">aliasTypeArguments</span>\n    <span class=\"p\">);</span>\n    <span class=\"nx\">instantiationDepth</span><span class=\"o\">--</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"6eX2Pkl0\">我们同时还看到了开头提到的 <code>instantiationCount</code>，我们暂时把注意力放到 <code>instantiationDepth</code> 上。可以看到每次实例化类型别名前后，都会对实例化深度递增和递减，中间过程中任何一次调用 <code>instantiateType</code> 进而间接调用上面这个类型，都会使深度计数继续增加。要避免达到最大深度，一是尽量利用尾递归，二是如果用了前面打断尾递归的技巧，那么在递归过程中尽量减少对中间类型的依赖。用一段代码举例（为了减少干扰我们简化到只有两个泛型参数，只保留递归逻辑本身，并用交叉类型阻止尾递归实例化）：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// 模拟一个不断计算值，并根据结果设置完成状态的类型。\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">BadWay</span><span class=\"p\">&lt;</span><span class=\"nt\">State</span><span class=\"err\">,</span> <span class=\"na\">Value</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">State</span> <span class=\"kr\">extends</span> <span class=\"sb\">`finish`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">Value</span>\n    <span class=\"o\">:</span> <span class=\"c1\">// 用条件类型和 infer 类型保存新结果\n</span><span class=\"c1\"></span>    <span class=\"nx\">Calculate</span><span class=\"p\">&lt;</span><span class=\"nt\">Value</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"k\">infer</span> <span class=\"nx\">NewValue</span>\n    <span class=\"o\">?</span> <span class=\"c1\">// 用条件类型和 infer 类型保存新状态\n</span><span class=\"c1\"></span>      <span class=\"nx\">CheckValue</span><span class=\"p\">&lt;</span><span class=\"nt\">NewValue</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"k\">infer</span> <span class=\"nx\">NewState</span>\n        <span class=\"o\">?</span> <span class=\"c1\">// 相比直接递归，这里增加了两层类型实例化深度\n</span><span class=\"c1\"></span>          <span class=\"nx\">BadWay</span><span class=\"p\">&lt;</span><span class=\"nt\">NewState</span><span class=\"err\">,</span> <span class=\"na\">NewValue</span><span class=\"p\">&gt;</span>\n        <span class=\"o\">:</span> <span class=\"kt\">never</span>\n    <span class=\"o\">:</span> <span class=\"kt\">never</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 事实上重复“调用”类型别名并没有损失，TS 总会缓存一切类型实例。\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">GoodWay</span><span class=\"p\">&lt;</span><span class=\"nt\">State</span><span class=\"err\">,</span> <span class=\"na\">Value</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">State</span> <span class=\"kr\">extends</span> <span class=\"sb\">`finish`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">Value</span>\n    <span class=\"o\">:</span> <span class=\"c1\">// 直接递归尽量减少了实例化深度\n</span><span class=\"c1\"></span>      <span class=\"nx\">GoodWay</span><span class=\"o\">&lt;</span>\n          <span class=\"c1\">// 中间结果在传参时实例化，可以在递归前完成实例化，释放增加的深度。\n</span><span class=\"c1\"></span>          <span class=\"nx\">CheckValue</span><span class=\"p\">&lt;</span><span class=\"nt\">Calculate</span><span class=\"err\">&lt;</span><span class=\"na\">Value</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n          <span class=\"c1\">// 重复调用的别名由于缓存机制只会真正实例化一次，不必担心各种限制和开销。\n</span><span class=\"c1\"></span>          <span class=\"nx\">Calculate</span><span class=\"p\">&lt;</span><span class=\"nt\">Value</span><span class=\"p\">&gt;</span>\n      <span class=\"o\">&gt;</span> <span class=\"o\">&amp;</span> <span class=\"p\">{};</span>\n</code></pre></div><p data-pid=\"Yj0zIQ-j\">上面的例子中，<code>BadWay</code> 比 <code>GoodWay</code> 每次递归增加的深度要多两层，会更快达到递归深度上限。面对实例化层数限制，基本上能做的就是尽早递归，将各种中间类型的计算放到参数中，让每一次迭代的类型尽快完成实例化，释放增加的深度。当然还有一种提前释放深度计数的方法，就是手动把迭代过程拆分成多个，例如前面的例子：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Sized3K</span> <span class=\"o\">=</span> <span class=\"nx\">ZeroFill</span><span class=\"o\">&lt;</span><span class=\"p\">[],</span> <span class=\"mi\">3000</span><span class=\"o\">&gt;</span><span class=\"p\">;</span> <span class=\"c1\">// Okay.\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Sized4K</span> <span class=\"o\">=</span> <span class=\"nx\">ZeroFill</span><span class=\"p\">&lt;</span><span class=\"nt\">Sized3K</span><span class=\"err\">,</span> <span class=\"na\">4000</span><span class=\"p\">&gt;;</span> <span class=\"c1\">// Okay.\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Sized5K</span> <span class=\"o\">=</span> <span class=\"nx\">ZeroFill</span><span class=\"p\">&lt;</span><span class=\"nt\">Sized4K</span><span class=\"err\">,</span> <span class=\"na\">5000</span><span class=\"p\">&gt;;</span> <span class=\"c1\">// Okay.\n</span></code></pre></div><p data-pid=\"VdZnq427\">不过需要注意的是，如果类型变得越来越复杂，虽然在 <code>tsc</code> 编译时没有问题，但在编辑器中可能会因为响应时间太长得到 <code>any</code> 的结果，这是因为检查和缓存类型方式的差异导致的。其实在上面的例子中，如果我们注释掉掉 <code>Sized4K</code>（不注释会有缓存），直接从 <code>Sized3K</code> 生成 <code>Sized5K</code>，会发现又触发了 TS2589，这显然不是上面所说的两种限制导致的，因为这一次只是 2000 次迭代，大大少于 <code>Sized3K</code> 的次数，这就引出了最后一个限制，类型实例化数量（<code>instantiationCount</code>）。</p><h3>工欲善其事，必先利其器。</h3><p data-pid=\"XmPNy8e2\">这个变量我们前面在 <code>instantiateTypeWithAlias</code> 中已经见过了，它目前的限制最大值是 5000000，每次实例化类型时它和 <code>instantiationDepth</code> 一起增加，不同的是实例化完成时它不会递减回来，它表示的是一次实例化过程中产生了多少个类型实例，继续搜索源码可以看到，它是在编译器检查一些语法节点的类型时初始化为 0 的:</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kd\">function</span> <span class=\"nx\">checkSourceElement</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span>    <span class=\"nx\">instantiationCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">checkDeferredNode</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span>    <span class=\"nx\">instantiationCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">checkExpression</span><span class=\"p\">(</span><span class=\"nx\">node</span><span class=\"p\">,</span> <span class=\"nx\">checkMode</span><span class=\"p\">,</span> <span class=\"nx\">forceTuple</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span>    <span class=\"nx\">instantiationCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"uHHGq9-E\">如果我们调试运行 <code>tsc</code> 并且在 <code>instantiationCount &gt;= 5000000</code> 的判断后打断点，在触发断点后查看调用栈会发现，确实是在实例化一个有 3700 多个成员的对象类型时抛出错误的，这个对象类型其实就是我们产生的数组类型，为什么会产生这么多（500 万个）类型实例的原因我们这里不去逐步分析了，现在只要知道这个数组是由许多泛型参数创建出来的，而这会导致产生大量的类型实例。即使我们的类型体操没有产生这么大的数组，它在产生这么多类型实例的时候也会拖慢速度，那么如何避免这种情况呢？</p><p data-pid=\"FoAwkMGJ\">直接说结论，根据需要使用其他类型来实现目的。例如，如果使用数组类型是为了模拟一个栈结构，并且只需要访问最后一个或几个元素，那么可以定义一个 <code>List</code> 对象类型，它虽然是串联的，但对象的结构是固定的：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">List</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">data</span>: <span class=\"kt\">T</span><span class=\"p\">;</span> <span class=\"nx\">prev</span>: <span class=\"kt\">List</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">};</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Append</span><span class=\"p\">&lt;</span><span class=\"nt\">P</span> <span class=\"na\">extends</span> <span class=\"na\">List</span><span class=\"err\">&lt;</span><span class=\"na\">unknown</span><span class=\"p\">&gt;,</span> <span class=\"nx\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">data</span>: <span class=\"kt\">T</span><span class=\"p\">;</span> <span class=\"nx\">prev</span>: <span class=\"kt\">P</span> <span class=\"p\">};</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Stack</span> <span class=\"o\">=</span> <span class=\"nx\">Append</span><span class=\"p\">&lt;</span><span class=\"nt\">Append</span><span class=\"err\">&lt;</span><span class=\"na\">Append</span><span class=\"err\">&lt;</span><span class=\"na\">never</span><span class=\"err\">,</span> <span class=\"na\">1</span><span class=\"p\">&gt;,</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"p\">;</span> <span class=\"c1\">// [1, 2, 3]\n</span><span class=\"c1\"></span>\n<span class=\"kr\">type</span> <span class=\"nx\">Popped</span> <span class=\"o\">=</span> <span class=\"nx\">Stack</span><span class=\"p\">[</span><span class=\"s2\">&#34;prev&#34;</span><span class=\"p\">];</span> <span class=\"c1\">// [1, 2]\n</span><span class=\"c1\"></span>\n<span class=\"kr\">type</span> <span class=\"nx\">Last</span> <span class=\"o\">=</span> <span class=\"nx\">Stack</span><span class=\"p\">[</span><span class=\"s2\">&#34;data&#34;</span><span class=\"p\">];</span> <span class=\"c1\">// 3\n</span><span class=\"c1\"></span>\n<span class=\"kr\">type</span> <span class=\"nx\">SecondToLast</span> <span class=\"o\">=</span> <span class=\"nx\">Stack</span><span class=\"p\">[</span><span class=\"s2\">&#34;prev&#34;</span><span class=\"p\">][</span><span class=\"s2\">&#34;data&#34;</span><span class=\"p\">];</span> <span class=\"c1\">// 2\n</span></code></pre></div><p data-pid=\"w3Bo_nxs\">或者如果需要记录的元素都是字符串的话，可以使用某种格式的模板字符串类型：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Append</span><span class=\"p\">&lt;</span><span class=\"nt\">S</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">T</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">T</span><span class=\"si\">}</span><span class=\"sb\">,</span><span class=\"si\">${</span><span class=\"nx\">S</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Stack</span> <span class=\"o\">=</span> <span class=\"nx\">Append</span><span class=\"p\">&lt;</span><span class=\"nt\">Append</span><span class=\"err\">&lt;</span><span class=\"na\">Append</span><span class=\"err\">&lt;&#34;&#34;,</span> <span class=\"err\">&#34;</span><span class=\"na\">alpha</span><span class=\"err\">&#34;</span><span class=\"p\">&gt;,</span> <span class=\"s2\">&#34;beta&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;gamma&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Popped</span> <span class=\"o\">=</span> <span class=\"nx\">Stack</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"kt\">string</span><span class=\"si\">}</span><span class=\"sb\">,</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">S</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span> <span class=\"nx\">S</span> : <span class=\"kt\">never</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Last</span> <span class=\"o\">=</span> <span class=\"nx\">Stack</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">T</span><span class=\"si\">}</span><span class=\"sb\">,</span><span class=\"si\">${</span><span class=\"kt\">string</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span> <span class=\"nx\">T</span> : <span class=\"kt\">never</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"YXNFg11g\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/fightingcat/sits/blob/fd958753c1f7514c29314fbfabab86d97075acec/lib/helpers.d.ts%23L77\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">甚至可以使用联合类型</a>。不过需要注意的是，联合类型用在分配条件类型中时，会产生元素数量等量的类型实例，不过它在许多时候仍然是更好的选择。</p><p data-pid=\"-AbGKj7c\">通常体操不会触发这个限制，就不过多描述了。要去优化实例化数量也难免需要阅读编译器源码，也可以在调用 <code>tsc</code> 时加上 <code>--diagnostics</code> 参数，观察输出中的 <code>Instantiations</code>，能够看到总共产生了多少类型实例。</p><h3>结语</h3><p data-pid=\"oal7t56_\">这些东西其实在脑袋里好久了，一直没有动力写出来，最近在群友的 push 下成功 push 了代码到仓库，但是本地一坨乱七八糟的东西还没有合进去，所以干脆先写文说一说体操的思路，如果之后有时间就再写一写体操 parser 生成器是如何实现的。如果之后完成了 VM 部分，就再写一写实现中的取舍和思路吧。<br/><br/>另外……求前端工作，全上海地点不限……</p>",
            "voteup_count": 125,
            "column": {
                "id": "c_206498766",
                "type": "column",
                "url_token": "c_206498766",
                "title": "来玩TypeScript啊，机都给你开好了！",
                "url": "https://zhuanlan.zhihu.com/c_206498766",
                "created": 1529898760,
                "updated": 1599156476,
                "description": "",
                "image_url": "https://picx.zhimg.com/v2-e96ec27e9e7fc3bbedf607cb352acb57_720w.jpg?source=d16d100b"
            },
            "comment_count": 12
        },
        "created": "2023-03-12T01:12:28+08:00"
    },
    {
        "content": {
            "id": 606276325,
            "title": "前端如何优化Long Task性能",
            "type": "article",
            "excerpt_title": "前言Performance工具是我们会用于性能分析的工具，接下来会跟大家一起学习一下如何使用Performance来分析性能问题 正文知识篇在给大家讲一些实践之前，想跟大家说一下一些值得注意的点 DIsable JavaScript Samples [图片] 这里有个Disable JavaScript Samples的复选框，作用如下 [图片] 用一段代码来验证一下这个打勾与否的效果 function a() { for (let i = 1; i &lt; 1000000000; i++) {} console.log(&#39;a&#39;); b(); } function b() { for (let i = …",
            "url": "https://zhuanlan.zhihu.com/p/606276325",
            "image_url": "https://pic1.zhimg.com/v2-2f265cc2e2d6bf6140aceba60b1a1ba4_r.jpg?source=172ae18b",
            "created": 1677329157,
            "updated": 1677576875,
            "author": {
                "id": "9682a3d481c3d06a27857ae16ccd28b9",
                "url_token": "Uncle-Keith",
                "name": "凯斯",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-ebcaac72141c6b990cb0c7d0ba38c219_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-ebcaac72141c6b990cb0c7d0ba38c219.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/9682a3d481c3d06a27857ae16ccd28b9",
                "user_type": "people",
                "headline": "Stay hungry, stay foolish",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "Shopee 前端工程师"
                    }
                ],
                "badge_v2": {
                    "title": "Shopee 前端工程师",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "Shopee 前端工程师",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "Shopee 前端工程师",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1447593955
            },
            "comment_permission": "all",
            "content": "<h2>前言</h2><p data-pid=\"woI9AYqM\">Performance工具是我们会用于性能分析的工具，接下来会跟大家一起学习一下如何使用Performance来分析性能问题</p><h2>正文</h2><h3>知识篇</h3><p data-pid=\"sz1x-Ifz\">在给大家讲一些实践之前，想跟大家说一下一些值得注意的点</p><p data-pid=\"gwkJExz8\"><b>DIsable JavaScript Samples</b></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3494431f2775f0df6112d4d143ef6d2b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1078\" data-rawheight=\"605\" class=\"origin_image zh-lightbox-thumb\" width=\"1078\" data-original=\"https://pic4.zhimg.com/v2-3494431f2775f0df6112d4d143ef6d2b_r.jpg\" data-original-token=\"v2-7e1c5d9e8fc6a7f63e3e2d2c45857654\"/></figure><p data-pid=\"hA8Qd7zq\">这里有个Disable JavaScript Samples的复选框，作用如下</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3b1ddd4988ce958594e4ad3aa940516a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1197\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb\" width=\"1197\" data-original=\"https://pic3.zhimg.com/v2-3b1ddd4988ce958594e4ad3aa940516a_r.jpg\" data-original-token=\"v2-0dd90bc8b63ddf8db48cef0996fdeb25\"/></figure><p data-pid=\"7ObaBP83\">用一段代码来验证一下这个打勾与否的效果</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">a</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000000000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">b</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">b</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">);</span>\n  <span class=\"nx\">c</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">c</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">a</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">init</span><span class=\"p\">();</span>\n\n</code></pre></div><p data-pid=\"ZTp9TwK2\">当我们不禁用时，我可以可以具体的看到init函数、a函数的调用、CPU情况。而且也可以通过Summary面板点击进入具体的函数，同时会告诉我们具体是什么代码执行时间那么长</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5b6e147cb1b3fc33a8bb8e895da2d166_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb\" width=\"902\" data-original=\"https://pic3.zhimg.com/v2-5b6e147cb1b3fc33a8bb8e895da2d166_r.jpg\" data-original-token=\"v2-762e267a90b49021ebc67670eef06dc5\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ef897cea0c5f200fd9d31d566f31fe3c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1063\" data-rawheight=\"504\" class=\"origin_image zh-lightbox-thumb\" width=\"1063\" data-original=\"https://pic1.zhimg.com/v2-ef897cea0c5f200fd9d31d566f31fe3c_r.jpg\" data-original-token=\"v2-d99b48cf02db2bbd74943d183086f99d\"/></figure><p data-pid=\"rO3en6D8\">当然，也给我们展现了另外一种信息：JS代码的执行（Evaluate Script）是需要先编译，后执行的。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a68310f3008ead6299eabab0006200d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"282\" class=\"origin_image zh-lightbox-thumb\" width=\"902\" data-original=\"https://pic1.zhimg.com/v2-a68310f3008ead6299eabab0006200d4_r.jpg\" data-original-token=\"v2-b3c617bc0fa1feb4292657c7f39a1a6b\"/></figure><p data-pid=\"oYVYlSs5\">但是当你选择后，我们就无法看到执行代码的具体信息了，同时也看不到CPU占用情况。对于我们分析性能来说不太友好，所以在分析性能的时候都不要去勾选这个选项</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8ef55f4c71739325459094492d0ec0a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1206\" data-rawheight=\"517\" class=\"origin_image zh-lightbox-thumb\" width=\"1206\" data-original=\"https://pic4.zhimg.com/v2-8ef55f4c71739325459094492d0ec0a7_r.jpg\" data-original-token=\"v2-f3a24b9c88408be578fa3e1eb38b9e70\"/></figure><p data-pid=\"nWCOnReb\"><b>Long Task</b></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0be7c8ed27a616ede3a21fe7eae98e47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"689\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-0be7c8ed27a616ede3a21fe7eae98e47_r.jpg\" data-original-token=\"v2-5d30adbdf86f8920048f1642f1947a86\"/></figure><p data-pid=\"-qmKttnc\">简单翻译一下上文的内容。我们知道，主线程一次只能处理一个任务（任务按照队列执行）。当任务超过某个确定的点时，准确的说是50毫秒，就会被称为长任务(Long Task)。当长任务在执行时，如果用户想要尝试与页面交互或者一个重要的渲染更新需要重新发生，那么浏览器会等到Long Task执行完之后，才会处理它们。结果就会导致交互和渲染的延迟</p><p data-pid=\"6WdOX5Ur\">所以从以上信息可以得知，如果存在Long Task，那么对于我们Load（加载时）和Runtime（运行时）的性能都有影响</p><p data-pid=\"FFElSmOH\">所以我们需要避免Long Task</p><p data-pid=\"EUlJfeCN\">但是在写代码的时候，我们会不经意的写出了Long Task的代码</p><p data-pid=\"ERrUNr-l\">一般都会保证函数的「单一职责」原则。就是一个函数只做一件事情，这样是最好的</p><p data-pid=\"g6hojka6\">比如说下面这个代码</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">a</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000000000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">b</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">c</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100000000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nx\">a</span><span class=\"p\">();</span>\n  <span class=\"nx\">b</span><span class=\"p\">();</span>\n  <span class=\"nx\">c</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">init</span><span class=\"p\">();</span>\n</code></pre></div><p data-pid=\"8URizImA\">但是，函数确实「单一职责」了，但是一不小心会引起了另外一个问题， Long Task</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5985060c698f9799e1978b21085b72f2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1303\" data-rawheight=\"467\" class=\"origin_image zh-lightbox-thumb\" width=\"1303\" data-original=\"https://pic3.zhimg.com/v2-5985060c698f9799e1978b21085b72f2_r.jpg\" data-original-token=\"v2-cf27fab480c4e3d25355ceadf7c90475\"/></figure><p data-pid=\"uaAaL5La\">那假如我们做个优化，我们把一个Long Task划分成多个Task后，是怎样的呢</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0d9d56822f813efee76817e4a4fbd05c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1302\" data-rawheight=\"479\" class=\"origin_image zh-lightbox-thumb\" width=\"1302\" data-original=\"https://pic1.zhimg.com/v2-0d9d56822f813efee76817e4a4fbd05c_r.jpg\" data-original-token=\"v2-13214a548740b60c198ed5afbe47b870\"/></figure><p data-pid=\"oyQ2kSr7\">那就意味着，Long Task被分解了，一些高优先级的任务可以得到响应----包括我们的用户交互行为</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1a33955019eb342e0d38854eff9b078e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1256\" data-rawheight=\"761\" class=\"origin_image zh-lightbox-thumb\" width=\"1256\" data-original=\"https://pic3.zhimg.com/v2-1a33955019eb342e0d38854eff9b078e_r.jpg\" data-original-token=\"v2-5f212f6782b8b76f421ad0d44f4c49ed\"/></figure><p data-pid=\"N6HCKag2\">那解决Long Task的方式有如下几种：</p><ul><li data-pid=\"RhEv1P87\">使用setTimeout分割任务</li><li data-pid=\"45DrKn0z\">封装一个函数setZeroTimeout，与setTimeout不同的是，该函数的执行时机不会被延迟</li><li data-pid=\"aA_Ez8fM\">使用web worker，处理逻辑复杂的计算</li><li data-pid=\"dBYOhEcI\">使用async/await分割任务</li><li data-pid=\"DjtI5rkb\">使用requestIdleCallback分割任务，但是注意。如果主线程长期拥塞，那么回调函数将无法执行</li><li data-pid=\"6wiUf0HG\">避免强制同步布局</li><li data-pid=\"8vCs6oiO\">...</li></ul><p data-pid=\"ndcVZzX9\"><b>小技巧</b></p><p data-pid=\"3rS-VkkL\">当我们生成性能报告的时候，我们可以先选择主线程上的某个Task，此时会有个红色的框框选中，表明属于选中的状态。然后通过键盘的<code>w, s, a, d</code>按键来控制主线程上任务的放大和缩小区域 </p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c5b79e21187a52bfc4c392985f03e300_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1388\" data-rawheight=\"521\" class=\"origin_image zh-lightbox-thumb\" width=\"1388\" data-original=\"https://pic1.zhimg.com/v2-c5b79e21187a52bfc4c392985f03e300_r.jpg\" data-original-token=\"v2-64a68b379c13507a49d6ee168d8d1d36\"/></figure><p data-pid=\"JUZHtUKZ\">如果想在调试阶段下查看4G网络的性能情况，可以使用对Network选项新加一份配置</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-315230014ad1607f2f28ba8112b3994b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1312\" data-rawheight=\"356\" class=\"origin_image zh-lightbox-thumb\" width=\"1312\" data-original=\"https://pic4.zhimg.com/v2-315230014ad1607f2f28ba8112b3994b_r.jpg\" data-original-token=\"v2-dee48acf89b87c3fe56f90c1bac03f3d\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-abaa6a22ea8eeacf01083be0e8ab82d0_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1307\" data-rawheight=\"211\" class=\"origin_image zh-lightbox-thumb\" width=\"1307\" data-original=\"https://pic1.zhimg.com/v2-abaa6a22ea8eeacf01083be0e8ab82d0_r.jpg\" data-original-token=\"v2-abaa6a22ea8eeacf01083be0e8ab82d0\"/></figure><p data-pid=\"DQPP8g47\">关于Chrome Devtools的其他</p><p data-pid=\"sxgHeR4I\">可以直接去阅读一下Chome Devtools的官方文档，可以学习到不少技巧，帮助大家更好的分析性能。链接位于参考文章处</p><h3>实践篇</h3><p data-pid=\"OX8By-iJ\">主线程的工作就是负责渲染页面 + 脚本执行的，每个任务都得通过任务队列的方式按照事件循环机制进行执行。那可以一起来看下怎么消除我们的Long Task来达到性能优化的目的</p><p data-pid=\"hmmDv8v2\"><b>SetTimeout</b></p><p data-pid=\"SYIJkbFD\">最容易想到的估计就是setTimeout了，因为setTimeout本身就是个Task。假如我们给某个函数加上setTimeout，是不是就可以将某个任务分离出去，成为单独的Task了</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-41682f3ae79e9ba9f359f03c9d19ac0b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"825\" data-rawheight=\"808\" class=\"origin_image zh-lightbox-thumb\" width=\"825\" data-original=\"https://pic4.zhimg.com/v2-41682f3ae79e9ba9f359f03c9d19ac0b_r.jpg\" data-original-token=\"v2-c46d3efc7fc207ecbdfef0f77afc0a22\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bb854823d2073a52dc01cd4d993c341c_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1319\" data-rawheight=\"170\" class=\"origin_image zh-lightbox-thumb\" width=\"1319\" data-original=\"https://pic1.zhimg.com/v2-bb854823d2073a52dc01cd4d993c341c_r.jpg\" data-original-token=\"v2-bb854823d2073a52dc01cd4d993c341c\"/></figure><p data-pid=\"ULba3LV8\">那有些朋友会觉得，那我直接用setTImeout通杀不就可以了吗？那肯定是不行的</p><p data-pid=\"gQ9jY6OM\">可以看到，c函数确实被我们break up了，但是函数内做了大量的运算（for遍历），所以还是属于Long Task，需要其他方式处理</p><p data-pid=\"RRTO1_CP\">那除了setTimeout之外，还有一些其他方法，比如async/await、Web Worker，避免强制同步布局等等来消除Long Task</p><p data-pid=\"xh3w6a7u\"><b>Async/Await</b></p><p data-pid=\"ACQn7sSd\">那是不是给代码加上async/await，就可以解决了上面的问题了</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0f6427b1b8fab7b69514905532c49084_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"849\" data-rawheight=\"694\" class=\"origin_image zh-lightbox-thumb\" width=\"849\" data-original=\"https://pic1.zhimg.com/v2-0f6427b1b8fab7b69514905532c49084_r.jpg\" data-original-token=\"v2-915f690e33e88ee93269925c6c259108\"/></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8f6cff940fdeb0f66918170b63212a49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"979\" data-rawheight=\"166\" class=\"origin_image zh-lightbox-thumb\" width=\"979\" data-original=\"https://pic2.zhimg.com/v2-8f6cff940fdeb0f66918170b63212a49_r.jpg\" data-original-token=\"v2-067ce51bd4c18e062f1917d5b0dd173d\"/></figure><p data-pid=\"NhsgUoEB\">这样子写肯定是不ok的。await函数会返回一个Promise，所以上面的代码就可以相当于</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-78e2da90a32e39343eabc783381d47b1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"813\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"813\" data-original=\"https://pic2.zhimg.com/v2-78e2da90a32e39343eabc783381d47b1_r.jpg\" data-original-token=\"v2-5300598b4000841c5d7434054e62884b\"/></figure><p data-pid=\"WP4f75x4\">我们应该使用个yieldToMain的函数，然后将代码放入到队列里，按照顺序执行，同时在遍历结束前调用一下yieldToMain函数</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-983c4b203ab13cac4655d003123a1bf3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"788\" data-rawheight=\"916\" class=\"origin_image zh-lightbox-thumb\" width=\"788\" data-original=\"https://pic4.zhimg.com/v2-983c4b203ab13cac4655d003123a1bf3_r.jpg\" data-original-token=\"v2-b5198b0e7305e323f35c9ac964beca02\"/></figure><p data-pid=\"aSZSuVbP\">可以看到，每个函数调用都被拆分出来了，达到我们的目的了</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f0096a498d31d401319569791c9534ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb\" width=\"1077\" data-original=\"https://pic3.zhimg.com/v2-f0096a498d31d401319569791c9534ae_r.jpg\" data-original-token=\"v2-22aafdf55172ecfb205923e76c71d36a\"/></figure><p data-pid=\"h8pcoZ70\">大家可能会说，setTimeout加上来不是多了个Task吗？没错，确实多了个Task，但是这个在回调里我们什么事情都没有做，直接就resolve了，所以没有什么影响</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5ff96adf1ea2d6eb59354c11e804a66f_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1310\" data-rawheight=\"146\" class=\"origin_image zh-lightbox-thumb\" width=\"1310\" data-original=\"https://pic4.zhimg.com/v2-5ff96adf1ea2d6eb59354c11e804a66f_r.jpg\" data-original-token=\"v2-5ff96adf1ea2d6eb59354c11e804a66f\"/></figure><p data-pid=\"qnucbG7_\">看上面的图也可以发现，虽然我们使用了async/await来break up Long Task，可以将其拆分成3个Task来执行，但是还是没有办法处理每个Task都是Long Task的问题</p><p data-pid=\"DLVgEGG7\">那我们来看看下面的办法</p><p data-pid=\"Ixit3GqS\"><b>Web Worker</b></p><p data-pid=\"vmu_42wx\">web worker是运行在Main线程之外的一个线程，叫做worker线程。我们可以把一些计算量大的任务放到worker中去处理</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-87021b2bb962cc69f757ea48055e29bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"794\" data-rawheight=\"944\" class=\"origin_image zh-lightbox-thumb\" width=\"794\" data-original=\"https://pic4.zhimg.com/v2-87021b2bb962cc69f757ea48055e29bb_r.jpg\" data-original-token=\"v2-d1c3e1569e0601c4409c5735d7fe18aa\"/></figure><p data-pid=\"dyuJUjc8\">然后再新增一个./worker.js文件</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3ec1d7fada235622b68faed6158d0b3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"837\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb\" width=\"837\" data-original=\"https://pic4.zhimg.com/v2-3ec1d7fada235622b68faed6158d0b3f_r.jpg\" data-original-token=\"v2-685b4986a0457bb8885b8f797bc137f8\"/></figure><p data-pid=\"u6fVr16O\">通过npx http-server执行一下，在本地起一个服务器</p><p data-pid=\"yZXbD6UH\">为什么要在本地起一个服务器呢，因为Chrome不允许使用本地文件加载web worker（内容安全策略限制）</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f5e55206874742cde687287064f6beb1_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2474\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"2474\" data-original=\"https://pic2.zhimg.com/v2-f5e55206874742cde687287064f6beb1_r.jpg\" data-original-token=\"v2-f5e55206874742cde687287064f6beb1\"/></figure><p data-pid=\"KOGnrmRs\">起完服务后，再跑一下Performace</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c9854c36c309786dae11e9b54ef5f069_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1095\" data-rawheight=\"367\" class=\"origin_image zh-lightbox-thumb\" width=\"1095\" data-original=\"https://pic2.zhimg.com/v2-c9854c36c309786dae11e9b54ef5f069_r.jpg\" data-original-token=\"v2-7991cd28ee7c88825919f7848bcf53ac\"/></figure><p data-pid=\"6BzI4tZD\">你会发现，多了很多莫名其妙的东西。这些东西在你简单的demo是没有出现过的，而且时间还变得很长</p><p data-pid=\"wP6KCAfe\">这些是因为浏览器插件等的问题导致的，在无痕模式下打开再看看。无痕模式下打开，我们的Long Task就完全消失了！</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e619d3e97ef6821e4175fc80143d4a8f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1307\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb\" width=\"1307\" data-original=\"https://pic4.zhimg.com/v2-e619d3e97ef6821e4175fc80143d4a8f_r.jpg\" data-original-token=\"v2-87c9762b7501707bd390fbd70df8b158\"/></figure><p data-pid=\"e3uIhFCA\">再来看看之前我们使用async/await的方式，给大家一个对比</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b8b52ff651d9338d2f650ca2206eb11b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"185\" class=\"origin_image zh-lightbox-thumb\" width=\"1077\" data-original=\"https://pic4.zhimg.com/v2-b8b52ff651d9338d2f650ca2206eb11b_r.jpg\" data-original-token=\"v2-ffb7e33ac1f82681beb9278440c5f649\"/></figure><p data-pid=\"eg_Twy6h\">主线程上的所有Long Task都消失了，复杂的计算都到单独的worker线程去处理了。但是workder线程仍然存在Long Task，不过没有关系，只要主线程没有Long Task，那就不影响构建、渲染了。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fef9b57b696e909861165b00e08c07b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1352\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb\" width=\"1352\" data-original=\"https://pic1.zhimg.com/v2-fef9b57b696e909861165b00e08c07b8_r.jpg\" data-original-token=\"v2-b6361cbcc0deacde7b5646db224cb66d\"/></figure><p data-pid=\"OqHmo3s2\"><b>Synchronous layout</b></p><p data-pid=\"GGyXCt_q\">下面的例子是来自<a href=\"https://link.zhihu.com/?target=https%3A//developer.chrome.com/docs/devtools/performance/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Analyze runtime performance</a>文章的demo的，主要是想给大家展示一下强制同步布局对页面性能的影响</p><p data-pid=\"0E5b7_8J\">这里录了个视频看下</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1610941301100343296\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"\" data-poster=\"https://pic1.zhimg.com/v2-781263c669fa544ac81fe20258316894.jpg?source=382ee89a\" data-lens-id=\"1610941301100343296\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/v2-781263c669fa544ac81fe20258316894.jpg?source=382ee89a\"/><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1610941301100343296</span></span></a><p data-pid=\"7B_qQYxz\">通过Performance工具，我们可以知道，高CPU运算都是因为Script和Layout导致的。黄色代表Script的运行，紫色代表Layout的运行</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fa62e0c82f399930a8bb1e88fa1271eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1568\" data-rawheight=\"452\" class=\"origin_image zh-lightbox-thumb\" width=\"1568\" data-original=\"https://pic4.zhimg.com/v2-fa62e0c82f399930a8bb1e88fa1271eb_r.jpg\" data-original-token=\"v2-50baeb8bfdef35ddc5421c3928709e33\"/></figure><p data-pid=\"PXvta42I\">这些计算都是因为app.update函数中某段逻辑导致的</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-55982d62f24aacbd1adba724f3efd06e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1082\" data-rawheight=\"699\" class=\"origin_image zh-lightbox-thumb\" width=\"1082\" data-original=\"https://pic3.zhimg.com/v2-55982d62f24aacbd1adba724f3efd06e_r.jpg\" data-original-token=\"v2-412e4741e2812db6369b5b67efdbbb6a\"/></figure><p data-pid=\"GiRBV8pJ\">这个是因为在执行Script逻辑的时候，读取了offsetTop的位置，导致主线程需要重新走渲染流程，同步的获取完布局后的信息。最终导致渲染丢帧，影响用户体验</p><p data-pid=\"EJ687Is4\">接着看看要怎么解决这个问题</p><a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1610946200496193536\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"\" data-poster=\"https://pic1.zhimg.com/v2-020239b30c2f6dca724c10b7f97eaeb5.jpg?source=382ee89a\" data-lens-id=\"1610946200496193536\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/v2-020239b30c2f6dca724c10b7f97eaeb5.jpg?source=382ee89a\"/><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1610946200496193536</span></span></a><p data-pid=\"nnUDm1Lt\">具体看下点击优化按钮后做了什么东西。优化前后的代码可以仔细揣摩揣摩</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-840b468a56295cc21fac8f218c569d4f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1040\" data-rawheight=\"725\" class=\"origin_image zh-lightbox-thumb\" width=\"1040\" data-original=\"https://pic4.zhimg.com/v2-840b468a56295cc21fac8f218c569d4f_r.jpg\" data-original-token=\"v2-163e8a4ca2d966d8d02ffcfc950f366f\"/></figure><h2>参考文章</h2><ul><li data-pid=\"I7ukZMk2\"><a href=\"https://link.zhihu.com/?target=https%3A//developer.chrome.com/docs/devtools/performance/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Analyze runtime performance</a></li><li data-pid=\"xazYcTKy\"><a href=\"https://link.zhihu.com/?target=https%3A//developer.chrome.com/docs/devtools/performance/reference/%23record\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Performance features reference</a></li><li data-pid=\"tPLUt4y8\"><a href=\"https://link.zhihu.com/?target=https%3A//web.dev/optimize-long-tasks/%3Futm_source%3Ddevtools\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Optimize long tasks</a></li></ul><p></p>",
            "voteup_count": 74,
            "comment_count": 0
        },
        "created": "2023-02-25T20:45:57+08:00"
    },
    {
        "content": {
            "id": 1740951741,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/442222927/answer/1740951741",
            "created_time": 1613871731,
            "updated_time": 1613871731,
            "question": {
                "type": "question",
                "id": 442222927,
                "title": "程序员如何保持技术敏感度？",
                "question_type": "normal",
                "created": 1612102883,
                "updated_time": 1612102883,
                "url": "https://www.zhihu.com/question/442222927",
                "is_deleted": false
            },
            "author": {
                "id": "c0e2a6c332e573b37d6f5387074ead98",
                "url_token": "doodlewind",
                "name": "doodlewind",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-e5351633ad642a651ed925656c64b76b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-e5351633ad642a651ed925656c64b76b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/c0e2a6c332e573b37d6f5387074ead98",
                "user_type": "people",
                "headline": "github.com/doodlewind",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19550901",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550901",
                                "name": "前端开发",
                                "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "前端开发话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 381,
            "comment_count": 21,
            "thanks_count": 36,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"EvvB_2nA\">其实所有老司机的梦想，都是降低自己的敏感度而不是提高——技术品味同样应该是随阅历增长而提高的，这意味着「让自己爽」的阈值也会越来越高。如果你工作了几年还是一看到框架 hello world 就心潮澎湃，恐怕那才是有问题的。</p><p data-pid=\"OksAVuLP\">那么这种阈值是怎么提高的呢？基本就是理论和工程两条线吧。走理论路线的话，迟早要进入啃 paper 的世界，在 Google Scholar 里遨游。至于工程路线，基本就是啃各种规范 spec 然后以 Fabrice Bellard 为榜样吧。具体的语言、框架、库都是需要时学会的工具而已，是实现自己 idea 的工具。</p><p data-pid=\"TUMGK00O\">你看 Fabrice 每次放大招，都会隐姓埋名几年默默学习这个领域。神人靠的不（只）是智商，更有长时间积累的正反馈，只是他们之中有些人比较低调，有些人比较高调而已。他们都有强大的「我想把这个搞懂 / 做出来」的驱动力，把目标庖丁解牛地拆解成小问题并实现出来。好奇心几乎不是个需要「保持」的东西，它本身就可以引导你不停提出问题，不停探索新领域做出成果。</p><blockquote data-pid=\"GLkLudlt\">好吧，保持好奇心其实需要禁止 996。这里不用再展开论述了吧？</blockquote><p data-pid=\"HMK1Oa-k\">在理论和工程两条线上，都有很多硕果累累的大牛。虽然每个人适合的路线各有不同，但以多数人的努力程度之低，几乎根本轮不到争论路线优劣的地步，选择自己感兴趣的一条即可。</p><p data-pid=\"_MGQSZpg\">不过要注意一种最危险的状态，那就是对各种新技术都浅尝辄止，停留在解决日常工作 CRUD 问题的舒适区里。明明什么领域都没有深入，却喜欢发表「我早已一眼看穿了本质」式的高谈阔论。比如写个 TodoMVC 就来点评天下前端框架，会个柯里化就来教你函数式编程。这种状态就是典型的——<br/></p><p data-pid=\"OTTZbyCG\">学 麻 了。</p>",
            "excerpt": "其实所有老司机的梦想，都是降低自己的敏感度而不是提高——技术品味同样应该是随阅历增长而提高的，这意味着「让自己爽」的阈值也会越来越高。如果你工作了几年还是一看到框架 hello world 就心潮澎湃，恐怕那才是有问题的。 那么这种阈值是怎么提高的呢？基本就是理论和工程两条线吧。走理论路线的话，迟早要进入啃 paper 的世界，在 Google Scholar 里遨游。至于工程路线，基本就是啃各种规范 spec 然后以 Fabrice Bellard 为…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxi9oZO+BiD11O8ckgIlCgkzNDY2MTY1NzMSCjE3NDA5NTE3NDEYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2021-02-21T09:42:11+08:00"
    },
    {
        "content": {
            "id": 147875569,
            "title": "程序员精进之路：性能调优利器--火焰图",
            "type": "article",
            "excerpt_title": "本文主要分享火焰图使用技巧，介绍 systemtap 的原理机制，如何使用火焰图快速定位性能问题原因，同时加深对 systemtap 的理解。 让我们回想一下，曾经作为编程新手的我们是如何调优程序的？通常是在没有数据的情况下依靠主观臆断来瞎蒙，稍微有些经验的同学则会对差异代码进行二分或者逐段调试。这种定位问题的方式不仅耗时耗力，而且还不具有通用性，当遇到其他类似的性能问题时，需要重复踩坑、填坑，那么如何避免这种情况呢…",
            "url": "https://zhuanlan.zhihu.com/p/147875569",
            "image_url": "",
            "created": 1591954953,
            "updated": 1591954953,
            "author": {
                "id": "3a6e8ebd9bc64271aab3f1c9c9f217dc",
                "url_token": "teng-xun-ji-zhu-gong-cheng",
                "name": "腾讯技术工程",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-f3e3a9dcfb2d2a875914f9b139983cc2_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-f3e3a9dcfb2d2a875914f9b139983cc2.jpg?source=0df5f383",
                "is_org": true,
                "type": "people",
                "url": "https://www.zhihu.com/people/3a6e8ebd9bc64271aab3f1c9c9f217dc",
                "user_type": "organization",
                "headline": "分享腾讯技术",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19554298",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19554298",
                                "name": "编程",
                                "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c"
                            }
                        ]
                    },
                    {
                        "type": "identity",
                        "description": "已认证账号"
                    }
                ],
                "badge_v2": {
                    "title": "编程话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "编程话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "已认证账号",
                            "url": "https://www.zhihu.com/term/institution-settle",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "编程话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity_org",
                            "title": "已认证账号",
                            "description": "已认证账号",
                            "url": "https://www.zhihu.com/term/institution-settle",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c"
                },
                "actived_at": 1504255006
            },
            "comment_permission": "all",
            "content": "<p></p><blockquote data-pid=\"qZn6AhcF\"> 本文主要分享火焰图使用技巧，介绍 systemtap 的原理机制，如何使用火焰图快速定位性能问题原因，同时加深对 systemtap 的理解。<br/> </blockquote><p data-pid=\"DyK1sua1\">让我们回想一下，曾经作为编程新手的我们是如何调优程序的？通常是在没有数据的情况下依靠主观臆断来瞎蒙，稍微有些经验的同学则会对差异代码进行二分或者逐段调试。这种定位问题的方式不仅耗时耗力，而且还不具有通用性，当遇到其他类似的性能问题时，需要重复踩坑、填坑，那么如何避免这种情况呢？</p><p data-pid=\"Arp_YLCE\">俗语有曰：兵欲善其事必先利其器，个人认为，程序员定位性能问题也需要一件“利器”。 如同医生给病人看病，需要依靠专业的医学工具（比如 X 光片、听诊器等）进行诊断，最后依据医学工具的检验结果快速精准的定位出病因所在。性能调优工具（比如 perf / gprof 等）之于性能调优就像 X 光之于病人一样，它可以一针见血的指出程序的性能瓶颈。</p><p data-pid=\"aKJZ3M4z\">但是常用的性能调优工具 perf 等，在呈现内容上只能单一的列出调用栈或者非层次化的时间分布，不够直观。这里我推荐大家配合使用火焰图，它将 perf 等工具采集的数据呈现得更为直观。</p><h3><b>初识火焰图</b></h3><p data-pid=\"Gn5CpLUv\">火焰图（Flame Graph）是由 Linux 性能优化大师 Brendan Gregg 发明的，和所有其他的 profiling 方法不同的是，火焰图以一个全局的视野来看待时间分布，它从底部往顶部，列出所有可能导致性能瓶颈的调用栈。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-47c4c8352b1a719960a3d17acd26581e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2110\" data-rawheight=\"1084\" class=\"origin_image zh-lightbox-thumb\" width=\"2110\" data-original=\"https://pic3.zhimg.com/v2-47c4c8352b1a719960a3d17acd26581e_r.jpg\" data-original-token=\"v2-47c4c8352b1a719960a3d17acd26581e\"/></figure><p data-pid=\"9bNC0EM9\">火焰图整个图形看起来就像一个跳动的火焰，这就是它名字的由来。</p><p data-pid=\"e_nzcgPB\">火焰图有以下特征（这里以 on-cpu 火焰图为例）：</p><ul><li data-pid=\"zPCovGd1\">每一列代表一个调用栈，每一个格子代表一个函数</li><li data-pid=\"jtDgUJT9\">纵轴展示了栈的深度，按照调用关系从下到上排列。最顶上格子代表采样时，正在占用 cpu 的函数。</li><li data-pid=\"Q-u6hdh7\">横轴的意义是指：火焰图将采集的多个调用栈信息，通过按字母横向排序的方式将众多信息聚合在一起。需要注意的是它并不代表时间。</li><li data-pid=\"d2h4l-mE\">横轴格子的宽度代表其在采样中出现频率，所以一个格子的宽度越大，说明它是瓶颈原因的可能性就越大。</li><li data-pid=\"TI2yqLt1\">火焰图格子的颜色是随机的暖色调，方便区分各个调用信息。</li><li data-pid=\"Gk213r4e\">其他的采样方式也可以使用火焰图， on-cpu 火焰图横轴是指 cpu 占用时间，off-cpu 火焰图横轴则代表阻塞时间。</li><li data-pid=\"zJxvi1vh\">采样可以是单线程、多线程、多进程甚至是多 host，进阶用法可以参考附录进阶阅读</li></ul><h3><b>火焰图类型</b></h3><p data-pid=\"jbJ29o2O\">常见的火焰图类型有 On-CPU，Off-CPU，还有 Memory，Hot/Cold，Differential 等等。他们分别适合处理什么样的问题呢？</p><p data-pid=\"p8QmU0Ml\">这里笔者主要使用到的是 On-CPU、Off-CPU 以及 Memory 火焰图，所以这里仅仅对这三种火焰图作比较，也欢迎大家补充和斧正。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8720196befac75c88ae650c6e05224a1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2025\" data-rawheight=\"1229\" class=\"origin_image zh-lightbox-thumb\" width=\"2025\" data-original=\"https://pic2.zhimg.com/v2-8720196befac75c88ae650c6e05224a1_r.jpg\" data-original-token=\"v2-8720196befac75c88ae650c6e05224a1\"/></figure><p data-pid=\"Pus-wM7n\"><b>火焰图类型横轴含义纵轴含义解决问题采样方式</b>cpu 火焰图cpu占用时间调用栈找出 cpu 占用高的问题函数；分析代码热路径固定频率采样 cpu 调用栈off-cpu 火焰图阻塞时间调用栈i/o、网络等阻塞场景导致的性能下降；锁竞争、死锁导致的性能下降问题固定频率采样 阻塞事件调用栈内存火焰图内存申请/释放函数调用次数调用栈内存泄露问题；内存占用高的对象/申请内存多的函数；虚拟内存或物理内存泄露问题有四种方式： 跟踪malloc/free；跟踪brk；跟踪mmap；跟踪页错误Hot/Cold 火焰图on-CPU 火焰图和 off-CPU 火焰图结合在一起综合展示调用栈需要结合 cpu 占用以及阻塞分析的场景；off-CPU 火焰图无法直观判断问题的场景on-CPU 火焰图和 off-CPU 火焰图结合</p><h3><b>火焰图分析技巧</b></h3><ol><li data-pid=\"U_PXZOMD\">纵轴代表调用栈的深度（栈桢数），用于表示函数间调用关系：下面的函数是上面函数的父函数。</li><li data-pid=\"r5e7Jgvc\">横轴代表调用频次，一个格子的宽度越大，越说明其可能是瓶颈原因。</li><li data-pid=\"astviOcK\">不同类型火焰图适合优化的场景不同，比如 on-cpu 火焰图适合分析 cpu 占用高的问题函数，off-cpu 火焰图适合解决阻塞和锁抢占问题。</li><li data-pid=\"w_183GJa\">无意义的事情：横向先后顺序是为了聚合，跟函数间依赖或调用关系无关；火焰图各种颜色是为方便区分，本身不具有特殊含义</li><li data-pid=\"r7Crt_VU\">多练习：进行性能优化有意识的使用火焰图的方式进行性能调优（如果时间充裕）</li></ol><h3><b>如何绘制火焰图？</b></h3><p data-pid=\"4_l-ZKk8\">要生成火焰图，必须要有一个顺手的动态追踪工具，如果操作系统是 Linux 的话，那么通常通常是 perf 或者 systemtap 中的一种。其中 perf 相对更常用，多数 Linux 都包含了 perf 这个工具，可以直接使用；SystemTap 则功能更为强大，监控也更为灵活。网上关于如何使用 perf 绘制火焰图的文章非常多而且丰富，所以本文将以 SystemTap 为例。</p><p data-pid=\"UR0qbzBS\">SystemTap 是动态追踪工具，它通过探针机制，来采集内核或者应用程序的运行信息，从而可以不用修改内核和应用程序的代码，就获得丰富的信息，帮你分析、定位想要排查的问题。SystemTap 定义了一种类似的 DSL 脚本语言，方便用户根据需要自由扩展。不过，不同于动态追踪的鼻祖 DTrace ，SystemTap 并没有常驻内核的运行时，它需要先把脚本编译为内核模块，然后再插入到内核中执行。这也导致 SystemTap 启动比较缓慢，并且依赖于完整的调试符号表。</p><p data-pid=\"egN36Ups\">使用 SystemTap 绘制火焰图的主要流程如下：</p><ul><li data-pid=\"1sw7oVWw\">安装 SystemTap 以及 操作系统符号调试表</li><li data-pid=\"uEfzgX9X\">根据自己所需绘制的火焰图类型以及进程类型选择合适的脚本</li><li data-pid=\"TCHcj-H-\">生成内核模块</li><li data-pid=\"paOPX0QG\">运行 SystemTap 或者运行生成的内核模块统计数据</li><li data-pid=\"iBY0s_E4\">将统计数据转换成火焰图</li></ul><p data-pid=\"bw_MjNE6\">本文演示步骤将会基于操作系统 Tlinux 2.2</p><h3><b>安装 SystemTap 以及 操作系统符号调试表</b></h3><p data-pid=\"vmU84DQi\">使用 yum 工具安装 systemtap:</p><div class=\"highlight\"><pre><code class=\"language-text\">yum install systemtap systemtap-runtime</code></pre></div><p data-pid=\"ipIFoAjj\">由于 systemtap 工具依赖于完整的调试符号表，而且生产环境不同机器的内核版本不同（虽然都是Tlinux 2.2版本，但是内核版本后面的小版本不一样，可以通过 <code>uname -a</code> 命令查看）所以我们还需要安装 kernel-debuginfo 包、 kernel-devel 包 我这里是安装了这两个依赖包</p><div class=\"highlight\"><pre><code class=\"language-text\">kernel-devel-3.10.107-1-tlinux2-0046.x86_64\nkernel-debuginfo-3.10.107-1-tlinux2-0046.x86_64</code></pre></div><h3><b>根据自己所需绘制的火焰图类型以及进程类型选择合适的脚本</b></h3><p data-pid=\"FatZN_xn\">使用 SystemTap 统计相关数据往往需要自己依照它的语法，编写脚本，具有一定门槛。幸运的是，github 上春哥（agentzh）开源了两组他常用的 SystemTap 脚本：<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/openresty/openresty-systemtap-toolkit\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">openresty-systemtap-toolkit</a></b> 和 <b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/openresty/stapxx\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">stapxx</a></b>，这两个工具集能够覆盖大部分 C 进程、nginx 进程以及 Openresty 进程的性能问题场景。</p><p data-pid=\"C_mN1fWm\">我们这里需要绘制 off-cpu 火焰图，所以使用 sample-bt-off-cpu 脚本即可</p><h3><b>生成内核模块</b></h3><p data-pid=\"tG_R1fC_\">现在我们有了统计脚本，也安装好了 systemtap，正常来说就可以使用了，但由于 systemtap 是通过生成内核模块的方式统计相关探针的统计数据，而 tlinux 要求所有运行的内核模块需要先到 tlinux 平台签名才可以运行，所以：</p><p data-pid=\"EipPgXcs\">故需要先修改 off-cpu 脚本，让其先生成内核模块；之后对该内核模块作签名；最后使用 systemtap 命令手工运行该脚本，统计监控数据</p><p data-pid=\"_x3nrgAz\">Systemtap 执行流程如下：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7dfd1dd1e31b053d011aa6226a193bc1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1944\" data-rawheight=\"950\" class=\"origin_image zh-lightbox-thumb\" width=\"1944\" data-original=\"https://pic2.zhimg.com/v2-7dfd1dd1e31b053d011aa6226a193bc1_r.jpg\" data-original-token=\"v2-7dfd1dd1e31b053d011aa6226a193bc1\"/></figure><ul><li data-pid=\"-zmvVMtX\">parse：分析脚本语法</li><li data-pid=\"_SgjB6Qr\">elaborate：展开脚本 中定义的探针和连接预定义脚本库，分析内核和内核模块的调试信息</li><li data-pid=\"P7akyyvi\">translate：.将脚本编译成c语言内核模块文件放 在$HOME/xxx.c 缓存起来，避免同一脚本多次编译</li><li data-pid=\"OS13i-4C\">build：将c语言模块文件编译成.ko的内核模块，也缓存起来。</li><li data-pid=\"8BH2nMTU\">把模块交给staprun，staprun加载内核模块到内核空间,stapio连接内核模块和用户空间，提供交互IO通道,采集数据。</li></ul><p data-pid=\"AQGZGUjd\">所以我们这里修改下 off-cpu 的 stap 脚本，让其只运行完第四阶段，只生成一个内核模块</p><div class=\"highlight\"><pre><code class=\"language-text\">// 在 stap 命令后增加 -p4 参数，告诉systemtap，当前只需要执行到第四阶段\nopen my $in, &#34;|stap -p4 --skip-badvars --all-modules -x $pid -d &#39;$exec_path&#39; --ldd $d_so_args $stap_args -&#34;\nor die &#34;Cannot run stap: $!\\n&#34;;</code></pre></div><p data-pid=\"GDuejOtE\">修改好之后运行脚本，会生成一个内核模块</p><div class=\"highlight\"><pre><code class=\"language-text\">// -p 8682 是需要监控的进程的进程号\n// -t 30 是指会采样30秒\n./sample-bt-off-cpu -p 8692 -t 30</code></pre></div><p data-pid=\"muVbUyVk\">生成的内核模块名称形如 <code>stap_xxxxx.ko</code>模块名称 由于读者并不需要关心内核模块签名，故章节略过</p><h3><b>运行内核模块统计数据</b></h3><p data-pid=\"wwbd05jk\">内核模块签名完成后，便可以使用 staprun 命令手工运行相关内核模块了</p><p data-pid=\"90jRZkMn\">命令：</p><div class=\"highlight\"><pre><code class=\"language-text\">// 注意：签名脚本会将生产的内核模块重命名，需要将名字改回去……（脚本bug）\nstaprun -x {进程号} {内核模块名} &gt; demo.bt</code></pre></div><p data-pid=\"YZiU8Fzs\">值得注意的是，监控的进程要有一定负载 systemtap 才可以采集到相关数据，即在采集时，同时需要要有一定请求量（通常是自己构造请求，压测进程）</p><h3><b>将统计数据转换成火焰图</b></h3><p data-pid=\"3GrabtPW\">获得了统计数据 <code>demo.bt</code> 后，便可以使用火焰图工具绘制火焰图了</p><p data-pid=\"aOUzpM4h\">下载 FlameGraph，链接：<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/brendangregg/FlameGraph\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/brendangregg</span><span class=\"invisible\">/FlameGraph</span><span class=\"ellipsis\"></span></a></b></p><p data-pid=\"BBgUjjdu\">命令：</p><div class=\"highlight\"><pre><code class=\"language-text\">./stackcollapse-stap.pl demo.bt &gt; demo.folded\n./flamegraph.pl demo.folded &gt; demo.svg</code></pre></div><p data-pid=\"1aKMfxd6\">这样便获得了 off-cpu 火焰图：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8ee2d332abc887b4c6c782e1d07c1c5a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1929\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb\" width=\"1929\" data-original=\"https://pic3.zhimg.com/v2-8ee2d332abc887b4c6c782e1d07c1c5a_r.jpg\" data-original-token=\"v2-8ee2d332abc887b4c6c782e1d07c1c5a\"/></figure><h3><b>看图说话</b></h3><p data-pid=\"lEhD8JFY\">趁热打铁，通过几张火焰图熟悉下如何使用火焰图</p><p data-pid=\"sOd9nrYL\">图片来自于春哥微博或者个人近期定位的问题</p><h3><b>on-cpu 火焰图</b></h3><h3><b>Apache APISIX QPS急剧下降问题</b></h3><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cc0dba2e3bc70553f245e22311c3b07e_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1998\" data-rawheight=\"296\" class=\"origin_image zh-lightbox-thumb\" width=\"1998\" data-original=\"https://pic3.zhimg.com/v2-cc0dba2e3bc70553f245e22311c3b07e_r.jpg\" data-original-token=\"v2-cc0dba2e3bc70553f245e22311c3b07e\"/></figure><p data-pid=\"_0UOh-ON\">Apache APISIX 是一个开源国产的高性能 API 网关，之前在进行选型压测时，发现当 Route 匹配不中场景下， QPS 急剧下降，在其 CPU （四十八核）占用率几乎达到100%的情况下只有几千 QPS，通过绘制火焰图发现，其主要耗时在一个 table 插入阶段(<code>lj_cf_table_insert</code>)，分析代码发现是该 table 一直没有释放，每次匹配不中路由会插入数据，导致表越来越大，后续插入耗时过长导致 QPS 下降。</p><h3><b>off-cpu 火焰图</b></h3><h3><b>nginx 互斥锁问题</b></h3><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c207833c2fdb81ee0d99c05c3f6ae912_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2003\" data-rawheight=\"1110\" class=\"origin_image zh-lightbox-thumb\" width=\"2003\" data-original=\"https://pic3.zhimg.com/v2-c207833c2fdb81ee0d99c05c3f6ae912_r.jpg\" data-original-token=\"v2-c207833c2fdb81ee0d99c05c3f6ae912\"/></figure><p data-pid=\"3kgr-vUh\">这是一张 nginx 的 off-cpu 火焰图，我们可以很快锁定到 <code>ngx_common_set_cache_fs_size -&gt; ngx_shmtx_lock -&gt; sem_wait</code> 这段逻辑使用到了互斥锁，它让 nginx 进程绝大部分阻塞等待时间花费在获取该锁。</p><h3><b>agent 监控上报断点问题</b></h3><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-89b77c2f92c22b05c1727e0a63ba6b66_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1932\" data-rawheight=\"672\" class=\"origin_image zh-lightbox-thumb\" width=\"1932\" data-original=\"https://pic3.zhimg.com/v2-89b77c2f92c22b05c1727e0a63ba6b66_r.jpg\" data-original-token=\"v2-89b77c2f92c22b05c1727e0a63ba6b66\"/></figure><p data-pid=\"uhs-yndF\">这是一张 agent 的 off-cpu 火焰图，它是一个多线程异步事件模型，主线程处理各个消息，多个线程分别负责配置下发或者监控上报的职责。当前问题出现在监控上报性能差，无法在周期（一分钟）内完成监控数据上报，导致监控断点，通过 off-cpu 火焰图我们可以分析出，该上报线程花费了大量的时间使用 curl_easy_perform 接口收发 http 监控数据消息中。</p><p data-pid=\"sbdqZcL8\">依据火焰图将发送 http 消息的逻辑改为异步非阻塞后，该问题解决。</p><h3><b>附录</b></h3><h3><b>进阶阅读</b></h3><ul><li data-pid=\"_1ICdhXv\">谷歌搜索演讲：Blazing Performance with Flame Graphs</li><li data-pid=\"KDzGxj2P\">演讲 ppt：<b><a href=\"https://link.zhihu.com/?target=https%3A//www.slideshare.net/brendangregg/blazing-performance-with-flame-graphs\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">slideshare.net/brendang</span><span class=\"invisible\">regg/blazing-performance-with-flame-graphs</span><span class=\"ellipsis\"></span></a></b></li><li data-pid=\"NbVVYEog\">《SystemTap新手指南》：<b><a href=\"https://link.zhihu.com/?target=https%3A//spacewander.gitbooks.io/systemtapbeginnersguide_zh/content/index.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">spacewander.gitbooks.io</span><span class=\"invisible\">/systemtapbeginnersguide_zh/content/index.html</span><span class=\"ellipsis\"></span></a></b></li></ul><h3><b>FAQ</b></h3><p data-pid=\"PT0oPiIa\"><b>使用 perf 或者 systemtap 的方式采集数据，会对后台服务有性能影响吗？</b></p><p data-pid=\"eEaKAdqY\">有，但是很小，可以基本忽略不计。</p><p data-pid=\"ZFv0XTib\">它们使用系统的探针或者使用一些自定义的动态探针进行数据采集，第一对代码无侵入性，它既不需要停止服务，也不需要修改应用程序的代码；第二，它们是以内核模块/内核原生的方式跟踪用户态和内核态的所有事件，并通过一系列优化措施，进行采样统计，对目标服务性能影响极小，大概在5%左右或者更低的性能损耗。相较于将进程运行在沙箱的 valgrind 工具或静态调试工具 gdb 来说，动态追踪 perf 或者 systemtap 或者 ebpf 的性能损耗基本可以忽略不计。</p><p data-pid=\"pQI-1fmQ\"><b>目标进程重启后，systemtap 是否需要重新生成内核模块？</b></p><p data-pid=\"mV1Bc3p9\">不需要。甚至同一个 linux 内核版本下的同一个二进制进程（md5值一致），在安装 kernel 调试符号表后，便可以在生成采集指标的内核模块，并且可以多次使用。</p><p data-pid=\"YZSobPwg\">当 linux 内核版本不一致，符号表有变化，需要重新生成内核模块；当目标进程二进制文件重新编译后，也需要重新生成统计用的 systemtap 内核模块。</p><p data-pid=\"ID1BYu6q\">作者：yousali(厉辉)，腾讯 CSIG 后台开发工程师</p><p data-pid=\"XVlguCrf\">更多干货尽在<a href=\"https://www.zhihu.com/org/teng-xun-ji-zhu-gong-cheng\" class=\"internal\">腾讯技术</a>，官方QQ交流群已建立，交流讨论可加：957411539。</p>",
            "voteup_count": 547,
            "column": {
                "id": "tencent-TEG",
                "type": "column",
                "url_token": "tencent-TEG",
                "title": "腾讯技术",
                "url": "https://zhuanlan.zhihu.com/tencent-TEG",
                "created": 1539308333,
                "updated": 1591524894,
                "description": "腾讯技术工程事业群( TEG )的官方知乎号，TEG 是腾讯专注于平台支撑技术研发的事业群，在这里可以了解关于 AI、安全、大数据、云计算、存储、计费、网络 、数据中心等技术的前沿动态，是了解腾讯技术的极佳窗口。",
                "image_url": "https://pica.zhimg.com/v2-10f8ed5afd1e1cd0bfe96034f87d9e6a_720w.jpg?source=d16d100b"
            },
            "comment_count": 10
        },
        "created": "2020-06-12T17:42:33+08:00"
    },
    {
        "content": {
            "id": 607331617,
            "title": "TypeScript 类型技巧 - 联合类型提取和静态类型断言",
            "type": "article",
            "excerpt_title": "《TypeScript 类型技巧》系列精悍短文目标读者是有 TypeScript 基础的同学，每篇总结一个 TypeScript 类型技巧。问题1. 需要联合类型中特定的某一种类型。 type Plan = | { type: &#39;paid&#39;; price: number; } | { type: &#39;free&#39;; limit: number; };2. 进行类型运算时，经常会遇到某个由泛型运算得出的类型，虽然你知道它是个东西，但 TypeScript 认为它不是东西。 就第二个问题而言，TypeScript 不一定错了。但是一般而言遇到复杂类…",
            "url": "https://zhuanlan.zhihu.com/p/607331617",
            "image_url": "",
            "created": 1676665681,
            "updated": 1676665681,
            "author": {
                "id": "6592d2c5a3dddd32d607475fe8493b6c",
                "url_token": "vilicvane",
                "name": "老万",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-7499a1e318a605148f4d4e896a2b0296_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-7499a1e318a605148f4d4e896a2b0296.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/6592d2c5a3dddd32d607475fe8493b6c",
                "user_type": "people",
                "headline": "资深业余前端工程师。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pica.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19550901",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550901",
                                "name": "前端开发",
                                "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "前端开发话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<blockquote data-pid=\"7YDSZccP\">《TypeScript 类型技巧》系列<b>精悍短文</b>目标读者是有 TypeScript 基础的同学，每篇总结一个 TypeScript 类型技巧。</blockquote><h2>问题</h2><p data-pid=\"X24oCSE9\">1. 需要联合类型中特定的某一种类型。</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Plan</span> <span class=\"o\">=</span>\n  <span class=\"o\">|</span> <span class=\"p\">{</span>\n      <span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;paid&#39;</span><span class=\"p\">;</span>\n      <span class=\"nx\">price</span>: <span class=\"kt\">number</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"o\">|</span> <span class=\"p\">{</span>\n      <span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;free&#39;</span><span class=\"p\">;</span>\n      <span class=\"nx\">limit</span>: <span class=\"kt\">number</span><span class=\"p\">;</span>\n    <span class=\"p\">};</span>\n</code></pre></div><p data-pid=\"icWZkoGQ\">2. 进行类型运算时，经常会遇到某个由泛型运算得出的类型，虽然你知道它是个东西，但 TypeScript 认为它不是东西。</p><blockquote data-pid=\"byvw5qS0\">就第二个问题而言，TypeScript 不一定错了。但是一般而言遇到复杂类型运算的场景，工具性的居多，并不需要很 sound。这个时候就需要一些简单快捷地方法绕过去。</blockquote><h2>技巧</h2><p data-pid=\"tib7c9X4\">解决这类问题有两大法宝：<code>extends</code> 和 <code>&amp;</code>。</p><h3>extends</h3><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">ExtractPaidPlan</span><span class=\"p\">&lt;</span><span class=\"nt\">TPlan</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">TPlan</span> <span class=\"kr\">extends</span> <span class=\"p\">{</span><span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;paid&#39;</span><span class=\"p\">}</span> <span class=\"o\">?</span> <span class=\"nx\">TPlan</span> : <span class=\"kt\">never</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">PaidPlan</span> <span class=\"o\">=</span> <span class=\"nx\">ExtractPaidPlan</span><span class=\"p\">&lt;</span><span class=\"nt\">Plan</span><span class=\"p\">&gt;;</span>\n</code></pre></div><blockquote data-pid=\"yIlprx2B\">注意这里多出的 <code>ExtractPaidPlan&lt;TPlan&gt;</code> 是必要的，因为条件类型只会对泛型进行分散。 </blockquote><p data-pid=\"0YTToiq3\">当然实际上很多时候都是直接用 <code>Extract</code>：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">PaidPlan</span> <span class=\"o\">=</span> <span class=\"nx\">Extract</span><span class=\"p\">&lt;</span><span class=\"nt\">Plan</span><span class=\"err\">,</span> <span class=\"p\">{</span><span class=\"na\">type</span><span class=\"err\">:</span> <span class=\"err\">&#39;</span><span class=\"na\">paid</span><span class=\"err\">&#39;</span><span class=\"p\">}&gt;;</span>\n</code></pre></div><h3>&amp;</h3><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">PaidPlan</span> <span class=\"o\">=</span> <span class=\"nx\">Plan</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"kr\">type</span><span class=\"o\">:</span> <span class=\"s1\">&#39;paid&#39;</span><span class=\"p\">};</span>\n</code></pre></div><p data-pid=\"52wuEBBZ\">其实之前我基本上是用的 <code>Extract</code>，最近才反应过来 <code>&amp;</code> 岂不是更方便…不过 <code>&amp;</code> 出来的类型看起来没有那么干净就是了，有时候还会各种类型 <code>&amp;</code> 完最后 <code>extends ... infer</code> 处理下（不过也会额外导入一些奇怪的问题）。 </p><p data-pid=\"S69VWt0y\">祝大家举一反三！</p>",
            "voteup_count": 4,
            "column": {
                "id": "typescript",
                "type": "column",
                "url_token": "typescript",
                "title": "JavaScript in TypeScript",
                "url": "https://zhuanlan.zhihu.com/typescript",
                "created": 1459502882,
                "updated": 1599127796,
                "description": "作为 JavaScript 的超集, TypeScript 本身是一门语言. 但对于使用者而言, TypeScript 更像是 JavaScript 的工具. 写好 TypeScript 离不开扎实的 JavaScript 基础, 而有了扎实的 JavaScript 基础, TypeScript 一定会让你感觉如虎添翼!\n\n欢迎投稿相关文章!",
                "image_url": "https://picx.zhimg.com/9d395fa9f41f5503ba9d69b04e15fd61_720w.jpg?source=d16d100b"
            },
            "comment_count": 0
        },
        "created": "2023-02-18T04:28:01+08:00"
    },
    {
        "content": {
            "id": 606042509,
            "title": "支持多种“介质”转换的 TypeScript 运行时校验方案",
            "type": "article",
            "excerpt_title": "故事比较长，可以先点上 （星星）。 【X-Value】“介质中性”的TypeScript运行时类型库 为什么要造“轮子”当然一方面是因为造轮子是我的生活乐趣之一。在过去的项目中，我们大量使用了 io-ts 来定义 API，利用 io-ts 的特性，可以同时解决静态类型和运行时类型的验证问题：import * as t from &#39;io-ts&#39;; const ObjectIdString = t.refinement( t.string, (value): value is string &amp; {__nominal: &#39;object id string&#39;} =&gt; /^[\\da-f…",
            "url": "https://zhuanlan.zhihu.com/p/606042509",
            "image_url": "",
            "created": 1676304670,
            "updated": 1676381641,
            "author": {
                "id": "6592d2c5a3dddd32d607475fe8493b6c",
                "url_token": "vilicvane",
                "name": "老万",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-7499a1e318a605148f4d4e896a2b0296_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-7499a1e318a605148f4d4e896a2b0296.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/6592d2c5a3dddd32d607475fe8493b6c",
                "user_type": "people",
                "headline": "资深业余前端工程师。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pica.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19550901",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550901",
                                "name": "前端开发",
                                "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "前端开发话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"7Oy47vy5\">故事比较长，可以先点上 （星星）。</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/vilic/x-value\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【X-Value】“介质中性”的TypeScript运行时类型库</a><h2>为什么要造“轮子”</h2><blockquote data-pid=\"eOHFawY5\">当然一方面是因为造轮子是我的生活乐趣之一。</blockquote><p data-pid=\"6eYF8_C3\">在过去的项目中，我们大量使用了 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/gcanti/io-ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">io-ts</a> 来定义 API，利用 io-ts 的特性，可以同时解决静态类型和运行时类型的验证问题：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"kr\">as</span> <span class=\"nx\">t</span> <span class=\"kr\">from</span> <span class=\"s1\">&#39;io-ts&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">ObjectIdString</span> <span class=\"o\">=</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">refinement</span><span class=\"p\">(</span>\n  <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">value</span> <span class=\"k\">is</span> <span class=\"kt\">string</span> <span class=\"o\">&amp;</span> <span class=\"p\">{</span><span class=\"nx\">__nominal</span><span class=\"o\">:</span> <span class=\"s1\">&#39;object id string&#39;</span><span class=\"p\">}</span> <span class=\"o\">=&gt;</span>\n    <span class=\"sr\">/^[\\da-f]{24}$/</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">),</span>\n<span class=\"p\">);</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">update_profile</span> <span class=\"o\">=</span> <span class=\"nx\">define</span><span class=\"p\">(</span>\n  <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"kr\">type</span><span class=\"p\">({</span>\n    <span class=\"nx\">id</span>: <span class=\"kt\">ObjectIdString</span><span class=\"p\">,</span>\n    <span class=\"nx\">name</span>: <span class=\"kt\">t.string</span><span class=\"p\">,</span>\n    <span class=\"nx\">description</span>: <span class=\"kt\">t.description</span><span class=\"p\">,</span>\n  <span class=\"p\">}),</span>\n  <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"k\">void</span><span class=\"p\">,</span>\n<span class=\"p\">);</span>\n</code></pre></div><p data-pid=\"QiDWHiJH\">其中的 <code>ObjectIdString</code> 是 <code>string</code> 的 refinement（精炼、细化），但实际使用中我们的需求不止如此：理想情况下，我们希望不仅能对 <code>id</code> 的字符串进行检测，还能将其自动转换为 <code>ObjectId</code>。 </p><p data-pid=\"hl2C1VYI\">在 io-ts 中，对应了 input 和 output 概念来处理相似的问题，实际上每一个 io-ts 的 <code>Type</code> 实例泛型都有三部分：<code>A</code>、<code>I</code>、<code>O</code>。其中 <code>A</code> 是默认类型，<code>I</code> 和 <code>O</code> 分别对应了 input 和 output。如果要实现 <code>ObjectId</code> 的自动转换，可以这样：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">ObjectId</span> <span class=\"kr\">as</span> <span class=\"nx\">BSONObjectId</span><span class=\"p\">}</span> <span class=\"kr\">from</span> <span class=\"s1\">&#39;bson&#39;</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"kr\">as</span> <span class=\"nx\">t</span> <span class=\"kr\">from</span> <span class=\"s1\">&#39;io-ts&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">ObjectId</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">Type</span><span class=\"p\">&lt;</span><span class=\"nt\">BSONObjectId</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">string</span><span class=\"p\">&gt;(</span>\n  <span class=\"s1\">&#39;ObjectId&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">value</span> <span class=\"k\">is</span> <span class=\"nx\">BSONObjectId</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">value</span> <span class=\"k\">instanceof</span> <span class=\"nx\">BSONObjectId</span><span class=\"p\">,</span>\n  <span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">,</span> <span class=\"nx\">context</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n    <span class=\"k\">typeof</span> <span class=\"nx\">input</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;string&#39;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">BSONObjectId</span><span class=\"p\">.</span><span class=\"nx\">isValid</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">)</span>\n      <span class=\"o\">?</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">success</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">BSONObjectId</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">))</span>\n      <span class=\"o\">:</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">failure</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">,</span> <span class=\"nx\">context</span><span class=\"p\">),</span>\n  <span class=\"nx\">value</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">t</span><span class=\"p\">.</span><span class=\"nx\">success</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">toHexString</span><span class=\"p\">()),</span>\n<span class=\"p\">);</span>\n</code></pre></div><p data-pid=\"lTk_G6Y5\">细心的同学可以发现，虽然 io-ts 中区分了 input 和 output 类型，但设计上这两者通常都是一致的：都表示了某类值在同一种不同于当前环境的“介质”中的类型。通过单独的 input 类型，可以给使用者更大的灵活性，支持更宽松的输入数据（比如从 query string 中读到的值都是 string，但实际上可能需要先转换为 number）。</p><p data-pid=\"yeM-rO8K\"><b>但是，这种抽象是存在一定限制的：</b></p><ol><li data-pid=\"4JmHxlme\">它假定了这些定义的 <code>Type</code> 只会在相同、或者相似的环境中使用（比如服务器端）。 </li><li data-pid=\"xTb_-qRq\">同一个 <code>Type</code> 只能与一种其他“介质”进行转换。</li></ol><p data-pid=\"_wllyCW3\">而在实际使用中：我们可能希望 <code>ObjectId</code> 在浏览器中以是 string，在 API 参数中是 string，但是在服务器上使用时是 ObjectId；与此同时，我们又希望 <code>Date</code> 在 API 参数中是 string，但浏览器和服务器中都是 Date。</p><p data-pid=\"6-Olvp2z\">也就是说，理想情况下，我们需要的其实是同一个类型的值，可以根据自身表达的需要，在不同“介质”中以不同的值类型存在。</p><p data-pid=\"zlYSVlyy\">以上也是我另起炉灶搞 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/vilic/x-value\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">X-Value</a> 的主要原因。 </p><h2>使用 X-Value 处理“介质”间转换</h2><p data-pid=\"czqFQfgM\">同样还是以 <code>ObjectId</code> 和 <code>Date</code> 为例，使用 X-Value 定义好原子类型（<code>ObjectId</code>）和介质（<code>xDataMedium</code>、<code>xQueryMedium</code>、<code>xServerMedium</code>）后，只需要定义一次数据类型（<code>Payload</code>），就能统一在特定的节点（通常是各类 API 调用）完成数据转换，避免遗漏。</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"kr\">as</span> <span class=\"nx\">x</span> <span class=\"kr\">from</span> <span class=\"s1\">&#39;x-value&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">xDataMedium</span><span class=\"p\">,</span> <span class=\"nx\">xQueryMedium</span><span class=\"p\">,</span> <span class=\"nx\">xServerMedium</span><span class=\"p\">}</span> <span class=\"kr\">from</span> <span class=\"s1\">&#39;./mediums&#39;</span><span class=\"p\">;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">ObjectId</span><span class=\"p\">}</span> <span class=\"kr\">from</span> <span class=\"s1\">&#39;./types&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">Payload</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"kt\">object</span><span class=\"p\">({</span>\n  <span class=\"nx\">id</span>: <span class=\"kt\">ObjectId</span><span class=\"p\">,</span>\n  <span class=\"nx\">date</span>: <span class=\"kt\">x.Date</span><span class=\"p\">,</span>\n  <span class=\"nx\">limit</span>: <span class=\"kt\">x.number</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">DATA_PAYLOAD</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;000000000000000000000000&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">date</span><span class=\"o\">:</span> <span class=\"s1\">&#39;1970-01-01T00:00:00.000Z&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">limit</span>: <span class=\"kt\">100</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">QUERY_PAYLOAD</span> <span class=\"o\">=</span>\n  <span class=\"s1\">&#39;id=000000000000000000000000&amp;date=1970-01-01T00:00:00.000Z&amp;limit=100&#39;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">SERVER_PAYLOAD</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">id</span>: <span class=\"kt\">new</span> <span class=\"nx\">ObjectId</span><span class=\"p\">(</span><span class=\"s1\">&#39;000000000000000000000000&#39;</span><span class=\"p\">),</span>\n  <span class=\"nx\">date</span>: <span class=\"kt\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"s1\">&#39;1970-01-01T00:00:00.000Z&#39;</span><span class=\"p\">),</span>\n  <span class=\"nx\">limit</span>: <span class=\"kt\">100</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">CLIENT_PAYLOAD</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">id</span><span class=\"o\">:</span> <span class=\"s1\">&#39;000000000000000000000000&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">date</span>: <span class=\"kt\">new</span> <span class=\"nb\">Date</span><span class=\"p\">(</span><span class=\"s1\">&#39;1970-01-01T00:00:00.000Z&#39;</span><span class=\"p\">),</span>\n  <span class=\"nx\">limit</span>: <span class=\"kt\">100</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 服务器端解析 API 参数（data object）\n</span><span class=\"c1\"></span><span class=\"nx\">expect</span><span class=\"p\">(</span>\n  <span class=\"nx\">Payload</span><span class=\"p\">.</span><span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">xDataMedium</span><span class=\"p\">,</span> <span class=\"nx\">xServerMedium</span><span class=\"p\">,</span> <span class=\"nx\">DATA_PAYLOAD</span><span class=\"p\">),</span>\n<span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span>\n  <span class=\"nx\">SERVER_PAYLOAD</span><span class=\"p\">,</span>\n<span class=\"p\">);</span>\n\n<span class=\"c1\">// 服务器端解析 API 参数（query string）\n</span><span class=\"c1\"></span><span class=\"nx\">expect</span><span class=\"p\">(</span>\n  <span class=\"nx\">Payload</span><span class=\"p\">.</span><span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">xQueryMedium</span><span class=\"p\">,</span> <span class=\"nx\">xServerMedium</span><span class=\"p\">,</span> <span class=\"nx\">QUERY_PAYLOAD</span><span class=\"p\">),</span>\n<span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span>\n  <span class=\"nx\">SERVER_PAYLOAD</span><span class=\"p\">,</span>\n<span class=\"p\">);</span>\n\n<span class=\"c1\">// 服务器端序列化 API 数据\n</span><span class=\"c1\"></span><span class=\"nx\">expect</span><span class=\"p\">(</span>\n  <span class=\"nx\">Payload</span><span class=\"p\">.</span><span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">xServerMedium</span><span class=\"p\">,</span> <span class=\"nx\">xDataMedium</span><span class=\"p\">,</span> <span class=\"nx\">SERVER_PAYLOAD</span><span class=\"p\">),</span>\n<span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span>\n  <span class=\"nx\">DATA_PAYLOAD</span><span class=\"p\">,</span>\n<span class=\"p\">);</span>\n\n<span class=\"c1\">// 客户端解析 API 数据\n</span><span class=\"c1\"></span><span class=\"nx\">expect</span><span class=\"p\">(</span>\n  <span class=\"nx\">Payload</span><span class=\"p\">.</span><span class=\"nx\">transform</span><span class=\"p\">(</span><span class=\"nx\">xDataMedium</span><span class=\"p\">,</span> <span class=\"nx\">xClient</span><span class=\"p\">,</span> <span class=\"nx\">DATA_PAYLOAD</span><span class=\"p\">),</span>\n<span class=\"p\">).</span><span class=\"nx\">toEqual</span><span class=\"p\">(</span>\n  <span class=\"nx\">CLIENT_PAYLOAD</span><span class=\"p\">,</span>\n<span class=\"p\">);</span>\n</code></pre></div><p data-pid=\"kVXAB_0X\">当然，除开各种 <code>transform</code>/<code>encode</code>/<code>decode</code> 都是类型安全的以外，也支持通过类型运算获得静态类型：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Payload</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">TypeOf</span><span class=\"p\">&lt;</span><span class=\"nt\">typeof</span> <span class=\"na\">Payload</span><span class=\"p\">&gt;;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">PayloadInData</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">MediumTypeOf</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;x-data&#39;</span><span class=\"p\">,</span> <span class=\"k\">typeof</span> <span class=\"nx\">Payload</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">PayloadInServer</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">MediumTypeOf</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;x-server&#39;</span><span class=\"p\">,</span> <span class=\"k\">typeof</span> <span class=\"nx\">Payload</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div><h2>简单数据校验</h2><p data-pid=\"lfAtj3AQ\">X-Value 的类型间转换是通过一个特别的“value”概念实现的，其他“介质”中的值 decode 后成为“value”，重新再 encode 后又成为了其他“介质”中的值。所以上面的 <code>transform</code> 其实就是一组 decode + encode。</p><p data-pid=\"XoLiCalt\">实际上，单纯作为运行时类型校验库使用时，我们通常只需要至多一种“介质”（比如 <code>x.extendedJSONValue</code>），甚至数据简单时直接使用“value”验证即可：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">Config</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"kt\">object</span><span class=\"p\">({</span><span class=\"cm\">/* ... */</span><span class=\"p\">});</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">rawConfig</span> <span class=\"o\">=</span> <span class=\"kr\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;path-to-config&#39;</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 作为 extended json value 读入\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"nx\">Config</span><span class=\"p\">.</span><span class=\"nx\">decode</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">extendedJSONValue</span><span class=\"p\">,</span> <span class=\"nx\">rawConfig</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 直接验证值\n</span><span class=\"c1\"></span><span class=\"nx\">Config</span><span class=\"p\">.</span><span class=\"nx\">satisfies</span><span class=\"p\">(</span><span class=\"nx\">rawConfig</span><span class=\"p\">);</span>\n</code></pre></div><h2>First-class Nominal Type（nominal 类型是一等公民）</h2><p data-pid=\"eG-nWqZJ\">作为资深 TypeScript 类型体操运动员，无处不在的 nominal 类型是不可避免地，其中最常见的场景应该就是各种 id 了：比如同样是 <code>ObjectId</code>，可以有 <code>UserId</code>、<code>MessageId</code>、<code>ChannelId</code> 等。 </p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">UserId</span> <span class=\"o\">=</span> <span class=\"nx\">ObjectId</span><span class=\"p\">.</span><span class=\"nx\">nominal</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;user id&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"kr\">const</span> <span class=\"nx\">MessageId</span> <span class=\"o\">=</span> <span class=\"nx\">ObjectId</span><span class=\"p\">.</span><span class=\"nx\">nominal</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;message id&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n<span class=\"kr\">const</span> <span class=\"nx\">ChannelId</span> <span class=\"o\">=</span> <span class=\"nx\">ObjectId</span><span class=\"p\">.</span><span class=\"nx\">nominal</span><span class=\"o\">&lt;</span><span class=\"s1\">&#39;channel id&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n</code></pre></div><p data-pid=\"hisrm9ag\">X-Value 会在各种转换中保留 nominal 信息，确保类型强迫症得到满足（同时避免一些低级错误）。</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">User</span> <span class=\"o\">=</span> <span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"kt\">object</span><span class=\"p\">({</span>\n  <span class=\"nx\">id</span>: <span class=\"kt\">UserId</span><span class=\"p\">,</span>\n  <span class=\"nx\">name</span>: <span class=\"kt\">x.string</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">encode</span><span class=\"p\">(</span><span class=\"nx\">xServerMedium</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"cm\">/* ... */</span><span class=\"p\">});</span> <span class=\"c1\">// id 为 x.Nominal&lt;ObjectId, &#39;user id&#39;&gt;;\n</span><span class=\"c1\"></span><span class=\"nx\">User</span><span class=\"p\">.</span><span class=\"nx\">encode</span><span class=\"p\">(</span><span class=\"nx\">xClientMedium</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"cm\">/* ... */</span><span class=\"p\">});</span> <span class=\"c1\">// id 为 x.Nominal&lt;string, &#39;object id&#39; | &#39;user id&#39;&gt;;\n</span></code></pre></div><h2>全面 100% 测试覆盖率</h2><p data-pid=\"a6cbdr2s\">X-Value 是我的重点项目之一，坚持 100% statements/branches/functions/lines 测试覆盖率。并且作为失业程序员，有充裕的时间修复或者解答大家的问题，欢迎同学们吃螃蟹。 </p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/vilic/x-value\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【X-Value】“介质中性”的TypeScript运行时类型库</a><p></p>",
            "voteup_count": 24,
            "column": {
                "id": "typescript",
                "type": "column",
                "url_token": "typescript",
                "title": "JavaScript in TypeScript",
                "url": "https://zhuanlan.zhihu.com/typescript",
                "created": 1459502882,
                "updated": 1599127796,
                "description": "作为 JavaScript 的超集, TypeScript 本身是一门语言. 但对于使用者而言, TypeScript 更像是 JavaScript 的工具. 写好 TypeScript 离不开扎实的 JavaScript 基础, 而有了扎实的 JavaScript 基础, TypeScript 一定会让你感觉如虎添翼!\n\n欢迎投稿相关文章!",
                "image_url": "https://pic1.zhimg.com/9d395fa9f41f5503ba9d69b04e15fd61_720w.jpg?source=d16d100b"
            },
            "comment_count": 1
        },
        "created": "2023-02-14T00:11:10+08:00"
    },
    {
        "content": {
            "id": 604776218,
            "title": "Cloudflare Workers 和微前端：为彼此而生",
            "type": "article",
            "excerpt_title": "编者按：本文作者是蚂蚁集团前端工程师有知，介绍了 Cloudflare 提出的一种「新的」微前端方案以及其极致的首屏优化背后的实现原理。 [图片] PS：关注过 Angular 的同学应该对 Igor Minar 这个名字不陌生，他是 AngularJS/Angular 的 co-founder 之一，并长期担任 Angular Team 的 Tech Leader 负责 Angular 团队的整体运转，2021 年 11 月离开了工作 12 年的 Google 去了 Cloudflare。本文主要为大家介绍下 Cloudflare 提出的一种「新…",
            "url": "https://zhuanlan.zhihu.com/p/604776218",
            "image_url": "https://pic1.zhimg.com/v2-bbd9fdf81df2106ffa12782531b8ee6e_r.jpg?source=172ae18b",
            "created": 1675914422,
            "updated": 1675914926,
            "author": {
                "id": "ebcda606c0482f05b1294ea7ba39bf41",
                "url_token": "antdx",
                "name": "支付宝体验科技",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-03d922960af182d25f974b188b7674ce_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-03d922960af182d25f974b188b7674ce.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/ebcda606c0482f05b1294ea7ba39bf41",
                "user_type": "people",
                "headline": "探索极致用户体验与最佳工程实践",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1657685279
            },
            "comment_permission": "all",
            "content": "<blockquote data-pid=\"5FiOQSVF\">编者按：本文作者是蚂蚁集团前端工程师有知，介绍了 Cloudflare 提出的一种「新的」微前端方案以及其极致的首屏优化背后的实现原理。</blockquote><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a67aface37b2c5717b8e4f6159716b97_b.jpg\" data-size=\"normal\" data-rawwidth=\"1640\" data-rawheight=\"846\" class=\"origin_image zh-lightbox-thumb\" width=\"1640\" data-original=\"https://pic4.zhimg.com/v2-a67aface37b2c5717b8e4f6159716b97_r.jpg\" data-original-token=\"v2-24ad2b774d5a54fed69d261ddeb25cc6\"/><figcaption>image.png</figcaption></figure><p data-pid=\"iTAkyusX\"><i>PS：关注过 Angular 的同学应该对 Igor Minar 这个名字不陌生，他是 AngularJS/Angular 的 co-founder 之一，并长期担任 Angular Team 的 Tech Leader 负责 Angular 团队的整体运转，2021 年 11 月离开了工作 12 年的 Google 去了 Cloudflare。</i></p><p data-pid=\"_vDxjCwz\">本文主要为大家介绍下 Cloudflare 提出的一种「新的」微前端方案以及其<b>极致的首屏优化</b>背后的实现原理，有兴趣的同学也可以直接去看 Cloudflare 的原文：</p><ul><li data-pid=\"dIXYFGqR\"> Cloudflare Workers 和微前端：为彼此而生 <a href=\"https://link.zhihu.com/?target=https%3A//blog.cloudflare.com/zh-cn/better-micro-frontends-zh-cn/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.cloudflare.com/zh-</span><span class=\"invisible\">cn/better-micro-frontends-zh-cn/</span><span class=\"ellipsis\"></span></a>  <br/> </li><li data-pid=\"ctAgAiO7\"> 通过 Cloudflare Workers 增加采用微前端 <a href=\"https://link.zhihu.com/?target=https%3A//blog.cloudflare.com/zh-cn/fragment-piercing-zh-cn/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.cloudflare.com/zh-</span><span class=\"invisible\">cn/fragment-piercing-zh-cn/</span><span class=\"ellipsis\"></span></a><br/> </li></ul><h2>客户端微前端方案的问题</h2><p data-pid=\"1jvmMEOU\">文章中首先指出了当前常见的客户端微前端方案的问题：</p><ul><li data-pid=\"wFdQoucf\">Module Federation：共享库本身不能与微应用一起做构建时 tree-shaking。</li><li data-pid=\"YNLdDZq_\">Module Federation：共享库本身会带来隐式的耦合，版本升级会变得非常麻烦。<b>这也是 qiankun 不推荐用 externals 的方式来复用依赖的原因。</b></li><li data-pid=\"PWP5LDjt\">瀑布式请求：必须等顶层的主应用启动之后，才能开始启动微应用，微应用才能发起请求，导致运行时间进一步被延时。<b>这个是微前端方案首屏慢的最根本原因。</b></li><li data-pid=\"2xKl83NT\">hydration delay：即便我们加上了服务端渲染（SSR），用户的首屏虽然快了，但仍然需要等待客户端框架完成 hydration 之后才能开始交互。</li></ul><h2>Cloudflare 的片段架构（Fragments Architecture）</h2><p data-pid=\"L21AJpFG\">为解决这些问题，Cloudflare 提出了他们针对微前端的片段架构： </p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9a34d85360f12067d6b049abee7313d6_b.jpg\" data-size=\"normal\" data-rawwidth=\"990\" data-rawheight=\"417\" class=\"origin_image zh-lightbox-thumb\" width=\"990\" data-original=\"https://pic3.zhimg.com/v2-9a34d85360f12067d6b049abee7313d6_r.jpg\" data-original-token=\"v2-7c6a6c19c0ba7a9b065bfb0a4591d46f\"/><figcaption>image.png</figcaption></figure><p data-pid=\"RGR-DChq\"> 整个渲染流里有几个关键要素：</p><ul><li data-pid=\"ANRO8xhH\">应用程序由一颗片段树组成</li><li data-pid=\"x0ZnnS25\">浏览器向根片段发起请求，根片段与子片段通信，生成最终响应</li><li data-pid=\"p1WEy9He\">每个片段运行在独立的 worker 中</li><li data-pid=\"WBY86R3y\"><b>整个响应过程都是 并行 + 流式的</b></li></ul><h3>优势</h3><p data-pid=\"3W0lvp3z\">片段架构的主要优势有这些：</p><ul><li data-pid=\"ISHtoUGX\">安全性：前置的关键接口请求都是在服务端 worker 中进行，不用担心前端敏感代码泄露的问题</li><li data-pid=\"7gOB3Iz1\">基于 Worker 的服务端渲染：SSR + CDN 加持，Lighthouse 评分极高</li><li data-pid=\"rNUEkWH1\">尽早交互（Eager interactivity）：不用等框架走完 hydration 流程，响应回来浏览器渲染开始就能开始交互（实际需要框架配合，比如 demo 里的 Qwik）</li></ul><h2>实现原理</h2><p data-pid=\"c1qoPpZO\">先看下 <a href=\"https://link.zhihu.com/?target=https%3A//productivity-suite.web-experiments.workers.dev/login\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Demo</a> 的最终效果： </p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f165acc17d852505ec35627794e4c7e3_b.gif\" data-size=\"normal\" data-rawwidth=\"1278\" data-rawheight=\"728\" data-thumbnail=\"https://pic4.zhimg.com/v2-f165acc17d852505ec35627794e4c7e3_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1278\" data-original=\"https://pic4.zhimg.com/v2-f165acc17d852505ec35627794e4c7e3_r.jpg\" data-original-token=\"v2-f165acc17d852505ec35627794e4c7e3\"/><figcaption>Kapture 2023-01-29 at 23.57.17.gif</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-02bb743226da63f1aa9d8de29caf8df4_b.gif\" data-size=\"normal\" data-rawwidth=\"1278\" data-rawheight=\"728\" data-thumbnail=\"https://pic1.zhimg.com/v2-02bb743226da63f1aa9d8de29caf8df4_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1278\" data-original=\"https://pic1.zhimg.com/v2-02bb743226da63f1aa9d8de29caf8df4_r.jpg\" data-original-token=\"v2-02bb743226da63f1aa9d8de29caf8df4\"/><figcaption>Kapture 2023-01-29 at 23.41.57.gif</figcaption></figure><p data-pid=\"rtGEp0hS\"> 这里面有几点特性值得关注：</p><ol><li data-pid=\"KEbxM5zb\"><b>首屏会首先返回页面的 critical 部分内容</b>，且渲染出来是可以立即交互的。比如 Login 页面的中间表单部分，Todos 页面的列表部分。</li><li data-pid=\"C4T2N5gr\">所有的渲染都是流式的，<b>包括客户端路由切换引发的重新渲染</b></li></ol><p data-pid=\"7ijNY4Jw\">整体架构如下图，本文将会通过问题来解构，看看 Cloudflare 是如何基于 Worker 来实现更优异性能表现的微前端的。 </p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b4680bf12efe66565b6fa3d117801f10_b.jpg\" data-size=\"normal\" data-rawwidth=\"2166\" data-rawheight=\"1520\" class=\"origin_image zh-lightbox-thumb\" width=\"2166\" data-original=\"https://pic1.zhimg.com/v2-b4680bf12efe66565b6fa3d117801f10_r.jpg\" data-original-token=\"v2-bcbcde9abf6ad96d3b78f35f6dbed775\"/><figcaption>image.png</figcaption></figure><p data-pid=\"J92nCMSj\"> Demo 源码: </p><h3>1. 如何实现流式聚合响应</h3><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-05a89f3038aab076a9a738039dd84664_b.jpg\" data-size=\"normal\" data-rawwidth=\"1999\" data-rawheight=\"974\" class=\"origin_image zh-lightbox-thumb\" width=\"1999\" data-original=\"https://pic1.zhimg.com/v2-05a89f3038aab076a9a738039dd84664_r.jpg\" data-original-token=\"v2-3499084ea1e0ae0e08de1bf664501ee1\"/><figcaption>image.png</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>Gateway Worker</h3><p data-pid=\"_XAGuzyK\">所有流量的入口是一个 gateway worker，gateway worker 的作用是用来分发流量，包括稳定流量、静态资源流量等。本质就是一个实现了 fetch 的 Cloudflare Worker。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"nx\">async</span> <span class=\"p\">(</span>\n  <span class=\"nx\">request</span><span class=\"o\">:</span> <span class=\"nx\">Request</span><span class=\"p\">,</span>\n  <span class=\"nx\">env</span><span class=\"o\">:</span> <span class=\"nx\">Env</span><span class=\"p\">,</span>\n  <span class=\"nx\">ctx</span><span class=\"o\">:</span> <span class=\"nx\">ExecutionContext</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">Response</span><span class=\"o\">&gt;</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">validateFragmentConfigs</span><span class=\"p\">(</span><span class=\"nx\">env</span><span class=\"p\">);</span>\n\n  <span class=\"nx\">request</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">createSSRMessageBusAndUpdateRequest</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">env</span><span class=\"p\">,</span> <span class=\"nx\">ctx</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// 分发 Fragment 静态资源\n</span><span class=\"c1\"></span>  <span class=\"kr\">const</span> <span class=\"nx\">fragmentResponse</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleFragmentFetch</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">env</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">fragmentResponse</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">fragmentResponse</span><span class=\"p\">;</span>\n\n  <span class=\"kr\">const</span> <span class=\"nx\">fragmentAssetResponse</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleFragmentAssetFetch</span><span class=\"p\">(</span>\n    <span class=\"nx\">request</span><span class=\"p\">,</span>\n    <span class=\"nx\">env</span>\n  <span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">fragmentAssetResponse</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">fragmentAssetResponse</span><span class=\"p\">;</span>\n\n  <span class=\"c1\">// 聚合流式响应\n</span><span class=\"c1\"></span>  <span class=\"kr\">const</span> <span class=\"nx\">htmlResponse</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">handleHtmlRequest</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">env</span><span class=\"p\">,</span> <span class=\"nx\">ctx</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">htmlResponse</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">htmlResponse</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">forwardFetchToBaseApp</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">env</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre></div><p data-pid=\"h4yxrlFl\">重点是 handleHtmlRequest 这里，这里会将当前访问 url 需要的 Fragments 流聚合成一个流：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 聚合 legacy index.html 和 Fragments html\n</span><span class=\"c1\"></span><span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">returnCombinedIndexPage</span><span class=\"p\">(</span>\n  <span class=\"nx\">indexBody</span><span class=\"p\">,</span>\n  <span class=\"nx\">concatenateStreams</span><span class=\"p\">(</span><span class=\"nx\">fragmentStreamsToInclude</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">concatenateStreams</span><span class=\"p\">(</span><span class=\"nx\">streams</span><span class=\"o\">:</span> <span class=\"nx\">ReadableStream</span><span class=\"p\">[])</span><span class=\"o\">:</span> <span class=\"nx\">ReadableStream</span> <span class=\"p\">{</span>\n  <span class=\"nx\">async</span> <span class=\"kd\">function</span> <span class=\"nx\">writeStreams</span><span class=\"p\">(</span>\n    <span class=\"nx\">writer</span><span class=\"o\">:</span> <span class=\"nx\">WritableStreamDefaultWriter</span>\n  <span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kr\">const</span> <span class=\"nx\">stream</span> <span class=\"k\">of</span> <span class=\"nx\">streams</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">reader</span> <span class=\"o\">=</span> <span class=\"nx\">stream</span><span class=\"p\">.</span><span class=\"nx\">getReader</span><span class=\"p\">();</span>\n        <span class=\"kd\">let</span> <span class=\"nx\">chunk</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">read</span><span class=\"p\">();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">chunk</span><span class=\"p\">.</span><span class=\"nx\">done</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">writer</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n          <span class=\"nx\">chunk</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">reader</span><span class=\"p\">.</span><span class=\"nx\">read</span><span class=\"p\">();</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">writer</span><span class=\"p\">.</span><span class=\"nx\">close</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"o\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">writer</span><span class=\"p\">.</span><span class=\"nx\">abort</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">writable</span><span class=\"p\">,</span> <span class=\"nx\">readable</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">TransformStream</span><span class=\"p\">();</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">writer</span> <span class=\"o\">=</span> <span class=\"nx\">writable</span><span class=\"p\">.</span><span class=\"nx\">getWriter</span><span class=\"p\">();</span>\n  <span class=\"nx\">writeStreams</span><span class=\"p\">(</span><span class=\"nx\">writer</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">readable</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"ed7F0rqP\">只需要确保 legacy index.html 是第一个响应，其他 Fragments 流的顺序无所谓。最后出来的响应： </p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-30bcf0e937b84cdabc83b3c6c2993b84_b.jpg\" data-size=\"normal\" data-rawwidth=\"1696\" data-rawheight=\"632\" class=\"origin_image zh-lightbox-thumb\" width=\"1696\" data-original=\"https://pic1.zhimg.com/v2-30bcf0e937b84cdabc83b3c6c2993b84_r.jpg\" data-original-token=\"v2-456e2f211f9703b1f809e410b50aadce\"/><figcaption>image.png</figcaption></figure><p data-pid=\"zO6o9qY4\"> 每个 Fragment 由 <code>piercing-fragment-host</code> 标签包裹，每个标签内都是一个完整的 HTML 字符串（含 head、body 部分）。 <b>有似曾相识的感觉吗？</b></p><h3>2. 如何确保先渲染的 Fragment 流能渲染到正确的位置</h3><p data-pid=\"LpB_m2g8\"><b>这个主要作用是将首屏最先需要交互的片段渲染出来，并渲染到正确的位置，比如一个 Login 页面的中间表单部分。而不是按照完整的页面结构渲染。</b> 总共分两步：</p><ol><li data-pid=\"hdLFs6D7\">原始渲染的 Fragment 本身就是包含 UI 且可响应的（借助 Qwik），本身由<code>piercing-fragment-host</code> 这个统一的 web component 负责组件激活。每一个 Fragment 在注册之初便有基础样式，这些基础样式用于确保首屏的 Fragment 在客户端 hydration 之后不会出现视觉闪烁或者失焦。</li><li data-pid=\"SRbvt9Xu\">Legacy App 会后置渲染出<code>piercing-fragment-outlet</code>组件，当组件激活后，会将对应的<code>piercing-fragment-host</code>移动到 outlet 对应的 DOM 树里。</li></ol><h3>片段穿孔</h3><p data-pid=\"1xasXIXZ\">片段穿孔指的便是上述的两步流程，作用就是如何将新的 Fragment 动态的整合到 Legacy 应用中。其中有两个重要的 web component 组件，<code>piercing-fragment-host</code>和<code>piercing-fragment-outlet</code>。</p><h3><code>piercing-fragment-host</code></h3><p data-pid=\"CiRQDGRK\">Fragment 整个 HTML 的片段宿主，如首屏响应可能长这样：</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;root&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">piercing-fragment-host</span> <span class=\"na\">fragment-id</span><span class=\"o\">=</span><span class=\"s\">&#34;todos&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&#34;module&#34;</span> <span class=\"na\">crossorigin</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;/_fragment/todos/assets/index.3a0c2f77.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span><span class=\"o\">...</span><span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;todos-fragment-root&#34;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">piercing-fragment-host</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p data-pid=\"1CKYXdZ7\">Legacy 应用的 root 节点还未渲染，但是 todos Fragment 的内容已经通过 ssr 响应正常渲染出来了。 <b>这里有一个细节处理，跟 qiankun 的方案一毛一样</b>，谁能看出来是用来处理什么场景的？</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">private</span> <span class=\"nx\">setStylesEmbeddingObserver</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stylesEmbeddingObserver</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">MutationObserver</span><span class=\"p\">((</span><span class=\"nx\">mutationsList</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">elementsHaveBeenAdded</span> <span class=\"o\">=</span> <span class=\"nx\">mutationsList</span><span class=\"p\">.</span><span class=\"nx\">some</span><span class=\"p\">((</span><span class=\"nx\">mutationRecord</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kr\">const</span> <span class=\"nx\">addedNode</span> <span class=\"k\">of</span> <span class=\"nx\">mutationRecord</span><span class=\"p\">.</span><span class=\"nx\">addedNodes</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">addedNode</span><span class=\"p\">.</span><span class=\"nx\">nodeType</span> <span class=\"o\">===</span> <span class=\"nx\">Node</span><span class=\"p\">.</span><span class=\"nx\">ELEMENT_NODE</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n    <span class=\"p\">});</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">elementsHaveBeenAdded</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// if any element has been added then we need to make sure that\n</span><span class=\"c1\"></span>      <span class=\"c1\">// there aren&#39;t external css links (and embed them if there are)\n</span><span class=\"c1\"></span>      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">embedStyles</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">stylesEmbeddingObserver</span><span class=\"p\">.</span><span class=\"nx\">observe</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">childList</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nx\">subtree</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">private</span> <span class=\"nx\">embedStyles</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"o\">&lt;</span><span class=\"nx\">HTMLStyleElement</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;link[href][rel=&#34;stylesheet&#34;]&#39;</span>\n  <span class=\"p\">).</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">styleLink</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">styleLink</span><span class=\"p\">.</span><span class=\"nx\">sheet</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">rulesText</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">cssText</span> <span class=\"p\">}</span> <span class=\"k\">of</span> <span class=\"nx\">styleLink</span><span class=\"p\">.</span><span class=\"nx\">sheet</span><span class=\"p\">.</span><span class=\"nx\">cssRules</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">rulesText</span> <span class=\"o\">+=</span> <span class=\"nx\">cssText</span> <span class=\"o\">+</span> <span class=\"s2\">&#34;\\n&#34;</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">styleElement</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">&#34;style&#34;</span><span class=\"p\">);</span>\n      <span class=\"nx\">styleElement</span><span class=\"p\">.</span><span class=\"nx\">textContent</span> <span class=\"o\">=</span> <span class=\"nx\">rulesText</span><span class=\"p\">;</span>\n      <span class=\"nx\">styleLink</span><span class=\"p\">.</span><span class=\"nx\">replaceWith</span><span class=\"p\">(</span><span class=\"nx\">styleElement</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div><h3><code>piercing-fragment-outlet</code></h3><p data-pid=\"khq4UpS2\">Legacy App 渲染时会提供的 web component，当它开始激活时，会去 dom 树中寻找对应 Fragment ID 的 host 节点，并将其移动到正确的位置。 比如激活前：</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;root&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">main</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;todo-page&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">piercing-fragment-outlet</span> <span class=\"na\">fragment-id</span><span class=\"o\">=</span><span class=\"s\">&#34;todos&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">piercing-fragment-outlet</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">main</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">piercing-fragment-host</span> <span class=\"na\">fragment-id</span><span class=\"o\">=</span><span class=\"s\">&#34;todos&#34;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">piercing-fragment-host</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p data-pid=\"61uTmaxT\">激活后：</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#34;root&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">main</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;todo-page&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">piercing-fragment-outlet</span> <span class=\"na\">fragment-id</span><span class=\"o\">=</span><span class=\"s\">&#34;todos&#34;</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">piercing-fragment-host</span> <span class=\"na\">fragment-id</span><span class=\"o\">=</span><span class=\"s\">&#34;todos&#34;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">piercing-fragment-host</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">piercing-fragment-outlet</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">main</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span></code></pre></div><p data-pid=\"zyTXKLA6\">为了避免 DOM 树移动过程中产生的视觉闪烁或者失焦，每个 Fragment 在注册之前必须提供一些基础样式，比如 todos Fragment 的基础样式是整个 DOM 渲染在屏幕的中心区域：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">gateway</span><span class=\"p\">.</span><span class=\"nx\">registerFragment</span><span class=\"p\">({</span>\n  <span class=\"nx\">fragmentId</span><span class=\"o\">:</span> <span class=\"s2\">&#34;todos&#34;</span><span class=\"p\">,</span>\n  <span class=\"nx\">prePiercingStyles</span><span class=\"o\">:</span> <span class=\"sb\">`\n</span><span class=\"sb\">    :not(piercing-fragment-outlet) &gt; piercing-fragment-host[fragment-id=&#34;todos&#34;] {\n</span><span class=\"sb\">      position: absolute;\n</span><span class=\"sb\">      top: 25.65rem;\n</span><span class=\"sb\">      left: 0;\n</span><span class=\"sb\">      right: 0;\n</span><span class=\"sb\">    }\n</span><span class=\"sb\">\n</span><span class=\"sb\">    @media (max-width: 52rem) {\n</span><span class=\"sb\">      :not(piercing-fragment-outlet) &gt; piercing-fragment-host[fragment-id=&#34;todos&#34;] {\n</span><span class=\"sb\">        top: 25.84rem;\n</span><span class=\"sb\">      }\n</span><span class=\"sb\">    }\n</span><span class=\"sb\">    @media (max-width: 45rem) {\n</span><span class=\"sb\">      :not(piercing-fragment-outlet) &gt; piercing-fragment-host[fragment-id=&#34;todos&#34;] {\n</span><span class=\"sb\">        top: 25.979rem;\n</span><span class=\"sb\">      }\n</span><span class=\"sb\">    }\n</span><span class=\"sb\">    @media (max-width: 35rem) {\n</span><span class=\"sb\">      :not(piercing-fragment-outlet) &gt; piercing-fragment-host[fragment-id=&#34;todos&#34;] {\n</span><span class=\"sb\">        top: 32.14rem;\n</span><span class=\"sb\">      }\n</span><span class=\"sb\">    }\n</span><span class=\"sb\">    @media (max-width: 25rem) {\n</span><span class=\"sb\">      :not(piercing-fragment-outlet) &gt; piercing-fragment-host[fragment-id=&#34;todos&#34;] {\n</span><span class=\"sb\">        top: 35.3rem;\n</span><span class=\"sb\">      }\n</span><span class=\"sb\">    }\n</span><span class=\"sb\">    `</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div><p data-pid=\"J1QCEajZ\">通过片段穿孔，可以渐进式的使用微前端，一次一个 Fragment，且每个 Fragment 之间技术栈可以是独立的。</p><h3>3. Fragment 之间如何通信</h3><p data-pid=\"6hb8gwp_\">假如 Fragment 之间需要知道彼此的存在并通信，比如 TodoMVC 的场景里，服务端在响应之前，TodoList Fragment 需要展示当前用户选择的分组，Todos Fragment 需要展示当前用户选择的分组下对应的具体的 ToDo 项，这中间是如何实现通信的。 Cloudflare 这里的解决方案是实现了一个同构的、框架无关的消息总线 MessageBus。 比如 Todos Fragment 在 Worker 里通过这种方式获取当前用户登录用户名及已选的分组信息：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">currentUser</span> <span class=\"o\">=</span>\n  <span class=\"nx\">getBus</span><span class=\"p\">().</span><span class=\"nx\">latestValue</span><span class=\"o\">&lt;</span><span class=\"p\">{</span> <span class=\"nx\">username</span><span class=\"o\">:</span> <span class=\"nx\">string</span> <span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s2\">&#34;authentication&#34;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">username</span> <span class=\"o\">??</span>\n  <span class=\"kc\">null</span><span class=\"p\">;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">todoListName</span> <span class=\"o\">=</span>\n  <span class=\"nx\">getBus</span><span class=\"p\">().</span><span class=\"nx\">latestValue</span><span class=\"o\">&lt;</span><span class=\"p\">{</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"nx\">string</span> <span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s2\">&#34;todo-list-selected&#34;</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">??</span>\n  <span class=\"kc\">null</span><span class=\"p\">;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">requestCookie</span> <span class=\"o\">=</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&#34;Cookie&#34;</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">todoList</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">getCurrentTodoList</span><span class=\"p\">(</span>\n  <span class=\"nx\">requestCookie</span><span class=\"p\">,</span>\n  <span class=\"nx\">currentUser</span><span class=\"p\">,</span>\n  <span class=\"nx\">todoListName</span>\n<span class=\"p\">);</span>\n</code></pre></div><p data-pid=\"GOf7UVFg\">在浏览器 React 环境里通过类似方式监听分组 Fragment 的选中事件：</p><div class=\"highlight\"><pre><code class=\"language-text\">useEffect(() =&gt; {\n  if (ref.current) {\n    return getBus(ref.current).listen&lt;{ name: string }&gt;(\n      &#34;todo-list-selected&#34;,\n      async (listDetails) =&gt; {\n        if (listDetails) {\n          const list = await getTodoList(currentUser, listDetails.name);\n          if (list) {\n            setListName(list.name);\n            setTodos(list.todos);\n          }\n        }\n      }\n    );\n  }\n}, [ref.current]);</code></pre></div><h3>4. 其他问题</h3><h3>关于片段穿孔的预留位置</h3><p data-pid=\"mLLGKdMn\">片段在首次渲染时需要提供预置样式，用于在穿孔发生之前也能渲染在用户屏幕合适的位置。Demo 中用的是绝对定位的方案，这其实会受限于用户屏幕的尺寸和分辨率，且都是手动的，非常容易出错。这个问题的解决方案会比较麻烦，可能涉及到针对 Legacy App 的代码侵入，比如在 Legacy App 里提前针对 Fragment 预先写好 placeholder 元素及其样式。</p><h3>Fragment 副作用的 reapply</h3><p data-pid=\"kJsswoLu\">片段在加载、卸载的过程中，有一些全局文档脚本的副作用可能需要重新执行（比如切换到 TodoList 时发起请求）。Demo 里的解决方案是通过 <code>addDefaultFnExportToBundle</code>插件，将 entry 的副作用生成一个 default 导出，并在每次片段加载的时候重新执行 default function。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">moduleFn</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// side-effectful code...\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n<span class=\"nx\">moduleFn</span><span class=\"p\">();</span>\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">moduleFn</span><span class=\"p\">;</span>\n</code></pre></div><h3>publicPath 的问题</h3><p data-pid=\"4c6zag9_\">每个片段都运行在同一个域名上下文中，导致原始片段中的相对路径的静态资源请求都会打向当前域名。Demo 里的解法是在构建时指定固定的 publicPath 来区分，比如 /_fragments/todos，而 gateway worker 则通过前缀来分发静态资源流量。 <b>qiankun 没这个问题原因是，我们选择的解法是运行时动态设置 publicPath，而不会是构建时决策。</b></p><h2>可借鉴的方向</h2><h3>服务端组合流式响应</h3><p data-pid=\"5K81CBOH\">可组合、非阻塞式的流式响应非常有吸引力，结合低代码搭建、配置直出等场景应该会很有效果。</p><h3>客户端流式渲染 writable-dom</h3><p data-pid=\"56emq3ab\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/marko-js/writable-dom\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">writable-dom</a> 是一个用于在客户端将流响应写入到指定的 document dom 节点中，这还不是最强的，最强的是它能保证渲染过程中资源的阻塞逻辑跟原生的浏览器解析逻辑一致，比如样式表加载完成之后，再去渲染后续的 DOM 树，从而避免异步样式表带来的内容闪烁的问题。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"nx\">WritableDOMStream</span> <span class=\"nx\">from</span> <span class=\"s2\">&#34;writable-dom&#34;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s2\">&#34;http://www.com&#34;</span><span class=\"p\">);</span>\n<span class=\"kr\">const</span> <span class=\"nx\">myEl</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">&#34;root&#34;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">await</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">body</span>\n  <span class=\"p\">.</span><span class=\"nx\">pipeThrough</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">TextDecoderStream</span><span class=\"p\">())</span>\n  <span class=\"p\">.</span><span class=\"nx\">pipeTo</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">WritableDOMStream</span><span class=\"p\">(</span><span class=\"nx\">myEl</span><span class=\"p\">));</span>\n</code></pre></div><p data-pid=\"rTzjF3QC\">不过前提是目标资源本身也支持流式响应才有意义。</p><h2>未解决的问题</h2><ol><li data-pid=\"vLJY-8jc\">文章开篇提到的，客户端微前端方案的依赖 tree-shaking 及共享问题，并没有解决只是绕过了（片段够小，不需要共享库代码）。</li><li data-pid=\"Obn0r19B\">虽说支持多 web 框架，但是并没有客户端的沙箱方案，一样可能出现样式冲突、同一技术栈多版本冲突等问题。</li></ol><h2>最后</h2><p data-pid=\"ynIaIff_\">过去几个月最让我兴奋的便是接连看到 AWS、Cloudflare 这些云厂商开始入局微前端，并提供了基于他们的云基础设施的微前端解决方案。这至少说明微前端现在不仅只是一个广泛被热议的话题，其背后的复杂度更是足以撑起一个商业化解决方案的，「微前端不过是又一个 buzz word」这一论断其实可以不攻自破了。</p>",
            "voteup_count": 65,
            "column": {
                "id": "c_1543658574504751104",
                "type": "column",
                "url_token": "c_1543658574504751104",
                "title": "支付宝体验科技",
                "url": "https://zhuanlan.zhihu.com/c_1543658574504751104",
                "created": 1660816884,
                "updated": 1660816923,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 4
        },
        "created": "2023-02-09T11:47:02+08:00"
    },
    {
        "content": {
            "id": 604773178,
            "title": "记一次 JS 内存泄露",
            "type": "article",
            "excerpt_title": "一、前言在日常的前端开发中，大都基于浏览器环境进行开发。由于浏览器进程相对存活时间比较短，可能在很短时间就结束了 tab 的生命周期，感知内存不明显。但内存异常波动特别是内存泄漏问题，值得重视。本文主要是记录一次在nodejs环境中的内存泄露，并且想以此梳理一些 JS 常见的内存泄漏和处理。 二、场景回顾2.1.反馈问题有同学在小程序 UI 自动化开发群中反馈前端页面点击按钮，服务得不到响应。 通过远程连接，查看 nodeJS…",
            "url": "https://zhuanlan.zhihu.com/p/604773178",
            "image_url": "https://pic1.zhimg.com/v2-c55456617a046e4b8b29de6ab4349652_r.jpg?source=172ae18b",
            "created": 1675914072,
            "updated": 1676000027,
            "author": {
                "id": "3052d9a50b8d4b50c7dc04e314620cdd",
                "url_token": "65-53-79-17",
                "name": "海拍客前端",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-a35790890ccfe122193e1566c26d3033_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-a35790890ccfe122193e1566c26d3033.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/3052d9a50b8d4b50c7dc04e314620cdd",
                "user_type": "people",
                "headline": "做母婴就用海拍客",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1660290544
            },
            "comment_permission": "all",
            "content": "<h2>一、前言</h2><p data-pid=\"HwW5F9tb\">在日常的前端开发中，大都基于浏览器环境进行开发。由于浏览器进程相对存活时间比较短，可能在很短时间就结束了 tab 的生命周期，感知内存不明显。但内存异常波动特别是内存泄漏问题，值得重视。本文主要是记录一次在nodejs环境中的内存泄露，并且想以此梳理一些 JS 常见的内存泄漏和处理。</p><h2>二、场景回顾</h2><h2>2.1.反馈问题</h2><p data-pid=\"_TNDDjnO\">有同学在小程序 UI 自动化开发群中反馈前端页面点击按钮，服务得不到响应。</p><p data-pid=\"fEOOCqHl\">通过远程连接，查看 nodeJS 服务报错 OOM</p><p class=\"ztext-empty-paragraph\"><br/></p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><td>FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory 1: node::Abort() [/usr/bin/node] 2: 0xe2c5fc [/usr/bin/node]</td></tr></tbody></table><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"W0p8uffM\">该服务是在测试 Mac mini 机器上运行的，并且其他同学也对此依赖，这里发现了内存泄漏之后直接对服务进行了重启，重启之后服务可以正常调用。</p><h2>2.2.基本排查</h2><p data-pid=\"qqXtvSe6\">由于暂时没有性能监控，无法看到内存增长趋势和进程中的相关信息。这里期望看到内存上涨的趋势和期待知道怎么样会导致内存上涨。</p><p data-pid=\"LPY_DjIH\">在一段时间的观察 Mac mini 自带的 Activity Monitor 后发现，每次执行小程序 UI 自动化都会看到内存微微上涨。</p><p data-pid=\"Lzo3W0tv\">后续接入阿里云 nodeJS 性能平台，也对上面的观测也得到了相同的印证。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cef3d4bb233bb96f0e437364fa5dd447_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1077\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-cef3d4bb233bb96f0e437364fa5dd447_r.jpg\" data-original-token=\"v2-0cfd5668e24a38751b48bf126fd87904\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"bqNn9W2e\">Mac mini 上的机器经常出现部署重启，且 alinode 改变了 node 部分底层代码，出现一些不兼容的错误，影响到服务使用，导致无法比较好的观测到内存上涨到更高的情况，特别是当内存上涨到 1G 以上，会更好的看到大内存的占用。所以下掉了阿里云 nodeJS 监测平台。</p><p data-pid=\"p3_cWi8r\">不过通过上述，已经验证了两个猜测。</p><p data-pid=\"-n_cS1PV\">一是这里的确是观察到了上涨的趋势，问题的到了肯定，的确是出现了内存泄漏，是必现的。</p><p data-pid=\"tPfUyUfH\">二是执行小程序自动化的时候导致内存上涨，不执行则不会明显上涨，那么应该重点排查对应执行链路。</p><p data-pid=\"N7XeMClw\">服务只有一套执行环境，并且当前环境一直在使用。于是开始计划本地进行观察。</p><p data-pid=\"8F9MG70q\">先进行代码中小程序执行链路的梳理，除去一些常规操作，发现了一个之前并没有使用的一个操作。</p><p data-pid=\"iu5h0Yt3\">代码如下</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">deleteRequireCacheByKeywords</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">keywords</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"kr\">require</span><span class=\"p\">.</span><span class=\"nx\">cache</span><span class=\"p\">).</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">keywords</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">delete</span> <span class=\"kr\">require</span><span class=\"p\">.</span><span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"w1Ml6bc_\">上面方法的核心一行是 <b><code>delete rquire.cache[key]</code></b></p><p data-pid=\"YzLvqgqw\">官方文档对于 <b><code>rquire.cache</code></b> 是这样说的</p><blockquote data-pid=\"43LaGfFa\">Modules are cached in this object when they are <b>required</b>. By deleting a key value from this object, the next <code>require</code> will reload the module.</blockquote><p data-pid=\"iQlBp7Vz\">这个方法的目的主要是删掉上一次 require 的缓存， 期待在小程序脚本执行的时候每一次 require 都可以引用到最新的 npm 包（因为小程序脚本引用的 npm 包可能会有升级）。</p><p data-pid=\"5196izQ_\">于是进行假设这块逻辑进行最小验证。</p><h2>2.3.问题复现</h2><p data-pid=\"QunXw8Ju\">下面代码模拟了最小执行环境</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"nx\">deleteRequireCacheByKeywords</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">keywords</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">keys</span><span class=\"p\">(</span><span class=\"kr\">require</span><span class=\"p\">.</span><span class=\"nx\">cache</span><span class=\"p\">).</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">keywords</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"k\">delete</span> <span class=\"kr\">require</span><span class=\"p\">.</span><span class=\"nx\">cache</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">];</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n<span class=\"kr\">const</span> <span class=\"nx\">createAsyncScriptFn</span> <span class=\"o\">=</span> <span class=\"p\">({</span> <span class=\"nx\">code</span> <span class=\"p\">})</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">AsyncFunction</span> <span class=\"o\">=</span> <span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">getPrototypeOf</span><span class=\"p\">(</span><span class=\"kr\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"p\">}).</span><span class=\"kr\">constructor</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">AsyncFunction</span><span class=\"p\">(</span><span class=\"s1\">&#39;options&#39;</span><span class=\"p\">,</span> <span class=\"nx\">code</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n<span class=\"kr\">const</span> <span class=\"nx\">code</span> <span class=\"o\">=</span> <span class=\"sb\">`\n</span><span class=\"sb\">    const { require } = options;\n</span><span class=\"sb\">    const Base = require(&#39;@yt/base-aui&#39;).default;\n</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"kr\">require</span>\n<span class=\"p\">};</span>\n<span class=\"kr\">const</span> <span class=\"nx\">run</span> <span class=\"o\">=</span> <span class=\"kr\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;start run&#39;</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n        <span class=\"nx\">deleteRequireCacheByKeywords</span><span class=\"p\">(</span><span class=\"s1\">&#39;base-aui&#39;</span><span class=\"p\">);</span>\n        <span class=\"k\">await</span> <span class=\"nx\">createAsyncScriptFn</span><span class=\"p\">({</span><span class=\"nx\">code</span><span class=\"p\">})(</span><span class=\"nx\">options</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n<span class=\"nx\">run</span><span class=\"p\">();</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"3Qb15vVv\">通过 for 循环模拟进行多次模拟执行 <b><code>delete require.cache[key]</code></b></p><p data-pid=\"mnN2lSfi\">执行后看到内存急剧升高，很快就升高到了 4G 以上</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-56c6a76aef55d980d04578eb949c41e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1146\" data-rawheight=\"261\" class=\"origin_image zh-lightbox-thumb\" width=\"1146\" data-original=\"https://pic4.zhimg.com/v2-56c6a76aef55d980d04578eb949c41e3_r.jpg\" data-original-token=\"v2-4df56e372c8857983d30e4797e58286f\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"TNUKxdh8\">几十秒后就出现了 OOM 的 log</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4b46641383b7ead380e84c78ec3bf170_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1030\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-4b46641383b7ead380e84c78ec3bf170_r.jpg\" data-original-token=\"v2-f0e88988cec9a83484d834f08ad082e8\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"GblPNkX9\">果不其然 是这块代码引起的问题。</p><p data-pid=\"Ya5eef42\">那么下一步可以进行更细致的分析了，引入 <b><code>const heapdump = require(&#39;heapdump&#39;);</code></b> 进行 heap 转存抓取。</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1000</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">){</span>\n    <span class=\"k\">if</span><span class=\"p\">([</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">].</span><span class=\"nx\">includes</span><span class=\"p\">(</span> <span class=\"nx\">i</span> <span class=\"p\">)){</span>\n        <span class=\"nx\">heapdump</span><span class=\"p\">.</span><span class=\"nx\">writeSnapshot</span><span class=\"p\">(</span><span class=\"s1\">&#39;./&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">i</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.heapsnapshot&#39;</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"nx\">deleteRequireCacheByKeywords</span><span class=\"p\">(</span><span class=\"s1\">&#39;base-aui&#39;</span><span class=\"p\">);</span>\n    <span class=\"k\">await</span> <span class=\"nx\">createAsyncScriptFn</span><span class=\"p\">({</span><span class=\"nx\">code</span><span class=\"p\">})(</span><span class=\"nx\">options</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"g6ay7oby\">分别在 第 10, 100, 1000 循环的时候抓取，执行结束之后在当前文件夹得到三个 dump 文件。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4bc5c179709ac2870f1d9967865a545d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"255\" class=\"content_image\" width=\"300\" data-original-token=\"v2-a74b83e1ad88f91d41894b743d42b22a\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>2.4.问题分析</h2><p data-pid=\"A7a8SLEJ\">打开 chrome dev tool 的 memory tab，将这三个文件上传并进行分析</p><p data-pid=\"ndxqWNYo\">为了更好的看到现象，先看循环第 1000 次时候的 summary</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-43bc1de711468f3fbfe46491e2e64edb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"659\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-43bc1de711468f3fbfe46491e2e64edb_r.jpg\" data-original-token=\"v2-ddfa8bd778bdf1dd5897a10ee5490207\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"5m-nf03l\">string 占用了 80% 的shallow size</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-42aa054bb6f80b52b987894c87fc2054_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"876\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-42aa054bb6f80b52b987894c87fc2054_r.jpg\" data-original-token=\"v2-d9ba047cf66fb22600f98effba2fa051\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"kJ70qSl2\">string 有大量的重复，都是 source in <b><code>@yt/base-aui</code></b></p><p data-pid=\"Q47tsQzt\">由此得知上面 <b><code>delete require.cache[key]</code></b> 并没有完成预想的删除上次 <b>require</b> 的缓存，反而造成成内存泄漏。</p><p data-pid=\"euvkYouS\">接下来开始分析 nodeJS <a href=\"https://link.zhihu.com/?target=https%3A//github.dev/nodejs/node\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">源码</a>，看看 <b>require</b> 是怎么处理的</p><p data-pid=\"C-rxwD-v\"><b><code>makeRequireFunction</code></b> 是 <b>require</b> 产生的入口</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b0b1d6fe82a69d59bd1b31fe294c1f40_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1352\" data-rawheight=\"802\" class=\"origin_image zh-lightbox-thumb\" width=\"1352\" data-original=\"https://pic1.zhimg.com/v2-b0b1d6fe82a69d59bd1b31fe294c1f40_r.jpg\" data-original-token=\"v2-3d40ab9916119d1c59cbdfa1d11d8042\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"SJPMiWnd\">这里追溯到 <b>require.cache</b> 引用自 <b>Module._cache</b>，找到 <b>Module._cache</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3d2a8f31768697252d03532093063087_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1896\" data-rawheight=\"1076\" class=\"origin_image zh-lightbox-thumb\" width=\"1896\" data-original=\"https://pic4.zhimg.com/v2-3d2a8f31768697252d03532093063087_r.jpg\" data-original-token=\"v2-cf215b90dbfe89b69ac61dd080958e21\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"rJUeWj0T\">从 Module 构造函数开始排查， 存在多个引用</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8accaa2356015b1b2b81fbb167621218_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1272\" data-rawheight=\"538\" class=\"origin_image zh-lightbox-thumb\" width=\"1272\" data-original=\"https://pic1.zhimg.com/v2-8accaa2356015b1b2b81fbb167621218_r.jpg\" data-original-token=\"v2-10d9e712349ac4529207756910b9253c\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"m_s-53Mr\">其中追溯到 <b>updateChildren</b></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bd663e71c7a3c234a1956bdcade3948c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1362\" data-rawheight=\"332\" class=\"origin_image zh-lightbox-thumb\" width=\"1362\" data-original=\"https://pic1.zhimg.com/v2-bd663e71c7a3c234a1956bdcade3948c_r.jpg\" data-original-token=\"v2-8097d675f516236cb431932042c5775c\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"AButQCmW\">发现 parent 上有当前模块的引用。</p><p data-pid=\"rO5WJdNg\">在业务代码中 只是简单的对当前module里的require cache 进行了删除，但是当前模块的 parent 中的 children 依然引用了当前模块，其中也包含当前模块的 _cache。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4adeda876b8145256651d5932e811b67_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1500\" data-rawheight=\"256\" class=\"origin_image zh-lightbox-thumb\" width=\"1500\" data-original=\"https://pic4.zhimg.com/v2-4adeda876b8145256651d5932e811b67_r.jpg\" data-original-token=\"v2-cfd16af2fda83413c466dd699f62349f\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"Rt8Znu2N\">由于 parent 中的 children 没有对 _cache 删除，所以至此出现内存泄漏。（实际上，当前作用域无法访问到 parent，无法执行找到 parent 删除 和 <b>@yt/base-aui</b> 相关引用的操作。）</p><h2>2.5. 问题解决</h2><p data-pid=\"xDJ-hIDj\">删除相关代码，内存停止快速上涨</p><h2>三、方法论</h2><h2>3.1.确定问题类型</h2><p data-pid=\"TJBfMyYm\">通常故障的表征出现，并不能直接简单的由此推算出背后的故障原因。</p><p data-pid=\"ykwrGWdy\">一个现象可能是有多个可能的因素引起的，其背后可能是并行存在的，也可能是或的关系。</p><p data-pid=\"6kNy-pWz\">比如上面出现的内存泄漏，在某些情况下也有可能是 nodeJS 的内存设置问题，在处理计算密集型任务的时候内存上涨属于正常现象。例如 webpack 打包的时候，或者处理各种通过加密某些算法加密数据的时候。</p><p data-pid=\"McasFAMe\">如何确定这一问题，需要对系统相对熟悉。以此来可以排除不可能选项，选择可能性最大的问题。</p><h2>3.2.定位核心代码</h2><ul><li data-pid=\"MbTfIMNA\">寻找关键链路。通过现象找到原因和结果，一般会有某个输入导致异常的输出。这个系统或者方法的调用链路是关注的关键。</li><li data-pid=\"rLZCB9uB\">排除法。比较简单的方法就是可以通减少调用链路，或 mock 调用参数对部分的进行排除，一次来排除问题发生节点。</li><li data-pid=\"WUxczLBr\">寻找敏感点。如果对代码比较熟悉或者对某些执行环境特性较为熟悉，可以根据经验判断默写可能出问题的点，使用单测或最小化执行环境进行测试。反之，如果对代码对某些不熟悉，也可以单对的对那些不是很熟悉的代码进行特殊关注。</li><li data-pid=\"_vKVokyn\">利用工具。在柏拉图对话中曾有“人是万物的尺度”，排查问题的时候，我们也需要一个标尺来进行定位定性定量。不管是全链路监测的工具，还是执行环境提供的 api，应该善假于物尽可能的通过量化的结果进行判断。</li></ul><h2>3.3.解决问题</h2><ul><li data-pid=\"mfDhSTif\">修复问题。对错误代码修复。</li><li data-pid=\"ltPNmy8H\">事故存留。记录整个过程，给后续出现的类似问题提供解决方案的物理资产。</li><li data-pid=\"UvENBxHe\">由点到面的储备。若某个问题，只是未知问题的一部分，或者该问题是某个紧密相关体系的一部分。如果有相关的资源，可以对该体系进行系统梳理。</li></ul><h2>四、相关资源</h2><ul><li data-pid=\"FPrzBlee\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/nodejs/node/blob/main/lib/internal/modules/cjs/loader.js\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">nodeJS</a></li><li data-pid=\"LH-SJJhM\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bnoordhuis/node-heapdump\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">node-heapdump</a></li><li data-pid=\"0nGSvkZm\"><a href=\"https://link.zhihu.com/?target=https%3A//developer.chrome.com/docs/devtools/memory-problems/memory-101/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Memory terminology</a></li><li data-pid=\"0u9ScS02\">[Eradicating Memory Leaks In Javascript](<a href=\"https://link.zhihu.com/?target=https%3A//www.lambdatest.com/blog/eradicating-memory-leaks-in-javascript/%23%3A~%3Atext%3DA%2520memory%2520leak%2520occurs%2520in%2Creferenced%2520in%2520the%2520nested%2520function.%26text%3DIn%2520the%2520above%2520example%2C%2520function%2Ckeeps%2520a%2520reference%2520to%2520elem.%29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://www.lambdatest.com/blog/eradicating-memory-leaks-in-javascript/#:~:text=A memory leak occurs in,referenced in the nested function.&amp;text=In the above example, function,keeps a reference to elem.)</a></li><li data-pid=\"CJoUEfvQ\"><a href=\"https://link.zhihu.com/?target=https%3A//auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">4 Types of Memory Leaks in JavaScript and How to Get Rid Of Them</a></li><li data-pid=\"8wa79jsO\"><a href=\"https://zhuanlan.zhihu.com/p/34702356\" class=\"internal\">一行 delete require.cache 引发的内存泄漏血案</a></li></ul><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"1sFqk7Ud\">作者：冯刚（花名：拾光）</p>",
            "voteup_count": 19,
            "column": {
                "id": "c_1607032467046858754",
                "type": "column",
                "url_token": "c_1607032467046858754",
                "title": "羊驼分享",
                "url": "https://zhuanlan.zhihu.com/c_1607032467046858754",
                "created": 1675926397,
                "updated": 1675926397,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 0
        },
        "created": "2023-02-09T11:41:12+08:00"
    },
    {
        "content": {
            "id": 603910374,
            "title": "性能优化经验分享",
            "type": "article",
            "excerpt_title": "作者：linyangxin背景近期，开发 C 端 h5 页面时，发现首页白屏时间比较长，并且用户也多次反映了这个问题，优化这个首屏加载时间是迟早的事，所以在开始优化前先做一些必要的知识储备～ 性能指标还在看那些老掉牙的性能优化文章么？这些最新性能指标了解下 [图片] FP &amp; FCP 首次绘制，FP（First Paint），这个指标用于记录页面第一次绘制像素的时间。 首次内容绘制，FCP（First Contentful Paint），这个指标用于记录页面首次绘制文本、…",
            "url": "https://zhuanlan.zhihu.com/p/603910374",
            "image_url": "",
            "created": 1675740151,
            "updated": 1675740151,
            "author": {
                "id": "249c80969410165dc74ea6937e275c1c",
                "url_token": "zi-jie-qian-duan",
                "name": "字节前端",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-9dffb51d1a85987a1b8655740d312933_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-9dffb51d1a85987a1b8655740d312933.jpg?source=0df5f383",
                "is_org": true,
                "type": "people",
                "url": "https://www.zhihu.com/people/249c80969410165dc74ea6937e275c1c",
                "user_type": "organization",
                "headline": "字节前端的技术实践分享 | 微信公众号：字节前端ByteFE",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1599385561
            },
            "comment_permission": "all",
            "content": "<blockquote data-pid=\"sfNhVpaX\">作者：linyangxin</blockquote><h2><b>背景</b></h2><p data-pid=\"RnT8avX1\">近期，开发 C 端 h5 页面时，发现首页白屏时间比较长，并且用户也多次反映了这个问题，优化这个首屏加载时间是迟早的事，所以在开始优化前先做一些必要的知识储备～</p><h2><b>性能指标</b></h2><blockquote data-pid=\"nVtY89YU\"><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6850037270729359367%23heading-0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">还在看那些老掉牙的性能优化文章么？这些最新性能指标了解下</a></b></blockquote><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e841817e9888f1bf7469ae964674a224_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-e841817e9888f1bf7469ae964674a224_r.jpg\" data-original-token=\"v2-e841817e9888f1bf7469ae964674a224\"/></figure><h3><b>FP &amp; FCP</b></h3><p data-pid=\"IT4QZ-Lc\"><b>首次绘制</b>，FP（First Paint），这个指标用于记录页面第一次绘制像素的时间。</p><p data-pid=\"7b2W0_0S\"><b>首次内容绘制</b>，FCP（First Contentful Paint），这个指标用于记录页面首次绘制文本、图片、非空白 Canvas 或 SVG 的时间。</p><p data-pid=\"fWVZCMKj\">FP 指的是绘制像素，比如说页面的背景色是灰色的，那么在显示灰色背景时就记录下了 FP 指标。但是此时 DOM 内容还没开始绘制，可能需要文件下载、解析等过程，只有当 DOM 内容发生变化才会触发，比如说渲染出了一段文字，此时就会记录下 FCP 指标。因此说我们可以把这两个指标认为是和白屏时间相关的指标，所以肯定是最快越好。</p><h3><b>LCP</b></h3><p data-pid=\"OLUTo9AT\"><b>最大内容绘制</b>，LCP（Largest Contentful Paint），用于记录视窗内最大的元素绘制的时间，该时间会随着页面渲染变化而变化，因为页面中的最大元素在渲染过程中可能会发生改变，另外该指标会在用户第一次交互后停止记录。指标变化如下图：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a1ff6558c43c87f0c32644e9e397b156_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"496\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-a1ff6558c43c87f0c32644e9e397b156_r.jpg\" data-original-token=\"v2-a1ff6558c43c87f0c32644e9e397b156\"/></figure><h3><b>TTI</b></h3><p data-pid=\"BEm_mIkp\">介绍 TTI 之前，首先要介绍一下长任务，一个任务的耗时超过 50ms，这个任务就可以被认为是长任务，用户的交互操作也是在主线程执行的，所以当发生 Long Task 时，用户的交互操作很可能无法及时执行，这时用户就会体验到卡顿（当页面响应时间超过 100ms 时，用户可以体验到卡顿）。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c686fc8312d5a4674881625c395f43ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"596\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-c686fc8312d5a4674881625c395f43ec_r.jpg\" data-original-token=\"v2-c686fc8312d5a4674881625c395f43ec\"/></figure><p data-pid=\"l0GNosgc\"><b>首次可交互时间</b>，TTI（Time to Interactive），测量页面所有资源加载成功并能够可靠地快速响应用户输入的时间。通常是发生在页面依赖的资源已经加载完成，此时浏览器可以快速响应用户交互的时间。指标的计算过程，需要满足以下几个条件：</p><ol><li data-pid=\"wChySifh\">从 FCP 指标后开始计算；</li><li data-pid=\"lIQLdk1e\">持续 5 秒内无长任务（执行时间超过 50 ms）且无两个以上正在进行中的 GET 请求；</li><li data-pid=\"wEXp2O50\">往前回溯至 5 秒前的最后一个长任务结束的时间。</li></ol><h3><b>FID</b></h3><p data-pid=\"wZ-noQxO\"><b>首次输入延迟</b>，FID（First Input Delay），记录在 FCP 和 TTI 之间用户首次与页面交互时响应的延迟。记录第一次与页面交互到浏览器真正能够处理响应该交互的时间，这个延迟出现的原因是浏览器的主线程可能在忙于其他工作，比如解析 JS 文件等，所以无法及时响应用户。</p><h3><b>TBT</b></h3><p data-pid=\"_WeCEZzx\"><b>阻塞总时间</b>，TBT（Total Blocking Time），记录在 FCP 到 TTI 之间所有长任务的阻塞时间总和。主线程执行的任务分为长任务和短任务。规定持续时间超过 50ms 的任务为长任务，低于 50ms 的任务为短任务。长任务中超过 50ms 的时间被认为是“阻塞”的，因此，TBT 是所有长任务中阻塞时间的总和。TBT = FCP 和 TTI 之间发生的每个长任务的「<i>阻塞时间」</i>总和。例：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-af9a8e1c5d56a3baa956d496b340c184_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb\" width=\"864\" data-original=\"https://pic1.zhimg.com/v2-af9a8e1c5d56a3baa956d496b340c184_r.jpg\" data-original-token=\"v2-af9a8e1c5d56a3baa956d496b340c184\"/></figure><p data-pid=\"Mb4JZoyQ\">上图，有三个长任务，两个短任务。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e36f89558289384ea827732adf6a4f55_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"168\" class=\"origin_image zh-lightbox-thumb\" width=\"864\" data-original=\"https://pic2.zhimg.com/v2-e36f89558289384ea827732adf6a4f55_r.jpg\" data-original-token=\"v2-e36f89558289384ea827732adf6a4f55\"/></figure><p data-pid=\"aBdoyxEn\">而 TBT 时长为 200+40+105=345ms。</p><h3><b>CLS</b></h3><p data-pid=\"TUmKpDjl\"><b>累计位移偏移</b>，CLS（Cumulative Layout Shift），记录了页面上非预期的位移波动。比如：页面渲染过程中突然插入一张巨大的图片或者说点击了某个按钮突然动态插入了一块内容等等相当影响用户体验的网站。这个指标就是为这种情况而生的，计算方式为：位移影响的面积 * 位移距离。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0b4cfb832c87ec1619fbe6a1d99159fb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"1102\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-0b4cfb832c87ec1619fbe6a1d99159fb_r.jpg\" data-original-token=\"v2-0b4cfb832c87ec1619fbe6a1d99159fb\"/></figure><p data-pid=\"He1o9U0x\">以上图为例，文本移动了 25% 的屏幕高度距离（位移距离），位移前后影响了 75% 的屏幕高度面积（位移影响的面积），那么 CLS 为 <code>0.25 * 0.75 = 0.1875</code>。CLS 推荐值为低于 0.1，越低说明页面跳来跳去的情况就越少，用户体验越好。毕竟很少有人喜欢阅读或者交互过程中网页突然动态插入 DOM 的情况，比如说插入广告。</p><h3><b>关键指标</b></h3><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0877de7c05ea452cb757d000b0af27b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"371\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-0877de7c05ea452cb757d000b0af27b3_r.jpg\" data-original-token=\"v2-0877de7c05ea452cb757d000b0af27b3\"/></figure><ul><li data-pid=\"7eLHfNnh\">LCP 代表了页面的速度指标，虽然还存在其他的一些体现速度的指标，但是上文也说过 LCP 能体现的东西更多一些。一是指标实时更新，数据更精确，二是代表着页面最大元素的渲染时间，通常来说页面中最大元素的快速载入能让用户感觉性能还挺好。</li><li data-pid=\"kZ7IVyy-\">FID 代表了页面的交互体验指标，毕竟没有一个用户希望触发交互以后页面的反馈很迟缓，交互响应的快会让用户觉得网页挺流畅。</li><li data-pid=\"sihtu1ON\">CLS 代表了页面的稳定指标，尤其在手机上这个指标更为重要。因为手机屏幕挺小，CLS 值一大的话会让用户觉得页面体验做的很差。</li></ul><h2><b>优化手段</b></h2><h3><b>网络层面</b></h3><h3><b>开启 gzip 压缩</b></h3><blockquote data-pid=\"DdJ6hJ-7\"><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903913410314247%23heading-22\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Vue 项目性能优化 — 实践指南（网上最全 / 详细）</a></b></blockquote><p data-pid=\"79BVhJde\">gzip 是 GNUzip 的缩写，最早用于 UNIX 系统的文件压缩。HTTP 协议上的 gzip 编码是一种用来改进 web 应用程序性能的技术，web 服务器和客户端（浏览器）必须共同支持 gzip。目前主流的浏览器，Chrome，firefox，IE 等都支持该协议。常见的服务器如 Apache，Nginx，IIS 同样支持，gzip 压缩效率非常高，通常可以达到 70% 的压缩率。</p><h3><b>使用 http2</b></h3><blockquote data-pid=\"DHI8sfFJ\"><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903545532071943\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HTTP2.0 新特性</a></b></blockquote><p data-pid=\"bjoEuT5m\">HTTP2.0 大幅度的提高了 web 性能，在 HTTP1.1 完全语义兼容的基础上，进一步减少了网络的延迟。实现低延迟高吞吐量。对于前端开发者而言，减少了优化工作。Http2 提供了以下一些新特性，对性能优化有一定帮助。</p><ul><li data-pid=\"OjKxAS79\"><b>二进制分</b> <b>帧</b>：将所有传输信息分割为更小的消息和帧，并对它们采用二进制格式的编码将其封装。二进制分帧主要是为下文中的各种特性提供了基础。它能把一个数据划分封装为更小更便捷的数据。首先是在单链接多资源方式中，减少了服务端的链接压力，内存占用更少，链接吞吐量更大。这一点可以结合下文中的多路复用来体会。另一方面，由于 TCP 链接的减少而使网络拥塞状态得以改善，同时慢启动时间的减少。使拥塞和丢包恢复的速度更快。</li><li data-pid=\"VxNCGDnT\"><b>多路复用</b>：基于二进制分帧层，HTTP2.0 可以在共享 TCP 链接的基础上同时发送请求和响应。HTTP 消息被分解为独立的帧，而不破坏消息本身的语义，交错发出去，在另一端根据流标识符和首部将他们重新组装起来。可以并行交错的发送请求和响应，这些请求和响应之间互不影响，消除不必要的延迟，减少页面加载时间。</li><li data-pid=\"ZoHG1WMi\"><b>首部压缩</b>：对于相同的数据，不再重新通过每次请求和响应发送。每个新的首部键值对要么追加到当前表的末尾，要么替换表中之前的值。首部压缩可以使报头更紧凑，更快速传输，有利于移动网络环境。减少每次通讯的数据量，使网络拥塞状态得以改善。</li><li data-pid=\"sfz5BzI4\"><b>优先级</b>：客户端明确指定优先级，服务端可以根据这个优先级作为交互数据的依据，优先将最高优先级的帧发送给客户端。</li><li data-pid=\"1ghmer1S\"><b>流量控制</b>：由于一个 TCP 连接流量带宽（根据客户端到服务器的网络带宽而定）是固定的，当有多个请求并发时，一个请求占的流量多，另一个请求占的流量就会少。流量控制可以对不同的流的流量进行精确控制。</li><li data-pid=\"V33NY3j_\"><b>服务器推送</b>：服务端根据客户端的请求，提前返回多个响应，推送额外的资源给客户端。服务端推送是一种在客户端请求之前发送数据的机制。在 HTTP2.0 中，服务器可以对一个客户端的请求发送多个响应。如果一个请求是由你的主页发送的，服务器可能会响应主页内容、logo 以及样式表，因为他知道客户端会用到这些东西。这样不但减轻了数据传送冗余步骤，也加快了页面响应的速度，提高了用户体验。</li></ul><h3><b>iconfont 代替图片图标</b></h3><p data-pid=\"KJrjWwyI\">字体图标就是将图标制作成一个字体，使用时就跟字体一样，可以设置属性，例如 font-size、color 等，非常方便，并且字体图标是矢量图，不会失真。还有一个优点是生成的文件特别小，无论是加载还是打包所消耗的资源都相对较小一些。</p><h3><b>图片优化</b></h3><blockquote data-pid=\"RkngJoFl\"><b><a href=\"https://www.zhihu.com/question/27201061\" class=\"internal\">WebP 相对于 PNG、JPG 有什么优势？</a></b></blockquote><p data-pid=\"gw2SXFfz\">图片往往是一个 h5 页面的重要组成部分，然而图片占用的资源往往也是很大的，因此图片优化在性能优化中占据很重要的地位。下面来看几种优化图片的方式。</p><ul><li data-pid=\"yapc8-qO\"><b>图片</b> <b>懒加载</b>：当图片出现在可视区域或者即将出现在可视区域时再加载图片，避免一次性加载全部图片，会对用户体验造成很大影响。</li><li data-pid=\"QuHrUKoz\"><b>降低图片质量</b>：一些图片适当降低图片质量时，通常是看不出来区别的，尤其是作为背景图片时，可以使用<code>image-webpack-loader</code>进行图片压缩。</li><li data-pid=\"Wi3O3QjK\"><b>尽量使用</b> <b>CSS</b> <b>代替图片</b>：一些简单的图片效果如果可以通过 CSS 效果实现则进行用 CSS 来实现，可以减小请求次数或者打包体积大小。</li><li data-pid=\"ZuJCR6uP\"><b>使用</b> <b>webp</b> <b>图片</b>：WebP 的优势体现在它具有更优的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量；同时具备了无损和有损的压缩模式、Alpha 透明以及动画的特性，在 JPEG 和 PNG 上的转化效果都相当优秀、稳定和统一。</li></ul><h3><b>按需加载</b></h3><p data-pid=\"iQRfz49a\">懒加载或者按需加载，是一种很好的优化网页或应用的方式。这种方式实际上是先把你的代码在一些逻辑断点处分离开，然后在一些代码块中完成某些操作后，立即引用或即将引用另外一些新的代码块。这样加快了应用的初始加载速度，减轻了它的总体体积，因为某些代码块可能永远不会被加载。</p><h3><b>代码层面</b></h3><h3><b>location.herf</b></h3><p data-pid=\"gu01BzVW\">在教师端项目中登录重定向部分，由于历史代码逻辑问题，无法使用 react router 中的跳转方式，所以选择了使用<code>location.herf</code>进行跳转。虽然，功能上没有问题，但是由于页面在登录过程中频繁地重新加载，导致登录重定向的过程十分缓慢，极大影响了用户体验，所以考虑将登录重定向部分代码进行重构，避免使用<code>location.herf</code>。</p><h3><b>CSS 策略</b></h3><blockquote data-pid=\"dKThVXg3\"><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7077347573740077069%23heading-1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CSS 性能优化的几个技巧</a></b></blockquote><p data-pid=\"fGrogtUs\">想要优化 CSS 的性能，我们首先需要了解 CSS 的渲染规则，<b>CSS 选择器是从右向左进行匹配的。</b> CSS 中更多的选择器是不会匹配的，所以在考虑性能问题时，需要考虑的是如何在选择器不匹配时提升效率。从右向左匹配就是为了达成这一目的的，通过这一策略能够使得 CSS 选择器在不匹配的时候效率更高。这样想来，在匹配时多耗费一些性能也能够想的通了。</p><ul><li data-pid=\"mMTLPeR9\">避免出现超过三层的嵌套规则：元素的嵌套层级不能超过 3 级，过度的嵌套会导致代码变得臃肿，沉余，复杂。导致 css 文件体积变大，造成性能浪费，影响渲染的速度！而且过于依赖 HTML 文档结构。这样的 css 样式，维护起来，极度麻烦。</li><li data-pid=\"lC09MaWD\">避免为 ID 选择器添加多余选择器：在 ID 选择器前面嵌套其它选择器纯粹是多余的。</li><li data-pid=\"Hw_OQCt_\">避免使用通配选择器，只对目标节点声明规则。</li><li data-pid=\"uhLhlN1j\">避免重复匹配重复定义，关注可继承属性。</li></ul><h3><b>Dom 离线化</b></h3><p data-pid=\"VlvtK_Ai\">所谓的 Dom 离线化就是将要操作的元素从文档流中脱离，然后再恢复它。离线的 DOM 不属于当前 DOM 树中的任何一部分，这也就意味着我们对离线 DOM 处理就不会引起页面的回流与重绘。可以使用**<code>display: none</code><b>，上面我们说到了 (</b><code>display: none</code><b>) 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分，之后在该 DOM 上的操作不会触发回流与重绘，操作完之后再将</b><code>display</code>**属性改为显示，只会触发这一次回流与重绘。</p><h3><b>SSR</b></h3><blockquote data-pid=\"8sgPYlDQ\"><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903943902855176\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【长文慎入】一文吃透 React SSR 服务端渲染和同构原理</a></b></blockquote><p data-pid=\"XC_izDDb\">在 SPA 模式下，所有的数据请求和 Dom 渲染都在浏览器端完成，所以当我们第一次访问页面的时候很可能会存在“白屏”等待，而服务端渲染所有数据请求和 html 内容已在服务端处理完成，浏览器收到的是完整的 html 内容，可以更快的看到渲染内容，在服务端完成数据请求肯定是要比在浏览器端效率要高的多。</p><p data-pid=\"_cvSzZi2\">SSR 对 SEO 是相对友好的，有些网站的流量来源主要还是靠搜索引擎，所以网站的 SEO 还是很重要的，而 SPA 模式对搜索引擎不够友好，要想彻底解决这个问题只能采用服务端直出。</p><p data-pid=\"QXR8SJeh\">当然，SSR 也会带了很多额外的工作量，而且会很大程度上增加项目的复杂度，这里需要做一个工作量与优化之间的权衡～</p><h3><b>防抖 &amp; 截流</b></h3><blockquote data-pid=\"3hIv-18t\"><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903669389885453\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">理解 JS 的节流、防抖及使用场景</a></b></blockquote><p data-pid=\"X99O6Hl7\"><b>防抖</b>：防止抖动，单位时间内事件触发会被重置，避免事件被误伤触发多次。代码实现重在清零 clearTimeout。防抖可以比作等电梯，只要有一个人进来，就需要再等一会儿。业务场景有避免登录按钮多次点击的重复提交。</p><p data-pid=\"H83Ged2C\"><b>节流</b>：控制流量，单位时间内事件只能触发一次，与服务器端的限流 (Rate Limit) 类似。代码实现重在开锁关锁 timer=timeout; timer=null。节流可以比作过红绿灯，每等一个红灯时间就可以过一批。</p><h3><b>Web Worker</b></h3><blockquote data-pid=\"a4Y6ICIn\"><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903496550989837\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">浅谈 HTML5 Web Worker</a></b></blockquote><p data-pid=\"isXBkGpU\">Web Worker 是 HTML5 标准的一部分，这一规范定义了一套 API，它允许一段 JavaScript 程序运行在主线程之外的另外一个线程中。可以加载一个 JS 进行大量的复杂计算而不挂起主进程，并通过 postMessage，onmessage 进行通信，解决了大量计算对 UI 渲染的阻塞问题。</p><h3><b>打包层面</b></h3><h3><b>图片使用 CDN</b></h3><p data-pid=\"8M6cjYio\">图片资源是每个项目无法绕开的，在项目中，图片资源往往是占打包体积比例较大的，并且图片资源的压缩效率也不是特别理想，所以为减少项目最后的打包体积，可以将图片上传至 CDN ，通过动态加载的方式引入图片，这样就可以避免图片增加打包体积了。</p><h3><b>优化 SourceMap</b></h3><p data-pid=\"WYvCvXgn\">SourceMap 的可选值如下（+ 号越多，代表速度越快，- 号越多，代表速度越慢, o 代表中等速度 ）</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2e90873f352bd48c85b964024b8c408b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"694\" data-rawheight=\"564\" class=\"origin_image zh-lightbox-thumb\" width=\"694\" data-original=\"https://pic4.zhimg.com/v2-2e90873f352bd48c85b964024b8c408b_r.jpg\" data-original-token=\"v2-2e90873f352bd48c85b964024b8c408b\"/></figure><p data-pid=\"oEBdb5Du\"><b>开发环境推荐： cheap-module-eval-source-map</b></p><p data-pid=\"_ytGO_P3\"><b>生产环境推荐： cheap-module-source-map</b></p><p data-pid=\"awE_QziR\">原因如下：</p><ul><li data-pid=\"UJKGuxIV\"><b>cheap</b>： 源代码中的列信息是没有任何作用，因此我们打包后的文件不希望包含列相关信息，只有行信息能建立打包前后的依赖关系。因此不管是开发环境或生产环境，我们都希望添加 cheap 的基本类型来忽略打包前后的列信息；</li><li data-pid=\"LPJg86pY\"><b>module</b> ：不管是开发环境还是正式环境，我们都希望能定位到 bug 的源代码具体的位置，比如说某个 Vue 文件报错了，我们希望能定位到具体的 Vue 文件，因此我们也需要 module 配置；</li><li data-pid=\"TKnKCNz-\"><b>soure-map</b> ：source-map 会为每一个打包后的模块生成独立的 soucemap 文件 ，因此我们需要增加 source-map 属性；</li><li data-pid=\"Ay0oWsrt\"><b>eval-source-map</b>：eval 打包代码的速度非常快，因为它不生成 map 文件，但是可以对 eval 组合使用 eval-source-map 使用会将 map 文件以 DataURL 的形式存在打包后的 js 文件中。在正式环境中不要使用 eval-source-map, 因为它会增加文件的大小，但是在开发环境中，可以试用下，因为他们打包的速度很快。</li></ul><h3><b>压缩 JS 和 CSS</b></h3><p data-pid=\"yvfRVuQR\">如果你使用的是 webpack v5 或更高版本，是开箱机带的功能，但是你的 webpack 是 v5 以下或者希望自定义配置，那么需要安装 <code>terser-webpack-plugin</code>。如果使用 webpack v4，则必须安装 <code>terser-webpack-plugin</code> v4 的版本。</p><h3><b>第三方插件、库的按需引入</b></h3><p data-pid=\"KCsRnVj3\">我们在项目中经常会需要引入第三方插件，如果我们直接引入整个插件，会导致项目的体积太大，我们可以借助 <code>babel-plugin-component</code> ，然后可以只引入需要的组件，以达到减小项目体积的目的，如 <code>import lodash</code> -&gt; <code>import lodash/get</code>。还可以使用一些支持 Tree Shaking 的库，如 <code>import lodash</code> -&gt; <code>import lodash/get</code>。</p><h2><b>总结</b></h2><p data-pid=\"wo8NjE03\">上述列出的只是有关于前端性能优化的冰山一角，比较适合对优化手段了解较少的同学用于知识储备，有兴趣的同学可以继续阅读其他性能优化相关的文章。</p><p data-pid=\"YqryK1J6\"><b>下面分享几篇我阅读过的一些较全的文章，可以帮助你更深层次了解：</b></p><ol><li data-pid=\"V7biVncW\"><b><a href=\"https://link.zhihu.com/?target=https%3A//time.geekbang.org/column/intro/100033601\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">浏览器工作原理与实践_浏览器_V8 原理-极客时间</a></b> - 强烈推荐  </li><li data-pid=\"32SYiv0d\"><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6892994632968306702%23heading-29\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">前端性能优化 24 条建议(2020) - 掘金</a></b></li><li data-pid=\"-FaaRdVc\"><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903863963631623%23heading-16\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">前端性能优化三部曲(加载篇)</a></b></li><li data-pid=\"1E-TQmfI\"><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6911512163249029134%23heading-38\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">全链路前端性能优化(欢迎收藏)</a></b></li></ol><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"uhu8SNqQ\"><b>关注「字节前端 ByteFE」公众号，追更不迷路！</b></p>",
            "voteup_count": 47,
            "comment_count": 2
        },
        "created": "2023-02-07T11:22:31+08:00"
    },
    {
        "content": {
            "id": 603752974,
            "title": "技术周报·字节前端监控实践",
            "type": "article",
            "excerpt_title": "编辑推荐字节前端监控实践 本文主要从 JS 异常监控，性能监控和请求，静态资源监控几个细节点讲述了 Slardar 在前端监控方向所面临关键问题的探索和实践，希望能够对大家在前端监控领域或者将来的工作中产生帮助。 [图片] 什么是比较好的低代码产品 说到低代码，喜欢的人特别喜欢，不喜欢的人很不喜欢，此外也有“假装”去喜欢的，也有喜欢得不明不白的，我现在对于低代码是有点儿喜欢的那种，不过只限于 「在特定领域，实现需求的速度比…",
            "url": "https://zhuanlan.zhihu.com/p/603752974",
            "image_url": "https://pic1.zhimg.com/v2-ab8c5a648314ec6a26be5deb420b0779_r.jpg?source=172ae18b",
            "created": 1675611826,
            "updated": 1675611826,
            "author": {
                "id": "249c80969410165dc74ea6937e275c1c",
                "url_token": "zi-jie-qian-duan",
                "name": "字节前端",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-9dffb51d1a85987a1b8655740d312933_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-9dffb51d1a85987a1b8655740d312933.jpg?source=0df5f383",
                "is_org": true,
                "type": "people",
                "url": "https://www.zhihu.com/people/249c80969410165dc74ea6937e275c1c",
                "user_type": "organization",
                "headline": "字节前端的技术实践分享 | 微信公众号：字节前端ByteFE",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1599385561
            },
            "comment_permission": "all",
            "content": "<h2><b>编辑推荐</b></h2><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7195496297150709821\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">字节前端监控实践</a></b></h3><p data-pid=\"npqDnlJQ\">本文主要从 JS 异常监控，性能监控和请求，静态资源监控几个细节点讲述了 Slardar 在前端监控方向所面临关键问题的探索和实践，希望能够对大家在前端监控领域或者将来的工作中产生帮助。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9a59d4b2d25b0c5e0351660e76e64dd0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2652\" data-rawheight=\"446\" class=\"origin_image zh-lightbox-thumb\" width=\"2652\" data-original=\"https://pic1.zhimg.com/v2-9a59d4b2d25b0c5e0351660e76e64dd0_r.jpg\" data-original-token=\"v2-9a59d4b2d25b0c5e0351660e76e64dd0\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/si6h4uIRNDd2QGT1YsZXXQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">什么是比较好的低代码产品</a></b></h3><p data-pid=\"gek175g5\">说到低代码，喜欢的人特别喜欢，不喜欢的人很不喜欢，此外也有“假装”去喜欢的，也有喜欢得不明不白的，我现在对于低代码是有点儿喜欢的那种，不过只限于<b>「在特定领域，实现需求的速度比熟练工程师写代码要快的场景」</b>，这种场景下用起来真心会比较爽，可能也用得不爽的时候，但是这种不爽远小于他带来的效益减去原本敲代码的投入，也很值得将这类产品做到好用爱用。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5d67bb7137c653be6140f585c5c5299c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1108\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"1108\" data-original=\"https://pic1.zhimg.com/v2-5d67bb7137c653be6140f585c5c5299c_r.jpg\" data-original-token=\"v2-5d67bb7137c653be6140f585c5c5299c\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>深度阅读</b></h2><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/mrm9zNq0q8cYJDXatHh6-w\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">DeepKit —— 赋予 TypeScript 更多可能性</a></b></h3><p data-pid=\"smhb_c4l\">DeepKit 是市场上第一个在 JavaScript 运行时提供全套 TypeScript 类型的解决方案。它使前端/服务端可以共用一套TypeScript定义的数据模型，并且使用基于 TypeScript 实现的一套反射机制。</p><p data-pid=\"q8L4Wgoz\">但它依旧存在一些不足，比如 不支持外部类型，若代码中使用的类型信息来自第三方，且第三方库也没有经过 deepkit 的类型编译器的话，外部类型的类型信息在运行时也会全部丢失。</p><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7194711570272747581%23heading-15\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【2023】前端趋势前瞻，学起来！</a></b></h3><p data-pid=\"-_RBYOxB\">我们可以期待<a href=\"https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Frome.tools%252F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Rome</a>和<a href=\"https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fvercel.com%252Fblog%252Fturbopack\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Turbopack</a>等工具的快速发展，它们对开发人员体验产生重大影响——捆绑速度、<a href=\"https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fthenewstack.io%252Fci-vs-cd-explained-by-emoji-part-1-continuous-integration%252F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CI</a>时间等，由于 JavaScript 交付和/或可扩展架构（孤岛）的新颖方法，同时仍与<a href=\"https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fthenewstack.io%252Ftypescript-vs-react-js%252F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">React</a>兼容，像<a href=\"https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Fthenewstack.io%252Fastro-revs-up-static-sites-with-partial-hydration%252F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Astro</a>或<a href=\"https://link.zhihu.com/?target=https%3A//link.juejin.cn/%3Ftarget%3Dhttps%253A%252F%252Falephjs.org%252F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Aleph.js</a>这样的框架将获得更多关注。</p><p data-pid=\"8HCI45np\">我们已经见证了用非 <code>JavaScript</code>（<code>rust</code>、<code>go</code>） 编写的前端工具新时代的诞生。虽然仍有许多公司还没有准备好证明迁移成本的合理性，但那些敢于这样做的公司可以享受 10 倍（字面意思）构建速度的好处，并大大提高工程师的幸福感。</p><h2><b>外文精选</b></h2><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//www.robinwieruch.de/web-development-trends/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">10 Web Development Trends in 2023</a></b></h3><p data-pid=\"VT_ygvnW\">While, in my personal opinion, the web development landscape slowed down for a few years (2016 - 2021), it started to gain lots of traction just last year (also see <a href=\"https://link.zhihu.com/?target=https%3A//2022.stateofjs.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">State of JS</a> where the images for this article are taken from). In this article, I want to point out new web development trends that I have seen, which are certainly trends which I expect to continue sparking interest among web developers, and which I am excited about for the next year. Let&#39;s get right into them ...</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1ed946ea7d099bc72d31fdb95f1c896a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"458\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic3.zhimg.com/v2-1ed946ea7d099bc72d31fdb95f1c896a_r.jpg\" data-original-token=\"v2-1ed946ea7d099bc72d31fdb95f1c896a\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//whitep4nth3r.com/talks/we-need-more-javascript-frameworks/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">We actually need more JavaScript frameworks</a></b></h3><p data-pid=\"y32iazfg\">The technical choices you make, such as your JavaScript framework, don&#39;t just depend on the features your product will need. These choices are also massively influenced by how people will use your product. I will encourage you to ask meaningful questions when you are choosing your tech. Who is your audience? How fast is their internet connection? What devices do they use? Do they use more than one device frequently? How do they actually use the product?</p><h2><b>实践应用</b></h2><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/ltMwczbh27hkJGjxiacXWA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Markdown 写 PPT 是如何实现的？</a></b></h3><p data-pid=\"YiB-hf4m\">Markdown 是一种轻量的标记语言，我们只需要写 md 格式文件，不必考虑文档的排版，被广泛用于博客写作，技术文档编写等，程序员们都热爱，但我们工作中除了写文档，有时候还需要汇报工作，技术分享等，需要用到 PPT，但设计 PPT 可能不是每个程序员所喜欢的，所以我们可以使用一个非常好用的工具 slidev**[1]**, 可以使用 markdown 来制作演示文稿。</p><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7194516447932973112\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Vue3 table 性能优化，减少 85% 渲染耗时</a></b></h3><p data-pid=\"A0hlDcdN\">在 vue3 项目中，响应式数据这块要特别注意。当遇到比较慢的场景时，建议采用如下方法进行性能优化</p><ul><li data-pid=\"LPBpl0Bt\">使用 performance 分析性能瓶颈，或者自己写一个性能耗时逻辑，这样在做性能优化时有数据参考。</li><li data-pid=\"Db_Hr0Zv\">针对业务代码较多场景，采用注释 + 替换成静态节点方法排查耗时较长的逻辑，针对性优化。</li><li data-pid=\"Z6vEMxKh\">另外，可以使用 Vue devtools 调试工具，查看组件更新渲染耗时，排查响应式数据问题。</li></ul>",
            "voteup_count": 11,
            "comment_count": 0
        },
        "created": "2023-02-05T23:43:46+08:00"
    },
    {
        "content": {
            "id": 2799737079,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/33555626/answer/2799737079",
            "created_time": 1670918891,
            "updated_time": 1671820989,
            "question": {
                "type": "question",
                "id": 33555626,
                "title": "有哪些十分惊艳的书籍值得推荐？",
                "question_type": "normal",
                "created": 1438084984,
                "updated_time": 1590572702,
                "url": "https://www.zhihu.com/question/33555626",
                "is_deleted": false
            },
            "author": {
                "id": "b39ae8c52801361f3bf65d3723614781",
                "url_token": "fu-su-47-36-94",
                "name": "Cocoon",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-18322a3256977929a70f4f7318fb8601_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-18322a3256977929a70f4f7318fb8601.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/b39ae8c52801361f3bf65d3723614781",
                "user_type": "people",
                "headline": "Rise above,Focus on science",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1519049641
            },
            "thumbnail": "https://pica.zhimg.com/v2-0d67862163b2be0a6d4876917698c998_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 434,
            "comment_count": 18,
            "thanks_count": 385,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<h2>一.英语学习</h2><h3>1.《Merriam Webster&#39;s Vocabulary Builder 》</h3><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-c415535c6d1c6a217c7fa8d21313f984_720w.jpg?source=2c26e567\" data-rawwidth=\"1169\" data-rawheight=\"902\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-0d67862163b2be0a6d4876917698c998\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-e576a7261977fbf44e23be9a43234e58_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1169\" data-original=\"https://pic1.zhimg.com/v2-c415535c6d1c6a217c7fa8d21313f984_r.jpg?source=2c26e567\"/></figure><h3>2.《Word Power Made Easy》</h3><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-6d559dcf3420242a6b49ffdfb5bb8e19_720w.jpg?source=2c26e567\" data-rawwidth=\"1170\" data-rawheight=\"938\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-95298cd0fc1abbb2103da49df7eb17e5\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-e2f47e8f14d5673e5bf63fa686702793_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1170\" data-original=\"https://picx.zhimg.com/v2-6d559dcf3420242a6b49ffdfb5bb8e19_r.jpg?source=2c26e567\"/></figure><h3>3.《Verbal  Advantage》</h3><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-2f1b81c8c637e6d42d43af359594526f_720w.jpg?source=2c26e567\" data-rawwidth=\"1170\" data-rawheight=\"920\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-c654ca89ec1f8befa7ed7fcc2a477a41\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-b97844711343b252e643925662df8cb7_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1170\" data-original=\"https://picx.zhimg.com/v2-2f1b81c8c637e6d42d43af359594526f_r.jpg?source=2c26e567\"/></figure><h3>4.《英语语法新思维》(中级教程，高级教程)</h3><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-3bd83d3f8dea3f076a93259c68ee21bb_720w.jpg?source=2c26e567\" data-rawwidth=\"1170\" data-rawheight=\"878\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-8587c72b1a7a4d78b0ff669055d66346\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-2e86969b7ba1a5b59cc18b30a8570437_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1170\" data-original=\"https://picx.zhimg.com/v2-3bd83d3f8dea3f076a93259c68ee21bb_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h3>5.《立场——辩证思维训练》（Taking Sides）</h3><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-515689a9ba086b968829b4d194fdb120_720w.jpg?source=2c26e567\" data-rawwidth=\"1170\" data-rawheight=\"924\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-a9a71acb961fae1086b4db632ce596f3\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-ee7d78acc406812b94fbdbe0725f6bb4_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1170\" data-original=\"https://pic1.zhimg.com/v2-515689a9ba086b968829b4d194fdb120_r.jpg?source=2c26e567\"/></figure><h3>6.《The Elements of Style》</h3><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-3f34311797e6919b2d44cfd92691135d_720w.jpg?source=2c26e567\" data-rawwidth=\"1170\" data-rawheight=\"829\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-7190b4c24ef434e4f2c1fab84ee04e0c\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-d2f72516fb856b55406eb26c9eb899ae_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1170\" data-original=\"https://picx.zhimg.com/v2-3f34311797e6919b2d44cfd92691135d_r.jpg?source=2c26e567\"/></figure><h3>7.《On Writing Well》</h3><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-fbcb185bb3d4df2bda701b65bc588bd4_720w.jpg?source=2c26e567\" data-rawwidth=\"1170\" data-rawheight=\"900\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-25fca7851d6c9be7181047c1fa7d75ee\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-1c015cf527079bef6aafaccca2e4127e_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1170\" data-original=\"https://pica.zhimg.com/v2-fbcb185bb3d4df2bda701b65bc588bd4_r.jpg?source=2c26e567\"/></figure><h3>8.《Listen To This》</h3><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-9c08c74b4237a3a8c290a356f17a9103_720w.jpg?source=2c26e567\" data-rawwidth=\"1165\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-d98ade59cdca9199ac388156c0202d39\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-5297fd625fbd3c4d8c7d37c55a2cd398_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1165\" data-original=\"https://picx.zhimg.com/v2-9c08c74b4237a3a8c290a356f17a9103_r.jpg?source=2c26e567\"/></figure><h2>二.</h2><p data-pid=\"hGFtEBlS\"><b>注:1.未待完续,有时间继续补坑.</b></p><p data-pid=\"fkHL8wUb\"><b>2.</b></p>",
            "excerpt": "一.英语学习1.《Merriam Webster&#39;s Vocabulary Builder 》 [图片] 2.《Word Power Made Easy》 [图片] 3.《Verbal Advantage》 [图片] 4.《英语语法新思维》(中级教程，高级教程) [图片] 5.《立场——辩证思维训练》（Taking Sides） [图片] 6.《The Elements of Style》 [图片] 7.《On Writing Well》 [图片] 8.《Listen To This》 [图片] 二. 注:1.未待完续,有时间继续补坑. 2.",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 8,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pica.zhimg.com/v2-0d67862163b2be0a6d4876917698c998_720w.jpg?source=7e7ef6e2",
                        "width": 1169,
                        "height": 902,
                        "token": "v2-0d67862163b2be0a6d4876917698c998",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-95298cd0fc1abbb2103da49df7eb17e5_720w.jpg?source=7e7ef6e2",
                        "width": 1170,
                        "height": 938,
                        "token": "v2-95298cd0fc1abbb2103da49df7eb17e5",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-c654ca89ec1f8befa7ed7fcc2a477a41_720w.jpg?source=7e7ef6e2",
                        "width": 1170,
                        "height": 920,
                        "token": "v2-c654ca89ec1f8befa7ed7fcc2a477a41",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxj3sYK3CiDix9cCkgIlCgk1MzkxMzEwMTASCjI3OTk3MzcwNzkYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-12-13T16:08:11+08:00"
    },
    {
        "content": {
            "id": 2870631000,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/515850921/answer/2870631000",
            "created_time": 1675225809,
            "updated_time": 1675236364,
            "question": {
                "type": "question",
                "id": 515850921,
                "title": "中文互联网全在劝退工科，工科学生现在只靠爱好和鸡血支撑着吗？",
                "question_type": "normal",
                "created": 1644506415,
                "updated_time": 1694496549,
                "url": "https://www.zhihu.com/question/515850921",
                "is_deleted": false
            },
            "author": {
                "id": "c66885cdc1c4ec484b4ce7d48a0f2f24",
                "url_token": "zai-hui-shou-wo-xin-yi-jiu-28",
                "name": "再回首我心依旧",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-15c4ee09fb5f421b3069516f29c30aed_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-15c4ee09fb5f421b3069516f29c30aed.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/c66885cdc1c4ec484b4ce7d48a0f2f24",
                "user_type": "people",
                "headline": "工厂文学家，嵌入式码农，文学青年。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1513164673
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 3522,
            "comment_count": 304,
            "thanks_count": 524,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"7JXUUv_J\">那你可低估了工科教育的能量了, </p><p data-pid=\"7KdysXIQ\">工科教育可是集合了人类文明的四大精华:</p><p data-pid=\"zV1OWFRc\">儒家的禁欲主义;</p><p data-pid=\"QSPT__30\">东正教歌颂苦难的自残自虐文化;</p><p data-pid=\"5YjbLJh_\">西方的社会达尔文主义, 适者生存不适者淘汰的观念;</p><p data-pid=\"6Lckaoca\">印度教永远寄希望于下一个人生阶段的精神.</p><p data-pid=\"zfyZzDfb\">如此的工科，你怎能不爱？</p><hr/><p data-pid=\"nMCl9om8\">再说了, 学了工科只是一个结果, 为什么学工科,那才是原因.</p><p data-pid=\"f1SFBi5l\">这个原因, 学工科的各位自己比谁都清楚.</p>",
            "excerpt": "那你可低估了工科教育的能量了, 工科教育可是集合了人类文明的四大精华: 儒家的禁欲主义; 东正教歌颂苦难的自残自虐文化; 西方的社会达尔文主义, 适者生存不适者淘汰的观念; 印度教永远寄希望于下一个人生阶段的精神. 如此的工科，你怎能不爱？ 再说了, 学了工科只是一个结果, 为什么学工科,那才是原因. 这个原因, 学工科的各位自己比谁都清楚.",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjYtOnYCiDGwtYkkgIlCgk1NTIwMTU1ODESCjI4NzA2MzEwMDAYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-02-01T12:30:09+08:00"
    },
    {
        "content": {
            "id": 2849444911,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/60543186/answer/2849444911",
            "created_time": 1673940644,
            "updated_time": 1676458349,
            "question": {
                "type": "question",
                "id": 60543186,
                "title": "高级程序员在编程中有哪些特殊的习惯或方法？",
                "question_type": "normal",
                "created": 1496302256,
                "updated_time": 1496302256,
                "url": "https://www.zhihu.com/question/60543186",
                "is_deleted": false
            },
            "author": {
                "id": "852e6909888be64b0aef4de587ceb47e",
                "url_token": "gdgeek",
                "name": "游戏开发极客",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-e44e6132bf9d14bb09ec18e7932e96d2_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-e44e6132bf9d14bb09ec18e7932e96d2.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/852e6909888be64b0aef4de587ceb47e",
                "user_type": "people",
                "headline": "免费打工仔",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-913383c9cf1a0f615f2c0f86081efa38_r.png",
                        "night_mode_url": "https://pic1.zhimg.com/v2-d8a4285cbb0cf7c0e2841ac1268a1533.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://pic1.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "上海不加班网络科技有限公司 法定代表人"
                    }
                ],
                "badge_v2": {
                    "title": "上海不加班网络科技有限公司 法定代表人",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "上海不加班网络科技有限公司 法定代表人",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "上海不加班网络科技有限公司 法定代表人",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 47,
            "comment_count": 1,
            "thanks_count": 9,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"nMzsCaln\">不敢用高级来标榜自己，但二十几年编码经验的我，分享一些自己的经验吧，</p><p data-pid=\"K5-3HKXz\">1、不要相信设计，相信重构。</p><p data-pid=\"8ZCwtjuG\">2、代码重构的实际时间总是比预期的短很多，所以不要惧怕大规模的重构会影响进度。</p><p data-pid=\"3qMquq_W\">3、设计模式不是设计出来的，是代码重构过程中演化出来的。</p><p data-pid=\"KqtK30zD\">4、删掉代码比增加代码更有价值。</p><p data-pid=\"t3g6dnLy\">5、设计一定要符合逻辑。当为了简化设计而违反逻辑，会在之后增减功能的时候受到惩罚。</p><p data-pid=\"P0xYYHzd\">6、运行效率交给硬件，结构的规范和整洁是程序员的工作。</p><p data-pid=\"XepoN7n6\">7、（接上条）如果真的需要提高运行效率的时候，最好的办法是重新审视代码设计，删掉多余的模块和结构，不存在的代码才是运行效率最高的代码。</p><p data-pid=\"2AxEmDek\">8、好的代码如同物理公式一样简洁有力。</p><p data-pid=\"WjRfrtlq\">9、测试驱动就如同晨跑，明知道有好处，就是坚持不下来。（这句是检讨）</p><p data-pid=\"3R5GCS9K\">10、代码是给人看的，尽量写的清楚简洁理所当然。</p><p data-pid=\"LYYPXCsH\">11、（接上条）但如果开发库的代码，易用性要高于简洁。（看看cpp那些模版元的库，好用但不易读）。</p><p data-pid=\"5-vLQyrU\">12、代码的本质是人类对世界理解的抽象，而不是世界本质的抽象，不同的对世界的理解会有不同的“正确设计”，只要自洽，就是好的设计。</p><p data-pid=\"vQLtMh9V\">13、算法是单兵作战能力，软件架构是指挥战斗能力，都是非常重要的。（我的大学ACM培训老师曾经说过）</p><p data-pid=\"ra358jJ_\">14、对编码保持兴趣，不断学习新的知识，42岁的我证明程序员能平稳度过35岁。</p><p data-pid=\"Bihji3AK\">15、善用ChatGPT。（2023年2月15日增加）</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"KIzIgOlH\">其他的想到了再增加</p>",
            "excerpt": "不敢用高级来标榜自己，但二十几年编码经验的我，分享一些自己的经验吧， 1、不要相信设计，相信重构。 2、代码重构的实际时间总是比预期的短很多，所以不要惧怕大规模的重构会影响进度。 3、设计模式不是设计出来的，是代码重构过程中演化出来的。 4、删掉代码比增加代码更有价值。 5、设计一定要符合逻辑。当为了简化设计而违反逻辑，会在之后增减功能的时候受到惩罚。 6、运行效率交给硬件，结构的规范和整洁是程序员的工作。…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxivqNzOCiDBu+sHkgIlCgk1NDgxNjQxNDASCjI4NDk0NDQ5MTEYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-01-17T15:30:44+08:00"
    },
    {
        "content": {
            "id": 601517592,
            "title": "互联网迷思：算法竞赛的卡申银矿",
            "type": "article",
            "excerpt_title": "2022 年 6 月，「卡申银矿事件」曾轰动一时——有一位 Wikipedia 用户为了在文游中获取优势（UPD：评论区指出动机并非如此，感谢指正），杜撰了大量关于古罗斯史的词条，全长超过百万字，而其中部分内容还反向污染了其他语言的 Wiki。感叹之余，我变得乐于溯源更「一手」的信息，结果今天竟偶然发现了算法竞赛趣闻一则，特此与大家分享一下。 近几天我正在进行的一项工作是重写 OI-Wiki「最大流」词条的「Ford-Fulkerson 增广」…",
            "url": "https://zhuanlan.zhihu.com/p/601517592",
            "image_url": "",
            "created": 1674922594,
            "updated": 1676484484,
            "author": {
                "id": "face763afbe6ef5b4678dc5aef83bf01",
                "url_token": "nanako-60",
                "name": "Nanarikom",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-095f3bb55f4de94661b877862726f7b3_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-095f3bb55f4de94661b877862726f7b3.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/face763afbe6ef5b4678dc5aef83bf01",
                "user_type": "people",
                "headline": "我又把队友演飞啦",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1576437558
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"IiyfhF20\">2022 年 6 月，「卡申银矿事件」曾轰动一时——有一位 Wikipedia 用户为了在文游中获取优势（UPD：评论区指出动机并非如此，感谢指正），杜撰了大量关于古罗斯史的词条，全长超过百万字，而其中部分内容还反向污染了其他语言的 Wiki。感叹之余，我变得乐于溯源更「一手」的信息，结果今天竟偶然发现了算法竞赛趣闻一则，特此与大家分享一下。</p><p data-pid=\"-lPU-BXl\">近几天我正在进行的一项工作是重写 OI-Wiki「最大流」词条的「Ford-Fulkerson 增广」部分。OI-Wiki 大概已经是质量较高的中文算法竞赛资料，但这一部分内容逻辑混乱，充满不 well-defined 的表述、含糊其辞的伪证和莫名奇妙的文章结构，水准似乎甚至不及 CSDN 的垃圾博文。尽管如此，自我第一次看到这部分内容以来，它从来没有被显著改进过，因此最近我下定决心打算修订一下。这几天我整理资料并重写了很多较正式的、长期以来被中文互联网上绝大部分关于增广类最大流算法的介绍所忽略的证明，它们已经被提案到 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/OI-wiki/OI-wiki/pull/4663\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PR4663</a>，希望这部分工作能早日合并到主分支！（upd：<a href=\"https://link.zhihu.com/?target=https%3A//oi-wiki.org//graph/flow/max-flow/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">合并了</a>！）</p><p data-pid=\"UZI0ENG9\">说回正题——算法竞赛趣闻。在 OI-Wiki 上，作为增广类最大流算法的重要部分，Edmonds-Karp 算法一节使用了以下标题「Edmonds-Karp 动能算法（EK 算法）」。我很早就对这个标题感到疑惑，因为 Edmonds-Karp 算法的流程中似乎没有任何能定义成「动能」或者让人联想到「动能」的内容。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-498c963e2f4b61be1b645810dc586abb_b.png\" data-rawwidth=\"458\" data-rawheight=\"70\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"458\" data-original=\"https://pic4.zhimg.com/v2-498c963e2f4b61be1b645810dc586abb_r.jpg\" data-original-token=\"v2-498c963e2f4b61be1b645810dc586abb\"/></figure><p data-pid=\"0F84Nhs3\">在重写这一部分内容的过程中，再次看到这个标题的我决定趁此机会研究一下这个标题到底最早出自哪里、是否来自某个中文用户的杜撰。在 Google 上尝试了各种检索之后，除了一个叫做「Chemical Reaction Optimization Algorithm」的最大流算法定义了「Kinetic Energy」之外，我没有发现任何关于最大流的英文资料提到「动能」；百度上大量提到「Edmonds-Karp 动能算法」的页面也基本都出现在近几年，尽管 Edmonds-Karp 算法是一个上世纪七十年代的算法。</p><p data-pid=\"l1yIPNka\">此时我内心已经有答案了，但是我继续在 Universal OJ 群提出了以上问题。如果这个词存在一个实际可信的来源，群里的老害中应该总是会有人听说过。结果是 UOJ 群友也开始对这个问题感到疑惑，我们开始查这个标题最早是由谁 commit 到 OI-Wiki 的。Negiizhao 指出这部分内容最早可以追溯到 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/OI-wiki/OI-wiki/pull/344\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PR344</a>，在 2018.09.01 被一名叫做 Xarfa 的一击脱离用户所编辑，并被当时一位叫做 GekkaSaori 的 reviewer 通过。</p><p data-pid=\"SBJsitwS\">由于不知道一击脱离的 Xarfa 到底是谁，这个问题好像也就带着些许一拳打在棉花上的意味到此为止了。然而这似乎太莫名其妙了一点，我还是不甘心。在百度检索「最大流 动能 site:<a href=\"https://link.zhihu.com/?target=http%3A//luogu.com.cn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">luogu.com.cn</span><span class=\"invisible\"></span></a>」之后，我发现这个说法竟然有一个比 PR344 更早的来源——2018.03.24 的一篇评论数量为 0 的个人博客——<a href=\"https://link.zhihu.com/?target=https%3A//www.luogu.com.cn/blog/JZM1926/wang-luo-zui-da-liu\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">网络最大流 - DimensionTripper 的博客 - 洛谷博客</a>，其中出现了如下标题。由于这篇博客引用的资料中并没有出现「动能」一说，这可能是这个说法的最早来源。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-53b38c68dbd9fc0632cb0ce93e97822f_b.png\" data-rawwidth=\"566\" data-rawheight=\"94\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"566\" data-original=\"https://pic4.zhimg.com/v2-53b38c68dbd9fc0632cb0ce93e97822f_r.jpg\" data-original-token=\"v2-53b38c68dbd9fc0632cb0ce93e97822f\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"C8UTf2Zf\">群友意识到，原来「动能」这个词来自于个人博客上的一个玩笑，即物理上常用 <img src=\"https://www.zhihu.com/equation?tex=E_k\" alt=\"E_k\" eeimg=\"1\"/> 代表动能这一物理量。Xarfa 可能是一位对网络流理解不多但尝试搬运该部分内容的用户，但在搬运时没有意识到这是一个玩笑，并且由于 OI-Wiki 禁止使用删除线所以移除了「动能」二字的删除线。这一玩笑在逃过 review 之后进入了 OI-wiki 并保持原状至今长达四年有余，期间部分其他网站和博客也开始引用这一说法。一篇 0 评论的个人博客中的玩笑就这样被一些不明真相的选手当作正式表述以讹传讹地在中文算法竞赛圈子中传播。</p><p data-pid=\"ICF8DjUA\">难绷之余，这也只不过是中文算法竞赛圈子现状的一个缩影。作为许多算法竞赛选手眼中的黑盒，网络流这一领域确实是各种奇怪伪证的重灾区；但在除此之外的领域，也有大量错误的信息、过时的语法等等，通过许多个人博客杂乱无章的互相摘编，在国内算法竞赛选手之间广为流传。我心目中的算法竞赛应当有一种纯粹的、严谨的、科学的美感在其中，而如今的算法竞赛是否也大势所趋地陷入一种互联网迷思？</p><p data-pid=\"XJvlpd_e\">CSDN 博文良莠不齐也无可指摘，但 OI-Wiki 不应如此。我不想说「尽管如此我也无力改变什么就是了」。确实我们中的大部分人都不可能让算法竞赛出现什么显著的改变，但我仍愿意做一些向沙漠中洒水的工作。我很想看到修订 OI-Wiki「最大流」页面之后，下一代算法竞赛选手不再满口念着各种最大流算法伪证的那天。很没有意义是吗？毕竟不一定会有那天呢。但我很喜欢耶！</p><hr/><p data-pid=\"awHwTAcC\">Upd：动笔之前没想到这篇文章能得到这么多关注，所以这里给不熟悉算法竞赛的读者额外补充一些信息：一是行文比较正式可能给读者带来「这一讹误已造成较显著影响」的印象，不过幸运的是实际上到目前为止它传播的规模不算大，希望 OI-Wiki 修正之后能逐渐停止传播；二是对于类似「不同于卡申银矿事件，本文事件的最初来源只是一个无恶意的玩笑」的评价我当然赞同，只是调查完之后心里感到有点离谱，联想到看过的各种以讹传讹资料，忍不住借来吐槽一下，希望这个比喻不会显得过于不恰当。感谢大家的阅读。</p>",
            "voteup_count": 523,
            "comment_count": 34
        },
        "created": "2023-01-29T00:16:34+08:00"
    },
    {
        "content": {
            "id": 2856433228,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/579789393/answer/2856433228",
            "created_time": 1674416036,
            "updated_time": 1681581976,
            "question": {
                "type": "question",
                "id": 579789393,
                "title": "如何看待2022年重庆GDP超越广州，位列全国第四？",
                "question_type": "normal",
                "created": 1674217091,
                "updated_time": 1674489066,
                "url": "https://www.zhihu.com/question/579789393",
                "is_deleted": false
            },
            "author": {
                "id": "e52a29fde27917ec82ca1963f8e68dd2",
                "url_token": "lyxzwjpku",
                "name": "hovercraft",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-72c8a9ad60393808bebae78d1163b719_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-72c8a9ad60393808bebae78d1163b719.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/e52a29fde27917ec82ca1963f8e68dd2",
                "user_type": "people",
                "headline": "PhD in Finance",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1533478972
            },
            "thumbnail": "https://pic1.zhimg.com/v2-a3c0cbea3b2b9a57355af1be43301837_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 622,
            "comment_count": 171,
            "thanks_count": 85,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"b_OM1ss5\">一句话概括就是，2010年后广州迅速滑落，滑落速度让人震惊。相比于GDP绝对排名下滑明显的天津，广州的下滑更加悄无声息、难以察觉，但却可能比前者更加触目惊心。</p><p data-pid=\"sYJwMxuO\">比起重庆GDP超过广州这种数字游戏，我认为更值得关注的杭州2022年国内税收超过了广州。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-8188ec08f4a78a6b687fe942157b5bed_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"621\" data-original-token=\"v2-a3c0cbea3b2b9a57355af1be43301837\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-49f6cb7a024f11a3fbdd458898d88e0e_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://picx.zhimg.com/v2-8188ec08f4a78a6b687fe942157b5bed_r.jpg?source=2c26e567\"/></figure><p data-pid=\"airu2wjU\">由于广州三级财政，只比较一般公共预算收入对广州不公平。国税局公布的国内税收总额，则排出了财政转移的影响，是比较各城市直接创税的最好指标。</p><p data-pid=\"JCSPeyXv\">我找到下2012年和2022年的数据。2012年，广州国税组织税收收入2536亿元，2022年是4454.7亿；深圳2012年国税收入2023亿，2022年增长到8124亿；杭州我没找到2012年的数据，但2013年杭州国税第一次超千亿，达到1010亿，不到同期广州的一半，而2022年杭州国税反超了广州。考虑到广州人口基数仍大于深圳，远大于杭州，经济质量的落后可能更加明显。</p><p data-pid=\"xtDbRCba\">三十年前的90年代初期，广州的收入水平在全国可谓是一骑绝尘，比北京高出了50%。那时全国人民都知道&#34;东西南北中，发财到广东&#34;。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-ea1d8fe56b0e669bc06de44764c6e64e_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"479\" data-original-token=\"v2-b7cce02401479428539d9ad4e803987a\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-fe5a87b19a22ad3b01db32a1fbfc15b6_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pica.zhimg.com/v2-ea1d8fe56b0e669bc06de44764c6e64e_r.jpg?source=2c26e567\"/></figure><p data-pid=\"tYdt7ucn\">二十年前，广州GDP总量离北京只差咫尺之遥，民富水平仍然领先京沪。那时候的广州是能和京沪三足鼎立的一线城市(我认为比现在深圳更接近京沪)，跟京沪共同组成第一梯队。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-84a51f052a17cca184da9ab45fc7add3_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"613\" data-rawheight=\"507\" data-original-token=\"v2-64643d95d03c4784c9524b446c88a698\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-10704c67e9a68405de7ddf9c86eea6d8_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"613\" data-original=\"https://picx.zhimg.com/v2-84a51f052a17cca184da9ab45fc7add3_r.jpg?source=2c26e567\"/></figure><p data-pid=\"WU5nZHRO\">十年前，广州经济质量还能和深圳打得有来有回，加上大区中心的科教文卫优势和三大国际门户城市地位，广州综合实力可以说明显强于深圳，对杭州更是有降维打击的实力。虽然那时候广州已经无法跟京沪比较，但由于惯性人们最常说的还是北上广而不是北上广深。</p><p data-pid=\"GkwjE-Wy\">而现在，经济方面广州被深圳彻底甩不见了，同时杭州后来居上，继上市公司、个税等反映头部质量的指标超过广州后，综合体量和质量的国税总量指标也反超了广州。即使广州依然能靠大区门户城市地位在综合实力上扳回一局，但不争的事实就是经济指标上陆续被体量更小的杭州赶超，后面的追兵苏州也渐行渐近。站在2023年，至少在经济领域我不认为广州还具有一线城市的实力，论综合实力还能勉强当个守门员，但它离京沪的距离已经远远大于强二线(四大省会+苏州)离它的距离了。</p><p data-pid=\"A-J0oQDM\">先写到这吧，有时间再聊聊我认为广州面临的主要困境。</p>",
            "excerpt": "一句话概括就是，2010年后广州迅速滑落，滑落速度让人震惊。相比于GDP绝对排名下滑明显的天津，广州的下滑更加悄无声息、难以察觉，但却可能比前者更加触目惊心。 比起重庆GDP超过广州这种数字游戏，我认为更值得关注的杭州2022年国内税收超过了广州。 [图片] 由于广州三级财政，只比较一般公共预算收入对广州不公平。国税局公布的国内税收总额，则排出了财政转移的影响，是比较各城市直接创税的最好指标。 我找到下2012年和2022年的数…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 3,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-a3c0cbea3b2b9a57355af1be43301837_720w.jpg?source=7e7ef6e2",
                        "width": 640,
                        "height": 621,
                        "token": "v2-a3c0cbea3b2b9a57355af1be43301837",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pica.zhimg.com/v2-b7cce02401479428539d9ad4e803987a_720w.jpg?source=7e7ef6e2",
                        "width": 640,
                        "height": 479,
                        "token": "v2-b7cce02401479428539d9ad4e803987a",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pica.zhimg.com/v2-64643d95d03c4784c9524b446c88a698_720w.jpg?source=7e7ef6e2",
                        "width": 613,
                        "height": 507,
                        "token": "v2-64643d95d03c4784c9524b446c88a698",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxjM7IbSCiDq4LkrkgIlCgk1NDk0MzUxOTYSCjI4NTY0MzMyMjgYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-01-23T03:33:56+08:00"
    },
    {
        "content": {
            "id": 318487313,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/19981544/answer/318487313",
            "created_time": 1518513876,
            "updated_time": 1518603855,
            "question": {
                "type": "question",
                "id": 19981544,
                "title": "程序员应该如何学习算法？",
                "question_type": "normal",
                "created": 1324394008,
                "updated_time": 1566873587,
                "url": "https://www.zhihu.com/question/19981544",
                "is_deleted": false
            },
            "author": {
                "id": "4c34246c105d506ddb7161653694761a",
                "url_token": "yingwuyi",
                "name": "嬴无翳",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-748ebe317bd7a1cec810877fdacffbd1_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-748ebe317bd7a1cec810877fdacffbd1.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/4c34246c105d506ddb7161653694761a",
                "user_type": "people",
                "headline": "学数学的",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "https://pic1.zhimg.com/v2-08f69646159b058bd82c8d3b605a26cc_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 578,
            "comment_count": 106,
            "thanks_count": 132,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"nAELjXKA\">做人做事就要喝最烈的酒，日最野的狗。</p><p data-pid=\"OeuhiQ38\">我不明白为什么有那么多说被《算法导论》打击到的。我倒是很喜欢这本书，并且推荐初学者或者看过其他不那么“难”的算法书的同学好好看看这本书。</p><p data-pid=\"dFLUHsj9\">讲讲我学习算法的经历吧。大一刚进入大学时就对算法感兴趣，我是数学类专业的，专业课里没有算法课，就打算看书自学一下。咨询学校ACM校队学长该看什么书，他们都推荐刘汝佳的《算法竞赛入门经典》，还说《算法导论》里都是伪代码不利于初学者学习。但是这本书我看名字就把它pass掉了，因为我不打算搞ACM，只想凭兴趣随便学学算法吧。当时在知乎上看到大家推荐的这本Sedgewick的《Algorithm》，就买了一本英文影印版来看，感觉一般。可能是因为学数学的吧，总觉得写的不“严谨”，几乎不讲算法的证明。于是翻了几页就放下了。这之后在图书馆里看到一本《算法技术手册》，感觉挺薄的可以拿来入门。结果看了三十业都是在讲作归并排序，选择排序者如何处理一个小bug的故事，最后三十页左右终于涉及到了排序算法但只是给出归并排序与选择排序的运行速度随输入规模的变化情况比较图，还是没开始正经讲算法。第二天我就还了这本书，然后中断了算法学习。终于到大一的暑假想要重新开始学习算法，这时捧出久仰大名早早买好而吃灰已久的《算法导论》。这之前翻过几页，但觉得不容易沉浸入作者讲解知识的模式中，然而这时再看觉得字字珠玑，引人入胜，在清晰地讲解知识的同时注重了严谨性。这就是我一直期待的算法书呀！那个暑假有实习，但我还是每天抽时间看《算法导论》。然而它篇幅的确太大，我这个寒假还在看它。不过看这本书对我来说已经是一种享受了，多看一段时间也无妨，嘿嘿。</p><p data-pid=\"kSPjlRbc\">根据我学习算法的经历，我列一些不成熟的小建议吧：</p><ol><li data-pid=\"PTDHQN7z\">《算法导论》，读中文英文都行。中文翻译质量尚可，个别读不通顺的地方仔细想一下或者对照英文就能明白。</li><li data-pid=\"4BPjgjCU\">读《算法导论》时不做习题就失去了一半的意义。不过在做题苦思冥想而不得时，可以参考这个repository:</li></ol><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gzc/CLRS\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-98502912979271d53b27a5697fcaf852_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">gzc/CLRS</a><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"D6ND0_Al\">3. 斯坦福Tim Roughgarden教授的算法专项课程。教授人长得帅，声音好听，尤其是课讲得超棒！下面链接是专项课程第一门课 Divide and Conquer, Sorting and Searching, and Randomized Algorithms。这门课是收费的，但是点开专项课程中单独一门课的主页。可以找到申请助学金的选项，按要求填好申请，15天后就会100%通过申请，然后就可以访问课程的全部资源了。</p><a href=\"https://link.zhihu.com/?target=https%3A//www.coursera.org/learn/algorithms-divide-conquer/home/welcome\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-11a5364f15d24d2e816d016dd142d808_ipico.jpg\" data-image-width=\"1086\" data-image-height=\"1086\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Coursera | Online Courses From Top Universities. Join for Free</a><p data-pid=\"MXdJRONb\">4. 一本机械工业出版社影印的书《算法概论》，因为三位作者分别叫Dasgupta，Papadimitriou，Vazirani，人称这本书为DPV。它在不长的篇幅里（大概只有《算法导论》的四分之一）涵盖了基本的算法知识，同时兼顾了严谨性，是本不错的入门书。</p><p data-pid=\"_YXw2QnI\">最后，快过年啦，给我看过的算法书来张全家福，嘿嘿</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-08f69646159b058bd82c8d3b605a26cc_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-original-token=\"v2-08f69646159b058bd82c8d3b605a26cc\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://picx.zhimg.com/v2-08f69646159b058bd82c8d3b605a26cc_r.jpg?source=2c26e567\"/></figure>",
            "excerpt": "做人做事就要喝最烈的酒，日最野的狗。 我不明白为什么有那么多说被《算法导论》打击到的。我倒是很喜欢这本书，并且推荐初学者或者看过其他不那么“难”的算法书的同学好好看看这本书。 讲讲我学习算法的经历吧。大一刚进入大学时就对算法感兴趣，我是数学类专业的，专业课里没有算法课，就打算看书自学一下。咨询学校ACM校队学长该看什么书，他们都推荐刘汝佳的《算法竞赛入门经典》，还说《算法导论》里都是伪代码不利于初学…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 1,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-08f69646159b058bd82c8d3b605a26cc_720w.jpg?source=7e7ef6e2",
                        "width": 1080,
                        "height": 1440,
                        "token": "v2-08f69646159b058bd82c8d3b605a26cc",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEOCAQQAxiR9u6XASCsxAqSAiMKCDg3OTczNzc2EgkzMTg0ODczMTMYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2018-02-13T17:24:36+08:00"
    },
    {
        "content": {
            "id": 185412037,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/61225796/answer/185412037",
            "created_time": 1497753470,
            "updated_time": 1673885199,
            "question": {
                "type": "question",
                "id": 61225796,
                "title": "学习haskell的过程中有哪些值得一做的练手项目？",
                "question_type": "normal",
                "created": 1497718557,
                "updated_time": 1497718557,
                "url": "https://www.zhihu.com/question/61225796",
                "is_deleted": false
            },
            "author": {
                "id": "86adac2bde2cc16b5548fdf42deb0410",
                "url_token": "chojyuzim",
                "name": "祖与占",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-002139cfd04cae5d607407120e3bd2ef_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-002139cfd04cae5d607407120e3bd2ef.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/86adac2bde2cc16b5548fdf42deb0410",
                "user_type": "people",
                "headline": "心智被击穿的CRUD程序员",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19585411",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19585411",
                                "name": "函数式编程",
                                "avatar_url": "https://pica.zhimg.com/44e47e6d7_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19552826",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19552826",
                                "name": "编程语言",
                                "avatar_url": "https://picx.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "函数式编程等 2 个话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "函数式编程等 2 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19585411",
                                    "token": "19585411",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19585411",
                                    "name": "函数式编程",
                                    "avatar_path": "44e47e6d7",
                                    "avatar_url": "https://pica.zhimg.com/44e47e6d7_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552826",
                                    "token": "19552826",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552826",
                                    "name": "编程语言",
                                    "avatar_path": "v2-14ae19e0df2e9517722a4832fc682743",
                                    "avatar_url": "https://picx.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "函数式编程等 2 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19585411",
                                    "token": "19585411",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19585411",
                                    "name": "函数式编程",
                                    "avatar_path": "44e47e6d7",
                                    "avatar_url": "https://pica.zhimg.com/44e47e6d7_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552826",
                                    "token": "19552826",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552826",
                                    "name": "编程语言",
                                    "avatar_path": "v2-14ae19e0df2e9517722a4832fc682743",
                                    "avatar_url": "https://picx.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 159,
            "comment_count": 18,
            "thanks_count": 32,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<ul><li data-pid=\"V9_eerZI\">一个能用的 Parser Combinator, 当时我写了个用来应付编译原理作业. 可以参考 Monadic parsing in Haskell 和 Hutton 的 Programming in Haskell 相关章节, 稍微入门 Haskell 就可以写了, 对理解 Monad, Applicative 还有以后用其他完备的 Parser Combinator 库挺有帮助, 虽然实现上差距相当大</li><li data-pid=\"_eOgymyu\">基于上面的 Parser Combinator 写各种 Parser: S-Exp, JSON, HTTP, 某个二进制格式/协议(例如 Memcached?) 有错误信息/恢复/位置, 做 benchmark, 体会各种 PC 的差别/拓展(parsec, attoparsec, readp, flatparse)和自己的渣渣</li><li data-pid=\"51cvPliR\">R5RS 编译到 MIPS  模拟器, 这里也可以利用上面写的 Parser Combinator, 还有可以练习 Haskell 各种 (syntax) tree manipulation 的技法以及如何使用 Monad Transformer Stack, 写编译器算是 Haskell 看家项目, 所以提高点难度</li><li data-pid=\"QJZzspNn\">系统编程方面, 可以实现 GNU Coreutils 里的各种工具, 可以用各种解析命令行参数的库, 还有各种 Streaming 抽象的库 (这里可以折腾下 Free Monad Transformers), 不爽的话继续 benchmark,你会发现为什么 GNU 那帮人这么生猛, 参考:   <a href=\"https://link.zhihu.com/?target=https%3A//github.com/alexander-b/coreutilhs\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">alexander-b/coreutilhs</a> , <a href=\"https://link.zhihu.com/?target=https%3A//wiki.haskell.org/Simple_Unix_tools\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Simple Unix Tools</a></li><li data-pid=\"Dh4GTG-n\">一个简单的 Web Framework, 可以理解 Haskell 应用的 Monad Transformer Stack 之类的, 以及怎么构建 Haskell 应用. 可以参考 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/cbaatz/build-a-haskell-web-framework\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">cbaatz/build-a-haskell-web-framework</a></li><li data-pid=\"e1fiHdjb\">把火车头书(Java Concurrency in Practice) 跟 java.util.concurrent 用 Haskell 过一遍, 体会 Haskell 的并发优势 (逃</li><li data-pid=\"JLRT5rQP\">&lt;----------------------------------- 更新的分割线 -------------------------------&gt;</li><li data-pid=\"RvQA9nzi\">上面开玩笑的, 接下来熟练下 Haskell 里各种并发的基础设施 (LWT, Channel, MVar, STM), 结合上面写 HTTP Parser, Web Framework, Stream库还有并发的经验架一个 HTTP Server, 继续 benchmark 跟 Nginx 杠的那种 benchmark, 做 Profile. 搞明白 Haskell 究竟快在哪里或者慢在哪里</li></ul>",
            "excerpt": "一个能用的 Parser Combinator, 当时我写了个用来应付编译原理作业. 可以参考 Monadic parsing in Haskell 和 Hutton 的 Programming in Haskell 相关章节, 稍微入门 Haskell 就可以写了, 对理解 Monad, Applicative 还有以后用其他完备的 Parser Combinator 库挺有帮助, 虽然实现上差距相当大基于上面的 Parser Combinator 写各种 Parser: S-Exp, JSON, HTTP, 某个二进制格式/协议(例如 Memcached?) 有错误信息/恢复/位置, 做 b…alexander-b/coreutilhs , Simple Unix Tools 一个简单的 Web Framework, 可以理解 Haskell 应用的 Monad Transformer Stack 之类的, 以及怎么构建 Haskell 应用. 可以参考 cbaatz/build-a-haskell-web-framework 把火车头书(Java Concurrency in Practice) 跟 java.util.concurrent 用 Haskell 过一遍, 体会 Haskell 的并发优势 (逃&lt;--- 更新的分割线 ---&gt;上面开玩笑的, 接下来熟练下 Haskell 里各种并发的基础设施 (LWT, Channel, MVar, STM), 结合上面写 HTTP Parser, Web Framework, Stream库还有并发的经验架一个 HTTP Server, 继续 benchmark 跟 Nginx 杠的那种 benchmark, 做 Profile. 搞明白 Haskell 究竟快在哪里或者慢在哪里",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxjF07RYILeW/AeSAiMKCDYzNzgyOTU5EgkxODU0MTIwMzcYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2017-06-18T10:37:50+08:00"
    },
    {
        "content": {
            "id": 1720622036,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/380468704/answer/1720622036",
            "created_time": 1612713213,
            "updated_time": 1617896559,
            "question": {
                "type": "question",
                "id": 380468704,
                "title": "为什么有人说银行科技岗是程序员最好的就业选择？",
                "question_type": "normal",
                "created": 1584513098,
                "updated_time": 1654424767,
                "url": "https://www.zhihu.com/question/380468704",
                "is_deleted": false
            },
            "author": {
                "id": "4546452329453afdcfd3e534325c1e51",
                "url_token": "yang-lei-96-72",
                "name": "Deep Van",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-2161a03f1aac4c7b20a4edfa43318a7a_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-2161a03f1aac4c7b20a4edfa43318a7a.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/4546452329453afdcfd3e534325c1e51",
                "user_type": "people",
                "headline": "超低时延quant developer，地牢之主。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "https://pica.zhimg.com/v2-80af65edcd3beda168e785a075c9ebaa_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 553,
            "comment_count": 142,
            "thanks_count": 89,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"GaNZSKsg\">         国外不知道，国内我这么说吧，基本所有非HF非衍生品交易岗的金融机构的程序员岗位都是坑，别去。</p><p data-pid=\"wSH5JJ8k\">银行IT岗:如果去了分行，技术基本废掉；去了总行嘛，核心系统基本都是基于IOE的，少数几家不用IOE的用的也是阿里系的，这意味着你的技术很难精进，此外用cobol写业务逻辑也不好受，跳槽也难。最蛋疼的是银行IT部门在银行被当成成本中心，所以地位不高和钱也不多。当然，也有例外，比如写FICC相关IT系统的岗位，这个就是利润中心，比如平安银行的那个领航系统。但当前国内银行这一块相当落后，和欧美同行比起来落后一大截。大部分银行的固收交易还停留在手动交易微信群撮合的土包子阶段。</p><p data-pid=\"V-7Zif07\">评论区看来还是有人心里没有批数，干IT，稍微有点追求的人，要么追求技术，要么追求钱，要么追求地位，请问银行IT这三样有吗？券商和HF都有搞IT出身的大BOSS，国内银行有IT出身的行长不?</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"C7kG4W7p\">啊，对了，这里帮在网商银行搞FICC做市业务好基友招个cpp码农，待遇优厚。</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-80af65edcd3beda168e785a075c9ebaa_720w.jpg?source=2c26e567\" data-rawwidth=\"1080\" data-rawheight=\"2340\" data-size=\"normal\" data-original-token=\"v2-80af65edcd3beda168e785a075c9ebaa\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-070276337f3840ddb6449863c167e977_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://picx.zhimg.com/v2-80af65edcd3beda168e785a075c9ebaa_r.jpg?source=2c26e567\"/></figure><p data-pid=\"8ArCsE-d\">险资IT岗:问题同银行IT岗，待遇更惨</p><p data-pid=\"77PFIgEt\">期货公司IT岗:穷，因为期货公司目前还算靠谱的的收入来源就两个:交易手续费和风险子公司业务。</p><p data-pid=\"rPWk_RQ0\">期货子公司:主营业务就是衍生品做市，但国内的期子基本没有做这个业务的能力，只能外包给外部或者从花街海龟里招人顶起来。一旦交易所不再罩着他们，分分钟被jump干爆。</p><p data-pid=\"dF8YxkV_\">券商IT部门:弱鸡部门，同样是成本中心，该部门的核心技能是面向领导用ppt编程，闭门造车的现象严重。当然，也有少数不错的岗位，比如中泰XTP部门，中信华泰招商的衍生品做市部门等等，但总体而言还是不行。</p><p data-pid=\"MvwaktbD\">公募IT岗:养老岗，钱也不多。</p><p data-pid=\"MgrKwxvv\">顺便挂一个人。</p><p data-pid=\"auK68sXb\">就这言论，这对待技术的态度，架构师?华泰证券IT部门那种量产型【贬义词】架构师吧？技术业务拉胯得一批，活儿基本全外包，不入流的货。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-5ee77b223897fcc6ae72357826e20b00_720w.jpg?source=2c26e567\" data-rawwidth=\"1080\" data-rawheight=\"1712\" data-size=\"normal\" data-original-token=\"v2-5ee77b223897fcc6ae72357826e20b00\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-1c505089287110ea30e73033a195c7f1_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pica.zhimg.com/v2-5ee77b223897fcc6ae72357826e20b00_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-72b299f192352c676bf90fb035471dbb_720w.jpg?source=2c26e567\" data-rawwidth=\"1080\" data-rawheight=\"2340\" data-size=\"normal\" data-original-token=\"v2-72b299f192352c676bf90fb035471dbb\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-44e5cc993555534fdd821aacc4e3d9b6_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://picx.zhimg.com/v2-72b299f192352c676bf90fb035471dbb_r.jpg?source=2c26e567\"/></figure><p></p>",
            "excerpt": "国外不知道，国内我这么说吧，基本所有非HF非衍生品交易岗的金融机构的程序员岗位都是坑，别去。 银行IT岗:如果去了分行，技术基本废掉；去了总行嘛，核心系统基本都是基于IOE的，少数几家不用IOE的用的也是阿里系的，这意味着你的技术很难精进，此外用cobol写业务逻辑也不好受，跳槽也难。最蛋疼的是银行IT部门在银行被当成成本中心，所以地位不高和钱也不多。当然，也有例外，比如写FICC相关IT系统的岗位，这个就是利润中心，…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 3,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pica.zhimg.com/v2-80af65edcd3beda168e785a075c9ebaa_720w.jpg?source=7e7ef6e2",
                        "width": 1080,
                        "height": 2340,
                        "token": "v2-80af65edcd3beda168e785a075c9ebaa",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-5ee77b223897fcc6ae72357826e20b00_720w.jpg?source=7e7ef6e2",
                        "width": 1080,
                        "height": 1712,
                        "token": "v2-5ee77b223897fcc6ae72357826e20b00",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-72b299f192352c676bf90fb035471dbb_720w.jpg?source=7e7ef6e2",
                        "width": 1080,
                        "height": 2340,
                        "token": "v2-72b299f192352c676bf90fb035471dbb",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxjUt7q0BiDwi6oWkgIlCgkzNDI5MjA3MjYSCjE3MjA2MjIwMzYYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2021-02-07T23:53:33+08:00"
    },
    {
        "content": {
            "id": 29648253,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/19981544/answer/29648253",
            "created_time": 1408895527,
            "updated_time": 1408937422,
            "question": {
                "type": "question",
                "id": 19981544,
                "title": "程序员应该如何学习算法？",
                "question_type": "normal",
                "created": 1324394008,
                "updated_time": 1566873587,
                "url": "https://www.zhihu.com/question/19981544",
                "is_deleted": false
            },
            "author": {
                "id": "71637fe077b9a2d7be320e2800ccd818",
                "url_token": "yao-dong-27",
                "name": "姚冬",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-ff79784fb7891d01d633e368418caeb9_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-ff79784fb7891d01d633e368418caeb9.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/71637fe077b9a2d7be320e2800ccd818",
                "user_type": "people",
                "headline": "Next Big Thing",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19584970",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19584970",
                                "name": "C++",
                                "avatar_url": "https://picx.zhimg.com/v2-e5f8ab95c0e99a29704fae7e629f9f77_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19554298",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19554298",
                                "name": "编程",
                                "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19552330",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19552330",
                                "name": "程序员",
                                "avatar_url": "https://pic1.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "C++等 3 个话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "C++等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19584970",
                                    "token": "19584970",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19584970",
                                    "name": "C++",
                                    "avatar_path": "v2-e5f8ab95c0e99a29704fae7e629f9f77",
                                    "avatar_url": "https://picx.zhimg.com/v2-e5f8ab95c0e99a29704fae7e629f9f77_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552330",
                                    "token": "19552330",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552330",
                                    "name": "程序员",
                                    "avatar_path": "v2-3d917fb11613b7b13ecd7bbeb1c554e6",
                                    "avatar_url": "https://pic1.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "C++等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19584970",
                                    "token": "19584970",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19584970",
                                    "name": "C++",
                                    "avatar_path": "v2-e5f8ab95c0e99a29704fae7e629f9f77",
                                    "avatar_url": "https://picx.zhimg.com/v2-e5f8ab95c0e99a29704fae7e629f9f77_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552330",
                                    "token": "19552330",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552330",
                                    "name": "程序员",
                                    "avatar_path": "v2-3d917fb11613b7b13ecd7bbeb1c554e6",
                                    "avatar_url": "https://pic1.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 692,
            "comment_count": 46,
            "thanks_count": 215,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"TNdQuLEa\">推荐我的一位朋友写的 Book of Elementary Algorithms and Data structures 《初等算法》</p><p data-pid=\"XQ6LyJZ0\">虽然书是用英文写的，但我这位朋友是中国人，正式的工作是软件工程师和项目经理，业余时间对算法很有兴趣，他花了数年时间，把自己对算法的心得体会写成了这本书，把全部的内容以及相关源代码都开源了。</p><p data-pid=\"7Bdg87So\">他对算法和编程语言有深入的研究，能熟练使用十余种编程语言。这本书中的算法的参考实现都提供了 C, C++, Haskell, Python, Scheme/Lisp的版本。</p><p data-pid=\"vFfAaaSz\">项目开源：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/liuxinyu95/AlgoXY\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">liuxinyu95/AlgoXY · GitHub</a><br/><p data-pid=\"1BgaVu5U\">这本书还在持续更新中，几天前还有修改。</p><p data-pid=\"ehB7b78R\">下面的引用来自他正式发布本书时写的一篇blog，这是我认识的最有情怀的程序员了。</p><blockquote data-pid=\"_Tleb6ve\">参考： <br/>有两本书对《初等算法》影响最大。一本是Chris Okasaki的《Purely functional data structure》另外一本是《算法导论》。写作过程中还参考了一些其他书籍，包括Knuth的《计算机程序设计艺术》，Richard Bird的《Pearls of functional algorithm design》，Bentley的《编程珠玑》以及一些论文。 <br/><br/>不足： <br/>写这本书的六年中，我总是想起法国数学天才伽罗瓦最后写的那句话：“我没有时间了！”，我原计划用10年写完这本书，结果提前了4年。这样的代价 很大。为了避免翻译，过滤“噪声”，我直接用英文写作。由于不是native speaker，书中的英文语法和拼写难免贻笑大方。为了赶时间，proof reading被压缩，许多结论采取了“拿来主义”，没有进行严格的数学证明。一些章节的课后习题也没有给出答案。 <br/><br/>未来： <br/>理想情况下，一本严肃的算法书应该在稳定、宽松的环境下精雕细琢。可是在社会剧烈发展的今天，在日新月异的中国，在人们习惯快餐而不再享受大餐的 快节奏生活中，在微博、微信取代文章、书信的手机网络大潮下，这样的理想环境根本不存在。未来不可预知。对于《初等算法》这本书，开放给社区是最好的选择。需要做的工作很多： <br/>  * 翻译中文版 <br/>  * 社区proof reading和review，修正内容上的错误和英文上的不足 <br/>  * 提供一本习题集 <br/>  * 补足数学证明 <br/>  * 采用强大的数学工具，对形式化的算法进行分析 <br/><br/>一些数据： <br/>《初等算法》黄金分割0.618版本，历时6年，在github上总共提交1680次commit。全书600多页，19万字（word）。2万2千行示例代码。 <br/><br/>保护： <br/>《初等算法》在GNU FDL许可协议下发布，所有代码在GNU GPLv3协议下发布。 </blockquote>",
            "excerpt": "推荐我的一位朋友写的 Book of Elementary Algorithms and Data structures 《初等算法》 虽然书是用英文写的，但我这位朋友是中国人，正式的工作是软件工程师和项目经理，业余时间对算法很有兴趣，他花了数年时间，把自己对算法的心得体会写成了这本书，把全部的内容以及相关源代码都开源了。 他对算法和编程语言有深入的研究，能熟练使用十余种编程语言。这本书中的算法的参考实现都提供了 C, C++, Haskell, Python, Scheme/Li…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogENCAQQAxj9ypEOIKzECpICIQoHNzI0MzAwMxIIMjk2NDgyNTMYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2014-08-24T23:52:07+08:00"
    },
    {
        "content": {
            "id": 589813404,
            "title": "从零开始搭建算法Library·实装一个ZKW线段树（区间修改）",
            "type": "article",
            "excerpt_title": "序上一期我们学会了 单点修改，区间查询的ZKW线段树写法，以及如何用Monoid的方式去魔改成不同的线段树。本期我们来说一说怎么进行区间修改，区间查询的做法。 本文阅读完以后，你应该会有以下能力。 迅速切掉所有区间修改，区间查询的常用模型的能力。根据题目需要，更改Monoid，迅速从已有线段树模型转换的能力。给我点个喜欢的能力。本文假定读者已经完整阅读了上一期 https://zhuanlan.zhihu.com/p/589813404/preview?comment=0&amp;catalog=0 ，知道如何用Monoid的方式去更改线…",
            "url": "https://zhuanlan.zhihu.com/p/589813404",
            "image_url": "https://picx.zhimg.com/v2-57a9046525bcaefc0a7ae6b544e08edc_r.jpg?source=172ae18b",
            "created": 1670359543,
            "updated": 1670360279,
            "author": {
                "id": "b245eab579fb11a637ecb0ddf30aa7a6",
                "url_token": "tsumugi831",
                "name": "OnjoujiToki",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-3c131445335466c80ca82ad458835f0c_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-3c131445335466c80ca82ad458835f0c.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/b245eab579fb11a637ecb0ddf30aa7a6",
                "user_type": "people",
                "headline": "算法竞赛萌新 / Dota2年更up主",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<h3>序</h3><p data-pid=\"go_podCE\">上一期我们学会了<b>单点修改，区间查询</b>的ZKW线段树写法，以及如何用Monoid的方式去魔改成不同的线段树。</p><p data-pid=\"ReYeMK5c\">本期我们来说一说怎么进行区间修改，区间查询的做法。</p><p data-pid=\"HgxEcuEk\">本文阅读完以后，你应该会有以下能力。</p><ol><li data-pid=\"pp7HHu-k\">迅速切掉所有区间修改，区间查询的常用模型的能力。</li><li data-pid=\"FhjXiZef\">根据题目需要，更改Monoid，迅速从已有线段树模型转换的能力。</li><li data-pid=\"zeapN33t\">给我点个喜欢的能力。</li></ol><p data-pid=\"YGgFFC2k\">本文假定读者已经完整阅读了上一期<a href=\"https://zhuanlan.zhihu.com/p/589813404/preview?comment=0&amp;catalog=0\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/58</span><span class=\"invisible\">9813404/preview?comment=0&amp;catalog=0</span><span class=\"ellipsis\"></span></a>，知道如何用Monoid的方式去更改线段树的操作，以及如何使用迭代更新ZKW线段树。</p><p data-pid=\"U9jpNvpx\">本文部分内容由ChatGPT生成，已经人工查验。如有错误欢迎指正（错的地方都是AI写的！）</p><h3>懒标记科普</h3><p data-pid=\"UjBa3nze\">如果你已经对懒标记有了理解，可以直接跳过本节。</p><p data-pid=\"vR_vqyVY\">在线段树中，懒标记是一种用于优化查询和修改操作的技术。它允许我们将一些操作延迟到以后再执行，从而减少不必要的计算。</p><p data-pid=\"1VhEuXif\">比如说，假设我们有一个区间 <img src=\"https://www.zhihu.com/equation?tex=%5Bl%2Cr%29\" alt=\"[l,r)\" eeimg=\"1\"/> ，想要将它内部所有的数都乘上一个数 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/>。如果我们直接对这个区间进行修改，那么我们需要枚举这个区间中的每一个数，并将它们都乘上 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/>。这样的复杂度是 <img src=\"https://www.zhihu.com/equation?tex=O%28r-l%29\" alt=\"O(r-l)\" eeimg=\"1\"/>，如果区间很大的话，这个复杂度就可能会很高。</p><p data-pid=\"DHz9HnlC\">如果我们使用懒标记的话，我们可以将这个操作延迟到以后再执行。我们可以记录下当前区间内部的所有数都要乘上的数，并将其存储在懒标记里面。然后在需要时再一次性将懒标记应用到区间中。这样的话，我们就可以减少大量不必要的修改操作。</p><p data-pid=\"a3jejbIv\">总之，懒标记是一种用来优化线段树操作的技术，它可以让我们将一些操作延迟到以后再执行，从而减少不必要的计算。</p><p data-pid=\"5-y2HwlJ\">本节我大量引用了<a href=\"https://link.zhihu.com/?target=https%3A//algo-logic.info/segment-tree/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">该日文博客</a>的图片，虽然不是ZKW线段树，但是是我看过最好的线段树的图解。希望大家原谅我偷图的行为，没有找到license心里有点慌。</p><p data-pid=\"mT1K7K86\">我们先来讨论<b>普通的线段树</b></p><p data-pid=\"gAXFIXf4\">我们有数组 <img src=\"https://www.zhihu.com/equation?tex=%5B3%2C+5%2C+2%2C+11%2C+9%2C+1%2C+20%2C+8%5D\" alt=\"[3, 5, 2, 11, 9, 1, 20, 8]\" eeimg=\"1\"/>，这是一个区间<b>最小值</b>的线段树。</p><p data-pid=\"6xCwHFND\">如果我们想把区间 <img src=\"https://www.zhihu.com/equation?tex=%5B3%2C+7%29\" alt=\"[3, 7)\" eeimg=\"1\"/> 变成 <img src=\"https://www.zhihu.com/equation?tex=2\" alt=\"2\" eeimg=\"1\"/>，该怎么处理？</p><p data-pid=\"w0hLOJrl\">我们先看看普通的线段树会怎么更新，会暴力从每个叶子节点出发，迭代更新自己的父亲。时间复杂度爆表。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3ef5ec5f940a03e58c02a135a1c58b9f_b.jpg\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"716\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic4.zhimg.com/v2-3ef5ec5f940a03e58c02a135a1c58b9f_r.jpg\" data-original-token=\"v2-25f08ae7f71210aa3892a9a58dce6f9d\"/><figcaption>img</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"d5HOWfDi\">但是，如果我们引入懒标记。只在区间 <img src=\"https://www.zhihu.com/equation?tex=%5B4%2C+6%29\" alt=\"[4, 6)\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=3\" alt=\"3\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=6\" alt=\"6\" eeimg=\"1\"/> 打上懒标记，其实是不是已经表示出，这些地方已经被改成2了？三个区间的并集就是 <img src=\"https://www.zhihu.com/equation?tex=%5B3%2C7%29\" alt=\"[3,7)\" eeimg=\"1\"/>，如下图所示。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e1c857805a1efebcf1f536140c27a3d0_b.jpg\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"701\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-e1c857805a1efebcf1f536140c27a3d0_r.jpg\" data-original-token=\"v2-7bf32ccfd1edb5d00b3205f09e4a08ce\"/><figcaption>img</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"p-txxbPn\">在我们进行区间查询的时候，可以收获这些懒标记。</p><p data-pid=\"RYQixnvV\">例如我们要求 <img src=\"https://www.zhihu.com/equation?tex=%5B1%2C+5%29\" alt=\"[1, 5)\" eeimg=\"1\"/> 区间最小值，下图描述了一个现在正在 <img src=\"https://www.zhihu.com/equation?tex=%5B4%2C+6%29\" alt=\"[4, 6)\" eeimg=\"1\"/> 结点，正要把坐标为 <img src=\"https://www.zhihu.com/equation?tex=4\" alt=\"4\" eeimg=\"1\"/> 的数字进行确认的情况</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-00743406a229be055b1ea8b1e89a6fc2_b.jpg\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"702\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic3.zhimg.com/v2-00743406a229be055b1ea8b1e89a6fc2_r.jpg\" data-original-token=\"v2-639f206b18e4db53b13bb0252c28ecfb\"/><figcaption>img</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"SgulWxJl\">该图里，</p><p data-pid=\"9tFVJtC-\">红色代表正在确认中的结点，</p><p data-pid=\"cl8X1Wfa\">灰色表示已经完成计算的结点。</p><p data-pid=\"YS8YyFWx\">橙色表示接下来即将确认的结点。</p><p data-pid=\"TwsKwEqv\">绿色表示从父结点拿到过<img src=\"https://www.zhihu.com/equation?tex=%E2%88%9E\" alt=\"∞\" eeimg=\"1\"/> 或者 <img src=\"https://www.zhihu.com/equation?tex=%282%29\" alt=\"(2)\" eeimg=\"1\"/> 的懒标记的结点</p><p data-pid=\"Vuj0blAO\">（为什么 <img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"1\" eeimg=\"1\"/> 不是绿色的？因为只有单点查到 <img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"1\" eeimg=\"1\"/> 的时候才能确定 <img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"1\" eeimg=\"1\"/> 的答案）</p><p data-pid=\"i2ui1HXP\">目光锁定在<img src=\"https://www.zhihu.com/equation?tex=%5B4%2C+6%29\" alt=\"[4, 6)\" eeimg=\"1\"/> 结点，当前有一个懒标记 <img src=\"https://www.zhihu.com/equation?tex=2\" alt=\"2\" eeimg=\"1\"/>， 代表着这个区间内所有的数字都是 <img src=\"https://www.zhihu.com/equation?tex=2\" alt=\"2\" eeimg=\"1\"/>。</p><p data-pid=\"0FNOnWXf\">尽管我们只需要求到<img src=\"https://www.zhihu.com/equation?tex=4\" alt=\"4\" eeimg=\"1\"/> (我们查询的是 <img src=\"https://www.zhihu.com/equation?tex=%5B1%2C+5%29\" alt=\"[1, 5)\" eeimg=\"1\"/>) 但是我们还是会下传这个懒标记给 <img src=\"https://www.zhihu.com/equation?tex=5\" alt=\"5\" eeimg=\"1\"/>。</p><p data-pid=\"c3q2dgBE\">以上是<b>普通线段树</b>的懒标记下传的过程。</p><h3>模板构造</h3><p data-pid=\"W9TZgGYn\">我们考虑对某个数组进行以下操作：</p><ol><li data-pid=\"AhIVvE2Z\">操作1：将某个区间里的所有值按照一个运算然后<b>拼接</b>，得到的结果。</li><li data-pid=\"eeagTJP0\">操作2：将某个区间里的所有值替换成和<b>某个值做一个运算后的结果</b>。</li></ol><p data-pid=\"ZpuxS85x\">如果你看过我之前的文章，对幺半群和单位元有认识，应该能猜到我想说什么了。</p><p data-pid=\"Otd9Q7E5\">单点修改线段树的Monoid，还记得它吗，在前文提过</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"nc\">RangeMinimumQuery</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">Monoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">Monoid</span> <span class=\"nf\">id</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"n\">Monoid</span><span class=\"o\">&gt;::</span><span class=\"n\">max</span><span class=\"p\">();</span> <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><p data-pid=\"WmqobXMY\">很明显这些是不够用的，这里值定义了一个<code>min</code>的操作，单位元是<code>max</code>。</p><p data-pid=\"pYIJX2PS\">之前单点更新的时候，我们只需要改值即可。</p><p data-pid=\"O5yHwja6\">但是如果我们是对区间加上一个数，又或者全部替换成一个数，再对区间求最大值。其实这个可以拆分成2个操作。</p><p data-pid=\"b4CUNpJH\">总结一个我们需要的运算和类型其实是五个。</p><ol><li data-pid=\"gnufmdIn\"> 数组的值的类型<br/> </li><li data-pid=\"isIjl7x1\"> 操作2中与区间内值进行运算的值的类型，其实就是懒标记的类型（有点拗口）<br/> </li></ol><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-aa7c603276e78680d8847bbbadff2b0b_b.jpg\" data-size=\"normal\" data-rawwidth=\"363\" data-rawheight=\"394\" class=\"content_image\" width=\"363\" data-original-token=\"v2-ad5052a62188c4d86fa31e509593927e\"/><figcaption>f:id:betrue12:20200922195827p:plain</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"jOb8iqZI\">图源: <a href=\"https://link.zhihu.com/?target=https%3A//betrue12.hateblo.jp/entry/2020/09/22/194541\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">betrue12.hateblo.jp/ent</span><span class=\"invisible\">ry/2020/09/22/194541</span><span class=\"ellipsis\"></span></a></p><p data-pid=\"SqeIEgIU\">运算方面</p><ol><li data-pid=\"EneMBgDS\">运算 <img src=\"https://www.zhihu.com/equation?tex=S\" alt=\"S\" eeimg=\"1\"/> :数组内部进行的运算，可以简单理解为建树的时候用的运算就是什么运算。</li><li data-pid=\"QkXZgxTf\">运算 <img src=\"https://www.zhihu.com/equation?tex=mapping\" alt=\"mapping\" eeimg=\"1\"/>: 操作2中，类型一和类型二之间进行的计算。懒标记如何传递</li><li data-pid=\"M60LOeAu\">运算 <img src=\"https://www.zhihu.com/equation?tex=composition\" alt=\"composition\" eeimg=\"1\"/>: 懒标记之间的计算</li></ol><p data-pid=\"Wh8s9E8g\">因此，我们传进去的Monoid，只要这五个就可以！</p><p data-pid=\"i1D_yWrL\">下面是一个区间更新和求区间最小值的Monoid。</p><p data-pid=\"hyv_HbYN\">操作1： 给 <img src=\"https://www.zhihu.com/equation?tex=%5Bl%2C+r%29\" alt=\"[l, r)\" eeimg=\"1\"/> 更新为一个新值</p><p data-pid=\"GghNKYzX\">操作2：求 <img src=\"https://www.zhihu.com/equation?tex=%5Bl%2C+r%29\" alt=\"[l, r)\" eeimg=\"1\"/> 区间最小值</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">struct</span> <span class=\"nc\">RangeMinimumAndUpdateQuery</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">Monoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">using</span> <span class=\"n\">LazyMonoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_id</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"n\">Monoid</span><span class=\"o\">&gt;::</span><span class=\"n\">max</span><span class=\"p\">();</span> <span class=\"p\">}</span>\n    <span class=\"c1\">// 线段树的单位元\n</span><span class=\"c1\"></span>  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">LazyMonoid</span> <span class=\"nf\">lazy_id</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"n\">LazyMonoid</span><span class=\"o\">&gt;::</span><span class=\"n\">max</span><span class=\"p\">();</span>\n      <span class=\"c1\">// 懒标记单位元设置成一个不会被更新成的数字\n</span><span class=\"c1\"></span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span> <span class=\"c1\">// 线段树内部的运算\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">LazyMonoid</span> <span class=\"nf\">lazy_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">LazyMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">LazyMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">lazy_id</span><span class=\"p\">()</span> <span class=\"o\">?</span> <span class=\"nl\">a</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n      <span class=\"c1\">// 有b懒标记取b懒标记，没有再取a\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">LazyMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">lazy_id</span><span class=\"p\">()</span> <span class=\"o\">?</span> <span class=\"nl\">a</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n      <span class=\"c1\">// 如果没有懒标记，直接返回线段树原来的Monoid\n</span><span class=\"c1\"></span>      <span class=\"c1\">// 如果有直接返回懒标记上的，因为是区间推平，懒标记存的就是区间推过的值\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><p data-pid=\"0-nA1G5N\">首先我们要添加2个普通的ZKW线段树没有提到的东西。</p><ol><li data-pid=\"YUznaqc3\"> 树的高度，我们将在代码的具体实现里看到他的作用<br/> </li><li data-pid=\"GZmy2dXM\"> 懒标记数组 <code>lazy</code>，根据我们实现单点修改ZKW线段树的经验，这个<code>lazy</code> 可以初始化成单位元。<br/> </li></ol><p data-pid=\"XQ3ejrXt\"><code>cpp    int sz, height;    // sz + 原数组坐标 (0 based) = 从1开始的线段树里的编号 前一期有好好说明    std::vector&lt;Monoid&gt; data; // 线段树本体    std::vector&lt;LazyMonoid&gt; lazy;  // 每个区间的懒标记</code></p><p data-pid=\"JsaskSHV\">我们先来实现 <b>懒标记下传</b> (propagate)</p><p data-pid=\"wGxbLbHZ\">我们遍历到一个线段树节点的时候，我们要对他的两个子节点进行更新，将该节点的懒标记清零，即设置为懒标记的单位元即可。再给他们的子节点打上懒标记。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">void</span> <span class=\"nf\">propagate</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">apply_sub</span><span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]);</span>\n    <span class=\"n\">apply_sub</span><span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]);</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">lazy_id</span><span class=\"p\">();</span>\n\n  <span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"binLMYLR\">具体的更新方式也很简单，还记得我们在monoid里写的<code>apply</code>吗，那个就是用懒标记更新线段树节点的意思。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">LazyMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">lazy_id</span><span class=\"p\">()</span> <span class=\"o\">?</span> <span class=\"nl\">a</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n      <span class=\"c1\">// 如果没有懒标记，直接返回线段树本体的Monoid\n</span><span class=\"c1\"></span>      <span class=\"c1\">// 如果有直接返回懒标记上的，因为是区间推平，懒标记存的就是区间推过的值\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"nf\">apply_sub</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">LazyMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n      <span class=\"c1\">// 等价于把data[idx]直接更新成val\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">&lt;</span> <span class=\"n\">sz</span><span class=\"p\">)</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">lazy_merge</span><span class=\"p\">(</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n      <span class=\"c1\">// if语句是判断是否是叶子节点，还记得我们的定义吗\n</span><span class=\"c1\"></span>      <span class=\"c1\">// 如果不是 给idx打上懒标记, 我们可以默认叶子节点没有懒标记这个说法\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"QtTiNzIf\">这样我们的懒标记的更新方式就写好了！</p><p data-pid=\"8nXGzCob\">修改的话，想先说下单点修改。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">void</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">LazyMonoid</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>  <span class=\"c1\">// // 单点运算\n</span><span class=\"c1\"></span>    <span class=\"n\">idx</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">current_idx</span> <span class=\"o\">=</span> <span class=\"n\">idx</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n      <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">current_idx</span><span class=\"p\">]</span> <span class=\"o\">=</span>\n          <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">current_idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[(</span><span class=\"n\">current_idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Monoid</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 单点修改\n</span><span class=\"c1\"></span>    <span class=\"n\">idx</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">current_idx</span> <span class=\"o\">=</span> <span class=\"n\">idx</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n      <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">current_idx</span><span class=\"p\">]</span> <span class=\"o\">=</span>\n          <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">current_idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[(</span><span class=\"n\">current_idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"3jXBJYnr\">首先，我们要从区间的坐标转换成线段树里的编号。</p><p data-pid=\"tFIw2gHM\">还是比较简单的。从根节点开始，懒标记下传，然后改变我们当前的值。这就是递归线段树的push_down操作。</p><p data-pid=\"c97vmYrD\">一个是改变数组的单点修改，一个是对数组的某个值与懒标记进行二元运算的单点修改。</p><p data-pid=\"yqk7fNCw\">虽然用不太到，但是可以仔细想想实现。如果看懂了就下一步吧。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">void</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">LazyMonoid</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// 区间修改[l, r)\n</span><span class=\"c1\"></span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&lt;=</span> <span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"n\">left</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"n\">right</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ctz_left</span> <span class=\"o\">=</span> <span class=\"n\">__builtin_ctz</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">ctz_left</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ctz_right</span> <span class=\"o\">=</span> <span class=\"n\">__builtin_ctz</span><span class=\"p\">(</span><span class=\"n\">right</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">ctz_right</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"p\">;</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">l</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">apply_sub</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">apply_sub</span><span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">left</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">ctz_left</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">right</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">ctz_right</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">|</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"R-2Ob5DA\">从上层游到底层，不断散播并收割懒标记。这个遍历过程其实遍历了<code>idx</code>所在的所有的区间，收割在上面的懒标记，之后我们更新当前值，并且更新下受到影响的所有的点。</p><p data-pid=\"VWN03Jc-\">这就是递归线段树的push_down操作。</p><p data-pid=\"NLMOTgSM\">和单点修改不一样的是，我们可以预先计算出左右端点的最低有效位，也就是最后一个为1的位置。</p><p data-pid=\"sV-c7E3R\">为什么要处理出这个呢？</p><p data-pid=\"qu9sgvwW\">计算最低有效位（即最后一个为 1 的位）是为了确定如何遍历线段树。在线段树中，每个结点都有一个对应的区间，这个区间是该结点的子结点所对应的区间的并集。</p><p data-pid=\"SZ6g_0L2\">当我们想要将懒标记传到给定区间上时，首先需要找到包含该区间的所有结点。计算最低有效位，可以确定包含给定区间的结点的编号。对于左端点，从高到低遍历每一层的结点，如果当前层的最低有效位大于左端点的最低有效位，则下传懒标记。对于右端点，重复上述过程。</p><p data-pid=\"FddjuQS4\">得到的左右端点是其实就是我们需要手动更新的线段树编号的区间。</p><p data-pid=\"dI2q8KHQ\">在遍历线段树时，使用最低有效位可以确保不会遍历到无关的结点，只更新需要更新的节点并收获懒标记，，从而提高效率。</p><p data-pid=\"cPJfbJ0G\">之后的部分，和单点的ZKW线段树的查询操作里差不多。</p><p data-pid=\"cdYQCh7f\">如果该叶子节点编号是奇数，说明该节点是右儿子。我们可以直接计算区间的懒标记，然后回到他的父亲。</p><p data-pid=\"vv3opMoZ\">我们右侧因为是一个开区间，先减去<code>right</code>，然后和左边一样，两端往中间逼近，更新当前值，打上懒标记。</p><p data-pid=\"HCTfUlgq\">对于我们遍历过的区间，我们需要重新计算懒标记计算后的影响，举个例子，如果区间的有些值有变化，最小值可能也会有变化。</p><p data-pid=\"0xiH7Rzq\">因此我们只遍历受到影响的区间，更新的节点会从他们的子节点获取答案。</p><p data-pid=\"rSMGbL8c\">而区间查询和普通线段树几乎一模一样，除了多了一步push down收割懒标记以外。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"n\">Monoid</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&lt;=</span> <span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_id</span><span class=\"p\">();</span>\n    <span class=\"n\">left</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"n\">right</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ctz_left</span> <span class=\"o\">=</span> <span class=\"n\">__builtin_ctz</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">ctz_left</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ctz_right</span> <span class=\"o\">=</span> <span class=\"n\">__builtin_ctz</span><span class=\"p\">(</span><span class=\"n\">right</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">ctz_right</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Monoid</span> <span class=\"n\">res_l</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_id</span><span class=\"p\">(),</span> <span class=\"n\">res_r</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_id</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"p\">;</span> <span class=\"n\">left</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">res_l</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">res_l</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"o\">++</span><span class=\"p\">]);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">res_r</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">right</span><span class=\"p\">],</span> <span class=\"n\">res_r</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">res_l</span><span class=\"p\">,</span> <span class=\"n\">res_r</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"MzprfqkI\">建树也是一样的。</p><p data-pid=\"BMzoY6cY\">完整代码</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"nc\">LazySegmentTree</span> <span class=\"p\">{</span>\n  <span class=\"k\">using</span> <span class=\"n\">Monoid</span> <span class=\"o\">=</span> <span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">Monoid</span><span class=\"p\">;</span>\n  <span class=\"k\">using</span> <span class=\"n\">LazyMonoid</span> <span class=\"o\">=</span> <span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">LazyMonoid</span><span class=\"p\">;</span>\n\n  <span class=\"k\">explicit</span> <span class=\"nf\">LazySegmentTree</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n      <span class=\"o\">:</span> <span class=\"n\">LazySegmentTree</span><span class=\"p\">(</span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Monoid</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_id</span><span class=\"p\">()))</span> <span class=\"p\">{}</span>\n\n  <span class=\"k\">explicit</span> <span class=\"nf\">LazySegmentTree</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Monoid</span><span class=\"o\">&gt;&amp;</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n      <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()),</span> <span class=\"n\">height</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">while</span> <span class=\"p\">((</span><span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">height</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">++</span><span class=\"n\">height</span><span class=\"p\">;</span>\n    <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">height</span><span class=\"p\">;</span>\n    <span class=\"n\">lazy</span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">sz</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">lazy_id</span><span class=\"p\">());</span>\n    <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">sz</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_id</span><span class=\"p\">());</span>\n    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(),</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">end</span><span class=\"p\">(),</span> <span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">sz</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">sz</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[(</span><span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kt\">void</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Monoid</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">idx</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">val</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">current_idx</span> <span class=\"o\">=</span> <span class=\"n\">idx</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n      <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">current_idx</span><span class=\"p\">]</span> <span class=\"o\">=</span>\n          <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">current_idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[(</span><span class=\"n\">current_idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kt\">void</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">LazyMonoid</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">idx</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">current_idx</span> <span class=\"o\">=</span> <span class=\"n\">idx</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n      <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">current_idx</span><span class=\"p\">]</span> <span class=\"o\">=</span>\n          <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">current_idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[(</span><span class=\"n\">current_idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kt\">void</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">LazyMonoid</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&lt;=</span> <span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"n\">left</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"n\">right</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ctz_left</span> <span class=\"o\">=</span> <span class=\"n\">__builtin_ctz</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">ctz_left</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ctz_right</span> <span class=\"o\">=</span> <span class=\"n\">__builtin_ctz</span><span class=\"p\">(</span><span class=\"n\">right</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">ctz_right</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">right</span><span class=\"p\">;</span> <span class=\"n\">l</span> <span class=\"o\">&lt;</span> <span class=\"n\">r</span><span class=\"p\">;</span> <span class=\"n\">l</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">apply_sub</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"o\">++</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">apply_sub</span><span class=\"p\">(</span><span class=\"o\">--</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">left</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">ctz_left</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[(</span><span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">right</span> <span class=\"o\">&gt;&gt;</span> <span class=\"p\">(</span><span class=\"n\">ctz_right</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">data</span><span class=\"p\">[(</span><span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">Monoid</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&lt;=</span> <span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_id</span><span class=\"p\">();</span>\n    <span class=\"n\">left</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"n\">right</span> <span class=\"o\">+=</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ctz_left</span> <span class=\"o\">=</span> <span class=\"n\">__builtin_ctz</span><span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">ctz_left</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ctz_right</span> <span class=\"o\">=</span> <span class=\"n\">__builtin_ctz</span><span class=\"p\">(</span><span class=\"n\">right</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"n\">ctz_right</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Monoid</span> <span class=\"n\">res_l</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_id</span><span class=\"p\">(),</span> <span class=\"n\">res_r</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_id</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(;</span> <span class=\"n\">left</span> <span class=\"o\">&lt;</span> <span class=\"n\">right</span><span class=\"p\">;</span> <span class=\"n\">left</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">left</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">res_l</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">res_l</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">left</span><span class=\"o\">++</span><span class=\"p\">]);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">&amp;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"n\">res_r</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">--</span><span class=\"n\">right</span><span class=\"p\">],</span> <span class=\"n\">res_r</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">m_merge</span><span class=\"p\">(</span><span class=\"n\">res_l</span><span class=\"p\">,</span> <span class=\"n\">res_r</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">Monoid</span> <span class=\"k\">operator</span><span class=\"p\">[](</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">idx</span> <span class=\"o\">+</span> <span class=\"n\">sz</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">height</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">propagate</span><span class=\"p\">(</span><span class=\"n\">node</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">node</span><span class=\"p\">];</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">sz</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Monoid</span><span class=\"o\">&gt;</span> <span class=\"n\">data</span><span class=\"p\">;</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">LazyMonoid</span><span class=\"o\">&gt;</span> <span class=\"n\">lazy</span><span class=\"p\">;</span>\n\n  <span class=\"kt\">void</span> <span class=\"nf\">apply_sub</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">LazyMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">&lt;</span> <span class=\"n\">sz</span><span class=\"p\">)</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">lazy_merge</span><span class=\"p\">(</span><span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span> <span class=\"n\">val</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kt\">void</span> <span class=\"nf\">propagate</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">idx</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">apply_sub</span><span class=\"p\">(</span><span class=\"n\">idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]);</span>\n    <span class=\"n\">apply_sub</span><span class=\"p\">((</span><span class=\"n\">idx</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]);</span>\n    <span class=\"n\">lazy</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"o\">::</span><span class=\"n\">lazy_id</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><p data-pid=\"tuTChis-\">区间最小值和区间推平</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">};</span>\n<span class=\"n\">LazySegmentTree</span><span class=\"o\">&lt;</span><span class=\"n\">RangeMinimumAndUpdateQuery</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">st</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// 输出1\n</span><span class=\"c1\"></span><span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">st</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// 输出0\n</span></code></pre></div><p data-pid=\"vjlW5FaB\">不过模板学习只是线段树最最最基础的部分，</p><p data-pid=\"FbE6MJNm\">该怎么写Monoid才是线段树的难点。</p><p data-pid=\"3PUUqmt6\"><a href=\"https://link.zhihu.com/?target=https%3A//maspypy.github.io/library/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">maspypy.github.io/libra</span><span class=\"invisible\">ry/</span><span class=\"ellipsis\"></span></a> 包含了超级多的Monoid，有兴趣可以看看，你要的样子他都有。</p><p data-pid=\"OGNo4khG\">这兄弟前几天发了个推说自己12000题量了。</p><p data-pid=\"u3q1AtMO\">有点吓人。</p><p data-pid=\"1z59QUb5\">接下来是几个是红名佬<a href=\"https://link.zhihu.com/?target=https%3A//codeforces.com/profile/emthrm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">emthrm</a>自己比较常用的。尽管这份模板我是从他的提交里找到的，但是他的线段树模板又和很多人差不多，包括Atcoder的官方Library，所以这里不称呼他为原作者了（抄了就是我的）</p><p data-pid=\"DUldsRZo\">上面那个library才是monoid大全。</p><p data-pid=\"aKXLEvjr\">再说一些monoid的写法，monoid的可以不止一个。这样可以让我们在线段树里保存不同的点。</p><p data-pid=\"vRS2oQ6F\">这个就是经典的区间加法和查询和的写法，也很好懂。初始化可以直接在struct里完成，</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"nc\">RangeSumAndAddQuery</span> <span class=\"p\">{</span> <span class=\"c1\">// 区间加法 查询和\n</span><span class=\"c1\"></span>  <span class=\"k\">using</span> <span class=\"n\">Monoid</span> <span class=\"o\">=</span> <span class=\"k\">struct</span> <span class=\"p\">{</span> <span class=\"n\">T</span> <span class=\"n\">sum</span><span class=\"p\">;</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"p\">};</span>\n  <span class=\"k\">using</span> <span class=\"n\">OperatorMonoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">static</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Monoid</span><span class=\"o\">&gt;</span> <span class=\"n\">init</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Monoid</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">Monoid</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_id</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">};</span> <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">OperatorMonoid</span> <span class=\"nf\">o_id</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Monoid</span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">OperatorMonoid</span> <span class=\"nf\">o_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span>\n                                <span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Monoid</span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><p data-pid=\"eUZTbZYD\">别的几个</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"nc\">RangeMaximumAndUpdateQuery</span> <span class=\"p\">{</span> <span class=\"c1\">// 区间推平 查询最大\n</span><span class=\"c1\"></span>  <span class=\"k\">using</span> <span class=\"n\">Monoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">using</span> <span class=\"n\">OperatorMonoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_id</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"n\">Monoid</span><span class=\"o\">&gt;::</span><span class=\"n\">lowest</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">OperatorMonoid</span> <span class=\"nf\">o_id</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"n\">OperatorMonoid</span><span class=\"o\">&gt;::</span><span class=\"n\">lowest</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">OperatorMonoid</span> <span class=\"nf\">o_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span>\n                                <span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">o_id</span><span class=\"p\">()</span> <span class=\"o\">?</span> <span class=\"nl\">a</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">o_id</span><span class=\"p\">()</span><span class=\"o\">?</span> <span class=\"nl\">a</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">Inf</span><span class=\"o\">&gt;</span>  \n<span class=\"k\">struct</span> <span class=\"nc\">RangeMinimumAndAddQuery</span> <span class=\"p\">{</span> <span class=\"c1\">// 区间加法 查询最小 \n</span><span class=\"c1\"></span>  <span class=\"k\">using</span> <span class=\"n\">Monoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">using</span> <span class=\"n\">OperatorMonoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_id</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">Inf</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">OperatorMonoid</span> <span class=\"nf\">o_id</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">OperatorMonoid</span> <span class=\"nf\">o_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span>\n                                <span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">Inf</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"nc\">RangeMaximumAndAddQuery</span> <span class=\"p\">{</span> <span class=\"c1\">// 区间加法 查询最大\n</span><span class=\"c1\"></span>  <span class=\"k\">using</span> <span class=\"n\">Monoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">using</span> <span class=\"n\">OperatorMonoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_id</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">Inf</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">OperatorMonoid</span> <span class=\"nf\">o_id</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">OperatorMonoid</span> <span class=\"nf\">o_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span>\n                                <span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"nc\">RangeSumAndUpdateQuery</span> <span class=\"p\">{</span> <span class=\"c1\">// 区间推平 查询和\n</span><span class=\"c1\"></span>  <span class=\"k\">using</span> <span class=\"n\">Monoid</span> <span class=\"o\">=</span> <span class=\"k\">struct</span> <span class=\"p\">{</span> <span class=\"n\">T</span> <span class=\"n\">sum</span><span class=\"p\">;</span> <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"p\">};</span>\n  <span class=\"k\">using</span> <span class=\"n\">OperatorMonoid</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">;</span>\n  <span class=\"k\">static</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Monoid</span><span class=\"o\">&gt;</span> <span class=\"n\">init</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"n\">Monoid</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">Monoid</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_id</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">};</span> <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"k\">constexpr</span> <span class=\"n\">OperatorMonoid</span> <span class=\"nf\">o_id</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">numeric_limits</span><span class=\"o\">&lt;</span><span class=\"n\">OperatorMonoid</span><span class=\"o\">&gt;::</span><span class=\"n\">max</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">m_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Monoid</span><span class=\"p\">{</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">OperatorMonoid</span> <span class=\"nf\">o_merge</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span>\n                                <span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">o_id</span><span class=\"p\">()</span> <span class=\"o\">?</span> <span class=\"nl\">a</span> <span class=\"p\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">static</span> <span class=\"n\">Monoid</span> <span class=\"nf\">apply</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"n\">Monoid</span><span class=\"o\">&amp;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"n\">OperatorMonoid</span><span class=\"o\">&amp;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Monoid</span><span class=\"p\">{</span><span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"n\">o_id</span><span class=\"p\">()</span> <span class=\"o\">?</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"nl\">sum</span> <span class=\"p\">:</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div><h3>Reference</h3><ol><li data-pid=\"FDkRi8Ij\">懒标记线段树的monoid讲解<a href=\"https://link.zhihu.com/?target=https%3A//kazuma8128.hatenablog.com/entry/2017/12/29/081929\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">kazuma8128.hatenablog.com</span><span class=\"invisible\">/entry/2017/12/29/081929</span><span class=\"ellipsis\"></span></a> </li><li data-pid=\"tIc5T-Xb\">Atcoder Library的用法 <a href=\"https://link.zhihu.com/?target=https%3A//betrue12.hateblo.jp/entry/2020/09/22/194541\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">betrue12.hateblo.jp/ent</span><span class=\"invisible\">ry/2020/09/22/194541</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"_PhVxiIR\">很棒的线段树解析 <a href=\"https://link.zhihu.com/?target=https%3A//algo-logic.info/segment-tree/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">algo-logic.info/segment</span><span class=\"invisible\">-tree/</span><span class=\"ellipsis\"></span></a> </li><li data-pid=\"pCJJ71rE\">cf上的讲解 <a href=\"https://link.zhihu.com/?target=https%3A//codeforces.com/blog/entry/18051\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">codeforces.com/blog/ent</span><span class=\"invisible\">ry/18051</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"WxqiCJdp\">ei1333的线段树模板 <a href=\"https://link.zhihu.com/?target=https%3A//ei1333.github.io/luzhiled/snippets/structure/segment-tree.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">ei1333.github.io/luzhil</span><span class=\"invisible\">ed/snippets/structure/segment-tree.html</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"vJ1dZATl\">emthrm的线段树模板 <a href=\"https://link.zhihu.com/?target=https%3A//emthrm.github.io/library/data_structure/segment_tree.hpp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">emthrm.github.io/librar</span><span class=\"invisible\">y/data_structure/segment_tree.hpp</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"9WWbgQ-t\">wiki 幺半群 <a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25B9%25BA%25E5%258D%258A%25E7%25BE%25A4\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">zh.wikipedia.org/wiki/%</span><span class=\"invisible\">E5%B9%BA%E5%8D%8A%E7%BE%A4</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"JeHNAf9J\">zky线段树讲解 <a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/Judge/p/9514862.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">cnblogs.com/Judge/p/951</span><span class=\"invisible\">4862.html</span><span class=\"ellipsis\"></span></a></li></ol>",
            "voteup_count": 6,
            "column": {
                "id": "c_1580892919342460929",
                "type": "column",
                "url_token": "c_1580892919342460929",
                "title": "算法竞赛从萌新到弃坑",
                "url": "https://zhuanlan.zhihu.com/c_1580892919342460929",
                "created": 1669694243,
                "updated": 1669694243,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 1
        },
        "created": "2022-12-07T04:45:43+08:00"
    },
    {
        "content": {
            "id": 945352381,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/356351510/answer/945352381",
            "created_time": 1576962082,
            "updated_time": 1577489538,
            "question": {
                "type": "question",
                "id": 356351510,
                "title": "你的编程能力从什么时候开始突飞猛进？",
                "question_type": "normal",
                "created": 1574000909,
                "updated_time": 1574000920,
                "url": "https://www.zhihu.com/question/356351510",
                "is_deleted": false
            },
            "author": {
                "id": "323b5c5c0642497cbff6e88e1c858cbc",
                "url_token": "ming-zi-zong-shi-hen-nan-qi",
                "name": "阿莱克西斯",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-ead60445c7f0f9b92cd2906b6fbbfa44_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-ead60445c7f0f9b92cd2906b6fbbfa44.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/323b5c5c0642497cbff6e88e1c858cbc",
                "user_type": "people",
                "headline": "猫奴/Amazon资深工程师/后端黑魔法/数学系/自学计算机/读书狂魔/今年18岁/已婚",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19552330",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19552330",
                                "name": "程序员",
                                "avatar_url": "https://pic1.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "程序员话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "程序员话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19552330",
                                    "token": "19552330",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552330",
                                    "name": "程序员",
                                    "avatar_path": "v2-3d917fb11613b7b13ecd7bbeb1c554e6",
                                    "avatar_url": "https://pic1.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "程序员话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19552330",
                                    "token": "19552330",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552330",
                                    "name": "程序员",
                                    "avatar_path": "v2-3d917fb11613b7b13ecd7bbeb1c554e6",
                                    "avatar_url": "https://pic1.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1444410296
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 5568,
            "comment_count": 80,
            "thanks_count": 1180,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"DWfQQ3Xp\">学了OO, 熟悉了“设计模式”, 领悟了IoC和DI, 让我大概感觉到了程序应该有一些结构, 而不是简单的把逻辑用if-else写进去, 这是我感觉自己能力提高的第一次飞跃;</p><p data-pid=\"n-eCwXaG\">看<a href=\"https://link.zhihu.com/?target=https%3A//web.mit.edu/alexmv/6.037/sicp.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SICP</a>和<a href=\"https://link.zhihu.com/?target=http%3A//citeseerx.ist.psu.edu/viewdoc/download%3Fdoi%3D10.1.1.102.7366%26rep%3Drep1%26type%3Dpdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CTM</a>让我开始理解程序和编程到底是什么, 特别是对CTM里的最小表达力原则的理解, 这是我编程思想的第二次飞跃;</p><p data-pid=\"0rb6Ip4E\">学了函数式编程思想为我打开了另外一个世界, 引导我去了解haskell, 去稍稍的学习了些category theory(这个是真的难...), 这解放了我编程思想的另外一个纬度, 抽象能力有了质的提高(主要体现在generic programming的能力提高, 高级类型的灵活运用), 我开始有意识的去降低核心程序的&#34;熵&#34;(程序的可能性越多, 各种可能性的概率越均等, 熵越高), 使得程序更容易理解(熵越低信息含量越低则越容易理解), 而把系统的灵活性(比如状态, config等)隔离在核心逻辑之外(这样使得变化可以在一个地方, 比如系统setup时, 集中理解, 然后用理解的setup来很简单的推理核心逻辑在这种setup下会怎样运转), 这样就使得程序的核心复杂度更加接近于核心业务的复杂度(业务的熵是本质复杂度无法用调整程序结构的方法降低, 但是, 本质复杂度也是可以降低的, 请往下看), 但是又没有写死整个系统的灵活度; 这是第三次飞跃;</p><p data-pid=\"yzBqIFB4\"><b>然而, 最大的飞跃是当我最终把重点从编程本身转移开来之后</b>, 当我开始去看分布式系统算法, 去理解各种云服务的特性, 去深入了解我所工作的领域或者说业务, 去了解和我们组有关系的其他部门的业务, 去了解ML(由于业务相关); 去了解需求获取, 怎样拒绝不合理需求, 怎样调整和简化需求(降低业务本质复杂度的关键), 甚至创造合理需求，去了解测试, 监控, 部署, 构架, 运维,  项目规划和人员部署, 思考为什么junior SDE会犯错, 帮助mentor别人,  甚至开始关心组内的技术文化建设;</p><p data-pid=\"HkVjg5AG\">这是因为“编程是最重要也是最不重要的事”</p><blockquote data-pid=\"Q82EVUEb\"><b>这是因为编程作为把思维变为实现的这个循环的最后一步</b>(然后写好的程序会成为新的思考输入和基础，开始新的一轮迭代开发)，它和一个项目一个系统的<b>所有其他方面</b>都息息相关：需求获取，问题抽象，测试，监控，部署，框架运用，系统间集成，灵活性，未来拓展性，易用性，系统健壮性，多版本实验性，高层业务决策等等，这使得编程变得<b>无比重要</b>(所有的一切都需要编程来最终落到实地)，也<b>毫不重要</b>(编程被所有其他一切所约束和指导)。能够支撑这些所有上层思考的程序才是“好程序”，能够支撑所有这些思考的程序员，才是好程序员。学好/学会编程这件事是把所有需要思考的东西都弄明白都学好之后的自然结果。<b>而把这些思考留给别人，自己只做思维和程序的翻译器(区分创造者和工具人的关键)，根本无法写出好的程序来。这也是DDD(Domain Driven Design) 的精神之一 （</b>关于DDD的精神，参见此文的最后一段， <a href=\"https://www.zhihu.com/question/68611994/answer/298845862\" class=\"internal\">阿莱克西斯：在做程序员的道路上，你掌握了什么概念或技术使你感觉自我提升突飞猛进？</a> <b>）</b></blockquote><p data-pid=\"qjvHQyQy\">以上引用出自<a href=\"https://www.zhihu.com/question/45216002/answer/544008920\" class=\"internal\">自学编程需要注意什么？</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"gibXhq9v\">我觉得: 我们在积累技术能力的同时一定要开阔眼界, 这样才不会陷入一个&#34;局部最优解&#34; (随便逮着一个点都能开阔人类边界的天才除外); 眼界太窄以至于学了一点点东西就觉得自己&#34;天下无敌&#34;了, 是我们进步的大敌 (也是曾经是我最大的敌人); </p>",
            "excerpt": "学了OO, 熟悉了“设计模式”, 领悟了IoC和DI, 让我大概感觉到了程序应该有一些结构, 而不是简单的把逻辑用if-else写进去, 这是我感觉自己能力提高的第一次飞跃; 看 SICP 和CTM 让我开始理解程序和编程到底是什么, 特别是对CTM里的最小表达力原则的理解, 这是我编程思想的第二次飞跃;学了函数式编程思想为我打开了另外一个世界, 引导我去了解haskell, 去稍稍的学习了些category theory(这个是真的难...), 这解放了我编程思想的另外…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxi93ePCAyDy+uITkgIkCgkyMDE5NDc4NzMSCTk0NTM1MjM4MRgEIgpJTUFHRV9URVhU",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2019-12-22T05:01:22+08:00"
    },
    {
        "content": {
            "id": 575642401,
            "title": "对普通程序员来说，Monad有什么用？",
            "type": "article",
            "excerpt_title": "世界上只有两种程序员，一种懂Monad，一种不懂。正如Category theory for programmers这本书上写到的那样， 对程序员来说，Monad是一个传说，它似乎是程序语言中最抽象、最难懂的概念之一。除了单子这个中文译名之外，它还有一个令人望而生畏的解释，即一个自函子范畴上的幺半群（a monoid in the category of endofunctors of X）。如果没有学过范畴论的话，这个解释除了极佳的劝退效果之外，似乎不会带来任何额外的信息收益。…",
            "url": "https://zhuanlan.zhihu.com/p/575642401",
            "image_url": "https://picx.zhimg.com/v2-5bc6b5d4e245c680e35af0853b0d6df4_r.jpg?source=172ae18b",
            "created": 1666336601,
            "updated": 1666336601,
            "author": {
                "id": "498ba8f98e3c4f88fb1dc622eb6ce572",
                "url_token": "yuan-yang-20-33",
                "name": "袁洋",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-166898d86bedc5d487969183d0ef4ab0_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-166898d86bedc5d487969183d0ef4ab0.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/498ba8f98e3c4f88fb1dc622eb6ce572",
                "user_type": "people",
                "headline": "",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<blockquote data-pid=\"XBJ8wVtc\">世界上只有两种程序员，一种懂Monad，一种不懂。</blockquote><p data-pid=\"Ax9Ovukv\">正如Category theory for programmers这本书上写到的那样，<i>对程序员来说，Monad是一个传说，它似乎是程序语言中最抽象、最难懂的概念之一</i>。除了单子这个中文译名之外，它还有一个令人望而生畏的解释，即一个自函子范畴上的幺半群（a monoid in the category of endofunctors of X）。如果没有学过范畴论的话，这个解释除了极佳的劝退效果之外，似乎不会带来任何额外的信息收益。</p><p data-pid=\"OIODRoYY\">大部分程序员都没有学过范畴论，于是网上就有了五花八门各式各样的针对Monad的解释，有些是对的，有些是错的，有些则似是而非。有些人举例子，有些人画漫画，有些人则掏出了更多的数学公式。</p><p data-pid=\"XMikVn1-\">根据我的观察，就算是非常好的解释，作者也往往写到Monad是什么就戛然而止；他们大多没有进一步去解释，为什么程序员需要用到这个玩意儿？这往往会给人造成一个错误的印象，仿佛Monad只是程序员展示自己博闻强识/智力超群的装x利器，而实际上没什么用。</p><hr/><p data-pid=\"1JRgaYg-\">我之前也一直是这么认为的。直到最近几年，我开始搭建AI辅助诊断系统，在项目中大量使用了Monad技术，才慢慢意识到了这个概念的重要性。不过，这个概念很难三言两语说清楚，我们先看个引子：</p><p data-pid=\"mb1csEca\"><b>假如我们要搭建一个非常大的系统，应该怎么做最好？</b></p><p data-pid=\"golCV87A\">老子说，天下难事必作于易，天下大事必作于细。搭系统自然也是这样。我们应该把系统的各个小部件都做好，封装好，再把小部件巧妙地组织到一起，形成越来越大的部件，最后形成了一个大的系统。当然，这个过程不仅仅是自下而上的简单堆积，也不能缺少自上而下的架构规划。</p><p data-pid=\"nEfqvEnV\">这个从小到大的搭建过程中有太多要注意的地方，其中有一点是代码复用。原则上，我们希望同样的代码不要出现两次，这样改的时候就不容易出现因为漏掉代码克隆导致的bug。可是，代码复用并不总是容易的，它前提条件是代码封装能够做得很好。具体来说，每一段代码，都能够明确自己的实际用途，而这一用途尽可能抽象简洁准确，所以可以在很多地方被使用。如果这个代码描述的是一个数据对象，那么这就是面向对象的程序设计可以做的事情；如果这个代码描述的是针对数据的操作，那么这就是函数式编程可以做的事情。</p><p data-pid=\"YSzJqkSL\">下面我们看看函数式编程的这一面。</p><p data-pid=\"ZqzVRzKc\">函数式编程的概念说起来很简单，就是y=f(x)。我们希望程序是由一段一段函数粘在一起形成的，例如对于输入x，我们可以计算f(g(h(x)))得到某个结果，这里f,g,h分别是三个不同的函数。</p><p data-pid=\"fOwDxEE7\">函数的意义在于，它最好是<b>纯的</b>，即它就是一个输入到输出的映射，不依赖于别的内容，也不包含别的内容。</p><p data-pid=\"59SzmxWV\">例如：</p><ul><li data-pid=\"PTCYSncz\">f(x)=x+65，这就是一个纯函数。</li><li data-pid=\"_crda4b_\">f(x)=x+a+65，这就不纯，因为a不是函数的一个输入，可能是一个全局变量，此时函数就依赖于其他内容。</li><li data-pid=\"k8Ic6USi\">f(x)={println(&#34;hello&#34;); x+65}，这个也不纯，因为函数不可以包含别的内容，比如在屏幕上打印个字符串，这种是不允许的。</li></ul><p data-pid=\"8CHq5kGm\">更一般的，所谓的纯函数，其实生活在某个很纯粹的抽象的数学空间里，针对输入做了一些计算，得到了输出，不需要管其他任何东西。想一想，当我们计算f(x)=x+65的时候，其实只是进行了抽象的代数运算而已，并没有影响现实世界的任何内容（比如打印到屏幕、写到数据库、网络传输、文件读写等等）。</p><p data-pid=\"20VrCMN4\">因为纯粹，所以它有很好的性质：</p><ul><li data-pid=\"A4J4YVca\">确定性。当我们给定了同样的输入，那么它一定会给相同的输出。</li><li data-pid=\"7eqxOLdu\">更细的封装。我们可以将每一个小步骤都封装成一个纯函数，取个贴切的名字，做好复用。</li></ul><hr/><p data-pid=\"nG_2P7bk\"><b>然而，纯函数虽好，却不接地气。</b>为了保证它是纯的，我们不能够使用打印、数据库等一切与真实世界的相关的内容，所以这些代码是没有任何用处的。为了让代码有用，<b>我们不得不引入不纯的脏东西，这种被称为对现实世界的影响（Effect）</b>。脏东西可能分成很多种，比如，数据库的读写；屏幕交互等等。注意到，这里的脏东西其实包含了一切与真实世界的交互，不仅仅是写入数据，读入数据也算作其中。</p><p data-pid=\"vOOjQSi4\">脏东西，顾名思义，不是个好东西。脏东西会大大增加系统的复杂度，导致各种意想不到的bug，以及增加测试难度等等。</p><p data-pid=\"KGGHJr27\">当然，对于大部分程序员来说，我知道大家是不相信上述断言的。听起来，脏东西是另一个函数式编程的geek圈发明创造的唬人的玩意儿，为了所谓的函数纯洁优美性编造的东西，实际开发中没有任何参考意义。简单来说，</p><blockquote data-pid=\"n-otOf3V\">“我们写不纯的代码写了这么多年，一直好好的，什么大系统我们没有搭过？怎么复杂了，哪里有bug，单元测试不是好好的？”</blockquote><p data-pid=\"XX-cG6NK\">这个事情要展开讲可能需要另开好几个帖子，我们这里先略过了。在这里我只说一个比较客观的事实：倘若把脏东西管理好，让整个程序充满了纯函数，那么编译器就可以针对程序做更加细致的分析和优化。<b>实际上，根据我们的测试，使用这套方法写出的代码，即使是面对最简单的并发任务，实际并发效率也要比常见的框架（例如Spring Boot）高3-5倍。</b></p><p data-pid=\"E4HE491I\">好，那我们假设我们达成了共识，就是脏东西必须要处理掉。可是问题来了，脏东西到底要怎么处理呢？</p><p data-pid=\"3hXu5Ujp\">答案是，把它装进一种叫做Monad的神奇盒子里。这种盒子有两个优美的性质：</p><ul><li data-pid=\"RVl-calO\">它像是薛定谔装猫的盒子，你如果没有打开它，那么它里面到底装了什么我们（<b>从纯函数的角度来看</b>）是不知道的，或者说不用知道的。例如，这个值可能是由用户输入/数据库调用得到的，所以在看到盒子的时候，值还没有写好；也可能这个值是某个复杂的矩阵计算的结果，所以在看到盒子的时候，值还没有算好。</li><li data-pid=\"fk81NtT5\">它的外壳上有一种神奇的双面胶，可以和其他的Monad的盒子粘在一起，形成一个Monad执行链，或者更一般的，一个Monad执行图。这一点我们稍后再说。</li></ul><p data-pid=\"Vw1LCdIF\">我们先看看它的第一个性质。因为脏东西被装在盒子里，我们又回到了纯函数的世界。换句话说，在计算的过程中，一旦出现了脏东西，那我们就用一个新盒子把它<b>装进去</b>，然后对自己说，“这个盒子里有个脏东西”，然后进行下一步。注意到，我们没有打开盒子，所以自然就没有对世界产生任何影响。</p><p data-pid=\"v3LsjBgD\">哦哦，但好像还是有点不太对。如果我们对世界没有产生任何影响，那脏东西不就不脏了么？我们到底怎么在屏幕上打印个东西呢？</p><p data-pid=\"HgaHl1lA\">答案是，我们把这个装了脏东西的盒子当做函数的输出，传出来。考虑如下的例子：</p><p data-pid=\"KzihdCYC\">f(x)=println(x+65)，&lt;--- 这不是一个纯函数</p><p data-pid=\"fnylgyCT\">我们可以把它改成：</p><p data-pid=\"8nNnGzDK\">f(x)=IO(println(x+65))， 我们用一个叫做IO的盒子，把println这个脏东西包住了，所以f(x)=一个盒子，它变成了一个纯函数，对世界没有影响了。</p><p data-pid=\"NPT4ALQu\">但是！算完f(x)之后，我们得到了一个盒子。此时，我们在f(x)外面把它打开。一旦打开，f(x)里面的内容就会被运行，我们就会对世界产生影响，即，屏幕上会打印出x+65。打开的过程是有影响的，但是在计算f(x)的过程中，是纯函数，是没有影响的。这就是我们经常说的，要把影响（或者说副作用）push to edge，即推到纯函数的外面，程序的边缘地带。</p><hr/><p data-pid=\"EX-U1QNr\">好吧，我承认即使说到这里，这一切看起来还是很蠢，像是一种高级版本的脱了裤子放屁。我到底出于一个什么动机，要把一个打印函数嵌套来嵌套去，最后放到外面打开？除了函数式编程所谓的优美之外，我图个什么？人生苦短，我爱python。</p><p data-pid=\"rLLsv9Dm\">所以我们不得不赶快介绍一下Monad的第二个性质，即神奇的双面胶性质。有些人把它叫做胶水或者bind，但是我用scala，所以我们这里叫它flatMap。</p><p data-pid=\"ZhtartnC\">flatMap的字面意思是，flatten+map，即先把盒子打开（flatten），取出里面的值，然后映射成为另一个东西（map）。但是这里我们要稍微小心一点，要加入<b>假如</b>二字。即，<b>假如</b>我们能够把盒子打开，把值取出来，然后映射成为另一个东西，然后用另一个盒子装好，那么这个新盒子就是运行的结果，它相当于和之前的旧盒子粘在一起了。双面胶的做法相对直观，但是容易造成误解，因为实际上：</p><ul><li data-pid=\"IjHdSkwc\">双面胶粘的内容是旧盒子内部的值，而不是旧盒子本身；</li><li data-pid=\"owXCOYVr\">双面胶粘完之后，我们看到的结果只是新盒子，而不是两个盒子，旧盒子就消失不见了。</li></ul><p data-pid=\"kmOQeqFV\">但是，这是从程序运行的角度来看的。如果从写代码的角度来看，我们确实先写代码实现了一个盒子，然后又通过flatMap实现了另一个盒子，并把这两个盒子粘在了一起。这一点，大家写几行基于Monad的代码就能有比较深刻的体会了。</p><p data-pid=\"dKimoJu5\">flatMap的巧妙之处在于上文加粗的“假如”二字。既然是假如，那么这个事情就没有发生。换句话说，我们不需要让上一步的影响发生，也可以定义下一步要根据这一影响具体做一些什么。举个简单的例子，我们有个函数，里面包含了三个步骤：</p><ul><li data-pid=\"U8cu5_hM\">从屏幕读入字符串A</li><li data-pid=\"VbqrVvWf\">从数据库读入字符串B</li><li data-pid=\"SrUytl0S\">在屏幕上输出A+&#34;-&#34;+B</li></ul><p data-pid=\"Vc4fa2Nm\">可以看到，这三个步骤都是脏的。为了保证函数的纯度，我们原则上应该给它们套上盒子。可是，最后一个步骤的执行依赖之前步骤的结果，应该怎么做呢？答案是：</p><div class=\"highlight\"><pre><code class=\"language-text\">IO(readScreen()).flatMap( \n   A=&gt; IO((A, readDB()))\n).flatMap( \n   (A,B)=&gt; IO(print(A+&#34;-&#34;+B)) \n)</code></pre></div><p data-pid=\"VXXEyNS8\">可以看到，我们先把第一个步骤的答案装进了IO的盒子。然后，我们使用flatMap，把结果以假如的形式拿了出来（表示假如我们已经读到了A），然后装进了新的盒子里。注意到，新的盒子里面有A和readDB()两个数。此时，我们再次调用flatMap，表示假如我们已经读到了A和B，那么我们把它们连起来打印一下。注意到，这个操作又被装进了一个新的盒子里。</p><p data-pid=\"dLCAXs9A\">因此，这一通操作下来，这个函数是一个纯函数。我们没有和现实世界进行交互，没有施加影响，一切都还没有发生。<b>只有我们真正打开最后一个盒子的时候，这三个步骤才会真正被执行。</b></p><hr/><p data-pid=\"Nexd_V9c\">这么说可能还是太抽象了。我比较喜欢打的比方是游戏攻略，大家应该更容易理解一些。考虑你和你的好朋友在上机器学习课的时候讨论某个网络游戏应该怎么通关。你的好朋友告诉你，其实很简单，只要按照如下的步骤去做：</p><ol><li data-pid=\"hOEtHxYB\">你出门右转去市场上找一个绿衣服的玩家，他会给你一个字条。</li><li data-pid=\"7GuofYbm\">这个字条上面有三种可能，根据不同情形，你要去A，B，C三个地方中的某一个，找到红衣服的NPC，跟她买一个锤子。</li><li data-pid=\"e7rOluez\">拿着这个锤子和字条，你可以去D，找到怪兽，用锤子打死他。</li></ol><p data-pid=\"n0gWhs7B\">注意到：</p><ul><li data-pid=\"8RDmD7sj\">游戏过程不是纯函数的，因为它依赖绿衣服玩家和红衣服NPC给你的字条和锤子。如果绿衣服玩家给你不同的字条，你就会走不一样的游戏路径。</li><li data-pid=\"XR3sLmif\">游戏攻略没有对&#34;现实世界&#34;产生影响（这里的现实世界不是指教室，而是指网络游戏的那个世界），因为你们在上机器学习课，你还没有来得及登录你的账号，实践你朋友的攻略。</li></ul><p data-pid=\"8GqlhEvZ\">所以游戏攻略是一个你准备之后（回宿舍）执行，但是暂时还没有执行的计划。<b>这个计划的产生过程是一个纯函数，即不管你听你好朋友说多少遍，你最后得到的计划是一样的。</b>但是计划执行的过程可能会充满变数，因为你要和充满脏东西的游戏世界打交道，你不知道绿衣服玩家会给你一个什么样的字条。</p><p data-pid=\"TDOwMITA\">在这个例子里面，每个步骤都产生了一个新的Monad盒子，里面包含的内容则是你当前步骤的游戏状态（拿了什么字条，或者买了一个锤子）。</p><ul><li data-pid=\"57oFQnCk\">我们需要用盒子把游戏状态包裹起来，因为在机器学习课上谈论的字条和锤子，不是真正的字条和锤子（在宿舍里玩游戏的时候拿到的才是真的）。换句话说，盒子装的字条，是写在纸面上的抽象字条，没有真正实例化；游戏里拿到的字条，是真正的字条，有真正的取值。</li><li data-pid=\"Y4IUMfx-\">盒子的双面胶flatMap在这里就是把几个步骤粘在了一起，形成了一个完整的游戏攻略，让你回去一步一步操作把游戏打通关。</li></ul><p data-pid=\"ALKbvWNO\">那我们也可以清晰地看到，为什么flatMap一定要把盒子打开，取出其中的值，然后进行下一步。因为这里的值是指游戏里拿到的真正的字条，只有那个玩意儿才有真实的取值，可以帮助你判断下一步要做什么；但是如果没有把盒子打开，只看纸面上的抽象字条，那你永远不知道到底要去A，B，C的哪个地方。</p><hr/><p data-pid=\"NKy3q3n-\">到现在，我们就理解了Monad大概是个什么。它可以看做是对纯函数的一种补充。如果函数中有一些脏东西，它把脏东西装到盒子里，然后以一种假设/计划的方式描述这个脏东西，使得形成的东西仍然是一个纯函数，没有对世界产生影响。只有当我们真正打算大干一场的时候，才会真正和世界接触交互，把脏活累活给干了。</p><p data-pid=\"gm-_b3UI\">说了这么多，我们终于可以点个题，Monad到底有什么用？</p><p data-pid=\"HF2lxyN9\">从我们刚谈及的IO Monad角度来看，Monad是一种对程序实现的抽象。我们可以把要怎么干活（计划，纯函数）和具体去干活（实践，不纯的函数）拆分开来，让专业的人/机器/程序做专业的事情。</p><p data-pid=\"sYpW2v8K\">例如，看一下<a href=\"https://link.zhihu.com/?target=https%3A//typelevel.org/cats-effect/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Cats Effect</a>这个包，它是Typelevel中专门用来处理Effect的。它有一个叫做IO的Monad盒子，可以装各种各样的异步和交互。当程序员定义好各类IO盒子，以及把它装在一起之后，Cats Effect定义了一个轻量级的fiber工具（比线程更轻，类似于协程），可以根据盒子的连接方式，自动高效地决定什么时候要有哪个fiber运行哪个盒子里的小任务。</p><p data-pid=\"6NR8RgCs\">具体来说，如果我们用Cats Effect做并发，同时处理很多很多的Monad盒子。与常见的多线程编程不同，我们不需要把所有的任务都做成一个线程，在线程池中排队等资源；我们完全可以根据手头的Monad执行情况，决定下一步执行哪些Monad盒子，而剩下的盒子可以放在内存中，不需要变成排队抢占资源的线程。这种更加主动式的资源分配调度模式，自然可以大大提升并发的效率。要实现这一点，整个系统的实现都需要是纯函数式的，盒子与盒子相连。在Cats Effect/Monix等工具的帮助下，这一点并不困难。</p><p data-pid=\"Q0UihZg9\">当然了，值得强调的是，Monad的用途很广，我这里提到的IO Monad只是其中一种比较容易理解的形式。Monad还可以用于其他各种各样的数值封装，例如Option，DBIO等等，在那些情况下，Monad又有其他不同的用处，这里就不多展开了。</p><p></p><p></p><p></p><p></p><p></p><p></p>",
            "voteup_count": 643,
            "column": {
                "id": "c_1527933578214563840",
                "type": "column",
                "url_token": "c_1527933578214563840",
                "title": "上敏贵芳",
                "url": "https://zhuanlan.zhihu.com/c_1527933578214563840",
                "created": 1657067752,
                "updated": 1657067752,
                "description": "",
                "image_url": "https://pica.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 60
        },
        "created": "2022-10-21T15:16:41+08:00"
    },
    {
        "content": {
            "id": 2394594980,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/521822847/answer/2394594980",
            "created_time": 1647552693,
            "updated_time": 1647552693,
            "question": {
                "type": "question",
                "id": 521822847,
                "title": "为什么依赖注入只在 Java 技术栈中流行，在 go 和 cpp 没有大量使用？",
                "question_type": "normal",
                "created": 1647225301,
                "updated_time": 1647352939,
                "url": "https://www.zhihu.com/question/521822847",
                "is_deleted": false
            },
            "author": {
                "id": "11c4242fd92613a7f85ad9fff60c29c9",
                "url_token": "catchen",
                "name": "Cat Chen",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/1916213aa_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/1916213aa.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/11c4242fd92613a7f85ad9fff60c29c9",
                "user_type": "people",
                "headline": "知乎只写用户",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19550901",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550901",
                                "name": "前端开发",
                                "avatar_url": "https://pica.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19560641",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19560641",
                                "name": "职业规划",
                                "avatar_url": "https://pic1.zhimg.com/v2-98ba63611671c9911d17432016c70a4e_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19552330",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19552330",
                                "name": "程序员",
                                "avatar_url": "https://pica.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "前端开发等 3 个话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "前端开发等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://pica.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19560641",
                                    "token": "19560641",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19560641",
                                    "name": "职业规划",
                                    "avatar_path": "v2-98ba63611671c9911d17432016c70a4e.jpg",
                                    "avatar_url": "https://pic1.zhimg.com/v2-98ba63611671c9911d17432016c70a4e_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552330",
                                    "token": "19552330",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552330",
                                    "name": "程序员",
                                    "avatar_path": "v2-3d917fb11613b7b13ecd7bbeb1c554e6",
                                    "avatar_url": "https://pica.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "前端开发等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://pica.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19560641",
                                    "token": "19560641",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19560641",
                                    "name": "职业规划",
                                    "avatar_path": "v2-98ba63611671c9911d17432016c70a4e.jpg",
                                    "avatar_url": "https://pic1.zhimg.com/v2-98ba63611671c9911d17432016c70a4e_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552330",
                                    "token": "19552330",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552330",
                                    "name": "程序员",
                                    "avatar_path": "v2-3d917fb11613b7b13ecd7bbeb1c554e6",
                                    "avatar_url": "https://pica.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 406,
            "comment_count": 78,
            "thanks_count": 51,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"NoV0ue8b\">Dependency Injection 只是 Inversion of Control 的一种，其它语言需要进行 IoC 时并不一定需要 DI。Inversion of Control 的概念往往出现在框架当中，意思是从你调用框架提供的函数转变为你提供一个函数让框架选择在正确的时机调用它。（严格来说，这不一定需要是函数，这可以是任何东西，例如界面上的元素。）</p><p data-pid=\"Hij85IIL\">对于函数不是变量也不是指针的语言来说，IoC 要求传递一个函数给框架这一点特别崩溃。没错，说的就是你，Java。Java 这一特性我们没办法直接传递函数，只能间接地把函数附着在一个对象上然后传递对象，这导致了后面的一系列问题……</p><p data-pid=\"EAKwLrAD\">既然 IoC 要传递函数，而 Java 不能传递函数，那怎么办呢？在没有 lambda 这类新功能之前，大家选择了使用 DI。不能传递函数，我整个类甚至整个包塞给你总可以了吧？而且你把这个等待我塞给你的包说成你依赖的包，那就是 DI 了。</p><p data-pid=\"YLiBT3AK\">支持传递函数的语言没有那么多麻烦事情。JavaScript？直接把函数当作变量一样传来传去。Haskell？人家的设计思想是利用高阶函数把小颗粒度的函数组合成你所需要的函数。</p><p data-pid=\"DuIfdUbf\">如果你仔细看完整本《设计模式》，你会发现里面很多模式是针对 Java 设计的。一般来说，设计模式是用来弥补语言设计缺陷的。有一件事情，描述它应该很容易，大家也经常描述类似的事情，但这门语言就是不支持，只能发明一个设计模式来描述这件事情。以后大家要描述相似的事情，就请用这个设计模式，虽然写出来的代码并不符合人类对这件事情描述的直觉，但在这门语言里面就是正确的。</p><p data-pid=\"1KzRrBea\">《设计模式》里面有多少模式，Java 就有多少缺陷。很多相似的面向对象语言，例如 C#，也有很多同类的缺陷。但一旦你进入函数式编程语言，你会发现这本书里面的绝大部分模式都不适用，因为根本不需要。函数式编程语言内置很直观的方法描述这些事情，不需要通过设计模式来绕圈。</p>",
            "excerpt": "Dependency Injection 只是 Inversion of Control 的一种，其它语言需要进行 IoC 时并不一定需要 DI。Inversion of Control 的概念往往出现在框架当中，意思是从你调用框架提供的函数转变为你提供一个函数让框架选择在正确的时机调用它。（严格来说，这不一定需要是函数，这可以是任何东西，例如界面上的元素。） 对于函数不是变量也不是指针的语言来说，IoC 要求传递一个函数给框架这一点特别崩溃。没错，说的就是你，Java。Jav…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxikver1CCDQxaclkgIlCgk0NjU0NjM2OTESCjIzOTQ1OTQ5ODAYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-03-18T05:31:33+08:00"
    },
    {
        "content": {
            "id": 598738077,
            "title": "使用 TypeScript 定义业务字典",
            "type": "article",
            "excerpt_title": "本文作者：htl 业务字典在业务开发中，我们常常需要定义一些枚举值。假设我们正在开发一款音乐应用，我们需要定义音乐的类型，以便在业务代码中进行业务逻辑判断： const MUSIC_TYPE = { POP: 1, ROCK: 2, RAP: 3, // ... }; if (data.type === MUSIC_TYPE.POP) { // 当音乐类型为流行音乐时，执行某些逻辑 } 随着业务逻辑的扩展，简单的枚举值往往会衍生出许多关联的字典。比如，我们需要定义一个音乐的类型对应的名称 const MU…",
            "url": "https://zhuanlan.zhihu.com/p/598738077",
            "image_url": "https://pica.zhimg.com/v2-2eb84ab65830b01a61abfbb2f9cfb9f7_r.jpg?source=172ae18b",
            "created": 1673580801,
            "updated": 1673580801,
            "author": {
                "id": "4fead0241377d378785f44ac68a27065",
                "url_token": "yun-yin-le-qian-duan-ji-zhu-tuan-dui",
                "name": "云音乐技术团队",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-d100bfe808a6f97e061c34788691a3e2_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-d100bfe808a6f97e061c34788691a3e2.jpg?source=0df5f383",
                "is_org": true,
                "type": "people",
                "url": "https://www.zhihu.com/people/4fead0241377d378785f44ac68a27065",
                "user_type": "organization",
                "headline": "",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1555984845
            },
            "comment_permission": "all",
            "content": "<p></p><blockquote data-pid=\"B4dbt-3p\"> 本文作者：htl </blockquote><h2><b>业务字典</b></h2><p data-pid=\"A-k6DrUQ\">在业务开发中，我们常常需要定义一些枚举值。假设我们正在开发一款音乐应用，我们需要定义音乐的类型，以便在业务代码中进行业务逻辑判断：</p><div class=\"highlight\"><pre><code class=\"language-text\">const MUSIC_TYPE = {\n  POP: 1,\n  ROCK: 2,\n  RAP: 3,\n  // ...\n};\n\nif (data.type === MUSIC_TYPE.POP) {\n  // 当音乐类型为流行音乐时，执行某些逻辑\n}\n</code></pre></div><p data-pid=\"Zi2tGtOa\">随着业务逻辑的扩展，简单的枚举值往往会衍生出许多关联的字典。比如，我们需要定义一个音乐的类型对应的名称</p><div class=\"highlight\"><pre><code class=\"language-text\">const MUSIC_TYPE_NAMES = {\n  [MUSIC_TYPE.POP]: &#39;流行音乐&#39;,\n  [MUSIC_TYPE.ROCK]: &#39;摇滚音乐&#39;,\n  [MUSIC_TYPE.RAP]: &#39;说唱音乐&#39;,\n  // ...\n};\n\n// 展示音乐类型名称\n&lt;div&gt;{MUSIC_TYPE_NAMES[data.type]}&lt;/div&gt;\n</code></pre></div><p data-pid=\"251KC-Vl\">或者需要定义一个音乐类型对应的图标：</p><div class=\"highlight\"><pre><code class=\"language-text\">const MUSIC_TYPE_ICONS = {\n  [MUSIC_TYPE.POP]: &#39;pop.svg&#39;,\n  [MUSIC_TYPE.ROCK]: &#39;rock.svg&#39;,\n  [MUSIC_TYPE.RAP]: &#39;rap.svg&#39;,\n  // ...\n};\n\n// 展示音乐类型图标\n&lt;img src={MUSIC_TYPE_ICONS[data.type]} /&gt;\n</code></pre></div><p data-pid=\"Lc4yO7BM\">在列表场景下，我们可能需要定义一个数组形式的字典：</p><div class=\"highlight\"><pre><code class=\"language-text\">const MUSIC_TYPE_LIST = [\n  {\n    type: MUSIC_TYPE.POP,\n    name: &#39;流行音乐&#39;,\n    icon: &#39;pop.svg&#39;,\n  },\n  {\n    type: MUSIC_TYPE.ROCK,\n    name: &#39;摇滚音乐&#39;,\n    icon: &#39;rock.svg&#39;,\n  },\n  {\n    type: MUSIC_TYPE.RAP,\n    name: &#39;说唱音乐&#39;,\n    icon: &#39;rap.svg&#39;,\n  },\n  // ...\n];\n\n&lt;div&gt;\n  {MUSIC_TYPE_LIST.map((item) =&gt; (\n    &lt;div&gt;\n      &lt;img src={item.icon} /&gt;\n      &lt;span&gt;{item.name}&lt;/span&gt;\n    &lt;/div&gt;\n  ))}\n&lt;/div&gt;;\n\n</code></pre></div><p data-pid=\"xJ3yPKRe\">又或者希望使用 key-object 形式避免从多个字典取值：</p><div class=\"highlight\"><pre><code class=\"language-text\">const MUSIC_TYPE_MAP_BY_VALUE = {\n  [MUSIC_TYPE.POP]: {\n    name: &#39;流行音乐&#39;,\n    icon: &#39;pop.svg&#39;,\n  },\n  [MUSIC_TYPE.ROCK]: {\n    name: &#39;摇滚音乐&#39;,\n    icon: &#39;rock.svg&#39;,\n  },\n  [MUSIC_TYPE.RAP]: {\n    name: &#39;说唱音乐&#39;,\n    icon: &#39;rap.svg&#39;,\n  },\n  // ...\n};\n\nconst musicTypeInfo = MUSIC_TYPE_MAP_BY_VALUE[data.type];\n\n&lt;div&gt;{musicTypeInfo.name}:{musicTypeInfo.icon}&lt;/div&gt;;\n</code></pre></div><p data-pid=\"56vz-RcB\">这些形态各异的业务字典同时存在会给代码带来重复和混乱。</p><p data-pid=\"dSd3iEmn\">当我们需要变更或增删某个类型或者类型中的某个值时，需要同时修改多个字典，很容易出现遗漏和错误，尤其是当这些字典定义分布在不同的文件中。</p><p data-pid=\"AKy9iJ1k\">对于使用者来说，散乱的字典定义也是一种负担。在业务中使用某个字典时，需要先查找已有的字典并理解其定义。如果已有字典不能完全满足需求，可能会有新的字典被定义，进一步增加业务字典的混乱程度。</p><h2><b>字典工厂函数</b></h2><p data-pid=\"9oNWzFBJ\">我们可以实现一个工具函数，将一份定义转换成多种格式的字典。</p><p data-pid=\"GWlFtFhx\">首先考虑入参的格式。显然作为原始数据，入参必须能够包含完整的字典信息，包括键，值，所有扩展字段，甚至列表场景中的展示顺序。</p><p data-pid=\"KSscRpfO\">我们可以使用对象数组作为入参：</p><div class=\"highlight\"><pre><code class=\"language-text\">/**\n * list 示例：\n * [\n *   {\n *    key: &#39;POP&#39;,\n *    value: 1,\n *    name: &#39;流行音乐&#39;,\n *   },\n *   {\n *     key: &#39;ROCK&#39;,\n *     value: 2,\n *     name: &#39;摇滚音乐&#39;,\n *   },\n *   // ...\n * ]\n */\nfunction defineConstants(list) {\n  // ...\n}\n</code></pre></div><p data-pid=\"pjdfrsOA\">接下来考虑出参的格式。出参应该是一个对象，包含多种格式的字典：</p><div class=\"highlight\"><pre><code class=\"language-text\">const { KV, VK, LIST, MAP_BY_KEY, MAP_BY_VALUE } = defineConstants([\n  {\n    key: &#39;POP&#39;,\n    value: 1,\n    name: &#39;流行音乐&#39;,\n  },\n  {\n    key: &#39;ROCK&#39;,\n    value: 2,\n    name: &#39;摇滚音乐&#39;,\n  },\n  // ...\n]);\n\nKV; // { POP: 1, ROCK: 2, ... }\nVK; // { 1: &#39;POP&#39;, 2: &#39;ROCK&#39;, ... }\nLIST; // [{ key: &#39;POP&#39;, value: 1, name: &#39;流行音乐&#39; }, { key: &#39;ROCK&#39;, value: 2, name: &#39;摇滚音乐&#39; }, ...]\nMAP_BY_KEY; // { POP: { key: &#39;POP&#39;, value: 1, name: &#39;流行音乐&#39; }, ROCK: { key: &#39;ROCK&#39;, value: 2, name: &#39;摇滚音乐&#39; }, ... }\nMAP_BY_VALUE; // { 1: { key: &#39;POP&#39;, value: 1, name: &#39;流行音乐&#39; }, 2: { key: &#39;ROCK&#39;, value: 2, name: &#39;摇滚音乐&#39; }, ... }\n</code></pre></div><p data-pid=\"acCck5xu\">在实际业务中，我们会为不同的资源定义字典，因此我们需要为工具函数提供命名空间。使用第二个入参为出参中的 key 增加前缀：</p><div class=\"highlight\"><pre><code class=\"language-text\">const {\n  MUSIC_TYPE_KV,\n  MUSIC_TYPE_VK,\n  MUSIC_TYPE_LIST,\n  MUSIC_TYPE_MAP_BY_KEY,\n  MUSIC_TYPE_MAP_BY_VALUE,\n} = defineConstants(\n  [\n    {\n      key: &#39;POP&#39;,\n      value: 1,\n      name: &#39;流行音乐&#39;,\n    },\n    {\n      key: &#39;ROCK&#39;,\n      value: 2,\n      name: &#39;摇滚音乐&#39;,\n    },\n    // ...\n  ],\n  &#39;MUSIC_TYPE&#39;,\n);\n</code></pre></div><p data-pid=\"-te4z-BJ\">至此，我们完成了字典工厂函数的设计。这个函数的 JavaScript 实现并不复杂，你可能已经在一些项目中过见过类似的工具函数，但是实际使用时会发现一个问题。</p><h2><b>使用 TypeScript 实现类型提示</b></h2><p data-pid=\"XbXKh-nb\">使用字典工厂定义业务字典可以让代码更简洁并且规范字典数据格式。然而，相比直接定义，字典工厂的缺点是无法提供类型提示。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-acaa3144890b1da6d2282672340aab18_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1612\" data-rawheight=\"684\" class=\"origin_image zh-lightbox-thumb\" width=\"1612\" data-original=\"https://pic1.zhimg.com/v2-acaa3144890b1da6d2282672340aab18_r.jpg\" data-original-token=\"v2-acaa3144890b1da6d2282672340aab18\"/></figure><p data-pid=\"8MQsaxPK\">这给开发者在两个层面带来了不便，一是在定义字典时需要对工具函数的使用和实现有一定了解，这样才能正确传入参数和解构返回值；二是在使用字典时无法获得类型提示，使用字典的开发者需要回来查看定义了哪些字段和值，同时还需要了解工具函数的使用方式。</p><p data-pid=\"88HoKR2J\">为了解决这个问题，我们可以使用 TypeScript 来实现字典工厂函数。以下内容涉及 TypeScript 类型系统的一些特性和一些技巧。</p><h3><b><code>LIST</code> 字典的实现</b></h3><p data-pid=\"8qitsxGy\">首先实现最简单的 <code>LIST</code> 字典，因为它和入参一模一样：</p><div class=\"highlight\"><pre><code class=\"language-text\">interface IBaseDef {\n  key: PropertyKey;\n  value: string | number;\n}\n\nfunction defineConstants&lt;T extends IBaseDef[], N extends string&gt;(\n  defs: T,\n  namespace?: N,\n) {\n  const prefix = namespace ? `${namespace}_` : &#39;&#39;;\n  return {\n    [`${prefix}LIST`]: defs,\n  };\n}\n</code></pre></div><p data-pid=\"oDnS9xT0\">我们用 <code>IBaseDef</code> 来规范入参中字典项的类型，它包含 <code>key</code> 和 <code>value</code> 两个字段。<code>key</code> 的类型是 <code>PropertyKey</code>，它是 <code>string | number | symbol</code> 的联合类型，即 key 的值可以是这三种类型中的任意一种。<code>value</code> 的类型是 <code>string | number</code>，之所以没有 <code>symbol</code> 是因为业务中 <code>value</code> 的值可能会从外部获取，而 <code>key</code> 的值可以是运行时产生的。这两个字段是定义字典必须的，其他字段可以根据业务需要任意添加。</p><p data-pid=\"BYGiwdIG\">在 <code>defineConstants</code> 函数中，我们使用范型来分别表示两个入参的类型并且使用 <code>extends</code> 关键字来约束范型的类型。<code>T</code> 的类型是 <code>IBaseDef[]</code>，保证入参 <code>defs</code> 的格式符合字典项数组。<code>N</code> 的类型是 <code>string</code>，保证入参 <code>namespace</code> 是一个字符串。</p><p data-pid=\"ZGmknKdc\"><code>namespace</code> 参数是可选的，如果定义字典时未传入，那么返回的字典 Key 也不会有前缀。因此我们需要创建一个 <code>prefix</code> 变量并根据 <code>namespace</code> 是否存在来决定它的值。</p><p data-pid=\"6Kn1dZe2\">然后我们返回一个只有 <code>LIST</code> 字典的对象，它的 Key 由 <code>prefix</code> 和 <code>LIST</code> 拼接而成，值就是入参 <code>defs</code>。</p><p data-pid=\"QwaoKHsd\">这段代码的运行逻辑没有问题，但是它缺少了返回值的类型定义，通过 IDE 的代码提示并不能获取到正确的字典 key：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4f0f0266e83d4f2045118e5db893b0bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"498\" data-original=\"https://pic4.zhimg.com/v2-4f0f0266e83d4f2045118e5db893b0bf_r.jpg\" data-original-token=\"v2-4f0f0266e83d4f2045118e5db893b0bf\"/></figure><p data-pid=\"M176mllE\">当你在 IDE 中查看 <code>dicts</code> 的类型时，IDE 并不会真的去执行 JavaScript 代码，而是通过 TypeScript 的类型系统来生成类型。</p><p data-pid=\"dEqzs0EG\">因此，我们需要使用类型系统定义 <code>defineConstants</code> 的返回类型。</p><div class=\"highlight\"><pre><code class=\"language-text\">type ToProperty&lt;\n  Property extends string,\n  N extends string = &#39;&#39;,\n&gt; = N extends &#39;&#39; ? Property : `${N}_${Property}`;\n</code></pre></div><p data-pid=\"zcdowGp2\">这里我们定义了一个类型用于生成字典的 Key。它接收两个范型参数，<code>Property</code> 表示字典的属性，<code>N</code> 表示字典的命名空间。如果 <code>N</code> 为空字符串，那么返回的 Key 就是 <code>Property</code>，否则就是 <code>${N}_${Property}</code>。</p><p data-pid=\"XBC-EpOZ\">这段代码中有一些 JavaScript 语法的影子，比如字符串，默认参数值，三元运算符，模板字符串等。但是这些都是在 TypeScript 类型系统中运行的，可以看作是一套独立的语言。例如它并没有 if...else 语句，这里的三元运算实际是<b><a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/2/conditional-types.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">条件类型（Conditional Types）</a></b>的语法，当 <code>N</code> 的类型符合 <code>&#39;&#39;</code> 时，返回 <code>Property</code>，否则返回 <code>${N}_${Property}</code>。</p><p data-pid=\"idCSjJJC\">你可以把这样的类型定义看作类型系统中的「函数」。不同于 JavaScript 函数通过入参接收值并且返回新的值，它通过范型接收类型并且返回新的类型。</p><p data-pid=\"3H5H9qyr\">现在我们可以使用 <code>ToProperty</code> 来生成字典的 Key 的类型：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a6ef5834c855a7cd3021a3fe4cde048b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"138\" class=\"origin_image zh-lightbox-thumb\" width=\"768\" data-original=\"https://pic4.zhimg.com/v2-a6ef5834c855a7cd3021a3fe4cde048b_r.jpg\" data-original-token=\"v2-a6ef5834c855a7cd3021a3fe4cde048b\"/></figure><p data-pid=\"ipmEbLLK\">接下来使用 <code>ToProperty</code> 结合<b><a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/2/mapped-types.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">映射类型 (Mapped Types）</a></b>和<b><a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/2/everyday-types.html%23type-assertions\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">类型断言（Type Assertions）</a></b>指定 <code>defineConstants</code> 的返回类型：</p><div class=\"highlight\"><pre><code class=\"language-text\">function defineConstants&lt;T extends IBaseDef[], N extends string&gt;(\n  defs: T,\n  namespace?: N,\n) {\n  const prefix = namespace ? `${namespace}_` : &#39;&#39;;\n  return {\n    [`${prefix}LIST`]: defs,\n  } as {\n    [Key in ToProperty&lt;&#39;LIST&#39;, N&gt;]: T;\n  };\n}\n</code></pre></div><p data-pid=\"zaoCINZE\"><code>as</code> 关键字在类型系统中表示类型断言，是一种手动指定类型的方法。它允许你告诉编译器一个变量或值的类型是什么，而不是让编译器自动推断。</p><p data-pid=\"hMrz-dXu\">而类型映射是一种将已有类型转换为具有指定键值的新类型的方法。我们生成了一个新的对象类型，它的键是 <code>ToProperty&lt;&#39;LIST&#39;, N&gt;</code>，值是 <code>T</code>。</p><p data-pid=\"gIpmOuxI\">将这些结合起来，<code>defineConstants</code> 函数终于可以返回一个支持类型提示的字典了：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1a7221e3725f4862a20b61189e9ecafd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"476\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"476\" data-original=\"https://pic2.zhimg.com/v2-1a7221e3725f4862a20b61189e9ecafd_r.jpg\" data-original-token=\"v2-1a7221e3725f4862a20b61189e9ecafd\"/></figure><h2><b><code>KV</code> 字典的实现</b></h2><p data-pid=\"QrLdurpK\">接下来增加 <code>KV</code> 字典，它是一个键值对，键和值分别来自入参字典项中的 <code>key</code> 和 <code>value</code> 属性。</p><div class=\"highlight\"><pre><code class=\"language-text\">function defineConstants&lt;T extends readonly IBaseDef[], N extends string&gt;(\n  defs: T,\n  namespace?: N,\n) {\n  const prefix = namespace ? `${namespace}_` : &#39;&#39;;\n  return {\n    [`${prefix}LIST`]: defs,\n    [`${prefix}KV`]: defs.reduce(\n      (map, item) =&gt; ({\n        ...map,\n        [item.key]: item.value,\n      }),\n      {},\n    ),\n  } as MergeIntersection&lt;\n    {\n      [Key in ToProperty&lt;&#39;LIST&#39;, N&gt;]: T;\n    } &amp; {\n      [Key in ToProperty&lt;&#39;KV&#39;, N&gt;]: {\n        [Key in ToProperty&lt;&#39;KV&#39;, N&gt;]: ToKeyValue&lt;T&gt;;\n      };\n    }\n  &gt;;\n}\n</code></pre></div><p data-pid=\"WxEz8pao\">这段代码增加了<code>MergeIntersection</code>，<code>ToSingleKeyValue</code> 和 <code>ToKeyValue</code> 三个类型转换「函数」，并且将范型 T 进一步约束为 readonly。接下来将一一解释这些类型转换的作用和实现以及为什么 T 必须是 readonly。</p><p data-pid=\"2o_8ElOQ\"><code>MergeIntersection</code> 用于合并交叉类型。</p><p data-pid=\"H4gv0Asc\">由于我们的实现中不同字典类型是通过映射类型生成的，我们需要使用<b><a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/unions-and-intersections.html%23intersection-types\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">交叉类型（Intersection Types）</a></b>将它们合并，当合并多个类型后会变得难以阅读。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e79b49f47d12a28b5fc801d7ffd67574_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"298\" class=\"origin_image zh-lightbox-thumb\" width=\"700\" data-original=\"https://pic1.zhimg.com/v2-e79b49f47d12a28b5fc801d7ffd67574_r.jpg\" data-original-token=\"v2-e79b49f47d12a28b5fc801d7ffd67574\"/></figure><p data-pid=\"IaXuGPau\">使用 <code>MergeIntersection</code> 可以将交叉类型合并为一个类型，在视觉上更加清晰，也便于后续处理：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9cc751f6f8198f6eeb106fa1b19d2108_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"946\" data-rawheight=\"236\" class=\"origin_image zh-lightbox-thumb\" width=\"946\" data-original=\"https://pic1.zhimg.com/v2-9cc751f6f8198f6eeb106fa1b19d2108_r.jpg\" data-original-token=\"v2-9cc751f6f8198f6eeb106fa1b19d2108\"/></figure><p data-pid=\"NJBCkjFb\"><code>MergeIntersection</code> 的实现：</p><div class=\"highlight\"><pre><code class=\"language-text\">type MergeIntersection&lt;A&gt; = A extends infer T\n  ? { [Key in keyof T]: T[Key] }\n  : never;\n</code></pre></div><p data-pid=\"9u8VWS2f\">这里我们再次使用了条件类型和映射类型。而 <code>infer</code> 关键字则是<b><a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/type-inference.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">类型推断（Type Inference）</a></b>的语法，它可以让我们在条件类型中获取类型变量的具体类型并用于后续的映射类型。</p><p data-pid=\"M1Fx8VBT\">由于 <code>infer</code> 总能推断出一个类型，所以条件类型的第二个结果永远不会出现，因此我们可以使用 <code>never</code> 类型。</p><p data-pid=\"DZFnlGmj\"><code>ToSingleKeyValue</code> 用于将单个字典项转换为键值对：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f905df1999eb33755e21bc159b55cdfb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb\" width=\"936\" data-original=\"https://pic4.zhimg.com/v2-f905df1999eb33755e21bc159b55cdfb_r.jpg\" data-original-token=\"v2-f905df1999eb33755e21bc159b55cdfb\"/></figure><p data-pid=\"tSJFO64Q\"><code>ToSingleKeyValue</code> 的实现：</p><div class=\"highlight\"><pre><code class=\"language-text\">type ToSingleKeyValue&lt;T&gt; = T extends {\n  readonly key: infer K;\n  readonly value: infer V;\n}\n  ? K extends PropertyKey\n    ? {\n        [Key in K]: V;\n      }\n    : never\n  : never;\n</code></pre></div><p data-pid=\"z2qLLcl9\">我们使用 <code>infer</code> 关键字获取 <code>key</code> 和 <code>value</code> 的具体类型并且在一个条件类型使用他们。然后在第二个条件类型中明确 <code>key</code> 的类型是 <code>PropertyKey</code>，因此可以用于映射类型。最后指定映射类型中的键和值。</p><p data-pid=\"GYwACxPG\"><code>ToKeyValue</code> 用于将字典项数组转换为键值对：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d27e65be1be0f31d26e7ae33bc3124cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1208\" data-rawheight=\"240\" class=\"origin_image zh-lightbox-thumb\" width=\"1208\" data-original=\"https://pic4.zhimg.com/v2-d27e65be1be0f31d26e7ae33bc3124cf_r.jpg\" data-original-token=\"v2-d27e65be1be0f31d26e7ae33bc3124cf\"/></figure><p data-pid=\"ZiGLKJNY\"><code>ToKeyValue</code> 的实现：</p><div class=\"highlight\"><pre><code class=\"language-text\">type ToKeyValue&lt;T&gt; = T extends readonly [infer A, ...infer B]\n  ? B[&#39;length&#39;] extends 0\n    ? ToSingleKeyValue&lt;A&gt;\n    : MergeIntersection&lt;ToSingleKeyValue&lt;A&gt; &amp; ToKeyValue&lt;B&gt;&gt;\n  : [];\n</code></pre></div><p data-pid=\"I1r1TnKp\">这个实现的关键点是使用类型推断结合展开语法和递归特性实现数组类型的处理。</p><p data-pid=\"c9XnQRuF\">我们在第一个条件类型中获取数组的第一个元素和剩余元素，然后在第二个条件类型中判断剩余元素的长度是否为 0。如果为 0，说明数组只有一个元素，我们可以直接使用 <code>ToSingleKeyValue</code>进行类型转换。否则转换第一个元素并递归使用 <code>ToKeyValue</code> 转换剩余部分，最后使用 <code>MergeIntersection</code> 将结果合并。</p><p data-pid=\"wF5XRMjW\">在 <code>defineConstants</code> 和这些类型转换函数中使用了 <code>readonly</code> 关键字，这实际上源于 <code>defineConstants</code> 的一个使用限制：在使用 <code>defineConstants</code> 时，必须使用 <b><code>ef=&#34;<code>https</code>://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#const-assertions&#34;&gt;const 断言（const assertions）</code></b>，即在字典项数组后面加上 <code>as const</code>。</p><div class=\"highlight\"><pre><code class=\"language-text\">defineConstants([\n  {\n    key: &#39;POP&#39;,\n    value: 1,\n    name: &#39;流行音乐&#39;,\n  },\n  {\n    key: &#39;ROCK&#39;,\n    value: 2,\n    name: &#39;摇滚音乐&#39;,\n  },\n] as const, &#39;MUSIC_TYPE&#39;);\n</code></pre></div><p data-pid=\"5KY6GR42\">对于代码中的常量定义，TypeScript 会自动推断变量类型而抹去具体的值。这在通常情况下是合理的，但是对于 <code>defineConstants</code> 类型提示的实现是很大的阻碍。如果入参字典项中的值信息丢失，我们也就无法通过类型系统进行类型转换生成字典的类型定义。</p><p data-pid=\"bQT7FPn4\">对比是否使用 as const 的区别：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f31b2f4bc71d15c5369ff65dde302d2d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1410\" data-rawheight=\"974\" class=\"origin_image zh-lightbox-thumb\" width=\"1410\" data-original=\"https://pic2.zhimg.com/v2-f31b2f4bc71d15c5369ff65dde302d2d_r.jpg\" data-original-token=\"v2-f31b2f4bc71d15c5369ff65dde302d2d\"/></figure><p data-pid=\"izyOGPnn\">而使用 const 断言同时也会将字典项的属性在类型系统中变成只读，这也是我们在函数中使用 <code>readonly</code> 关键字的原因。</p><p data-pid=\"IdAwjOVv\">以上内容基本上覆盖了剩余字典类型转换所需的全部语法和技巧，例如 <code>VK</code> 格式只是将键值对换，<code>MAP_BY_KEY</code> 只是将值替换为字典项的类型，因此不再赘述。完整的实现可以在<b><a href=\"https://link.zhihu.com/?target=https%3A//gist.github.com/Yelmor/e28ddb1e31a49b2fc0a80bd7fe3bd3c8\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github Gist</a></b>获取，也可以直接在这个<b><a href=\"https://link.zhihu.com/?target=https%3A//codesandbox.io/s/define-constants-r6dd0n%3Ffile%3D/src/index.ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CodeSandbox 示例</a></b>中尝试使用效果。</p><p data-pid=\"GZTa_Jxy\">至此我们已经使用 TypeScript 实现了可以生成带有支持类型提示的业务字典工厂函数，通过这个函数定义和使用业务字典可以在各处获取类型提示。</p><p data-pid=\"tI3BhxiY\">定义字典时：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2abdae3b56fcad76e8edb4e33904d90c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"972\" data-rawheight=\"238\" class=\"origin_image zh-lightbox-thumb\" width=\"972\" data-original=\"https://pic1.zhimg.com/v2-2abdae3b56fcad76e8edb4e33904d90c_r.jpg\" data-original-token=\"v2-2abdae3b56fcad76e8edb4e33904d90c\"/></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-dca4217088d3b742b553707ddf30a2e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1094\" data-rawheight=\"472\" class=\"origin_image zh-lightbox-thumb\" width=\"1094\" data-original=\"https://pic4.zhimg.com/v2-dca4217088d3b742b553707ddf30a2e7_r.jpg\" data-original-token=\"v2-dca4217088d3b742b553707ddf30a2e7\"/></figure><p data-pid=\"ai-kG9F6\">使用字典时：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9705bbc6e4ef1fb2a3f76ca3c58fb448_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"556\" data-rawheight=\"158\" class=\"origin_image zh-lightbox-thumb\" width=\"556\" data-original=\"https://pic1.zhimg.com/v2-9705bbc6e4ef1fb2a3f76ca3c58fb448_r.jpg\" data-original-token=\"v2-9705bbc6e4ef1fb2a3f76ca3c58fb448\"/></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-68d3a105ea26c5aca10964ef416500f7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"464\" class=\"origin_image zh-lightbox-thumb\" width=\"508\" data-original=\"https://pic4.zhimg.com/v2-68d3a105ea26c5aca10964ef416500f7_r.jpg\" data-original-token=\"v2-68d3a105ea26c5aca10964ef416500f7\"/></figure><h2><b>缺陷和不足</b></h2><p data-pid=\"mRtjkTYq\">这个工具给作者本人在项目中带来很大的帮助，但还是存在一些缺陷和不足：</p><ol><li data-pid=\"jhMU-V3m\">只能在 TypeScript 项目中使用，并且在定义字典时需要使用 <code>as const</code> 关键字。</li></ol><p data-pid=\"aX2vBJNo\">通常来说一个工具函数以 TypeScript 实现，只要提供良好的类型定义就可以在 JavaScript 项目中方便地使用。</p><p data-pid=\"JHT32qnW\">但是由于 JavaScript 无法支持 <code>const</code> 断言或类似功能，这个工具只能在 TypeScript 中使用。</p><ol><li data-pid=\"jHip-l40\">使用者无法在类型提示中获取注释</li></ol><p data-pid=\"oQpeXVJE\">当我们定义一个枚举值时，可能会增加一些注释：</p><div class=\"highlight\"><pre><code class=\"language-text\">enum MusicTypes {\n  /**\n   * 流行\n   */\n  POP: 1,\n}\n</code></pre></div><p data-pid=\"9aAVaPdX\">开发者在使用这个枚举值时，可以通过 IDE 获取注释内容。然而通过字典工厂函数生成的字典经过转换已经丢失了这些信息。</p><ol><li data-pid=\"dbhApLr3\">无法同时导出类型定义</li></ol><p data-pid=\"vPBshBuq\"><code>defineConstants</code> 返回的是字典值，当下游需要引用字典类型时，还需要需要额外导出类型定义：</p><div class=\"highlight\"><pre><code class=\"language-text\">export const { MUSIC_TYPE_VALUES } = defineConstants([...], &#39;MUSIC_TYPE&#39;)\n\n// 导出字典类型\nexport type MUSIC_TYPE = MUSIC_TYPE_VALUES[number]\n\n// 下游类型定义\nimport { MUSIC_TYPE } from &#39;./constants&#39;\n\ninterface Music {\n  type: MUSIC_TYPE;\n  // ...\n}\n</code></pre></div><h2><b>总结</b></h2><p data-pid=\"ljeEZkDc\">本文针对业务字典定义的场景，使用 TypeScript 实现了一个工具函数，用于生成各种形式且带有类型提示的业务字典。同时指出了这个工具函数的一些使用限制和不足之处。</p><blockquote data-pid=\"iNEpmOn3\"> 本文发布自网易云音乐技术团队，文章未经授权禁止任何形式的转载。我们常年招收各类技术岗位，如果你准备换工作，又恰好喜欢云音乐，那就加入我们 grp.music-fe(at)<a href=\"https://link.zhihu.com/?target=http%3A//corp.netease.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">corp.netease.com</span><span class=\"invisible\"></span></a>！</blockquote>",
            "voteup_count": 144,
            "column": {
                "id": "musicfe",
                "type": "column",
                "url_token": "musicfe",
                "title": "网易云音乐技术团队",
                "url": "https://zhuanlan.zhihu.com/musicfe",
                "created": 1578988800,
                "updated": 1644389375,
                "description": "",
                "image_url": "https://pic1.zhimg.com/v2-1e8e1df38bdab7cc86d308de9064ee3e_720w.jpg?source=d16d100b"
            },
            "comment_count": 10
        },
        "created": "2023-01-13T11:33:21+08:00"
    },
    {
        "content": {
            "id": 2835377321,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/573632826/answer/2835377321",
            "created_time": 1673162265,
            "updated_time": 1674660448,
            "question": {
                "type": "question",
                "id": 573632826,
                "title": "为什么现在男的越来越现实？",
                "question_type": "normal",
                "created": 1671636011,
                "updated_time": 1672538028,
                "url": "https://www.zhihu.com/question/573632826",
                "is_deleted": false
            },
            "author": {
                "id": "bca2b60a0ad0a2e4b82d76e0039ab86a",
                "url_token": "peng-peng-54-80",
                "name": "鹏鹏",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-f4c7b5d32fa7a846e330afb563f95baa_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-f4c7b5d32fa7a846e330afb563f95baa.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/bca2b60a0ad0a2e4b82d76e0039ab86a",
                "user_type": "people",
                "headline": "什么是这世上的欢乐？ 它是嘲笑黑夜的闪电， 虽明亮，却短暂。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic2.zhimg.com/v2-64a58c6459bea11becf5f93975ce9993.png?source=6a64a727",
                        "night_mode_url": "https://pic3.zhimg.com/v2-64a58c6459bea11becf5f93975ce9993.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1348,
            "comment_count": 73,
            "thanks_count": 156,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"0ZnxH1Yx\">很多思路，其实都是女人教给男人的。</p><p data-pid=\"NO3uYtto\">男人现在只是在摸着女人的路子过河。</p><p data-pid=\"9qrbqHre\">比如，前两年，女人特别爱叫嚣什么结婚不能降低生活品质。这两年，男人也反应过来这话说的没毛病了。</p><p data-pid=\"9V_z499X\">你不愿意降低生活标准，我又凭啥给丈母娘家扶贫？</p>",
            "excerpt": "很多思路，其实都是女人教给男人的。 男人现在只是在摸着女人的路子过河。 比如，前两年，女人特别爱叫嚣什么结婚不能降低生活品质。这两年，男人也反应过来这话说的没毛病了。 你不愿意降低生活标准，我又凭啥给丈母娘家扶贫？",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxip2YHICiCjpeYqkgIlCgk1NDU2MDc4NjgSCjI4MzUzNzczMjEYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-01-08T15:17:45+08:00"
    },
    {
        "content": {
            "id": 2055068741,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/66043355/answer/2055068741",
            "created_time": 1628739974,
            "updated_time": 1628754545,
            "question": {
                "type": "question",
                "id": 66043355,
                "title": "都说前端学习是先平缓后陡峭再平缓，那这几个转折点大概对应哪一领域的知识？",
                "question_type": "normal",
                "created": 1506736902,
                "updated_time": 1506736902,
                "url": "https://www.zhihu.com/question/66043355",
                "is_deleted": false
            },
            "author": {
                "id": "c0e2a6c332e573b37d6f5387074ead98",
                "url_token": "doodlewind",
                "name": "doodlewind",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-e5351633ad642a651ed925656c64b76b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-e5351633ad642a651ed925656c64b76b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/c0e2a6c332e573b37d6f5387074ead98",
                "user_type": "people",
                "headline": "github.com/doodlewind",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19550901",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550901",
                                "name": "前端开发",
                                "avatar_url": "https://pic1.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "前端开发话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://pic1.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://pic1.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "https://pic1.zhimg.com/v2-1436e3bf47c7c7bd58dea40891db09ce_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 276,
            "comment_count": 28,
            "thanks_count": 26,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "need_payment",
            "content": "<p data-pid=\"o85DXzXo\">忍不住说两句大实话，只有我觉得前端的学习曲线一直都还挺平缓的吗（捂脸）</p><p data-pid=\"gS-lhamy\">毕竟抽象代数、偏微分方程和四大力学这些才是噩梦。前端问个 CSS 规范里白纸黑字写着的矩阵乘法都能难倒一大片，而线性代数的难度跟本科这些（<i>我学不动的</i>）课比起来完全是小儿科……</p><p data-pid=\"SsUGG_5X\">但随着经验的增加，个人倒确实越来越多地会产生一种「<b>它们背后的东西其实很相似</b>」的感觉，于是理解起新知识就逐渐轻松了起来。举几个例子：</p><ul><li data-pid=\"JX-8uvsn\">TypeScript 的子类型机制和实时协作的 CRDT 算法都以 <i>order theory</i> 为基石。不论是经典的 class hierarchy 层级结构还是用于记录分布式用户操作的因果树，<a href=\"https://link.zhihu.com/?target=http%3A//jtfmumm.com/blog/2015/11/17/crdt-primer-1-defanging-order-theory/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">它们都是在处理偏序关系</a>。</li><li data-pid=\"4Bax6_ka\">对 JS 数组做 reduce 时如果满足特定规律，其实是可以允许异步并行处理的（注意不是串行 await）——而这规律实质上就是「赋能」了当年那个著名 Map Reduce 分布式框架的规律，其重点叫单位元和结合律，而满足它的代数结构亦即传说中的 <i>monoid</i> 幺半群……</li><li data-pid=\"m-Dziwn7\">Flutter 引擎算布局的方式跟你跟糊省市区接口嵌套数据的写法殊途同归，递归 DFS 解君愁。</li><li data-pid=\"_QtvtEZC\">做 CSS 动画和 WebGL 定位 3D 物体时的手法大同小异，都利用矩阵性质来套娃平移旋转缩放。</li><li data-pid=\"58Yzb5Lq\">C 的指针可以等价地套上 Vue 3 的 <code>ref</code> 和 <code>unref</code> 心智模型来理解，于是前者（在不考虑安全的前提下）<a href=\"https://zhuanlan.zhihu.com/p/356214452\" class=\"internal\">突然就显得很简单了</a>。</li><li data-pid=\"rPoxlRf-\">老派 OOP 的消息传递可以解读为方法调用，<a href=\"https://zhuanlan.zhihu.com/p/340410273\" class=\"internal\">于是 Objective-C 一下就变成一门能读的语言了</a>。</li><li data-pid=\"HMtw6wpp\"><a href=\"https://zhuanlan.zhihu.com/p/100388037\" class=\"internal\">经典图像滤镜算法</a>神似于<a href=\"https://zhuanlan.zhihu.com/p/197675822\" class=\"internal\">康威生命游戏</a>，其输入都源于对每个节点（像素）周围状态的采样。</li><li data-pid=\"4EInxLms\">移植 <a href=\"https://zhuanlan.zhihu.com/p/330586852\" class=\"internal\">JS 引擎到 WASM</a> 和移植 <a href=\"https://zhuanlan.zhihu.com/p/391077878\" class=\"internal\">Webpack 到 Vite</a> 的方法论都是一回事，无非逐个跑通点亮模块。</li><li data-pid=\"mefw6rUd\">异步的 JSBridge 和 XMLHttpRequest 异曲同工，它们都可以理解成两个异构 VM 之间的数据深拷贝和 RPC。还有人格局更高，直接将后者重新定义为分布式软总线。</li><li data-pid=\"FjbAIgL6\">JS 和 WASM 之间的关系，<a href=\"https://zhuanlan.zhihu.com/p/102692865\" class=\"internal\">类似于白学家熟悉的冬马和雪菜</a>（魔怔了魔怔了）。</li></ul><p data-pid=\"aTWY5MhY\">所以如果很多工程领域的技能在你看来都具备相似的内核，并且你也能熟练运用它们解决问题（<i>注意搬运知乎回答复读不算，能实际做出东西才算</i>），那可能确实是「<b>经过陡峭的阶段以后又平缓</b>」了，因为这说明你没有一年经验用十年，而是逐渐把长年累月遇到的知识给串起来了。</p><p data-pid=\"ogggkNVB\">千言万语汇聚成一张图：</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-1436e3bf47c7c7bd58dea40891db09ce_720w.jpg?source=2c26e567\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"657\" data-original-token=\"v2-1436e3bf47c7c7bd58dea40891db09ce\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-3fd5a4c48a292cfb145ca292dddbce66_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"906\" data-original=\"https://pic1.zhimg.com/v2-1436e3bf47c7c7bd58dea40891db09ce_r.jpg?source=2c26e567\"/><figcaption>P.S. 我司招人中……不问这些花里胡哨的名堂，长期私信内推</figcaption></figure><p data-pid=\"6PQdt1fr\">啊不好意思放错了，是这张：</p><figure data-size=\"small\"><img src=\"https://picx.zhimg.com/50/v2-d20bdfc27bd10b510c241c3a194e047b_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1126\" data-rawheight=\"848\" data-original-token=\"v2-d20bdfc27bd10b510c241c3a194e047b\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-512c026f6dcf0d1dc6ad858d58a566f1_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1126\" data-original=\"https://pic1.zhimg.com/v2-d20bdfc27bd10b510c241c3a194e047b_r.jpg?source=2c26e567\"/></figure><p data-pid=\"1EGWy9pq\">It&#39;s all about connecting the dots.</p>",
            "excerpt": "忍不住说两句大实话，只有我觉得前端的学习曲线一直都还挺平缓的吗（捂脸） 毕竟抽象代数、偏微分方程和四大力学这些才是噩梦。前端问个 CSS 规范里白纸黑字写着的矩阵乘法都能难倒一大片，而线性代数的难度跟本科这些（ 我学不动的）课比起来完全是小儿科…但随着经验的增加，个人倒确实越来越多地会产生一种「 它们背后的东西其实很相似」的感觉，于是理解起新知识就逐渐轻松了起来。举几个例子：TypeScript 的子类型机制和…order theory 为基石。不论是经典的 class hierarchy 层级结构还是用于记录分布式用户操作的因果树，它们都是在处理偏序关系 。对 JS 数组做 reduce 时如果满足特定规律，其实是可以允许异步并行处理的（注意不是串行 await）——而这规律实质上就是「赋能」了当年那个著名 Map Reduce 分布式框架的规律，其重点叫单位元和结合律，而满足它的代数结构亦即传说中的 monoid 幺半群…Flutter 引擎算布局的方式跟你跟糊省市区接口嵌套数据的写法殊途同归，递归 DFS 解君愁。做 CSS 动画和 WebGL 定位 3D 物体时的手法大同小异，都利用矩阵性质来套娃平移旋转缩放。C 的指针可以等价地套上 Vue 3 的 ref 和 unref 心智模型来理解，于是前者（在不考虑安全的前提下）突然就显得很简单了 。老派 OOP 的消息传递可以解读为方法调用，于是 Objective-C 一下就变成一门能读的语言了 。经典图像滤镜算法 神似于康威生命游戏 ，其输入都源于对每个节点（像素）周围状态的采样。移植 JS 引擎到 WASM 和移植 Webpack 到 Vite 的方法论都是一回事，无非逐个跑通点亮模块。异步的 JSBridge 和 XMLHttpRequest 异曲同工，它们都可以理解成两个异构 VM 之间的数据深拷贝和 RPC。还有人格局更高，直接将后者重新定义为分布式软总线。JS 和 WASM 之间的关系，类似于白学家熟悉的冬马和雪菜 （魔怔了魔怔了）。",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 2,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-1436e3bf47c7c7bd58dea40891db09ce_720w.jpg?source=7e7ef6e2",
                        "width": 906,
                        "height": 657,
                        "token": "v2-1436e3bf47c7c7bd58dea40891db09ce",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-d20bdfc27bd10b510c241c3a194e047b_720w.jpg?source=7e7ef6e2",
                        "width": 1126,
                        "height": 848,
                        "token": "v2-d20bdfc27bd10b510c241c3a194e047b",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxjFuPfTByDh+fEIkgIlCgk0MDM3MzA0OTgSCjIwNTUwNjg3NDEYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2021-08-12T11:46:14+08:00"
    },
    {
        "content": {
            "id": 2834044827,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/577318797/answer/2834044827",
            "created_time": 1673078235,
            "updated_time": 1673317907,
            "question": {
                "type": "question",
                "id": 577318797,
                "title": "TypeScript 实践中的 Equals 类型的实现原理是什么？",
                "question_type": "normal",
                "created": 1673078124,
                "updated_time": 1673261610,
                "url": "https://www.zhihu.com/question/577318797",
                "is_deleted": false
            },
            "author": {
                "id": "9116f4884921d8e41e15f4cf4a0737fd",
                "url_token": "gao-jun-kang",
                "name": "高厉害",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-c56723e7e572c753b897c2551f43b19f_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-c56723e7e572c753b897c2551f43b19f.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/9116f4884921d8e41e15f4cf4a0737fd",
                "user_type": "people",
                "headline": "full stack coder &amp;&amp; 科幻迷",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "小红书 后端研发"
                    }
                ],
                "badge_v2": {
                    "title": "小红书 后端研发",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "小红书 后端研发",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "小红书 后端研发",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "https://picx.zhimg.com/v2-14ad51a3be5323d428fa888611ab95f9_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 40,
            "comment_count": 7,
            "thanks_count": 18,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"X8FC6wY1\">发现在国内网站上几乎找不到任何 Equals 实现相关的有参考意义的原理性解释。</p><p data-pid=\"H0SSthBc\">在这里管中窥豹，抛砖引玉，希望有大佬能对这个实现进行更深入的分析和回答。</p><h2>How does the Equals work in typescript？</h2><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-14ad51a3be5323d428fa888611ab95f9_720w.jpg?source=2c26e567\" data-rawwidth=\"1088\" data-rawheight=\"256\" data-size=\"normal\" data-original-token=\"v2-14ad51a3be5323d428fa888611ab95f9\" class=\"origin_image zh-lightbox-thumb\" width=\"1088\" data-original=\"https://pic1.zhimg.com/v2-14ad51a3be5323d428fa888611ab95f9_r.jpg?source=2c26e567\"/><figcaption>desc</figcaption></figure><h3>循着线索慢慢来</h3><p data-pid=\"Ks679wJp\">在 ts 中如何判断两种类型完全一致？</p><p data-pid=\"d9IgjifG\">三年前，在社区有一场关于支持 type level equal operator 的讨论 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/issues/27024\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TypeScript#27024</a>。</p><p data-pid=\"Ozan0u2F\">大佬 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/mattmccutchen\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@mattmccutchen</a> 给出了一个非常精彩的<a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/issues/27024%23issuecomment-421529650\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">解决方案</a>：</p><blockquote data-pid=\"OGgrQq2O\"> Here&#39;s a solution that makes creative use of the assignability rule for conditional types, which requires that the types after extends be &#34;identical&#34; as that is defined by the checker:  ts export type Equals&lt;X, Y&gt; =      (&lt;T&gt;() =&gt; T extends X ? 1 : 2) extends      (&lt;T&gt;() =&gt; T extends Y ? 1 : 2) ? true : false;  This passes all the tests from the initial description that I was able to run except H, which fails because the definition of &#34;identical&#34; doesn&#39;t allow an intersection type to be identical to an object type with the same properties. (I wasn&#39;t able to run test E because I don&#39;t have the definition of Head.)</blockquote><p data-pid=\"mT8qzoki\">它本人并没有给出任何关于这个类型工作原理的解释，但它确实非常 work，在实践中被大量使用。</p><p data-pid=\"8fdOjsdL\">不过，在后面其他人的交流中，发现了一些可能对理解有帮助的 comment。</p><p data-pid=\"Qo6qBnyW\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/fatcerberus\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@fatcerberus</a></p><blockquote data-pid=\"s7h5ylwf\"> @jituanlin AFAIK it relies on conditional types being deferred when T is not known. Assignability of deferred conditional types relies on an internal isTypeIdenticalTo check, which is only true for two conditional types if:  </blockquote><ul><li data-pid=\"3m_3K8V5\">Both conditional types have the same constraint</li><li data-pid=\"A-smI_gY\">The true and false branches of both conditions are the same type</li></ul><p data-pid=\"yI9vHDj7\">这个类型在做的事情实际上就是，对 &lt;T&gt;() =&gt; T extends X ? 1 : 2 和 &lt;T&gt;() =&gt; T extends Y ? 1 : 2 做 assignability 检查。</p><p data-pid=\"8-SQo7Xu\">而这个针对 conditional type 的检查，仅当下面两点满足时，才认为前者 assignable to 后者。</p><ul><li data-pid=\"dgs7y0oI\">X 和 Y 一致</li><li data-pid=\"tZGr8v5u\">conditional type 各自的两个分支相应位置一致</li></ul><p data-pid=\"xKW_Yvb7\">但我不太确定他的所谓的 &#34;一致&#34;(same) 具体是什么含义。</p><p data-pid=\"CAcou-1v\">后面，还有一条更有帮助的 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/issues/27024%23issuecomment-853640431\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">comment</a>：</p><p data-pid=\"Kpm7DSsP\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/tianzhich\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@tianzhich</a></p><blockquote data-pid=\"cj4UqbkP\">where can I find the infomations about the internal &#39;isTypeIdenticalTo&#39; check? I can&#39;t find anything in the typescript official website.... I found this in /node_modules/typescript/lib/typescript.js, by searching isTypeIdenticalTo. There are also some comments that may help someone here: <br/>// Two conditional types &#39;T1 extends U1 ? X1 : Y1&#39; and &#39;T2 extends U2 ? X2 : Y2&#39; are related if  <br/>// one of T1 and T2 is related to the other, U1 and U2 are identical types, X1 is related to X2,  <br/>// and Y1 is related to Y2.</blockquote><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-270aeb3908bbeb7ff8cf5c94864f864c_720w.jpg?source=2c26e567\" data-rawwidth=\"2380\" data-rawheight=\"1142\" data-size=\"normal\" data-original-token=\"v2-270aeb3908bbeb7ff8cf5c94864f864c\" class=\"origin_image zh-lightbox-thumb\" width=\"2380\" data-original=\"https://picx.zhimg.com/v2-270aeb3908bbeb7ff8cf5c94864f864c_r.jpg?source=2c26e567\"/><figcaption>image</figcaption></figure><blockquote data-pid=\"WkKFlVSK\"> But I&#39;m still not very clear what the <b>related</b> mean here? I can&#39;t understand the src code of isRelatedTo.</blockquote><p data-pid=\"fMZNfBfb\">在 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/blob/f1ff0de94326b554f46a71941ca453fb2559a752/src/compiler/checker.ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">hash [f1ff0de] - src/compiler/checker.ts</a> 中确实找到了这个注释：</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-c957ba4e291c38a90dd990a524300962_720w.jpg?source=2c26e567\" data-rawwidth=\"1990\" data-rawheight=\"260\" data-size=\"normal\" data-original-token=\"v2-c957ba4e291c38a90dd990a524300962\" class=\"origin_image zh-lightbox-thumb\" width=\"1990\" data-original=\"https://picx.zhimg.com/v2-c957ba4e291c38a90dd990a524300962_r.jpg?source=2c26e567\"/><figcaption>desc</figcaption></figure><p data-pid=\"Eqb2Ld6l\">它给出了对 conditional type 进行 assignability check 的更细致的说明：</p><p data-pid=\"E5CAQ0Fc\">它要求：</p><ul><li data-pid=\"W-pjsjqR\">sourceType1 和 sourceType2 只要存在任意方向的 assignable 关系即可。</li></ul><p data-pid=\"yIxX0slB\">例如 1 和 number，{ foo: number, bar: string } 和 { bar: string } 都是可以的。</p><p data-pid=\"WdVyqz8E\">但 Record&lt;PropertyKey, unknown&gt; 和 tuple type [] 不行，string 和 number 也不行。</p><ul><li data-pid=\"GZdqrv2O\"> extendFromType1 和 extendsFrom2 必须是&#34;完全一致&#34;(identical)的。</li><li data-pid=\"PADPq-nP\"> canExtendBranchType1 is assignable to canExtendBranchType2。</li><li data-pid=\"GGK7JtCv\"> cannotExtendBranchType1 is assignable to cannotExtendBranchType2。</li></ul><blockquote data-pid=\"UWyG0_sM\"> 经过测试，注释中的 &#39;related&#39; 指的是 &#39;x assignable to y&#39; 的关系。</blockquote><p data-pid=\"ZBjbNGAX\">这个关系过于细节，并非通过直觉就能推断出来的，所以 Equals 实际上是一个非常 hack 的实现。</p><h3>好了，道理我都懂，Equals 到底怎么工作的？</h3><p data-pid=\"1JriD2bA\">我们回头研究 Equals 的实现。</p><h3>使用 generic function 的目的</h3><p data-pid=\"VBo-L_Sk\">我看到 Equals 的第一反应，是疑惑为什么长得这么怪，相等性判断为什么会跟函数扯上关系？</p><p data-pid=\"FUvxkAWs\">其实是否是函数并不重要，重要的是，我们需要在 Equals 的上下文中使用一个未被指定的 generic type T 来构成一个 conditional type。</p><p data-pid=\"P_uw9yyf\">实际上这个 generic function 从头到尾就没被特化过，<b>它的作用仅仅是提供一个可能为任意类型的 generic T</b>。</p><blockquote data-pid=\"7bdrnLUT\"> 注意，我这里提到的任意类型与 any 并不是一个概念，any 基本上是所有类型的全集的概念，而任意类型则是全集中的任意集合的概念。  下文同。</blockquote><p data-pid=\"bo453HlW\">所以，从这个角度来看，把 conditional type 放在参数位置也是可以的：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Equals</span><span class=\"p\">&lt;</span><span class=\"nt\">X</span><span class=\"err\">,</span> <span class=\"na\">Y</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span>\n  <span class=\"p\">(&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;(</span><span class=\"nx\">arg</span>: <span class=\"kt\">T</span> <span class=\"kr\">extends</span> <span class=\"nx\">X</span> <span class=\"o\">?</span> <span class=\"nx\">1</span> : <span class=\"kt\">2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">any</span><span class=\"p\">)</span> <span class=\"kr\">extends</span>\n  <span class=\"p\">(&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;(</span><span class=\"nx\">arg</span>: <span class=\"kt\">T</span> <span class=\"kr\">extends</span> <span class=\"nx\">Y</span> <span class=\"o\">?</span> <span class=\"nx\">1</span> : <span class=\"kt\">2</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">any</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"kc\">true</span> <span class=\"o\">:</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n</code></pre></div><h3>conditional type 是如何安排的</h3><div class=\"highlight\"><pre><code class=\"language-text\">(&lt;T&gt;() =&gt; T extends X ? 1 : 2) extends\n(&lt;U&gt;() =&gt; U extends Y ? 1 : 2) ? true : false</code></pre></div><blockquote data-pid=\"N05vmFvH\"> 第二个 generic T 换成 U 是为了提醒，两个 conditional type 中的 T 基本上无任何关系。</blockquote><p data-pid=\"4pJ7tLz7\">套用我们刚刚了解到的关于 conditional type 之间的 assignability 检查规则来看。</p><ul><li data-pid=\"HLu5Q7p8\">T 与 U 只要 the one reated to other 即可，而它们是任意类型，所以它们并不重要，也不需要考虑。  </li><li data-pid=\"8ZkgoTxV\">X 与 Y 必须是完全一致的，这就是这个解决方案的核心 hack 点，利用 ts checker 对 conditional type 进行 assignbility check 的机制，将 X 和 Y 放在正确的位置，从而让 checker 对 X Y 进行了&#34;完全一致&#34;的这种相等性判断。  </li><li data-pid=\"MDhC9uOy\"> 至于 1 和 2，它们只要满足对应位置上有正方向的 assignable 关系即可 —— 即 1 extends 1，2 extends 2。</li></ul><p data-pid=\"Sdc6G3Sm\">所以 1 和 2 本身并不重要，我们可以根据上面的规则轻易构造出其他的例子。</p><p data-pid=\"MmqvijTi\">但还要注意的是，我们必须保证 1 位置上的类型 not related to 2 位置上的类型 ，才能让 Equals 在结果应该为 false 上的 case 也正常工作。</p><p data-pid=\"X_pW3g5l\">例如下面这几个 case 都是 work 的：</p><div class=\"highlight\"><pre><code class=\"language-text\">type Equals1&lt;X, Y&gt; =\n  (&lt;T&gt;() =&gt; T extends X ? 1 : &#39;1&#39;) extends \n  (&lt;U&gt;() =&gt; U extends Y ? number : string) \n  ? true : false\n\ntype Equals2&lt;X, Y&gt; =\n  (&lt;T&gt;() =&gt; T extends X ? { foo: number } : 2) extends\n  (&lt;U&gt;() =&gt; U extends Y ? { foo: number, bar?: string } : {}) \n  ? true : false;\n\n// 这个 case 也是 work 的，想想为什么？\ntype Equals3&lt;X, Y&gt; = \n  (&lt;T&gt;() =&gt; T extends X ? T : T) extends\n  (&lt;U&gt;() =&gt; U extends Y ? U : U) \n  ? true : false;</code></pre></div><p data-pid=\"nDFpTCKG\">基本上就是这样，这应该是 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/mattmccutchen\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@mattmccutchen</a> 构造 Equals 时脑子里的冰山一角，更多的应该是 TypeScript 的实现，他对 checker 基本了如指掌才会有如此功力，而不是像我这样从注释中管中窥豹。</p><p data-pid=\"GKhZgqxz\">而即便如此，我也花了断断续续大约 20+ 有效思考小时，才勉强弄明白他的结构，以及各部分在这个功能中负责做什么。</p><p data-pid=\"TfyY3ykA\">还有一个可能对理解有帮助的来自爆栈网的解释，附在文末。</p><p data-pid=\"NmQRL6sv\">下面是用到的 test cases，大家可以拿去自己把玩一下。</p><h3>test cases</h3><div class=\"highlight\"><pre><code class=\"language-text\">type Except&lt;T extends U, U&gt; = T\ntype Head&lt;T extends any[]&gt; = T extends [infer F, ...infer _] ? F : never;\n\ntype cases = [\n  Except&lt;Equals&lt;1, 2&gt;, false&gt;,\n  Except&lt;Equals&lt;{ foo: number }, { foo: string }&gt;, false&gt;,\n  Except&lt;Equals&lt;{ foo: number }, { foo: number, bar: string }&gt;, false&gt;,\n  Except&lt;Equals&lt;{ foo: number }, { foo?: number }&gt;, false&gt;,\n  Except&lt;Equals&lt;{ foo: number }, { foo: number }&gt;, true&gt;,\n  Except&lt;Equals&lt;&#39;a&#39;, &#39;a&#39; | &#39;b&#39;&gt;, false&gt;,\n  Except&lt;Equals&lt;never, never&gt;, true&gt;,\n  Except&lt;Equals&lt;&#39;a&#39;, &#39;a&#39;&gt;, true&gt;,\n  Except&lt;Equals&lt;string, number&gt;, false&gt;,\n  Except&lt;Equals&lt;1, 1&gt;, true&gt;,\n  Except&lt;Equals&lt;any, 1&gt;, false&gt;,\n  Except&lt;Equals&lt;1 | 2, 1&gt;, false&gt;,\n  Except&lt;Equals&lt;Head&lt;[1, 2, 3]&gt;, 1&gt;, true&gt;,\n  Except&lt;Equals&lt;any, never&gt;, false&gt;,\n  Except&lt;Equals&lt;never, any&gt;, false&gt;,\n  Except&lt;Equals&lt;[any], [never]&gt;, false&gt;,\n]</code></pre></div><h3>ref</h3><ol><li data-pid=\"XjxKF-F0\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/microsoft/TypeScript/issues/27024\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Github - TypeScript#27024</a></li><li data-pid=\"9F481VXG\"><a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/questions/68961864/how-does-the-equals-work-in-typescript\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">爆栈网 - How does the Equals work in typescript?</a></li></ol>",
            "excerpt": "发现在国内网站上几乎找不到任何 Equals 实现相关的有参考意义的原理性解释。 在这里管中窥豹，抛砖引玉，希望有大佬能对这个实现进行更深入的分析和回答。 How does the Equals work in typescript？ [图片] 循着线索慢慢来在 ts 中如何判断两种类型完全一致？ 三年前，在社区有一场关于支持 type level equal operator 的讨论 TypeScript#27024 。大佬 @mattmccutchen 给出了一个非常精彩的解决方案 ： Here&#39;s a solution that makes cre…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 3,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-14ad51a3be5323d428fa888611ab95f9_720w.jpg?source=7e7ef6e2",
                        "width": 1088,
                        "height": 256,
                        "token": "v2-14ad51a3be5323d428fa888611ab95f9",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-270aeb3908bbeb7ff8cf5c94864f864c_720w.jpg?source=7e7ef6e2",
                        "width": 2380,
                        "height": 1142,
                        "token": "v2-270aeb3908bbeb7ff8cf5c94864f864c",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-c957ba4e291c38a90dd990a524300962_720w.jpg?source=7e7ef6e2",
                        "width": 1990,
                        "height": 260,
                        "token": "v2-c957ba4e291c38a90dd990a524300962",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxibr7DHCiC9nZgrkgIlCgk1NDUzNjU3ODISCjI4MzQwNDQ4MjcYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-01-07T15:57:15+08:00"
    },
    {
        "content": {
            "id": 2834185004,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/519831827/answer/2834185004",
            "created_time": 1673084790,
            "updated_time": 1673084790,
            "question": {
                "type": "question",
                "id": 519831827,
                "title": "什么样类型的工作最消耗人？",
                "question_type": "normal",
                "created": 1646300631,
                "updated_time": 1646300631,
                "url": "https://www.zhihu.com/question/519831827",
                "is_deleted": false
            },
            "author": {
                "id": "13ba78a859eaf6b9a5b27c5c56ee8419",
                "url_token": "ze.ran",
                "name": "ze ran",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-2ef7f1bdfcf4fd26e7c7e715b7e6b8ad_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-2ef7f1bdfcf4fd26e7c7e715b7e6b8ad.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/13ba78a859eaf6b9a5b27c5c56ee8419",
                "user_type": "people",
                "headline": "less is more",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic2.zhimg.com/v2-fb401ca21c06d20536e5aef65d78617d_r.png",
                        "night_mode_url": "https://pic1.zhimg.com/v2-3b268fe17118485b7cbe23b0fcc4cb02.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19554298",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19554298",
                                "name": "编程",
                                "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "知乎十年新知答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "新知答主",
                            "description": "知乎十年新知答主",
                            "url": "https://zhuanlan.zhihu.com/p/344234033",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "reward",
                            "detail_type": "zhihu_10years_answerer",
                            "title": "新知答主",
                            "description": "知乎十年新知答主",
                            "url": "https://zhuanlan.zhihu.com/p/344234033",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "编程话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 566,
            "comment_count": 37,
            "thanks_count": 64,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"Rjwzc1hv\">不能做决定，却要担责任的工作。</p>",
            "excerpt": "不能做决定，却要担责任的工作。",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxis9rjHCiDfxIwlkgIlCgk1NDUzOTEyMjASCjI4MzQxODUwMDQYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-01-07T17:46:30+08:00"
    },
    {
        "content": {
            "id": 2831200344,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/29953354/answer/2831200344",
            "created_time": 1672913107,
            "updated_time": 1672913107,
            "question": {
                "type": "question",
                "id": 29953354,
                "title": "如何做前端异常监控？",
                "question_type": "normal",
                "created": 1430231519,
                "updated_time": 1430231519,
                "url": "https://www.zhihu.com/question/29953354",
                "is_deleted": false
            },
            "author": {
                "id": "28cde2af69b227667087539019627fd6",
                "url_token": "aolyang",
                "name": "冰箱听令",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-ff3090674fe1f3e85ab1b515d7291970_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-ff3090674fe1f3e85ab1b515d7291970.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/28cde2af69b227667087539019627fd6",
                "user_type": "people",
                "headline": "前端为主，everything为辅",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1508982083
            },
            "thumbnail": "https://picx.zhimg.com/v2-a3f4b995e98da2b3aac21e0281744549_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 37,
            "comment_count": 2,
            "thanks_count": 22,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"aXhd1e1E\">核心内容：<b>sourcemap</b>、<b>错误发现和收集</b>、<b>错误统计和上报</b>、<b>错误监控和分析</b>、<b>堆栈信息还原</b></p><p data-pid=\"weuaQnTJ\"><b>为什么我们需要对错误进行监控？</b></p><p data-pid=\"cXvRkkex\">在生产环境，大多数web应用（尤其中小型公司）还是没有（或没有成本去实现）完善的单元测试或者自动化测试，使得程序在使用中会泄露众多BUG。 当应用发布到生产环境时出现BUG会造成糟糕的用户体验，甚至影响整个程序的运行。所以，我们需要一种可靠的手段监控应用的健康，并在发生错误时迅速的定位问题、反馈问题。</p><p data-pid=\"DcO5Aque\">而前端代码总是通过编译、转换混淆和压缩后发布到生产环境，使得定位错误困难重重。</p><p data-pid=\"gXojzvVS\"><b>错误监控系统？</b></p><p data-pid=\"3hnG0beV\">程序运行时将发生各种错误，在不影响程序运行的情况下，将错误快速有效地收集、统计，反馈到管理中心，便于研发更快发现和修复错误地一套系统便是错误监控系统。一般错误监控系统包含三个核心模块：</p><ul><li data-pid=\"NhafoP8G\"><b>错误发现和收集</b>：在程序运行中发生错误时，及时监测错误发生的位置、类型并将其收集起来；</li><li data-pid=\"x86TXghF\"><b>错误统计和上报</b>：收集到错误信息后，可能会进行临时缓存、过滤、简单加工或者简单统计等操作，然后将信息上报给统计系统后端存储；</li><li data-pid=\"KXULlF9h\"><b>错误监控和分析</b>：错误监控服务面向研发，一般私有部署在公司内部。监控部分接收客户端监听错误、主动上报错误、日志等信息，并存储和统计；分析部分将收集的信息和错误源信息以列表、图表等形式展示，方便研发人员查阅。生产环境的错误一般发生在代码编译和混淆之后，错误信息已经很难定位代码位置，所以，分析部分通常还有<b>堆栈信息还原</b>、<b>代码定位</b>等功能。</li></ul><h3>0x01 错误发现和收集</h3><h3>常见的错误类型</h3><p data-pid=\"SI7ztQL5\"><b>1. 常见js错误</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// SyntaxError 语法错误，一般编译检查会过滤掉\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// TypeError 数据类型不一致\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">name</span>\n<span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// RangeError 内存溢出，堆栈溢出，死循环，无限递归等等\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// 网络错误\n</span><span class=\"c1\">// ResourceError 资源加载错误\n</span><span class=\"c1\"></span><span class=\"k\">new</span> <span class=\"nx\">Image</span><span class=\"p\">().</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;路径不存在或者请求你出问题&#34;</span>\n\n<span class=\"c1\">// 接口错误没有catch\n</span><span class=\"c1\"></span><span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s2\">&#34;api&#34;</span><span class=\"p\">)</span> <span class=\"cm\">/* .catch(e =&gt; ...)*/</span>\n\n<span class=\"c1\">// 没有处理的异步错误\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">async</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// error\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n<span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// error\n</span><span class=\"c1\"></span><span class=\"p\">})</span>\n</code></pre></div><p data-pid=\"SOCikIE8\"><b>2. Vue错误</b></p><p data-pid=\"kYEeiz4e\">vue通过全局配置errorHandler收集错误</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">Vue</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">errorHandler</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">errorService</span><span class=\"p\">.</span><span class=\"nx\">vueErrorAdapter</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"Qjkfv-hf\"><b>3. React ErrorBoundary</b></p><p data-pid=\"M_jaiRi-\">react通过声明错误边界组件收集错误信息。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">class</span> <span class=\"nx\">ErrorBoundary</span> <span class=\"kr\">extends</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">Component</span> <span class=\"p\">{</span>\n  <span class=\"nx\">componentDidCatch</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">errorInfo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">errorService</span><span class=\"p\">.</span><span class=\"nx\">reactErrorAdapter</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">errorInfo</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><h3>错误并不好收集</h3><p data-pid=\"h01tDj-O\"><b>1. try/catch</b>无法捕获<b>语法</b>和<b>异步</b>错误</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 语法错误，不能捕获 ❌\n</span><span class=\"c1\"></span><span class=\"k\">try</span> <span class=\"p\">{</span>\n <span class=\"kr\">const</span> <span class=\"nx\">notdefined</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;捕获到异常：&#39;</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 异步错误，不能捕获 ❌\n</span><span class=\"c1\"></span><span class=\"k\">try</span> <span class=\"p\">{</span>\n <span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">notdefined</span><span class=\"p\">);</span>\n <span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;捕获到异常：&#39;</span><span class=\"p\">,</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"k\">try</span> <span class=\"p\">{</span>\n <span class=\"k\">new</span> <span class=\"nb\">Promise</span><span class=\"p\">((</span><span class=\"nx\">resolve</span><span class=\"p\">,</span><span class=\"nx\">reject</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span> \n   <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n   <span class=\"nx\">resolve</span><span class=\"p\">();</span>\n <span class=\"p\">})</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;catch&#39;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"Es6Vt8TL\"><b>2. window.onerror</b>可以捕获运行时错误和异步错误，无法捕获<b>语法</b>错误和<b>资源</b>错误</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">onerror</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">,</span> <span class=\"nx\">source</span><span class=\"p\">,</span> <span class=\"nx\">lineno</span><span class=\"p\">,</span> <span class=\"nx\">colno</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;捕获到异常：&#39;</span><span class=\"p\">,{</span><span class=\"nx\">message</span><span class=\"p\">,</span> <span class=\"nx\">source</span><span class=\"p\">,</span> <span class=\"nx\">lineno</span><span class=\"p\">,</span> <span class=\"nx\">colno</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 常规运行时错误，可以捕获 ✅\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">notdefined</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// 异步错误，可以捕获 ✅\n</span><span class=\"c1\"></span><span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">notdefined</span><span class=\"p\">);</span>\n<span class=\"p\">},</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// 语法错误，不能捕获 ❌\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">notdefined</span><span class=\"p\">,</span>\n\n<span class=\"c1\">// 资源错误，不能捕获 ❌\n</span><span class=\"c1\">// &lt;img src=&#34;assets.png&#34;&gt;\n</span></code></pre></div><p data-pid=\"SYQbLaXJ\"><b>3. window.addEventListener(“error”)</b>无法捕获<b>new Image</b>和<b>fetch</b></p><blockquote data-pid=\"A5S8FNj6\"> 当一项资源（如图片或脚本）加载失败，<b>加载资源</b>的元素会触发一个 Event 接口的 error 事件，这些 error 事件<b>不会向上冒泡</b>到 window，<b>但能被捕获</b> 。而window.onerror不能监测捕获。</blockquote><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n   <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n       <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;捕获到异常：&#39;</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">);</span>\n   <span class=\"p\">},</span> <span class=\"kc\">true</span><span class=\"p\">)</span> \n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n// 图片、script、css加载错误，都能被捕获 ✅\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;https://example.com/image/kkk.png&#34;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&#34;&#34;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&#34;resources.js&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&#34;resources.css&#34;</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&#34;stylesheet&#34;</span><span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"c1\">// new Image错误，不能捕获 ❌\n</span><span class=\"c1\"></span><span class=\"k\">new</span> <span class=\"nx\">Image</span><span class=\"p\">().</span><span class=\"nx\">src</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;https://example.com/image/lll.png&#39;</span>\n\n\n<span class=\"c1\">// fetch错误，不能捕获 ❌\n</span><span class=\"c1\"></span><span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;api/v1/data&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span></code></pre></div><p data-pid=\"ynX_Fixb\"><b>4. window.addEventListener(&#34;unhandledrejection&#34;)</b>可以捕获Promise错误</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 全局统一处理Promise\n</span><span class=\"c1\"></span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">&#34;unhandledrejection&#34;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">){</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;捕获到异常：&#39;</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n<span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;api/v1/data&#39;</span><span class=\"p\">)</span>\n</code></pre></div><p data-pid=\"PhBkGMig\"><b>5. wrap了fetch api的promise会发送错误的reject</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 例如包装原生fetch api\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">f</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">;</span>\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">p</span> <span class=\"o\">=</span> <span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">arguments</span><span class=\"p\">)</span>\n  <span class=\"c1\">// 而`p.then`这个新的promise chain总会返回一个错误的reject信息\n</span><span class=\"c1\"></span>  <span class=\"nx\">p</span><span class=\"p\">.</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;hi.&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">p</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"V3bL-tQ1\">有很多情况下，另一些工具库或者广告拦截器会包装原生fetch api，这些api会拦截函数执行，并将结果重新返回。这个总是reject的错误会在处理过程（上报 &gt;&gt; reject &gt;&gt; 收集 &gt;&gt; 上报 &gt;&gt; reject ...）中引发无限循环。因此，我们需要拿到window上的原生fetch。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">let</span> <span class=\"nx\">cachedFetchImpl</span><span class=\"o\">:</span> <span class=\"nx\">FetchImpl</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span>\n\n<span class=\"kr\">export</span> <span class=\"nx\">type</span> <span class=\"nx\">FetchImpl</span> <span class=\"o\">=</span> <span class=\"k\">typeof</span> <span class=\"nx\">fetch</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">isNativeFetch</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">func</span><span class=\"o\">:</span> <span class=\"nb\">Function</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"kr\">boolean</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">func</span> <span class=\"o\">&amp;&amp;</span> <span class=\"sr\">/^function fetch\\(\\)\\s+\\{\\s+\\[native code]\\s+}$/</span><span class=\"p\">.</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">func</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">())</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">getNativeFetch</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">cachedFetchImpl</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">cachedFetchImpl</span>\n\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isNativeFetch</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">cachedFetchImpl</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">))</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">const</span> <span class=\"nb\">document</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nb\">document</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">fetchImpl</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">document</span> <span class=\"o\">&amp;&amp;</span> <span class=\"k\">typeof</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;function&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">try</span> <span class=\"p\">{</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">sandbox</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s1\">&#39;iframe&#39;</span><span class=\"p\">)</span>\n      <span class=\"nx\">sandbox</span><span class=\"p\">.</span><span class=\"nx\">hidden</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">sandbox</span><span class=\"p\">)</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">contentWindow</span> <span class=\"o\">=</span> <span class=\"nx\">sandbox</span><span class=\"p\">.</span><span class=\"nx\">contentWindow</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">contentWindow</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">contentWindow</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fetchImpl</span> <span class=\"o\">=</span> <span class=\"nx\">contentWindow</span><span class=\"p\">.</span><span class=\"nx\">fetch</span>\n      <span class=\"p\">}</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">head</span><span class=\"p\">.</span><span class=\"nx\">removeChild</span><span class=\"p\">(</span><span class=\"nx\">sandbox</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"s1\">&#39;Could not create sandbox iframe for pure fetch check: &#39;</span><span class=\"p\">,</span> <span class=\"nx\">e</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">cachedFetchImpl</span> <span class=\"o\">=</span> <span class=\"nx\">fetchImpl</span><span class=\"p\">.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">))</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"vQr06X1c\"><b>更多错误收集方式可以参考</b> <a href=\"https://link.zhihu.com/?target=https%3A//github.com/getsentry/sentry-javascript/tree/master/packages\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">getsentry/sentry-javascript/packages</a></p><h3>错误收集实现</h3><p data-pid=\"FfBX8k-6\"><b>全局简单地通过三种方式监听错误</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// listener.ts\n</span><span class=\"c1\"></span><span class=\"kr\">export</span> <span class=\"kr\">interface</span> <span class=\"nx\">IReportData</span> <span class=\"p\">{</span>\n  <span class=\"nx\">lineno</span><span class=\"o\">:</span> <span class=\"nx\">number</span>\n  <span class=\"nx\">colno</span><span class=\"o\">:</span> <span class=\"nx\">number</span>\n  <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"nx\">string</span>\n  <span class=\"nx\">message</span><span class=\"o\">?:</span> <span class=\"nx\">string</span>\n  <span class=\"nx\">stack</span><span class=\"o\">?:</span> <span class=\"nx\">string</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">export</span> <span class=\"kr\">const</span> <span class=\"nx\">startListener</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">onerror</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">,</span> <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">,</span> <span class=\"nx\">lineno</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">colno</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// console.log(&#34;onerror&#34;, error)\n</span><span class=\"c1\"></span>    <span class=\"nx\">reportError</span><span class=\"p\">({</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s2\">&#34;onerror&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">lineno</span><span class=\"p\">,</span>\n      <span class=\"nx\">colno</span><span class=\"p\">,</span>\n      <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"nx\">message</span> <span class=\"nx\">as</span> <span class=\"nx\">string</span><span class=\"p\">,</span>\n      <span class=\"nx\">stack</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">error</span> <span class=\"nx\">as</span> <span class=\"nx\">any</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">stack</span> <span class=\"o\">||</span> <span class=\"s2\">&#34;&#34;</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">}</span>\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">&#34;error&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">lineno</span><span class=\"p\">,</span> <span class=\"nx\">colno</span><span class=\"p\">,</span> <span class=\"nx\">message</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">event</span>\n    <span class=\"c1\">// console.log(&#34;addEventListener&#34;, event)\n</span><span class=\"c1\"></span>    <span class=\"nx\">reportError</span><span class=\"p\">({</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s2\">&#34;addEventListener&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">lineno</span><span class=\"p\">,</span>\n      <span class=\"nx\">colno</span><span class=\"p\">,</span>\n      <span class=\"nx\">message</span><span class=\"p\">,</span>\n      <span class=\"nx\">stack</span><span class=\"o\">:</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">stack</span> <span class=\"o\">||</span> <span class=\"s2\">&#34;&#34;</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">})</span>\n  <span class=\"c1\">// promise错误无法拿到位置信息\n</span><span class=\"c1\"></span>  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s2\">&#34;unhandledrejection&#34;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// console.log(&#34;unhandledrejection&#34;, e)\n</span><span class=\"c1\"></span>    <span class=\"nx\">reportError</span><span class=\"p\">({</span>\n      <span class=\"nx\">type</span><span class=\"o\">:</span> <span class=\"s2\">&#34;unhandledrejection&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">lineno</span><span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"nx\">colno</span><span class=\"o\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">reason</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">message</span> <span class=\"o\">||</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">stack</span><span class=\"o\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">reason</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">stack</span> <span class=\"o\">||</span> <span class=\"s2\">&#34;&#34;</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"hr9UUjG6\"><b>发送错误到后端</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 因为错误可能会同时触发两个以上监听器，所以要做个过滤\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">cache</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Map</span><span class=\"p\">()</span>\n\n<span class=\"kr\">export</span> <span class=\"kr\">const</span> <span class=\"nx\">reportError</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"nx\">IReportData</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">key</span> <span class=\"o\">=</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">lineno</span><span class=\"si\">}</span><span class=\"sb\">-</span><span class=\"si\">${</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">colno</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"nx\">has</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">))</span> <span class=\"k\">return</span>\n\n  <span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"s2\">&#34;http://127.0.0.1:4004/error&#34;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"nx\">headers</span><span class=\"o\">:</span> <span class=\"k\">new</span> <span class=\"nx\">Headers</span><span class=\"p\">([[</span><span class=\"s2\">&#34;Content-Type&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;application/json&#34;</span><span class=\"p\">]]),</span>\n    <span class=\"nx\">body</span><span class=\"o\">:</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">),</span>\n    <span class=\"nx\">method</span><span class=\"o\">:</span> <span class=\"s2\">&#34;POST&#34;</span>\n  <span class=\"p\">}).</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">cache</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"nx\">key</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div><h3>0x02 简易服务端收集error信息</h3><p data-pid=\"HfwTyeaz\">这里先用express实现一个简易的服务器：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"nx\">express</span> <span class=\"nx\">from</span> <span class=\"s2\">&#34;express&#34;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">cors</span> <span class=\"nx\">from</span> <span class=\"s2\">&#34;cors&#34;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nx\">express</span><span class=\"p\">()</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">express</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">())</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">cors</span><span class=\"p\">())</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s2\">&#34;/health&#34;</span><span class=\"p\">,</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n    <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s2\">&#34;very well!&#34;</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s2\">&#34;/error&#34;</span><span class=\"p\">,</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">)</span>\n  <span class=\"cm\">/*\n</span><span class=\"cm\">  {\n</span><span class=\"cm\">    type: &#39;onerror&#39;,\n</span><span class=\"cm\">    lineno: 3,\n</span><span class=\"cm\">    colno: 41,\n</span><span class=\"cm\">    message: &#34;Uncaught TypeError: Cannot read properties of null (reading &#39;name&#39;)&#34;,\n</span><span class=\"cm\">    stack: &#34;TypeError: Cannot read properties of null (reading &#39;name&#39;)\\n&#34; +        \n</span><span class=\"cm\">      &#39;    at fn (http://localhost:5173/src/errors.ts:3:41)\\n&#39; +\n</span><span class=\"cm\">      &#39;    at el.onclick (http://localhost:5173/src/errors.ts:4:5)&#39;\n</span><span class=\"cm\">  }\n</span><span class=\"cm\">  * */</span>\n  <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">({</span>\n    <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s2\">&#34;ok&#34;</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">4004</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"sb\">`Server ready at: http://localhost:4004`</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div><p data-pid=\"On0Tjm9d\">拿到错误信息和位置信息之后，就要考虑如何将生产环境的代码映射到源代码上了。实现这个功能，我们需要一个记录编译前后位置信息的交换文件，<b>sourcemap</b>文件。</p><h3>0x03 代码映射文件 sourcemap</h3><p data-pid=\"965bIhTd\">很早之前，为了解决JavaScript脚本越来越复杂、越来越大的问题，通常大部分源码都要通过转换、压缩等方法才能投入到生产环境。通常的情况是<b>压缩</b>、<b>文件合并</b>以减少HTTP请求、<b>语言转换</b>（如CoffeeScript、Typescript到JavaScript）。</p><p data-pid=\"YX4YjNuU\">最终，生产环境的代码的是混淆的并且难以阅读的：</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-c4c8db56ee65a33e03d5297c3ec53fb2_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1119\" data-rawheight=\"194\" data-original-token=\"v2-a3f4b995e98da2b3aac21e0281744549\" class=\"origin_image zh-lightbox-thumb\" width=\"1119\" data-original=\"https://pic1.zhimg.com/v2-c4c8db56ee65a33e03d5297c3ec53fb2_r.jpg?source=2c26e567\"/></figure><p data-pid=\"lUIDwHNM\">这样的代码即使devtools告诉你错误发生在了什么位置，你也无法从这些信息中得到什么有用信息，而sourcemap就是为了解决这些问题。</p><p data-pid=\"auo2WEpk\"><b>简单来讲，sourcemap就是一个信息文件，存储了代码的位置信息，能从转换后代码的位置信息映射到转换前代码的位置信息上</b>。</p><h3>什么是sourcemap？</h3><p data-pid=\"sIGX7UI9\"><b>sourcemap文件格式</b></p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n  <span class=\"nt\">&#34;version&#34;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n  <span class=\"nt\">&#34;file&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;sourceMapDemo.js&#34;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&#34;sourceRoot&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&#34;sources&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&#34;sourceMapDemo.ts&#34;</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&#34;names&#34;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n  <span class=\"nt\">&#34;mappings&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;;;;AAAO,IAAM, ...&#34;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&#34;sourcesContent&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&#34;&#34;</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"-1rTm2Ss\"><b>version</b>：sourcemap的版本。</p><p data-pid=\"Ls5X6x-d\"><b>file</b>：转换后的文件名。</p><p data-pid=\"i0lPyIK0\"><b>sourceRoot</b>：转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空。</p><p data-pid=\"OqdClQgE\"><b>sources</b>：转换前的文件。该项是一个数组，表示可能存在多个文件合并。</p><p data-pid=\"Z-nY-rHM\"><b>names</b>：转换前的所有变量名和属性名。</p><p data-pid=\"w3fyX1yV\"><b>mappings</b>：记录位置信息的字符串，下文详细介绍。</p><p data-pid=\"NAVQaPx-\"><b>sourcesContent</b>：源代码内容（一般没用，当代码无法host或程序性获取的时候）。</p><h3>mappings 如何映射文件信息？</h3><h3>mappings的存储结构</h3><p data-pid=\"T4ti6U90\"><b>sourcemap</b>实现映射的关键便是<b>mappings</b>属性。mappings是一个很长的字符串，分为三种标志：</p><p data-pid=\"4Haqn-qb\"><b>第一种是行对应</b>，以分号（;）结尾，每个分号对应转换后源码的一行（group <b>组</b>）。</p><p data-pid=\"gc2oJRp6\"><b>第二种是位置对应</b>，以逗号（,）分隔，每个逗号隔开的一串字符对应转换后源码的一个位置（segment <b>段</b>）。</p><p data-pid=\"3vE8P9-u\"><b>第三种是位置转换</b>，逗号分隔开的字符串。以Base64 <a href=\"https://zhuanlan.zhihu.com/p/596644741/%5BVariable-length%20quantity%20-%20Wikipedia%5D(https://en.wikipedia.org/wiki/Variable-length_quantity)\" class=\"internal\">VLQ编码</a>表示，代表该位置对应的转换前的源码位置。</p><p data-pid=\"xmWCkP1r\">如<code>{ &#34;mappings&#34;: &#34;;;;AAAO,IAAM, ...&#34; }</code>，三个分号（<b>;</b>）表示前三行没有映射信息，第四行的位置信息从<b>AAAO</b> 开始且表示第一个位置信息，逗号（<b>,</b>）后的下一串字符<b>IAAM</b>表示第二个位置，直到下一个分号开始，表示第五行位置信息，依次类推。</p><h3>什么是VLQ编码(Variable-length quantity)？</h3><p data-pid=\"2mb0tf26\">VLQ是用来表示任意大小数字的编码方式。VLQ的概念很简单（假设这里VLQ单位长度为8 bits）: 数字在VLQ中以n个8位二进制位表示，最高位为标志位，0表示不连续，1表示连续。</p><ol><li data-pid=\"eF4poEGN\">将数字以二进制位表示;</li><li data-pid=\"67m-CIoS\">将数字以7位二进制位一组进行拆分，最后一组不足7位高位补0；</li><li data-pid=\"E9rR9pkM\">除最后一组第8位（位置A）补0表示不与接下来的数字连续外，前面的每组第8位（位置A）补1表示；</li></ol><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-55dc8d6bd0034cb5683c8006e8a40d98_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1172\" data-rawheight=\"144\" data-original-token=\"v2-55dc8d6bd0034cb5683c8006e8a40d98\" class=\"origin_image zh-lightbox-thumb\" width=\"1172\" data-original=\"https://picx.zhimg.com/v2-55dc8d6bd0034cb5683c8006e8a40d98_r.jpg?source=2c26e567\"/></figure><p data-pid=\"QRhmoGJY\">为了表示有符号整数的正负，则将第一段（最低位）取 1（A0连续位）+ 6（data）+ 1（符号位，0正1负）：</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-32e49b3d64f920dcba1d5ea4b9f7398c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1168\" data-rawheight=\"141\" data-original-token=\"v2-32e49b3d64f920dcba1d5ea4b9f7398c\" class=\"origin_image zh-lightbox-thumb\" width=\"1168\" data-original=\"https://pic1.zhimg.com/v2-32e49b3d64f920dcba1d5ea4b9f7398c_r.jpg?source=2c26e567\"/></figure><p data-pid=\"Yr0ls2d4\">因此，在对数据（二进制）进行编码时，会取长度为7n-1为一组进行编码，分别的正负位和连续位进行补位凑满8位。当然，VLQ只是一种编码概念，像其他引擎（比如Unreal将符号位设置在首段最前面）也可能将段倒置逆序等。</p><h3>Base64编码</h3><p data-pid=\"nh2cRmJ_\">Base64是以64个<b>可打印字符串</b>来表示二进制数据的方法。 2^<b>6</b> = 64 即采用6位二进制位为单元。映射表（常用标准）即按顺序的<b>A-Za-z/=</b>映射。（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/aolyang/error-handle/blob/main/sdk/encoder/vlq.ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">源码在sdk/encoder/base64.ts</a>)</p><h3>Base64-VLQ</h3><p data-pid=\"KOYiu4tk\">由于Base64的单元限制，故Base64 VLQ的单位也是6位，即最高位表示连续，低5位表示实际数据。（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/aolyang/error-handle/blob/main/sdk/encoder/vlq.ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">源码在sdk/encoder/vlq.ts</a>)</p><h3>mappings如何表示代码位置</h3><p data-pid=\"NcTBsyc2\"><b>1. 通过记录字符转换前后的位置</b></p><blockquote data-pid=\"6C0mPnQk\"> “feel <b>the</b> force” ⇒ 转换 ⇒ “<b>the</b> force feel”</blockquote><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>输出位置(Output)</th><th>文件(sources)</th><th>输入位置(Input)</th><th>符号（names)</th></tr><tr><td>Line 1, Column 0</td><td>Yoda_input.txt</td><td>Line 1, Column 5</td><td>t</td></tr><tr><td>Line 1, Column 1</td><td>Yoda_input.txt</td><td>Line 1, Column 6</td><td>h</td></tr><tr><td>Line 1, Column 2</td><td>Yoda_input.txt</td><td>Line 1, Column 7</td><td>e</td></tr></tbody></table><p data-pid=\"bn1YaaM6\">mappings里记录的是符号的输入输出位置信息和字符信息，手动填入mappings以单词<b>the</b>为例（line|col|file|line|col)：</p><p data-pid=\"HAG6J1Yt\"><code>mappings=1|0|Yoda_input.txt|1|5,1|1|Yoda_input.txt|1|6,1|2|Yoda_input.txt|1|7</code></p><p data-pid=\"63YQjEyQ\">因此，可以通过转换后的文本位置映射回之前的文本信息。</p><p data-pid=\"J96weCTW\"><b>2. 优化行信息</b></p><p data-pid=\"4LJUowzq\">用<b>分号</b>（;)分隔表示输出行信息，这样可以少记录一个标志，如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">feel the force;              line other 1;\nother line 1;    ⇒ 转换 ⇒    the force feel;\n...                        ...</code></pre></div><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>输出位置(Output)</th><th>文件(sources)</th><th>输入位置(Input)</th><th>符号（names)</th></tr><tr><td>Line 2, Column 0</td><td>Yoda_input.txt</td><td>Line 1, Column 5</td><td>t</td></tr><tr><td>Line 2, Column 1</td><td>Yoda_input.txt</td><td>Line 1, Column 6</td><td>h</td></tr><tr><td>Line 2, Column 2</td><td>Yoda_input.txt</td><td>Line 1, Column 7</td><td>e</td></tr></tbody></table><p data-pid=\"wCjPWeCM\">如上，单词<b>the</b>从第一行的位置转换后到了第二行，在mappings里用分号表示行分隔信息时，可以如下表示：</p><p data-pid=\"0rrET45j\"><code>mappings=......;0|Yoda_input.txt|1|5,1|Yoda_input.txt|1|6,2|Yoda_input.txt|1|7</code></p><p data-pid=\"TlnhzdWN\">忽略第一行的信息，在第一个分号之后第二个分号之前表示整个字符串都在第二行。</p><p data-pid=\"kWMPTOzB\"><b>3. 整合一下数据</b></p><p data-pid=\"8u3dDBN1\">当然我们不可能在mappings的段里都写上<b>Yoda_input.txt</b>文件名，那就用<b>sources</b>表示资源位置吧：</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n  <span class=\"nt\">&#34;sources&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&#34;Yoda_input.txt&#34;</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&#34;mappings&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;...;0|0|1|5,1|0|1|6,2|0|1|7&#34;</span>\n<span class=\"p\">}</span> </code></pre></div><p data-pid=\"SlkrtsOT\"><b>4. 优化字符映射</b></p><p data-pid=\"HIComXpb\">我们也不可能在使用sourcemap时真的去读取文件，查询索引信息再恢复输入输出文件，这样即耗费性能也非常的慢，有没有什么方式只需要sourcemap文件就可以还原输入和输出文件呢？答案是有：</p><p data-pid=\"AD5hNDVx\">sourcemap将转换和修改的符号表保存在names字段里，最后一位新增一个索引位在names里交换出符号信息。</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n  <span class=\"nt\">&#34;sources&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&#34;Yoda_input.txt&#34;</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&#34;names&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&#34;t&#34;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&#34;h&#34;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&#34;e&#34;</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&#34;mappings&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;...;0|0|1|5|0,1|0|1|6|1,2|0|1|7|2&#34;</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"FmiYgK87\"><b>5. 用Base64 VLQ优化信息存储</b></p><p data-pid=\"5Equnpw6\">该有的都有了，但我们还有两个最大的问题要处理：</p><ul><li data-pid=\"oOerE6PX\">我们不能真用竖线来分割每个位置信息所代表的数字;</li><li data-pid=\"Opuxz4JD\">字符可能是10行40列sources第12个文件names第126个字符，没有竖线区分，对于长度不定的数字没办法有效区分；</li></ul><p data-pid=\"b1nnXJP0\">首先，不能用数组存储，json序列化很昂贵；其次，不能用竖线去分隔位置信息，这样会使得mappings的长度大幅增加，起不到精简高效的作用。所以需要一个能存储有序数字并且能表示分隔的编码方式，即VLQ。为了保证数据的可靠性，避免国际字符在平台间产生差异和问题，所以采用了最通用的base64编码进行交换和存储。</p><p data-pid=\"lZgHXHPm\">代码实现：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">base64</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s1\">&#39;A&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;B&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;D&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;E&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;F&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;G&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;H&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;I&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;J&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;K&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;L&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;M&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;N&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;O&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;P&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;R&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;S&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;T&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;U&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;V&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;W&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;X&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Y&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Z&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;c&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;d&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;e&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;f&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;g&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;h&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;i&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;j&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;k&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;l&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;m&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;n&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;o&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;p&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;q&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;s&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;t&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;u&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;v&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;z&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;4&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;5&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;6&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;7&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;8&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;9&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;+&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;/&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;=&#39;</span>\n<span class=\"p\">]</span>\n<span class=\"kr\">const</span> <span class=\"nx\">base64Table</span><span class=\"o\">:</span> <span class=\"nx\">Map</span><span class=\"o\">&lt;</span><span class=\"nx\">number</span><span class=\"p\">,</span> <span class=\"nx\">string</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">base64</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">table</span><span class=\"p\">,</span> <span class=\"nx\">n</span><span class=\"p\">,</span> <span class=\"nx\">idx</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">table</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"nx\">idx</span><span class=\"p\">,</span> <span class=\"nx\">n</span><span class=\"p\">),</span> <span class=\"k\">new</span> <span class=\"nx\">Map</span><span class=\"p\">())</span>\n\n<span class=\"kr\">const</span> <span class=\"kr\">enum</span> <span class=\"nx\">Vlq</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Length</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n  <span class=\"nx\">Base</span> <span class=\"o\">=</span> <span class=\"mi\">1</span> <span class=\"o\">&lt;&lt;</span> <span class=\"nx\">Vlq</span><span class=\"p\">.</span><span class=\"nx\">Length</span><span class=\"p\">,</span> <span class=\"c1\">// 100000 32\n</span><span class=\"c1\"></span>  <span class=\"nx\">BaseMask</span> <span class=\"o\">=</span> <span class=\"nx\">Vlq</span><span class=\"p\">.</span><span class=\"nx\">Base</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"c1\">// 011111 31\n</span><span class=\"c1\"></span>  <span class=\"nx\">Continuation</span> <span class=\"o\">=</span> <span class=\"nx\">Vlq</span><span class=\"p\">.</span><span class=\"nx\">Base</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">encoder</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 1. 负数末尾标志位设1\n</span><span class=\"c1\"></span>  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"nx\">num</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nb\">Math</span><span class=\"p\">.</span><span class=\"nx\">abs</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"mi\">1</span>\n  <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">num</span> <span class=\"o\">&lt;&lt;=</span> <span class=\"mi\">1</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kd\">let</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">digit</span> <span class=\"o\">=</span> <span class=\"nx\">num</span> <span class=\"o\">&amp;</span> <span class=\"nx\">Vlq</span><span class=\"p\">.</span><span class=\"nx\">BaseMask</span>\n    <span class=\"nx\">result</span> <span class=\"o\">+=</span> <span class=\"nx\">base64Table</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">num</span> <span class=\"o\">&lt;</span> <span class=\"nx\">Vlq</span><span class=\"p\">.</span><span class=\"nx\">Continuation</span> <span class=\"o\">?</span> <span class=\"nx\">digit</span> <span class=\"o\">:</span> <span class=\"nx\">digit</span> <span class=\"o\">|</span> <span class=\"nx\">Vlq</span><span class=\"p\">.</span><span class=\"nx\">Continuation</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"nx\">num</span> <span class=\"o\">&gt;&gt;&gt;=</span> <span class=\"nx\">Vlq</span><span class=\"p\">.</span><span class=\"nx\">Length</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">break</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"nx\">result</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">encode</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"o\">:</span> <span class=\"nx\">number</span> <span class=\"o\">|</span> <span class=\"nx\">number</span><span class=\"p\">[])</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">num</span> <span class=\"o\">===</span> <span class=\"s2\">&#34;number&#34;</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">encoder</span><span class=\"p\">(</span><span class=\"nx\">num</span><span class=\"p\">)</span>\n  <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">num</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">pre</span><span class=\"p\">,</span> <span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">pre</span> <span class=\"o\">+=</span> <span class=\"nx\">encoder</span><span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">),</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//在线检测 https://www.murzwin.com/base64vlq.html\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">encode</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">))</span> <span class=\"c1\">// O\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">encode</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">))</span> <span class=\"c1\">// gB\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">encode</span><span class=\"p\">(</span><span class=\"mi\">1200</span><span class=\"p\">))</span> <span class=\"c1\">// grC\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">encode</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">17</span><span class=\"p\">))</span> <span class=\"c1\">// jB\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">encode</span><span class=\"p\">([</span><span class=\"mi\">710</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span> <span class=\"c1\">// ssBAAA\n</span></code></pre></div><p data-pid=\"1KLCA3Ag\"><b>6. 优化列信息</b></p><p data-pid=\"gFAii3uk\">如果列信息始终使用绝对位置，则mappings每个字段都会存储过多较大的数字（如列112，列116，列120），如果出行第一个字段保持绝对位置记录行首空格信息为，其他列信息采用相对位置存储，则可以让数字小很多（如列4，列+6=10，列+12=22 依次计算）。</p><p data-pid=\"H4dskT1Z\">因为数据的可变长以及正负标记等因素，<b>此优化需要VLQ编码作为前提</b>。</p><p data-pid=\"pRKL8Lyd\"><b>7. 优化字符映射</b></p><div class=\"highlight\"><pre><code class=\"language-text\">feel the force;              l other 1;\nother line 1;    ⇒ 转换 ⇒    t force feel;   （存储   names: [the, line]）\nread the line;               read t l\n...                        ...</code></pre></div><p data-pid=\"2EiVlito\">实际中代码的转换远比这个例子复杂许多。为了减少代码体积，通常会将单词提取成较短的字母数字组合。</p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>输出位置(Output)</th><th>文件(sources)</th><th>输入位置(Input)</th><th>符号（names)</th></tr><tr><td>Line 2, Column 0</td><td>Yoda_input.txt</td><td>Line 1, Column 5</td><td>the =&gt; t =&gt; 0</td></tr><tr><td>Line 1, Column 0</td><td>Yoda_input.txt</td><td>Line 2, Column 6</td><td>line =&gt; l =&gt; 1</td></tr><tr><td>Line 3, Column 7</td><td>Yoda_input.txt</td><td>Line 1, Column 9</td><td>line =&gt; l =&gt; 1</td></tr></tbody></table><p data-pid=\"igq2DjyA\">以单词<b>the</b>，<b>line</b> 为例，分别在转换前和转换后进行了位置改变和字符替换，最后一位新增一个符号映射位索引替换的字符。位置信息记录在上表，则在sourcemap里的结果如下(省略其它字符）：</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n  <span class=\"nt\">&#34;names&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&#34;the&#34;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&#34;line&#34;</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&#34;sources&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&#34;Yoda_input.txt&#34;</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&#34;mappings&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;0|1|2|6|1;0|1|1|5|0;7|1|1|9|1&#34;</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"6I53O8XL\">代码实现（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/aolyang/error-handle/blob/main/sdk/sourcemap.ts\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">完整实现</a>）：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kr\">class</span> <span class=\"nx\">SourceMap</span> <span class=\"p\">{</span>\n  <span class=\"nx\">files</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n  <span class=\"nx\">mappings</span><span class=\"o\">:</span> <span class=\"nx\">Mapping</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n  <span class=\"nx\">names</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n  <span class=\"nx\">target</span><span class=\"o\">:</span> <span class=\"nx\">string</span>\n  <span class=\"nx\">sourceRoot</span><span class=\"o\">?:</span> <span class=\"nx\">string</span>\n\n  <span class=\"c1\">// 计算相对位置并使用VLQ编码存储\n</span><span class=\"c1\"></span>  <span class=\"nx\">toMap</span><span class=\"p\">(</span><span class=\"nx\">sourceContent</span><span class=\"o\">?:</span> <span class=\"nx\">string</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">string</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">mappingArray</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">mappings</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">((</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">offset</span> <span class=\"o\">-</span> <span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">offset</span><span class=\"p\">)</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">previousOffset</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">previousLine</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">previousColumn</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">previousFile</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">previousName</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">mappings</span> <span class=\"o\">=</span> <span class=\"nx\">mappingArray</span><span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">instance</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">offset</span> <span class=\"o\">=</span> <span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">offset</span> <span class=\"o\">-</span> <span class=\"nx\">previousOffset</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">line</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">line</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nx\">previousLine</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">column</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">column</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nx\">previousColumn</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">file</span> <span class=\"o\">=</span> <span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">fileIndex</span> <span class=\"o\">-</span> <span class=\"nx\">previousFile</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">name</span><span class=\"o\">:</span> <span class=\"nx\">number</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span> <span class=\"o\">=</span> <span class=\"kc\">undefined</span>\n      <span class=\"kr\">const</span> <span class=\"nx\">n</span> <span class=\"o\">=</span> <span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">name</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">n</span> <span class=\"o\">-</span> <span class=\"nx\">previousName</span>\n        <span class=\"nx\">previousName</span> <span class=\"o\">=</span> <span class=\"nx\">n</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">previousOffset</span> <span class=\"o\">=</span> <span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">offset</span>\n      <span class=\"nx\">previousLine</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">line</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"nx\">previousColumn</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">column</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n      <span class=\"nx\">previousFile</span> <span class=\"o\">=</span> <span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">fileIndex</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">encode</span><span class=\"p\">([</span><span class=\"nx\">offset</span><span class=\"p\">,</span> <span class=\"nx\">file</span><span class=\"p\">,</span> <span class=\"nx\">line</span><span class=\"p\">,</span> <span class=\"nx\">column</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"nx\">name</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span> <span class=\"o\">?</span> <span class=\"s2\">&#34;&#34;</span> <span class=\"o\">:</span> <span class=\"nx\">encode</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">))</span>\n    <span class=\"p\">}).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">&#34;,&#34;</span><span class=\"p\">)</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">mapData</span><span class=\"o\">:</span> <span class=\"nx\">SourceMapData</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"nx\">version</span><span class=\"o\">:</span> <span class=\"s2\">&#34;3&#34;</span><span class=\"p\">,</span>\n      <span class=\"nx\">sources</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">,</span>\n      <span class=\"nx\">names</span><span class=\"o\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">names</span><span class=\"p\">,</span>\n      <span class=\"nx\">mappings</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">sourceContent</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">mapData</span><span class=\"p\">.</span><span class=\"nx\">sourceContent</span> <span class=\"o\">=</span> <span class=\"nx\">sourceContent</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"nx\">mapData</span><span class=\"p\">.</span><span class=\"nx\">file</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">target</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sourceRoot</span><span class=\"p\">)</span> <span class=\"nx\">mapData</span><span class=\"p\">.</span><span class=\"nx\">sourceRoot</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">sourceRoot</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">mapData</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><h3>使用sourcemap</h3><p data-pid=\"NDVwXyqx\">编译转换后的代码要使用sourcemap，只需要在文件末尾加一行注释即可：</p><p data-pid=\"13nf-WPV\"><code>//# sourceMappingURL=/path/to/file.js.map</code></p><p data-pid=\"VqQTcADu\">同时需要支持sourcemap的浏览器开启sourcemap功能：</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-f6d1782f0090e3f8c2dae422806a67de_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1447\" data-rawheight=\"359\" data-original-token=\"v2-b18769ef8026982a2e8ce73d698a7af8\" class=\"origin_image zh-lightbox-thumb\" width=\"1447\" data-original=\"https://pica.zhimg.com/v2-f6d1782f0090e3f8c2dae422806a67de_r.jpg?source=2c26e567\"/></figure><h3>0x04 堆栈信息还原</h3><p data-pid=\"1fZnQOYV\">知道生产环境如何上报错误，知道sourcemap原理如何之后，我们就要着手从错误信息中还原出源代码错误的位置。</p><p data-pid=\"rjJ8i0ab\"><b>利用第三方库解析sourcemap和定位</b></p><p data-pid=\"wrQF0m0w\">这里要用到Mozilla开发的一个工具库<a href=\"https://link.zhihu.com/?target=https%3A//github.com/mozilla/source-map\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">source-map</a>，可以大大降低sourcemap操作的难度。</p><h3>sourcemap准备</h3><p data-pid=\"hMerIsYA\">首先，我们要在发布应用时产出sourcemap文件，并host到我们的收集服务器上（这里就是localhost:4004)。源代码使用的打包工具是vite，所以只需要设置<code>build.sourcemap = &#34;hidden&#34;</code>（值有三个，分别为true， false， “hidden”，区别是hidden也输出sourcemap文件，但是在js文件中并不会加上末尾的引用sourcemap url注释）。</p><p data-pid=\"OdomXz8v\">为了方便，我就将vite打包的sourcemap直接复制到服务端代码app.ts旁边：</p><div class=\"highlight\"><pre><code class=\"language-text\">server\n  | app.ts  // express server\n  | frontend.js.map</code></pre></div><p data-pid=\"zr4aNMt8\">frontend.js.map</p><div class=\"highlight\"><pre><code class=\"language-json\"><span class=\"p\">{</span>\n  <span class=\"nt\">&#34;version&#34;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n  <span class=\"nt\">&#34;file&#34;</span><span class=\"p\">:</span> <span class=\"s2\">&#34;index-49709e01.js&#34;</span><span class=\"p\">,</span>\n  <span class=\"nt\">&#34;sources&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&#34;../../../../sdk/handler/utils/reporter.ts&#34;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&#34;../../../../sdk/handler/services/listener.ts&#34;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&#34;../../src/errors.ts&#34;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&#34;../../src/main.ts&#34;</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">&#34;sourcesContent&#34;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&#34;export interface IReportData {\\n  lineno: number\\n  colno: number\\n ......&#34;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&#34;import { reportError } from \\&#34;../utils/reporter\\&#34;;\\n\\nexport const ......&#34;</span><span class=\"p\">,</span><span class=\"s2\">&#34;,\n</span><span class=\"s2\">    &#34;</span><span class=\"err\">export</span> <span class=\"err\">const</span> <span class=\"err\">setupTypeError</span> <span class=\"err\">=</span> <span class=\"err\">(el:</span> <span class=\"err\">HTMLButtonElement)</span> <span class=\"err\">=&gt;</span> <span class=\"p\">{</span><span class=\"err\">\\n</span>  <span class=\"err\">el.onclick</span> <span class=\"err\">=</span> <span class=\"err\">()</span> <span class=\"err\">=&gt;</span> <span class=\"err\">......</span><span class=\"nt\">&#34;,&#34;</span><span class=\"p\">,</span>\n    <span class=\"nt\">&#34;import { startListener } from \\&#34;@lib/error-handler\\&#34;;\\n\\nimport {\\n  setupReferencesError, ......&#34;</span><span class=\"p\">,</span><span class=\"nt\">&#34;\n</span><span class=\"nt\">  ],\n</span><span class=\"nt\">  &#34;</span><span class=\"err\">names</span><span class=\"s2\">&#34;: [\n</span><span class=\"s2\">    &#34;</span><span class=\"err\">cache</span><span class=\"s2\">&#34;,\n</span><span class=\"s2\">    &#34;</span><span class=\"err\">reportError</span><span class=\"s2\">&#34;,\n</span><span class=\"s2\">    &#34;</span><span class=\"err\">data</span><span class=\"s2\">&#34;,\n</span><span class=\"s2\">    &#34;</span><span class=\"err\">key</span><span class=\"s2\">&#34;,\n</span><span class=\"s2\">    &#34;</span><span class=\"err\">...</span><span class=\"s2\">&#34;\n</span><span class=\"s2\">  ],\n</span><span class=\"s2\">  &#34;</span><span class=\"err\">mappings</span><span class=\"s2\">&#34;: &#34;</span><span class=\"err\">ssBAQA</span><span class=\"p\">,</span><span class=\"err\">MAAMA,MAAY...&#34;</span>\n<span class=\"p\">}</span></code></pre></div><h3>改造收集服务端，利用source-map库获取代码片段</h3><p data-pid=\"r7-Wg9WQ\">服务端就非常简单了，1.读取sourcemap文件；2.接受位置信息；3. 返回content以及源码间位置。结束。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"nx\">sourceMap</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">RawSourceMap</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s2\">&#34;source-map&#34;</span>\n\n<span class=\"c1\">// 根据行数获取源文件行数\n</span><span class=\"c1\"></span><span class=\"kr\">export</span> <span class=\"kr\">const</span> <span class=\"nx\">getPosition</span> <span class=\"o\">=</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">map</span><span class=\"o\">:</span> <span class=\"nx\">RawSourceMap</span><span class=\"p\">,</span> <span class=\"nx\">rolno</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">,</span> <span class=\"nx\">colno</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">consumer</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"k\">new</span> <span class=\"nx\">sourceMap</span><span class=\"p\">.</span><span class=\"nx\">SourceMapConsumer</span><span class=\"p\">(</span><span class=\"nx\">map</span><span class=\"p\">)</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">colno</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"nx\">colno</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">position</span> <span class=\"o\">=</span> <span class=\"nx\">consumer</span><span class=\"p\">.</span><span class=\"nx\">originalPositionFor</span><span class=\"p\">({</span>\n    <span class=\"nx\">line</span><span class=\"o\">:</span> <span class=\"nx\">rolno</span><span class=\"p\">,</span>\n    <span class=\"nx\">column</span><span class=\"o\">:</span> <span class=\"nx\">colno</span>\n  <span class=\"p\">})</span>\n\n  <span class=\"kr\">const</span> <span class=\"nx\">content</span> <span class=\"o\">=</span> <span class=\"nx\">position</span><span class=\"p\">.</span><span class=\"nx\">source</span> <span class=\"o\">?</span> <span class=\"nx\">consumer</span><span class=\"p\">.</span><span class=\"nx\">sourceContentFor</span><span class=\"p\">(</span><span class=\"nx\">position</span><span class=\"p\">.</span><span class=\"nx\">source</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"s2\">&#34;&#34;</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"nx\">position</span><span class=\"p\">,</span> <span class=\"nx\">content</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nx\">post</span><span class=\"p\">(</span><span class=\"s2\">&#34;/error&#34;</span><span class=\"p\">,</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">lineno</span><span class=\"p\">,</span> <span class=\"nx\">colno</span>  <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span>\n\n  <span class=\"c1\">// 读取sourcemap文件并格式化成json raw\n</span><span class=\"c1\"></span>  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span><span class=\"p\">(</span><span class=\"s2\">&#34;./frontend.js.map&#34;</span><span class=\"p\">,</span> <span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">({</span> <span class=\"nx\">message</span><span class=\"o\">:</span> <span class=\"s2\">&#34;failed&#34;</span> <span class=\"p\">})</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">raw</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">())</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">getPosition</span><span class=\"p\">(</span><span class=\"nx\">raw</span><span class=\"p\">,</span> <span class=\"nx\">lineno</span><span class=\"p\">,</span> <span class=\"nx\">colno</span><span class=\"p\">)</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;result&#34;</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">json</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">})</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-ce42eb726cf9acd6a45b1a9fd92060bb_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1551\" data-rawheight=\"888\" data-original-token=\"v2-867fba9b445705b5f3d10ebf8c00f683\" class=\"origin_image zh-lightbox-thumb\" width=\"1551\" data-original=\"https://picx.zhimg.com/v2-ce42eb726cf9acd6a45b1a9fd92060bb_r.jpg?source=2c26e567\"/></figure><h3>0x05 丰富信息与生产问题</h3><ul><li data-pid=\"TWlEoi_0\"> 界面可以通过传递更多的error type，主动catch易错误点以达到更好的监控效果；<br/> </li><li data-pid=\"DLTIlORB\"> 实际toC的业务中，打点监控都是非应用域名的，服务端一般不开放跨域，这回造成跨域问题；如果用js/css/font文件进行传参，则会因为挂载dom树竞争页面渲染，频繁时容易造成卡顿；因此，可以考虑使用<b>new Image</b>.src进行参数传递，为了减少资源开销，可以使用最小1x1像素的gif进行打点。</li></ul><blockquote data-pid=\"5cEa6FlV\"> 同样的响应，GIF可以比BMP节约41%的流量，比PNG节约35%的流量。GIF才是最佳选择</blockquote><ul><li data-pid=\"p05Maldq\">可以进行跨域</li><li data-pid=\"4uYb9PZH\">不会携带cookie</li><li data-pid=\"X6G_-1q2\">不需要等待服务器返回数据</li><li data-pid=\"vqDkrSfr\">为了使监控不影响应用的加载，不挤兑js的线程，可以将错误结合时间缓存起来，用异步的方法上报。同时，sdk也可以通过inline script异步加载。</li></ul><h3>参考资料</h3><h3>sourcemap</h3><ol><li data-pid=\"bApMsQ8T\">sourcemaps under the hood – VLQ, Base64 and Yoda. (<a href=\"https://link.zhihu.com/?target=https%3A//learn.microsoft.com/en-us/archive/blogs/davidni/source-maps-under-the-hood-vlq-base64-and-yoda\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">learn.microsoft.com/en-</span><span class=\"invisible\">us/archive/blogs/davidni/source-maps-under-the-hood-vlq-base64-and-yoda</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"zRl6QuWz\">sourcemap Revision 3 Proposal. (<a href=\"https://link.zhihu.com/?target=https%3A//docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">docs.google.com/documen</span><span class=\"invisible\">t/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit</span><span class=\"ellipsis\"></span></a>) (<a href=\"https://link.zhihu.com/?target=https%3A//docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">docs.google.com/documen</span><span class=\"invisible\">t/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"iWtxtfqj\">SourceMap详解. (<a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6948951662144782366\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">juejin.cn/post/69489516</span><span class=\"invisible\">62144782366</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"bPU1wuD1\">JavaScript sourcemap 详解. (<a href=\"https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">ruanyifeng.com/blog/201</span><span class=\"invisible\">3/01/javascript_source_map.html</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"109nr94n\">sourcemap 的原理探究. (<a href=\"https://link.zhihu.com/?target=https%3A//github.com/wayou/wayou.github.io/issues/9\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/wayou/wayou.</span><span class=\"invisible\">github.io/issues/9</span><span class=\"ellipsis\"></span></a>)</li></ol><h3>Base64，VLQ，Base64 VLQ编码</h3><ol><li data-pid=\"-GxFfv3Y\"><a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Variable-length_quantity\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Variable-length quantity</a>. (<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Variable-length_quantity\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">en.wikipedia.org/wiki/V</span><span class=\"invisible\">ariable-length_quantity</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"siAhj7m1\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/dankogai/js-base64/tree/main\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GITHUB js-base64</a>. (<a href=\"https://link.zhihu.com/?target=https%3A//github.com/dankogai/js-base64/tree/main\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/dankogai/js-</span><span class=\"invisible\">base64/tree/main</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"LhYUIX0a\"><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7098014484588920868%23heading-3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vlq</a>. (<a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7098014484588920868%23heading-3\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">juejin.cn/post/70980144</span><span class=\"invisible\">84588920868#heading-3</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"WHjdKmgK\"><a href=\"https://zhuanlan.zhihu.com/p/339477329\" class=\"internal\">base64编码详解</a>. (<a href=\"https://zhuanlan.zhihu.com/p/339477329\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/33</span><span class=\"invisible\">9477329</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"yBELE-fe\"><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/echoyya/p/16726545.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">VLQ &amp; Base64 编码方式原理以及代码实现</a>. (<a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/echoyya/p/16726545.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">cnblogs.com/echoyya/p/1</span><span class=\"invisible\">6726545.html</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"1p0IcKxG\"><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7168809452508807182\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一文搞懂base64编码足矣</a>. (<a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7168809452508807182\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">juejin.cn/post/71688094</span><span class=\"invisible\">52508807182</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"izRMyxmX\"><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7011156613268504606%23heading-10\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">手动实现 source-map 中生成 mapping 属性的base64、VLQ及base64-VLQ 编码方法</a>. (<a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/7011156613268504606%23heading-10\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">juejin.cn/post/70111566</span><span class=\"invisible\">13268504606#heading-10</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"0pEcTudw\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/D-kylin/note/blob/master/VLQ%25E7%25BC%2596%25E7%25A0%2581.md\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">VLQ编码</a>. (<a href=\"https://link.zhihu.com/?target=https%3A//github.com/D-kylin/note/blob/master/VLQ%25E7%25BC%2596%25E7%25A0%2581.md\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/D-kylin/note</span><span class=\"invisible\">/blob/master/VLQ%E7%BC%96%E7%A0%81.md</span><span class=\"ellipsis\"></span></a>)</li></ol><h3>错误监控</h3><ol><li data-pid=\"wIABjQZo\"><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6987681953424080926%23heading-11\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一篇讲透自研的前端错误监控</a>. (<a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6987681953424080926%23heading-11\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">juejin.cn/post/69876819</span><span class=\"invisible\">53424080926#heading-11</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"1ST61-tD\"><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/BbvJ-OfcS7Sa-e0Zq6iF1w\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">SourceMap 与前端异常监控</a>. (<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/BbvJ-OfcS7Sa-e0Zq6iF1w\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">mp.weixin.qq.com/s/BbvJ</span><span class=\"invisible\">-OfcS7Sa-e0Zq6iF1w</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"VoeDiico\"><a href=\"https://zhuanlan.zhihu.com/p/51446011\" class=\"internal\">超详细！搭建一个前端错误监控系统</a>.  (<a href=\"https://zhuanlan.zhihu.com/p/51446011\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/51</span><span class=\"invisible\">446011</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"ocxKIMtY\"><a href=\"https://www.zhihu.com/question/29953354/answer/2520764897\" class=\"internal\">如何做前端异常监控</a>？ (<a href=\"https://www.zhihu.com/question/29953354/answer/2520764897\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/2995</span><span class=\"invisible\">3354/answer/2520764897</span><span class=\"ellipsis\"></span></a>)</li><li data-pid=\"8ortE7z9\"><a href=\"https://link.zhihu.com/?target=https%3A//developer.aliyun.com/article/707873\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">一步一步搭建前端监控系统</a>：JS错误监控篇. (<a href=\"https://link.zhihu.com/?target=https%3A//developer.aliyun.com/article/707873\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">developer.aliyun.com/ar</span><span class=\"invisible\">ticle/707873</span><span class=\"ellipsis\"></span></a>)</li></ol>",
            "excerpt": "核心内容： sourcemap、错误发现和收集、错误统计和上报、错误监控和分析、堆栈信息还原 为什么我们需要对错误进行监控？在生产环境，大多数web应用（尤其中小型公司）还是没有（或没有成本去实现）完善的单元测试或者自动化测试，使得程序在使用中会泄露众多BUG。 当应用发布到生产环境时出现BUG会造成糟糕的用户体验，甚至影响整个程序的运行。所以，我们需要一种可靠的手段监控应用的健康，并在发生错误时迅速的定位问题、反…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 5,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-a3f4b995e98da2b3aac21e0281744549_720w.jpg?source=7e7ef6e2",
                        "width": 1119,
                        "height": 194,
                        "token": "v2-a3f4b995e98da2b3aac21e0281744549",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-55dc8d6bd0034cb5683c8006e8a40d98_720w.jpg?source=7e7ef6e2",
                        "width": 1172,
                        "height": 144,
                        "token": "v2-55dc8d6bd0034cb5683c8006e8a40d98",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pica.zhimg.com/v2-32e49b3d64f920dcba1d5ea4b9f7398c_720w.jpg?source=7e7ef6e2",
                        "width": 1168,
                        "height": 141,
                        "token": "v2-32e49b3d64f920dcba1d5ea4b9f7398c",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxjY4ILGCiDfkf4BkgIlCgk1NDQ4NDg2MzUSCjI4MzEyMDAzNDQYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-01-05T18:05:07+08:00"
    },
    {
        "content": {
            "id": 2826868386,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/20933265/answer/2826868386",
            "created_time": 1672678262,
            "updated_time": 1672678262,
            "question": {
                "type": "question",
                "id": 20933265,
                "title": "阻挡你学会 Haskell 最大的两个问题是什么?",
                "question_type": "normal",
                "created": 1365516743,
                "updated_time": 1365516743,
                "url": "https://www.zhihu.com/question/20933265",
                "is_deleted": false
            },
            "author": {
                "id": "67ebe1bd8e4a63f17a42572e40afaac7",
                "url_token": "ice1000",
                "name": "千里冰封二瓣之",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-7416f3b05ccb1a4622892f8c73727463_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-7416f3b05ccb1a4622892f8c73727463.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/67ebe1bd8e4a63f17a42572e40afaac7",
                "user_type": "people",
                "headline": "技术问题欢迎付费咨询 github: ice1000",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic2.zhimg.com/v2-b88b290ca44322b80f8dc57e6caed616.png?source=6a64a727",
                        "night_mode_url": "https://pic3.zhimg.com/v2-b88b290ca44322b80f8dc57e6caed616.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19554298",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19554298",
                                "name": "编程",
                                "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "编程话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "编程话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "编程话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1455193929
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 152,
            "comment_count": 13,
            "thanks_count": 23,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"8r75rmDH\">下面这段我觉得说的很有道理。其实就是 Haskell 中文圈过度关注 Monad，忽略了大部分 Haskell 里有趣的东西。</p><p data-pid=\"-tFFTlFA\"><i>长久以来，Haskell中文圈都处于一种尴尬的境地。大量的重复内容都在描述Haskell语言及函数式编程中最基础的内容。固然，要让初学者们迈过Monad的难关一万篇教程都不够，但这不应当是Haskell中文圈的讨论止步于lens的理由。因此在本博客中我将罔顾如上事实，假设本博客的的读者们都是有经验的Haskell用户，也假装我自己是高水平的Haskell玩家。希望我假装得还算成功。<br/><br/></i>出处：<a href=\"https://link.zhihu.com/?target=https%3A//alias.qliphoth.tech/about/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">alias.qliphoth.tech/abo</span><span class=\"invisible\">ut/</span><span class=\"ellipsis\"></span></a></p>",
            "excerpt": "下面这段我觉得说的很有道理。其实就是 Haskell 中文圈过度关注 Monad，忽略了大部分 Haskell 里有趣的东西。 长久以来，Haskell中文圈都处于一种尴尬的境地。大量的重复内容都在描述Haskell语言及函数式编程中最基础的内容。固然，要让初学者们迈过Monad的难关一万篇教程都不够，但这不应当是Haskell中文圈的讨论止步于lens的理由。因此在本博客中我将罔顾如上事实，假设本博客的的读者们都是有经验的Haskell用户，也假装我自己…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxiirfrDCiDm5iGSAiUKCTU0NDA2MTQ3MRIKMjgyNjg2ODM4NhgEIgpJTUFHRV9URVhU",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2023-01-03T00:51:02+08:00"
    },
    {
        "content": {
            "author": {
                "id": "3ec3b166992a5a90a1083945d2490d38",
                "url_token": "he-shi-jun",
                "name": "贺师俊",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38",
                "user_type": "people",
                "headline": "Web开发者",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19554298",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19554298",
                                "name": "编程",
                                "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19550901",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550901",
                                "name": "前端开发",
                                "avatar_url": "https://pica.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19552826",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19552826",
                                "name": "编程语言",
                                "avatar_url": "https://pica.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "编程等 3 个话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "编程等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://pica.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552826",
                                    "token": "19552826",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552826",
                                    "name": "编程语言",
                                    "avatar_path": "v2-14ae19e0df2e9517722a4832fc682743",
                                    "avatar_url": "https://pica.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "编程等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://pica.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552826",
                                    "token": "19552826",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552826",
                                    "name": "编程语言",
                                    "avatar_path": "v2-14ae19e0df2e9517722a4832fc682743",
                                    "avatar_url": "https://pica.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_count": 7,
            "content": [
                {
                    "content": "我昨天发现著名的SICP有JS版本了，这下似乎没有借口不读了。这个线上地址 <a href=\"https://sicp.sourceacademy.org/\" data-insert-way=\"force\" data-draft-node=\"inline\" data-draft-type=\"text-link\" class=\"internal\" data-icon-type=\"link\" data-original-url=\"https://sicp.sourceacademy.org/\">链接</a> 还是原版（Scheme版）和JS版的对照。当然单独的pdf也是有的。我还顺便在某群询问了下中文版的问题，得到信息是已经被引进，就是不知道是哪个出版社，啥时候出。新年到，那就立个小目标吧，2023年读完SICP。 <a class=\"hash_tag\" href=\"https://www.zhihu.com/topic/26793389\" data-pin-topic=\"zhihu://topic/26793389/pin20\">#你好2023</a> <br><a href=\"zhihu://pin/feedaction/fold/\">收起</a>",
                    "fold_content": "我昨天发现著名的SICP有JS版本了，这下似乎没有借口不读了。这个线上地址 <a href=\"https://link.zhihu.com/?target=https%3A//sicp.sourceacademy.org/\" data-draft-node=\"inline\" data-draft-type=\"text-link\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">链接</a> 还是原版（Scheme版）和JS版的对照。当然单独的pdf也是有的。我还顺便在某群询问了下中文版的问题，得到信息是已经被引进，就是不知道是哪个出版社，啥时候…<br/><a href=\"zhihu://pin/feedaction/unfold/\">展开</a>",
                    "fold_type": "normal_fold",
                    "own_text": "我昨天发现著名的SICP有JS版本了，这下似乎没有借口不读了。这个线上地址 <a href=\"https://sicp.sourceacademy.org/\" data-insert-way=\"force\" data-draft-node=\"inline\" data-draft-type=\"text-link\" class=\"internal\" data-icon-type=\"link\" data-original-url=\"https://sicp.sourceacademy.org/\">链接</a> 还是原版（Scheme版）和JS版的对照。当然单独的pdf也是有的。我还顺便在某群询问了下中文版的问题，得到信息是已经被引进，就是不知道是哪个出版社，啥时候出。新年到，那就立个小目标吧，2023年读完SICP。 <a class=\"hash_tag\" href=\"https://www.zhihu.com/topic/26793389\" data-pin-topic=\"zhihu://topic/26793389/pin20\">#你好2023</a>",
                    "text_link_type": "internal",
                    "title": "",
                    "type": "text"
                }
            ],
            "created": 1672540632,
            "excerpt_title": "我昨天发现著名的SICP有JS版本了，这下似…",
            "id": "1592831539305484288",
            "like_count": 0,
            "reaction_count": 34,
            "type": "pin",
            "updated": 1672540632,
            "url": "https://www.zhihu.com/pin/1592831539305484288?native=0",
            "virtuals": {
                "is_liked": false,
                "is_favorited": false
            }
        },
        "created": "2023-01-01T10:37:12+08:00"
    },
    {
        "content": {
            "id": 595317851,
            "title": "一道 3 层的 TypeScript 面试题，你能答到第几层？",
            "type": "article",
            "excerpt_title": "最近遇见一道不错的 TS 面试题，分享一下。 这道题有 3 个层次，我们一层层来看。 第一层的要求是这样的： 实现一个 zip 函数，对两个数组的元素按顺序两两合并，比如输入 [1,2,3], [4,5,6] 时，返回 [[1,4], [2,5],[3,6]]这层就是每次各从两个数组取一个元素，合并之后放到数组里，然后继续处理下一个，递归进行这个流程，直到数组为空即可。 function zip(target, source) { if (!target.length || !source.length) return [];…",
            "url": "https://zhuanlan.zhihu.com/p/595317851",
            "image_url": "https://picx.zhimg.com/v2-39d19d663d648ed98fc2b75f850458bb_r.jpg?source=172ae18b",
            "created": 1672323622,
            "updated": 1672324536,
            "author": {
                "id": "3100218fd8298bcf2c2237b9bef89799",
                "url_token": "di-xu-guang-50",
                "name": "神说要有光",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-1c3009805f50abe7950bca70c0c5b34c_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-1c3009805f50abe7950bca70c0c5b34c.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/3100218fd8298bcf2c2237b9bef89799",
                "user_type": "people",
                "headline": "前端工程师，喜欢写技术文章，维护【神光的编程秘籍】公宗号",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1498137221
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"nACIo1q9\">最近遇见一道不错的 TS 面试题，分享一下。</p><p data-pid=\"tAlF6TCJ\">这道题有 3 个层次，我们一层层来看。</p><p data-pid=\"-CB1xmxE\">第一层的要求是这样的：</p><p data-pid=\"1nwee17T\"><b>实现一个 zip 函数，对两个数组的元素按顺序两两合并，比如输入 [1,2,3], [4,5,6] 时，返回 [[1,4], [2,5],[3,6]]</b></p><p data-pid=\"kj_8ubta\">这层就是每次各从两个数组取一个元素，合并之后放到数组里，然后继续处理下一个，递归进行这个流程，直到数组为空即可。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">zip</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">source</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">source</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">[];</span>\n\n  <span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">one</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">rest1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">target</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">other</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">rest2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">source</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">[[</span><span class=\"nx\">one</span><span class=\"p\">,</span> <span class=\"nx\">other</span><span class=\"p\">],</span> <span class=\"p\">...</span><span class=\"nx\">zip</span><span class=\"p\">(</span><span class=\"nx\">rest1</span><span class=\"p\">,</span> <span class=\"nx\">rest2</span><span class=\"p\">)];</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"AD68yia5\">结果是对的：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-55c6371d40049354088284dc9176bf08_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"920\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb\" width=\"920\" data-original=\"https://pic1.zhimg.com/v2-55c6371d40049354088284dc9176bf08_r.jpg\" data-original-token=\"v2-cb8a8382581c0c14863ca13eb64587e4\"/></figure><p data-pid=\"Lzg6XfoS\">第一层还是比较简单的，然后我们来看第二层要求：</p><p data-pid=\"RVCS2y6a\"><b>给这个 zip 函数定义 ts 类型（两种写法）</b></p><p data-pid=\"aNmg76eY\">函数的定义有两种形式：</p><p data-pid=\"LPrZH07p\">直接通过 function 声明函数：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">func</span><span class=\"p\">()</span> <span class=\"p\">{}</span>\n</code></pre></div><p data-pid=\"objSxx4F\">和声明匿名函数然后赋值给变量：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">func</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{}</span>\n</code></pre></div><p data-pid=\"x-15MFv-\">而参数和返回值的类型都是数组，只是具体类型不知道，可以写 unknown[]。</p><p data-pid=\"NKB7YNZL\">所以两种函数类型的定义就是这样的：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8f472f6d1e623d4001763df0366a555d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1166\" data-rawheight=\"380\" class=\"origin_image zh-lightbox-thumb\" width=\"1166\" data-original=\"https://pic2.zhimg.com/v2-8f472f6d1e623d4001763df0366a555d_r.jpg\" data-original-token=\"v2-bdbda839f6ad3cb6f3d99db5893e11c1\"/></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-08f9a71d35181ed6028dd3a6e2ebc702_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1148\" data-rawheight=\"534\" class=\"origin_image zh-lightbox-thumb\" width=\"1148\" data-original=\"https://pic3.zhimg.com/v2-08f9a71d35181ed6028dd3a6e2ebc702_r.jpg\" data-original-token=\"v2-248ae6fd2173ffd2f7b3ac8f40e8baf8\"/></figure><p data-pid=\"4TvK_yNC\">也是直接 function 声明函数类型和 interface 声明函数类型然后加到变量类型上两种。</p><p data-pid=\"ym900gNC\">因为具体元素类型不知道，所以用 unknown。</p><p data-pid=\"K4Kz0E6v\">这里可能会问 any 和 unknown 的区别：</p><p data-pid=\"H0t1k4aj\">any 和 unknown 都可以接收任何类型：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-347b6bc5fa2f0c0a011022071b59f02c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"536\" data-rawheight=\"180\" class=\"origin_image zh-lightbox-thumb\" width=\"536\" data-original=\"https://pic1.zhimg.com/v2-347b6bc5fa2f0c0a011022071b59f02c_r.jpg\" data-original-token=\"v2-d34a793eeab1966b0202e0b0a6339a6e\"/></figure><p data-pid=\"imhRfljJ\">但是 any 也可以赋值给任何类型，但 unknown 不行。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4dfe97ecd67d42457cd9d635912a797c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"526\" data-rawheight=\"122\" class=\"origin_image zh-lightbox-thumb\" width=\"526\" data-original=\"https://pic1.zhimg.com/v2-4dfe97ecd67d42457cd9d635912a797c_r.jpg\" data-original-token=\"v2-610f06df6124569877255958571653e5\"/></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3d4dca63c39ccfc489a7bff906b7085b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1042\" data-rawheight=\"316\" class=\"origin_image zh-lightbox-thumb\" width=\"1042\" data-original=\"https://pic4.zhimg.com/v2-3d4dca63c39ccfc489a7bff906b7085b_r.jpg\" data-original-token=\"v2-46de9d86d1b78d496d2927e66d666b43\"/></figure><p data-pid=\"5br-PV7z\">这里只是用来接收其他类型， 所以 unknown 比any 更合适一些，更安全。</p><p data-pid=\"xLyO_uFc\">这一层也是比较基础的 ts 语法，第三层就上了难度了：</p><p data-pid=\"EYzyklDc\"><b>用类型编程实现精确的类型提示，比如参数传入 [1,2,3], [4,5,6]，那返回值的类型要提示出 [[1,4], [2,5],[3,6]]</b></p><p data-pid=\"2rOmorVt\">这里要求返回值类型是精确的，我们就要根据参数的类型来动态生成返回值类型。</p><p data-pid=\"y3IhBsDq\">也就是这样：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b85cbf9fdb49e3e8959b738428e31944_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1218\" data-rawheight=\"494\" class=\"origin_image zh-lightbox-thumb\" width=\"1218\" data-original=\"https://pic1.zhimg.com/v2-b85cbf9fdb49e3e8959b738428e31944_r.jpg\" data-original-token=\"v2-3ff10c29b3162da529ea1b2fcc6bc96b\"/></figure><p data-pid=\"SiJhKBk5\">声明两个类型参数 Target、Source，约束为 unknown[]，也就是元素类型任意的数组类型。</p><p data-pid=\"GVSYhZRp\">这俩类型参数分别是传入的两个参数的类型。</p><p data-pid=\"CZ3KEWru\">返回值通过 Zip 计算得出。</p><p data-pid=\"r99jXjey\">然后要实现 Zip 的高级类型：</p><p data-pid=\"L7zEKwBr\">传入的类型参数分别是两个数组类型，我们同样要从中提取出每个元素合并到一起。</p><p data-pid=\"t0oC5Ks5\">提取元素可以用模式匹配的方式：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b5cfede2ccca2c94ed4fa7a25f5c62c8_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1260\" data-rawheight=\"140\" class=\"origin_image zh-lightbox-thumb\" width=\"1260\" data-original=\"https://pic1.zhimg.com/v2-b5cfede2ccca2c94ed4fa7a25f5c62c8_r.jpg\" data-original-token=\"v2-b5cfede2ccca2c94ed4fa7a25f5c62c8\"/></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9b5d9d8757dcc1d50a36c41e0dc7dd37_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"140\" class=\"origin_image zh-lightbox-thumb\" width=\"1270\" data-original=\"https://pic4.zhimg.com/v2-9b5d9d8757dcc1d50a36c41e0dc7dd37_r.jpg\" data-original-token=\"v2-9b5d9d8757dcc1d50a36c41e0dc7dd37\"/></figure><p data-pid=\"spJqxuIr\">所以这个类型就可以这样定义：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">type</span> <span class=\"nx\">Zip</span><span class=\"o\">&lt;</span><span class=\"nx\">One</span> <span class=\"kr\">extends</span> <span class=\"nx\">unknown</span><span class=\"p\">[],</span> <span class=\"nx\">Other</span> <span class=\"kr\">extends</span> <span class=\"nx\">unknown</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span>\n    <span class=\"nx\">One</span> <span class=\"kr\">extends</span> <span class=\"p\">[</span><span class=\"nx\">infer</span> <span class=\"nx\">OneFirst</span><span class=\"p\">,...</span><span class=\"nx\">infer</span> <span class=\"nx\">Rest1</span><span class=\"p\">]</span>\n      <span class=\"o\">?</span> <span class=\"nx\">Other</span> <span class=\"kr\">extends</span> <span class=\"p\">[</span><span class=\"nx\">infer</span> <span class=\"nx\">OtherFirst</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">infer</span> <span class=\"nx\">Rest2</span><span class=\"p\">]</span>\n        <span class=\"o\">?</span> <span class=\"p\">[[</span><span class=\"nx\">OneFirst</span><span class=\"p\">,</span> <span class=\"nx\">OtherFirst</span><span class=\"p\">],</span> <span class=\"p\">...</span><span class=\"nx\">Zip</span><span class=\"o\">&lt;</span><span class=\"nx\">Rest1</span><span class=\"p\">,</span> <span class=\"nx\">Rest2</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n        <span class=\"o\">:</span> <span class=\"p\">[]</span>\n      <span class=\"o\">:</span> <span class=\"p\">[];</span>\n</code></pre></div><p data-pid=\"otmD2RaN\">分别提取两个数组的第一个元素，构造成新数组。然后对剩下的数组递归进行这样的处理，直到数组为空。</p><p data-pid=\"fshr6zJr\">这样就实现了我们想要的高级类型：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1bdf0bb977236d08e09d466a5698a80e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"148\" class=\"origin_image zh-lightbox-thumb\" width=\"830\" data-original=\"https://pic3.zhimg.com/v2-1bdf0bb977236d08e09d466a5698a80e_r.jpg\" data-original-token=\"v2-521f9a7d96e011ead3dd82b665222ab0\"/></figure><p data-pid=\"eIfiv642\">但你把它作为返回值加到函数上会报错：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1afd04d1a9b698fa830bc01e83db577a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1208\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"1208\" data-original=\"https://pic3.zhimg.com/v2-1afd04d1a9b698fa830bc01e83db577a_r.jpg\" data-original-token=\"v2-82cf96110ce4bcfc4a53eb4349981291\"/></figure><p data-pid=\"a1lBYAyc\">因为声明函数的时候都不知道参数是啥，自然计算不出 Zip&lt;Target, Source&gt; 的值，所以这里会类型不匹配：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3220707669ff644b8f2e67a63c54098d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1276\" data-rawheight=\"498\" class=\"origin_image zh-lightbox-thumb\" width=\"1276\" data-original=\"https://pic2.zhimg.com/v2-3220707669ff644b8f2e67a63c54098d_r.jpg\" data-original-token=\"v2-e59b5633bab1abbd592e30c287186e87\"/></figure><p data-pid=\"vMAJvg4U\">那怎么办呢？</p><p data-pid=\"d10sl9ab\">可以用函数重载解决：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b9a822272c07c161fbd38a6100698ca9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1238\" data-rawheight=\"684\" class=\"origin_image zh-lightbox-thumb\" width=\"1238\" data-original=\"https://pic2.zhimg.com/v2-b9a822272c07c161fbd38a6100698ca9_r.jpg\" data-original-token=\"v2-81a26c59c84b117d2db555da3f43060a\"/></figure><p data-pid=\"KGOlEBF3\">ts 支持函数重载，可以写多个同名函数的类型的类型定义，最后写函数的实现，这样用到这个函数的时候会根据参数的类型来匹配函数类型。</p><p data-pid=\"NUDBvvPh\">我们用了类型编程的那个函数通过这种方式写就不会报错了。</p><p data-pid=\"82btKik6\">我们使用下看看：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-417550c17c40654473e91d090b125534_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"118\" class=\"origin_image zh-lightbox-thumb\" width=\"726\" data-original=\"https://pic1.zhimg.com/v2-417550c17c40654473e91d090b125534_r.jpg\" data-original-token=\"v2-417550c17c40654473e91d090b125534\"/></figure><p data-pid=\"v2lr89Pd\">咋返回值的类型不对呢？</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-faf1291d4a920976b62d55791accaf12_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1782\" data-rawheight=\"108\" class=\"origin_image zh-lightbox-thumb\" width=\"1782\" data-original=\"https://pic3.zhimg.com/v2-faf1291d4a920976b62d55791accaf12_r.jpg\" data-original-token=\"v2-faf1291d4a920976b62d55791accaf12\"/></figure><p data-pid=\"gS5AVn2x\">其实这时候匹配的函数类型是对的，只不过推导出的不是字面量类型。</p><p data-pid=\"ztgGWZeL\">这时候可以加个 as const。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9a9e7a87d8513044365febaeee26af3c_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1098\" data-rawheight=\"106\" class=\"origin_image zh-lightbox-thumb\" width=\"1098\" data-original=\"https://pic1.zhimg.com/v2-9a9e7a87d8513044365febaeee26af3c_r.jpg\" data-original-token=\"v2-9a9e7a87d8513044365febaeee26af3c\"/></figure><p data-pid=\"Ei6d1dXV\">但是加上 as const 会推导出 readonly [1,2,3]</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-95f56e90c71253508198a6da61e6b3bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1768\" data-rawheight=\"310\" class=\"origin_image zh-lightbox-thumb\" width=\"1768\" data-original=\"https://pic4.zhimg.com/v2-95f56e90c71253508198a6da61e6b3bb_r.jpg\" data-original-token=\"v2-033d8dc20f54d661bcfa3299517b42dd\"/></figure><p data-pid=\"eXw9YplM\">这样类型就不匹配了，所以要在类型参数的声明上也加上 readonly:</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-05894a745b7734edd178cabf5bb5aa3c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1496\" data-rawheight=\"662\" class=\"origin_image zh-lightbox-thumb\" width=\"1496\" data-original=\"https://pic1.zhimg.com/v2-05894a745b7734edd178cabf5bb5aa3c_r.jpg\" data-original-token=\"v2-09d645303b6e0709770dfcf8aaa72698\"/></figure><p data-pid=\"0yqnEy9J\">但这样 Zip 函数的类型又不匹配了。</p><p data-pid=\"Fm-A2mj9\">难道要把所有用到这个类型的地方都加上 readonly 么？</p><p data-pid=\"_B-C8u6U\">不用，我们 readonly 的修饰去掉不就行了？</p><p data-pid=\"4dOTsxr2\">Typescript 有内置的高级类型 readonly：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c49b382ed51f1cbe011eebe8b335482a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"948\" data-rawheight=\"76\" class=\"origin_image zh-lightbox-thumb\" width=\"948\" data-original=\"https://pic3.zhimg.com/v2-c49b382ed51f1cbe011eebe8b335482a_r.jpg\" data-original-token=\"v2-c49b382ed51f1cbe011eebe8b335482a\"/></figure><p data-pid=\"FRqfnUa8\">可以把索引类型的每个索引都加上 readonly 修饰：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-244520a5c30a9f4adb9683783f670507_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"696\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb\" width=\"696\" data-original=\"https://pic4.zhimg.com/v2-244520a5c30a9f4adb9683783f670507_r.jpg\" data-original-token=\"v2-8b6daf5285229d5ceb717d252bec3e6a\"/></figure><p data-pid=\"pCTPjMDH\">但没有提供去掉 readonly 修饰的高级类型，我们可以自己实现一下：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a636c6fc114b386e4cf66113acb9bd2e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"190\" class=\"origin_image zh-lightbox-thumb\" width=\"764\" data-original=\"https://pic3.zhimg.com/v2-a636c6fc114b386e4cf66113acb9bd2e_r.jpg\" data-original-token=\"v2-d9a49744ca066983228e285f17c7f4b9\"/></figure><p data-pid=\"WYA32Lc_\">用映射类型的语法构造个新索引类型，加上个 -readonly 就是去掉 readonly 修饰的意思。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-843b4a1c9a14198f6f73041ee6e629da_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb\" width=\"960\" data-original=\"https://pic3.zhimg.com/v2-843b4a1c9a14198f6f73041ee6e629da_r.jpg\" data-original-token=\"v2-684a7011ed02244c7b74a8cf51c9dac6\"/></figure><p data-pid=\"RqGZuVbU\">有的同学可能问了，数组类型也是索引类型么？</p><p data-pid=\"EwJD_aZC\">是，索引类型是聚合多个元素的类型，所以对象、数组、class 都是。</p><p data-pid=\"8FTUwtx0\">所以我们把它用在数组上自然也是可以的：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0f4dde3c835172f6c0f426b3999f9492_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"140\" class=\"origin_image zh-lightbox-thumb\" width=\"752\" data-original=\"https://pic3.zhimg.com/v2-0f4dde3c835172f6c0f426b3999f9492_r.jpg\" data-original-token=\"v2-037977ad1175f0fc55406290ad481e04\"/></figure><p data-pid=\"CoTrHBiL\">（准确来说叫元组，元组是元素个数固定的数组）</p><p data-pid=\"xGo9zms7\">那我们只要在传入 Zip 之前，用 Mutable 去掉 readonly 就可以了：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-44fe1e01f4e2df3a6f4b38786dae3247_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1550\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb\" width=\"1550\" data-original=\"https://pic4.zhimg.com/v2-44fe1e01f4e2df3a6f4b38786dae3247_r.jpg\" data-original-token=\"v2-4ce686bbd3c4aa8533c32416dcb023ec\"/></figure><p data-pid=\"Bmk1ZcrX\">再来试一下：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-326252698cf8b1fa70db29fb68f39de9_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1076\" data-rawheight=\"122\" class=\"origin_image zh-lightbox-thumb\" width=\"1076\" data-original=\"https://pic2.zhimg.com/v2-326252698cf8b1fa70db29fb68f39de9_r.jpg\" data-original-token=\"v2-326252698cf8b1fa70db29fb68f39de9\"/></figure><p data-pid=\"stmVkonD\">大功告成！现在返回值的类型就对了。</p><p data-pid=\"ek5fMNP6\">但还有个问题，如果不是直接传入字面量，是推导不出字面量类型的，这时候貌似就不对了：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bcd8feec09a31b4a221ade40f0598049_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"264\" class=\"origin_image zh-lightbox-thumb\" width=\"660\" data-original=\"https://pic2.zhimg.com/v2-bcd8feec09a31b4a221ade40f0598049_r.jpg\" data-original-token=\"v2-61d8629f8431bb6c903924484766b723\"/></figure><p data-pid=\"C8cslSRM\">可我们不都声明重载类型了么？</p><p data-pid=\"y3mR7mVj\">如果推导不出字面量类型，应该匹配这个呀：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6c75b6e9cb3dada7a0bc6189b80ae784_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1518\" data-rawheight=\"726\" class=\"origin_image zh-lightbox-thumb\" width=\"1518\" data-original=\"https://pic1.zhimg.com/v2-6c75b6e9cb3dada7a0bc6189b80ae784_r.jpg\" data-original-token=\"v2-09e6943277f819684bb0e692e14a193c\"/></figure><p data-pid=\"X97xgj3J\">但实际上它匹配的还是第一个：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f6ac3f95cb64c9f6502c7c6b82779608_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1832\" data-rawheight=\"170\" class=\"origin_image zh-lightbox-thumb\" width=\"1832\" data-original=\"https://pic1.zhimg.com/v2-f6ac3f95cb64c9f6502c7c6b82779608_r.jpg\" data-original-token=\"v2-f6ac3f95cb64c9f6502c7c6b82779608\"/></figure><p data-pid=\"4TG7A6Sl\">这时候其实只要调换下两个函数类型的顺序就可以了：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-999f7749c128411f72fd0904bc2f56a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1546\" data-rawheight=\"666\" class=\"origin_image zh-lightbox-thumb\" width=\"1546\" data-original=\"https://pic3.zhimg.com/v2-999f7749c128411f72fd0904bc2f56a6_r.jpg\" data-original-token=\"v2-bab75f5d51390fde9eb7d1f7c806ba5c\"/></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ca1cd3492e2853b4717afba0d40a2949_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"252\" class=\"origin_image zh-lightbox-thumb\" width=\"652\" data-original=\"https://pic2.zhimg.com/v2-ca1cd3492e2853b4717afba0d40a2949_r.jpg\" data-original-token=\"v2-a1a69b268440595dd8db0eabfc8977bd\"/></figure><p data-pid=\"VZ-EYBxM\">这时字面量参数的情况依然也是对的：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0c1d7ceecf042499832ccec92758b08d_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1074\" data-rawheight=\"124\" class=\"origin_image zh-lightbox-thumb\" width=\"1074\" data-original=\"https://pic2.zhimg.com/v2-0c1d7ceecf042499832ccec92758b08d_r.jpg\" data-original-token=\"v2-0c1d7ceecf042499832ccec92758b08d\"/></figure><p data-pid=\"Okl2EKaY\">为什么呢？</p><p data-pid=\"J0PQbe6k\">因为<b>重载函数的类型是从上到下依次匹配，只要匹配到一个就应用。</b></p><p data-pid=\"uWnTpDT4\">非字面量的情况，类型是 number[]，能匹配 unknown[] 的那个类型，所以那个函数类型生效了。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cf561b49c7163714b27b83fa2c729ca7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"796\" data-rawheight=\"136\" class=\"origin_image zh-lightbox-thumb\" width=\"796\" data-original=\"https://pic4.zhimg.com/v2-cf561b49c7163714b27b83fa2c729ca7_r.jpg\" data-original-token=\"v2-a209bad9e9e70bcdc0957e9fa1000c8e\"/></figure><p data-pid=\"qYtBvp4Y\">而字面量的情况，推导出的是 readonly [1,2,3]，带有 readonly 所以不匹配 unknown[]，继续往下匹配，就匹配到了带有类型参数的那个函数类型。</p><p data-pid=\"9o1R84hs\">这样两种情况就都应用了合适的函数类型。</p><p data-pid=\"bjGxTIjO\">全部代码是这样的：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">type</span> <span class=\"nx\">Zip</span><span class=\"o\">&lt;</span><span class=\"nx\">One</span> <span class=\"kr\">extends</span> <span class=\"nx\">unknown</span><span class=\"p\">[],</span> <span class=\"nx\">Other</span> <span class=\"kr\">extends</span> <span class=\"nx\">unknown</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">One</span> <span class=\"kr\">extends</span> <span class=\"p\">[</span>\n  <span class=\"nx\">infer</span> <span class=\"nx\">OneFirst</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span><span class=\"nx\">infer</span> <span class=\"nx\">Rest1</span>\n<span class=\"p\">]</span>\n  <span class=\"o\">?</span> <span class=\"nx\">Other</span> <span class=\"kr\">extends</span> <span class=\"p\">[</span><span class=\"nx\">infer</span> <span class=\"nx\">OtherFirst</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">infer</span> <span class=\"nx\">Rest2</span><span class=\"p\">]</span>\n    <span class=\"o\">?</span> <span class=\"p\">[[</span><span class=\"nx\">OneFirst</span><span class=\"p\">,</span> <span class=\"nx\">OtherFirst</span><span class=\"p\">],</span> <span class=\"p\">...</span><span class=\"nx\">Zip</span><span class=\"o\">&lt;</span><span class=\"nx\">Rest1</span><span class=\"p\">,</span> <span class=\"nx\">Rest2</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>\n    <span class=\"o\">:</span> <span class=\"p\">[]</span>\n  <span class=\"o\">:</span> <span class=\"p\">[];</span>\n\n<span class=\"nx\">type</span> <span class=\"nx\">Mutable</span><span class=\"o\">&lt;</span><span class=\"nx\">Obj</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"o\">-</span><span class=\"nx\">readonly</span> <span class=\"p\">[</span><span class=\"nx\">Key</span> <span class=\"k\">in</span> <span class=\"nx\">keyof</span> <span class=\"nx\">Obj</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nx\">Obj</span><span class=\"p\">[</span><span class=\"nx\">Key</span><span class=\"p\">];</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">zip</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"o\">:</span> <span class=\"nx\">unknown</span><span class=\"p\">[],</span> <span class=\"nx\">source</span><span class=\"o\">:</span> <span class=\"nx\">unknown</span><span class=\"p\">[])</span><span class=\"o\">:</span> <span class=\"nx\">unknown</span><span class=\"p\">[];</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">zip</span><span class=\"o\">&lt;</span><span class=\"nx\">Target</span> <span class=\"kr\">extends</span> <span class=\"nx\">readonly</span> <span class=\"nx\">unknown</span><span class=\"p\">[],</span> <span class=\"nx\">Source</span> <span class=\"kr\">extends</span> <span class=\"nx\">readonly</span> <span class=\"nx\">unknown</span><span class=\"p\">[]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n  <span class=\"nx\">target</span><span class=\"o\">:</span> <span class=\"nx\">Target</span><span class=\"p\">,</span>\n  <span class=\"nx\">source</span><span class=\"o\">:</span> <span class=\"nx\">Source</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">Zip</span><span class=\"o\">&lt;</span><span class=\"nx\">Mutable</span><span class=\"o\">&lt;</span><span class=\"nx\">Target</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">Mutable</span><span class=\"o\">&lt;</span><span class=\"nx\">Source</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">zip</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"o\">:</span> <span class=\"nx\">unknown</span><span class=\"p\">[],</span> <span class=\"nx\">source</span><span class=\"o\">:</span> <span class=\"nx\">unknown</span><span class=\"p\">[])</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"nx\">source</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">[];</span>\n\n  <span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">one</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">rest1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">target</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">other</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">rest2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">source</span><span class=\"p\">;</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">[[</span><span class=\"nx\">one</span><span class=\"p\">,</span> <span class=\"nx\">other</span><span class=\"p\">],</span> <span class=\"p\">...</span><span class=\"nx\">zip</span><span class=\"p\">(</span><span class=\"nx\">rest1</span><span class=\"p\">,</span> <span class=\"nx\">rest2</span><span class=\"p\">)];</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"nx\">zip</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"nx\">as</span> <span class=\"kr\">const</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"nx\">as</span> <span class=\"kr\">const</span><span class=\"p\">);</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">arr1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"kr\">const</span> <span class=\"nx\">arr2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;5&#39;</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">];</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">result2</span> <span class=\"o\">=</span> <span class=\"nx\">zip</span><span class=\"p\">(</span><span class=\"nx\">arr1</span><span class=\"p\">,</span> <span class=\"nx\">arr2</span><span class=\"p\">);</span>\n</code></pre></div><p data-pid=\"tlAX133k\"><a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/play%3F%23code/C4TwDgpgBAWglmAPAeQHbQgD2BVATAZygFdUBrVAewHdUBtAXQBoplgALCAJyix3yKkKNegwB8UALxQAUFFbpe2XISh04qAGbcFEAGJwuBYCwB05jdp4AlCMYCMDOfKgB%2BVhx18VRdVp1snFwGRiZQ5qaWOrbGAExOLi7udHRo%2BobGLIHcIcbM4ebwSDHA9iwlsWIJiVAAXGrV8vWMANwyMqCQUACyxMAAhgBGADYQKIMAVhLSAN7OALRcEP14lKjDIGoA0hCbGlBku5SarJMM9ciTdDsgDG0Avm0ymqQAxsBwa1AAXggAFAMuABzCDAepCKi0RgsAiUYhcV4QcHkSGiACUyOEULu7ReqHen1QPwQiAAKv1gaClPxVEsVmsNiQUSJoVAAMpwhEYZQCKB01brTYQlniP7OQEgsFQcmUkzOWHwxH1DmKiAyDGwEm9AYjMYyyViFjaoajRAqrliMRPPEEr6-MAAimSzGo1kKrkukVoqBzeRwE5-ACEEtBplGqCBHCgAB9o1BA%2B7EWHcJH2N6lsB4UTWu15K81sY1GsIGZzEsHAwpFAQ8A2nmC8Ai54uKXTOXgPEq4mIE95Bms2o6MWWJRm-kIva-u2yny7B20Tj7u186hC%2BXiMNG9JJ3QZ7EWABmSv9IgrzJqAAsLAArCwAGzH08NtFPM%2BNilcexV3csfdQI9tG%2BUAfrE35XlAADk14QfeOIyEB66bqB27-B%2BM4gS%2BQA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ts playground 地址</a></p><h2><b>总结</b></h2><p data-pid=\"3eSKBf8O\">今天我们做了一道综合的 ts 面试题，一共有三层：</p><p data-pid=\"f5omztAC\">第一层实现 js 的逻辑，用递归或者循环都能实现。</p><p data-pid=\"03vwn2Dq\">第二层给函数加上类型，用 function 声明类型和 interface 声明函数类型两种方式，参数和返回值都是 unknown[]。</p><p data-pid=\"9GOWV67m\">第三层是用类型编程实现精准的类型提示，这一层需要拿到参数的类型，通过提取元素的类型并构造出新的数组类型返回。还要通过函数重载的方式来声明类型，并且要注意重载类型的声明顺序。</p><p data-pid=\"x3j6kNIL\">as const 能够让字面量推导出字面量类型，但会带有 readonly 修饰，可以自己写映射类型来去掉这个修饰。</p><p data-pid=\"GsqeBQW_\">其实这也是我们学习 ts 的顺序，我们先要能把 js 逻辑写出来，然后知道怎么给函数、class 等加 ts 类型，之后学习类型编程，知道怎么动态生成类型。</p><p data-pid=\"4niUkkEB\">其中类型编程是 ts 最难的部分，也是最强大的部分。攻克了这一层，ts 就可以说学的差不多了。</p>",
            "voteup_count": 142,
            "comment_count": 6
        },
        "created": "2022-12-29T22:20:22+08:00"
    },
    {
        "content": {
            "id": 592803158,
            "title": "金牌教练联手打造，蓝桥杯官方备赛指南重磅出炉！",
            "type": "article",
            "excerpt_title": "作为计算机专业的学生，在保研、找工作的时候有相关竞赛的好成绩是非常大的优势。而权威、参赛人数多、认可度高的 “蓝桥杯”全国软件和信息技术专业人才大赛（以下简称蓝桥杯大赛），就是一个非常不错的选择。正好，人邮君带来由蓝桥杯组委会组编、著名竞赛教练 罗勇军与杨培林老师编写的蓝桥杯大赛官方指导教程《程序设计竞赛专题挑战教程》，本书例题代码用C/C++、Python两种语言编写，同时附带Java语言代码的电子资源，如此…",
            "url": "https://zhuanlan.zhihu.com/p/592803158",
            "image_url": "",
            "created": 1671414363,
            "updated": 1671414363,
            "author": {
                "id": "2a9c95c4b3096cba586584844e149340",
                "url_token": "ren-min-you-dian-chu-ban-she-19",
                "name": "人民邮电出版社",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-77157f2243bfabeed1c14857f1be2554_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-77157f2243bfabeed1c14857f1be2554.jpg?source=0df5f383",
                "is_org": true,
                "type": "people",
                "url": "https://www.zhihu.com/people/2a9c95c4b3096cba586584844e149340",
                "user_type": "organization",
                "headline": "硬核科技与科普知识服务提供者",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-172acbbfb5d0f8dda36e927922f667ba_r.png?source=0df5f383",
                        "night_mode_url": "https://pic1.zhimg.com/v2-b1a34922870d3497960fdc7d03fafbaf_r.png?source=0df5f383"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "已认证账号"
                    }
                ],
                "badge_v2": {
                    "title": "已认证账号",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "已认证账号",
                            "url": "https://www.zhihu.com/term/institution-settle",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_org",
                            "title": "已认证账号",
                            "description": "已认证账号",
                            "url": "https://www.zhihu.com/term/institution-settle",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1548065168
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"0sEfcUrr\">作为计算机专业的学生，在保研、找工作的时候有相关竞赛的好成绩是非常大的优势。而权威、参赛人数多、认可度高的<b>“蓝桥杯”全国软件和信息技术专业人才大赛</b>（以下简称蓝桥杯大赛），就是一个非常不错的选择。</p><p data-pid=\"oh8HQ41U\">正好，人邮君带来由蓝桥杯组委会组编、著名竞赛教练<b>罗勇军</b>与<b>杨培林</b>老师编写的蓝桥杯大赛<b>官方指导教程《程序设计竞赛专题挑战教程》</b>，本书例题<b>代码用C/C++、Python两种语言</b>编写，同时<b>附带Java语言代码</b>的电子资源，如此丰富的学习资源，加上<b>罗老师多年的编程与竞赛经验</b>，定能让大家快速上手算法学习，掌握算法竞赛技巧，从而获得满意奖项。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e27f23727af0af324a02d5f427b5cecc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic1.zhimg.com/v2-e27f23727af0af324a02d5f427b5cecc_r.jpg\" data-original-token=\"v2-e27f23727af0af324a02d5f427b5cecc\"/></figure><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1588105999713529856\"></a><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>蓝桥杯大赛的本质是算法竞赛</b></h2><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"B6igs6Kg\">蓝桥杯大赛是由<b>工业和信息化部人才交流中心主办</b>的，经过十多年的发展，参赛人数已经达到了<b>60万</b>，吸引了包括清华大学和北京大学等<b>全国1600多所大学</b>学生参与。同时，它也入选了“<b>全国普通高校学科竞赛排行榜</b>”，获得国家与大量优秀企业的认可。</p><p data-pid=\"hyQuV3ZF\">其竞赛题目包括填空题和编程大题，主要考察参赛者的解决实际问题的能力，侧重对<b>算法和数据结构</b>的理解与应用，也就是说蓝桥杯大赛本质上是算法竞赛。</p><p data-pid=\"4IMRtGjq\">学生参加算法竞赛，一方面能<b>培养自己的算法能力，提升编码能力</b>，进而让自己在以后的研究与工作中都占据优势。参加算法竞赛还有以下几方面的优点。</p><ul><li data-pid=\"-64jLWMK\"><b>培养计算思维和逻辑思维：</b>一道竞赛题往往需要参赛者综合运用多种知识与方法，例如数据结构、算法知识、数学方法、流程和逻辑等，这需要参赛者有良好的计算思维和逻辑思维。</li><li data-pid=\"Bkz6c7hX\"><b>掌握多种编程语言：</b>在蓝桥杯大赛中，可以用到C/C++、Java、Python这几个当下流行的编程语言，这几个语言在当前就业市场中有大量岗位需求。掌握好它们，就能在以后的学习、就业中占得先机。</li></ul><p data-pid=\"iqhmPADM\">在罗勇军老师多年的带队竞赛经历中，遇到不少非计算机专业的学生在算法竞赛获奖之后，也能拥有较强的能力去从事计算机相关工作。而计算机专业的学生，在学习算法竞赛后更是如虎添翼，计算机编码能力获得质的飞跃！</p><p data-pid=\"S-0ahEgO\">因此，学习算法竞赛知识不仅可以获得蓝桥杯大赛和其他算法竞赛奖项，也可以让我们拥有解决以后面试、工作中遇到的算法难题的能力，可谓一举多得。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>16年竞赛主教练带领备战蓝桥杯</b></h2><p data-pid=\"H7AdkjGx\">自罗勇军老师2006年担任华东理工大学ACM国际大学生程序设计竞赛（简称ACM/ICPC）教练以来，他带领的队伍曾多次获得ACM/ICPC亚洲区域赛金牌、打入世界总决赛的好成绩。</p><p data-pid=\"9gxXlkHi\">同时，他也带领队伍在中国大学生程序设计竞赛（CCPC）、蓝桥杯大赛中取得过优异成绩。现在，他同时担任蓝桥杯大赛的官方讲师，一直和同学们分享竞赛与算法知识，成功地帮助了大量同学备战蓝桥杯。</p><p data-pid=\"6R6TM1C_\">罗老师认为算法竞赛“<b>要求参赛队员必须具备扎实的数学功底、非凡的算法设计能力、娴熟的编程技巧，以及良好的协作精神、稳定的心理素质和快速的临场应变能力。</b>”</p><p data-pid=\"tym2ZDWZ\">而这些能力并非计算机专业学生独享，其他专业的学生也具备或者经过训练之后可以达到。不少学生在刚接触蓝桥杯大赛后认为其难度大、费时间、学习成本高，觉得参加算法竞赛并获奖这条路并不好走。</p><p data-pid=\"c-ByKXch\">为了解决同学们的竞赛困惑，帮助他们从一名算法竞赛的“小白”开始成长为熟悉算法知识、构建算法思维、拥有高效编码能力的计算机编程人才，罗老师与杨培林老师编写了这本<b>《程序设计竞赛专题挑战教程》</b>。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e27f23727af0af324a02d5f427b5cecc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic1.zhimg.com/v2-e27f23727af0af324a02d5f427b5cecc_r.jpg\" data-original-token=\"v2-e27f23727af0af324a02d5f427b5cecc\"/></figure><p data-pid=\"x3cC5MYy\">本书的另一位作者，<b>杨培林</b>老师曾担任多所大学算法团队教练，有丰富的大学与线上课程教学和研发经验。他一直没有停下过对技术的追求，同时孜孜不倦地把10多年来积累的经验与技巧和更多人共享。</p><p data-pid=\"t11v5BQg\">两人联合打造的这本备赛指南，可以称之为<b>蓝桥杯大赛官方教程</b>，针对性很强，被许多优秀指导教练与参赛者强烈推荐。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1d9420def636ab18397bc140ebf5aeef_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-1d9420def636ab18397bc140ebf5aeef_r.jpg\" data-original-token=\"v2-1d9420def636ab18397bc140ebf5aeef\"/><figcaption>本书得到赛事相关人员推荐</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"CKZOKkYe\">罗老师称这本书为“<b>获奖的捷径</b>”，同时指出“捷径往往是艰难的代名词，在算法竞赛的学习这件事上，捷径意味着要付出更大的努力，要进行高强度的学习”。<br/></p><p data-pid=\"SqHh8vAN\">本书之所以可以成为“捷径”，就在于其中提供的<b>知识点更为集中、讲解更为清晰、题目设置更有针对性</b>——包含了罗老师多年带队总结的宝贵实践经验。</p><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>算法竞赛获奖“捷径”</b></h2><p data-pid=\"uZX_aLeS\">当然，是否通过这条“捷径”，同学们的努力同样重要。</p><h3><b>刷题的正确姿势</b></h3><p data-pid=\"vFak1h16\">在面向算法竞赛的学习方法中，最重要的一种方法是“刷题”，即大量做算法题，同时进行建模训练与编码练习。</p><p data-pid=\"-Tsg_vEK\">罗老师直言：</p><blockquote data-pid=\"UKKK0ylJ\">只读理论、只看书，而不做题，学习效果只会略大于零，能力得不到提高，肯定不能得奖。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"18CsOdS8\">那么要“刷”多少题才够呢？答案是<b>600~1000题</b>。</p><p data-pid=\"NgP3dLkr\">计算机数据结构和算法的知识点非常多，是长久以来无数优秀计算机科学家与程序员在实践中发现和总结而来的精华。学习和掌握这些内容，是成为一名合格程序员的必经历程。</p><p data-pid=\"46noxlkp\">比如<b>基本数据结构</b>有简单的链表、队列、优先队列，也有较难的堆、二叉堆、单调队列；<b>搜索</b>包括简单的基本深度优先搜索（Depth First Search，DFS）、DFS 记忆化搜索、基本广度优先搜索（Breadth First Search，BFS），和较难的BFS 扩展（双向广搜、优先队列）、剪枝、爬山算法等，还有难度更高的IDA*、模拟退火、BFS 扩展（双端队列）。</p><p data-pid=\"45Hj4_2u\">本书的读者是算法竞赛的初学者，或者是有一定基础的，但是希望进一步提高自己算法能力的参赛者。</p><p data-pid=\"27uDPfc_\">所以其中包含大部分算法竞赛知识点，满足参赛者需求。它们集中在基础数据结构、基本算法、搜索、高级数据结构、动态规划、数学、字符串、图论等内容上。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5fe047eb4c5d7b4298b9186483cf9343_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"448\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-5fe047eb4c5d7b4298b9186483cf9343_r.jpg\" data-original-token=\"v2-5fe047eb4c5d7b4298b9186483cf9343\"/><figcaption> 本书内容结构</figcaption></figure><p data-pid=\"S2lswJuL\">因为蓝桥杯大赛题目是分级、分阶段的，其中难题、罕见题并不多。所以同学们可以把学习重点放在常见的、基础的算法知识点上。通过大量实战练习，专项专攻地提高编程能力，从而在蓝桥杯大赛中获得更好的奖项。<br/></p><p data-pid=\"K2ki5f4J\">每个知识点需要做10~20题，当然多多益善。</p><h3><b>以速度优先</b></h3><p data-pid=\"pepNtfJm\">会解题很重要，但解得快更重要。因为蓝桥杯大赛10道题限时4小时，时间并不充裕。所以编程速度在很大程度上影响了最后的获奖级别。</p><p data-pid=\"alTmsAgj\">要提升速度，除了大量“刷题”之外，罗老师认为还可以从以下三个方面入手：</p><ul><li data-pid=\"ygK9Au18\"><b>熟练掌握集成编译环境</b>。</li><li data-pid=\"m6YYU9w1\"><b>减少调试</b>，争取一次通过测试样例。重点在于减少使用指针、多用静态数组、将逻辑功能模块化等；还有不要使用动态调试方法，不要使用单步跟踪、断点等调试工具。</li><li data-pid=\"lRRCMHRy\"><b>尽量使用函数库</b>，不仅能减少编码量，还能减少发生错误。</li></ul><p data-pid=\"ex0dC7_4\">在这些方面做好，可以节省更多的时间，从而提升解题速度。</p><h3><b>灵活应用模板</b></h3><p data-pid=\"wreyKmVa\">模板的是很多数据结构和算法的标准代码，使用模板可以在日常中省事不少。但是新手在算法竞赛中寄希望于模板，就非常不可取！</p><p data-pid=\"L-5NWmey\">一是因为蓝桥杯是闭卷形式，记住大量模板吃力不讨好；二是比赛题目大多是新题，初学者很难套用合适的模板。</p><p data-pid=\"AbX9wb67\">学习和掌握模板对学习数据结构和算法较为重要，但是要用在竞赛当中需要对模板<b>彻底地理解，达到融会贯通的效果，熟练掌握</b>之后才能灵活应用到题目中。</p><h3><b>海量资源让你快人一步</b></h3><p data-pid=\"1i0AFG8U\">正如前文所说，本书是为算法竞赛“小白”而写，内容基础且清晰，大家都能轻松使用。</p><p data-pid=\"m9yMQqky\">就算是刚开始学习编程语言的零基础同学，也能把本书当作编程语言的练习题来做，因为其中并没有复杂的语法。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b9d6719952e1736cab63ae5477740bf9_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-b9d6719952e1736cab63ae5477740bf9_r.jpg\" data-original-token=\"v2-b9d6719952e1736cab63ae5477740bf9\"/><figcaption>大家都能本书中获益</figcaption></figure><p data-pid=\"3-4uCqs6\">同时，作为蓝桥杯大赛的官方教程，本书配套的学习资源同样丰富，可谓海量：</p><p data-pid=\"rkU7kuUV\">蓝桥云课作为官方资源平台，内嵌在线测评系统，同学们可进行模拟训练。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5907d1ab623d5739e6d83878f2eeb144_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"402\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-5907d1ab623d5739e6d83878f2eeb144_r.jpg\" data-original-token=\"v2-5907d1ab623d5739e6d83878f2eeb144\"/><figcaption>蓝桥杯在线测评系统</figcaption></figure><p data-pid=\"yt0Uw6c4\">蓝桥杯官网题库lanqiaoOJ中包含历届真题，评测与大赛评分一致，大家可以实践体验。<br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b107ac7b434d87cd802e57e38cc6b67c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"576\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-b107ac7b434d87cd802e57e38cc6b67c_r.jpg\" data-original-token=\"v2-b107ac7b434d87cd802e57e38cc6b67c\"/><figcaption>蓝桥杯官网题库</figcaption></figure><p data-pid=\"atLVztoR\">如此丰富的学习资源，加上罗老师多年的编程与竞赛经验，定能让大家快速上手算法学习，掌握算法竞赛技巧，从而获得满意奖项。</p><p data-pid=\"4LKob2T4\">同时，搭配另外一本官方的备赛指南<b>《C/C++程序设计竞赛真题实战特训教程（图解版）》</b>使用，以更有趣直观的图示直击大赛“拿分关键点”，备赛效果会更好。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4199ba13fdf4d177ccacfdb91496d89a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic3.zhimg.com/v2-4199ba13fdf4d177ccacfdb91496d89a_r.jpg\" data-original-token=\"v2-4199ba13fdf4d177ccacfdb91496d89a\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2><b>结语</b></h2><p data-pid=\"kEOGd-i4\">罗老师坦言：</p><blockquote data-pid=\"GoJcQg8z\">像蓝桥杯这样的竞赛，的确是不好学且学习成本高，但能学出来的就是高手，毕业后也能有更光明的就业前景。</blockquote><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"Z1MUQm8N\">既然选择了计算机，那就是选择了远方。让我们用这本<b>《程序设计竞赛专题挑战教程》</b>开启我们的算法竞赛之路，向更远的星辰大海进发吧！</p><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1588106909172887553\"></a><p data-pid=\"E-JPseUm\">文章编辑：沙鱼   审校：桐希、王旭丹</p><p data-pid=\"e2aApPmB\">参考引用：</p><p data-pid=\"bkDkLUuI\">1.《东方教育时报》：华理学子从ACM竞赛走上创业路</p><p data-pid=\"nX13vNNr\">2.罗勇军,杨培林.程序设计竞赛专题挑战教程.[M].北京:人民邮电出版社,2022.</p><p data-pid=\"bZMBoD3E\">3.罗勇军个人博客</p><p data-pid=\"lgG8kTly\">4.蓝桥杯官网</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"3CXcO9C5\"><b>======</b></p><p data-pid=\"cld_cctP\"><b>赠人玫瑰，手留余香~不要忘记点赞、收藏、关注</b> <b><a href=\"https://www.zhihu.com/people/2a9c95c4b3096cba586584844e149340\" class=\"internal\">@人民邮电出版社</a></b> <b>哦！</b></p><p data-pid=\"Lr7Px46W\"><b>一键三连，感恩有你~</b></p>",
            "voteup_count": 1,
            "comment_count": 0
        },
        "created": "2022-12-19T09:46:03+08:00"
    },
    {
        "content": {
            "id": 2402219948,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/311635956/answer/2402219948",
            "created_time": 1647954757,
            "updated_time": 1647954757,
            "question": {
                "type": "question",
                "id": 311635956,
                "title": "为什么很多男生在相亲时，听到女生「喜欢旅行」「爱好旅游」会很抵触？",
                "question_type": "normal",
                "created": 1549696830,
                "updated_time": 1594598165,
                "url": "https://www.zhihu.com/question/311635956",
                "is_deleted": false
            },
            "author": {
                "id": "ae88014e195c4b03b9953c9724781430",
                "url_token": "chen-bin-99-5-4",
                "name": "跳舞",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-49925f230359b0b61d1a57083459aaf9_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-49925f230359b0b61d1a57083459aaf9.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/ae88014e195c4b03b9953c9724781430",
                "user_type": "people",
                "headline": "春风若有怜花意，可否许我再少年。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://pic1.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pica.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19615372",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19615372",
                                "name": "小说创作",
                                "avatar_url": "https://pic1.zhimg.com/65a33c700_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "知乎十年新知答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "新知答主",
                            "description": "知乎十年新知答主",
                            "url": "https://zhuanlan.zhihu.com/p/344234033",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "reward",
                            "detail_type": "zhihu_10years_answerer",
                            "title": "新知答主",
                            "description": "知乎十年新知答主",
                            "url": "https://zhuanlan.zhihu.com/p/344234033",
                            "sources": [],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "小说创作话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19615372",
                                    "token": "19615372",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19615372",
                                    "name": "小说创作",
                                    "avatar_path": "65a33c700",
                                    "avatar_url": "https://pic1.zhimg.com/65a33c700_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 4766,
            "comment_count": 301,
            "thanks_count": 315,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"9P2pwZym\">几千个答案都在七拐八绕的说，兜来兜去兜不到点子上。</p><p data-pid=\"Lm7w9wEM\">不好意思直言不讳是吧？</p><p data-pid=\"1ljNVEM8\">我来说：</p><p data-pid=\"1Jb_OI6e\">第一，喜欢旅游爱好旅游，本质其实就是：喜欢花钱出去玩。</p><p data-pid=\"jj655c4Y\">第二，喜欢花钱出去玩，这种事情会让人产生一种<b>【看着不像是能踏实过日子的】</b>感觉。</p><p data-pid=\"bPTSfRUk\">就这么简单。</p><p data-pid=\"dmgqW96F\">·</p>",
            "excerpt": "几千个答案都在七拐八绕的说，兜来兜去兜不到点子上。 不好意思直言不讳是吧？ 我来说： 第一，喜欢旅游爱好旅游，本质其实就是：喜欢花钱出去玩。 第二，喜欢花钱出去玩，这种事情会让人产生一种 【看着不像是能踏实过日子的】感觉。就这么简单。 ·",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxis77v5CCDRsYQPkgIlCgk0NjY4NDk3NzISCjI0MDIyMTk5NDgYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-03-22T21:12:37+08:00"
    },
    {
        "content": {
            "id": 2797454257,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/571210117/answer/2797454257",
            "created_time": 1670772542,
            "updated_time": 1670772558,
            "question": {
                "type": "question",
                "id": 571210117,
                "title": "30 岁小伙攒 100 万「提前退休」，本人回应称暂时休养，没钱会复出工作，如何看待他人生的这一抉择？",
                "question_type": "normal",
                "created": 1670490304,
                "updated_time": 1670646686,
                "url": "https://www.zhihu.com/question/571210117",
                "is_deleted": false
            },
            "author": {
                "id": "c3239475688a09f3252cc320cc214ce4",
                "url_token": "fu-lan-ke-yang",
                "name": "弗兰克扬",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-3647c81a5a6f8c02183e7f433903440b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-3647c81a5a6f8c02183e7f433903440b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/c3239475688a09f3252cc320cc214ce4",
                "user_type": "people",
                "headline": "一个写作就是为了自引的人",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic4.zhimg.com/v2-f51b10d6c54ebb932f566f7b531cdcab_r.png",
                        "night_mode_url": "https://pic1.zhimg.com/v2-835602c6392a6b339aad98af6b32e0d2.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://pica.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19556353",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19556353",
                                "name": "大学",
                                "avatar_url": "https://picx.zhimg.com/v2-0e66b9bc8099dd1f60b6f64b0bf27b28_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19557876",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19557876",
                                "name": "职场",
                                "avatar_url": "https://pic1.zhimg.com/v2-15c9885c2487fb2333d49b0005fa6ae6_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19560641",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19560641",
                                "name": "职业规划",
                                "avatar_url": "https://picx.zhimg.com/v2-98ba63611671c9911d17432016c70a4e_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19551771",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19551771",
                                "name": "求职",
                                "avatar_url": "https://pica.zhimg.com/v2-4deda38a635e6416916ffd83b857c60c_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19550517",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550517",
                                "name": "互联网",
                                "avatar_url": "https://pica.zhimg.com/v2-c1ea3804dc369dbfad3de0c405c0a3d2_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "2020 年度新知答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "年度新知答主",
                            "description": "2020 年度新知答主",
                            "url": "https://www.zhihu.com/question/510340037",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "reward",
                            "detail_type": "zhihu_yearly_answerer",
                            "title": "年度新知答主",
                            "description": "2020 年度新知答主",
                            "url": "https://www.zhihu.com/question/510340037",
                            "sources": [
                                {
                                    "id": "2020",
                                    "token": "",
                                    "type": "year",
                                    "url": "",
                                    "name": "",
                                    "avatar_path": "",
                                    "avatar_url": "",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "大学等 5 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19556353",
                                    "token": "19556353",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19556353",
                                    "name": "大学",
                                    "avatar_path": "v2-0e66b9bc8099dd1f60b6f64b0bf27b28",
                                    "avatar_url": "https://picx.zhimg.com/v2-0e66b9bc8099dd1f60b6f64b0bf27b28_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19557876",
                                    "token": "19557876",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19557876",
                                    "name": "职场",
                                    "avatar_path": "v2-15c9885c2487fb2333d49b0005fa6ae6",
                                    "avatar_url": "https://pic1.zhimg.com/v2-15c9885c2487fb2333d49b0005fa6ae6_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19560641",
                                    "token": "19560641",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19560641",
                                    "name": "职业规划",
                                    "avatar_path": "v2-98ba63611671c9911d17432016c70a4e.jpg",
                                    "avatar_url": "https://picx.zhimg.com/v2-98ba63611671c9911d17432016c70a4e_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19551771",
                                    "token": "19551771",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19551771",
                                    "name": "求职",
                                    "avatar_path": "v2-4deda38a635e6416916ffd83b857c60c",
                                    "avatar_url": "https://pica.zhimg.com/v2-4deda38a635e6416916ffd83b857c60c_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19550517",
                                    "token": "19550517",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550517",
                                    "name": "互联网",
                                    "avatar_path": "v2-c1ea3804dc369dbfad3de0c405c0a3d2",
                                    "avatar_url": "https://pica.zhimg.com/v2-c1ea3804dc369dbfad3de0c405c0a3d2_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 297,
            "comment_count": 29,
            "thanks_count": 47,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"umvphjr4\">财富自由，提前退休，FIRE运动（Financial Independence,Retire Early）这些年先后火过的这些概念，其实对于普通人来说，本质上来看，都是在聊一件事。</p><p data-pid=\"lIWJg1n5\">都是在想着，如何才能早早地就不用上班，可以一直散漫自由下去。</p><p data-pid=\"ewYp-vuG\">我也很早就聊过，其实财富自由，不用上班的标准很容易达到。</p><p data-pid=\"9WaGe7xG\">只不过很多人都能力与欲望极其不匹配，所以一辈子都不可能财富自由，更不可能提前退休。</p><p data-pid=\"ZZlKHums\">但事实是，只要你欲望足够低，财富自由的标准也会相应变得很低。</p><p data-pid=\"e6ftw7cq\">无非就是，你每个月的被动收入，或不上班也能有的收入，可以完全覆盖你的日常开支。</p><p data-pid=\"OyFl0RBk\">很多人，其实就在过着这种半退休状态的生活。</p><p data-pid=\"DlFudyc4\">比如当年鹤岗房价第一次火遍全国时，就有不少做工作时间相对比较自由的工作的人，选择在鹤岗买套房子，然后工作半年，回到自己的房子躺半年。</p><p data-pid=\"9nyrBb6C\">再比如，现在也有很多人跑到了房价物价都比较低的城市定居，靠着各种不用上班就能到账的收入，自由散漫地生活着。</p><p data-pid=\"S1gi0j84\">他们都是很快就挣到了，足以支撑自己日常开支的被动收入，然后就果断退休了。</p><p data-pid=\"y99WahfK\">但是，总有一些欲望比较高，或者安全感要求比较高的人，会给自己设立一个比较高的财富自由目标。</p><p data-pid=\"yN6bcoVw\">当我仔细研究了这些人的目标后，我发现了一个惊人的共同点。</p><p data-pid=\"jM13PTNu\">那就是，在不中彩票的前提下，这辈子都大概率没办法实现，但他们努力挣钱一辈子，最后攒下的资产，也不会离这个目标太远。</p><p data-pid=\"0U2-mtVO\">比如一个在一线城市刚买完房子，正在还月供的人，月入两万，月供一万，日常开销五千。</p><p data-pid=\"1rw8Swuu\">他给自己定的财富自由目标是，再买一套房，两套房贷款都结清，同时还可以有三百万以上的现金。</p><p data-pid=\"03frQdUj\">看完这个目标，很多人可能觉得，这人是在做梦，这根本不可能完成。</p><p data-pid=\"225NHNI2\">但实际上，如果这个人努力奋斗一辈子，到七老八十的时候，差不多能挣出两套房子，至于现金还有没有等价于今天的三百万那么多，这就不好说了。</p><p data-pid=\"DfVds-hq\">当然，还有更多人的情况是，如果干到六十几岁，差不多就能挣到自己目标的钱，但那就没意义了，因为自己想要的是，最好能在四十岁，甚至更早就能退休享受生活。</p><p data-pid=\"C1gyoAlv\">等熬到七十岁，目标实现了，那就意义不大了。</p><p data-pid=\"UGUuSFco\">就剩拿着钱去养老了。</p><p data-pid=\"C7z8cZuN\">当然，还有一些更离谱的情况是，一群人说，一百万太少了，但每个月却领着五千块定律的工资，过着月光的拮据生活。</p><p></p>",
            "excerpt": "财富自由，提前退休，FIRE运动（Financial Independence,Retire Early）这些年先后火过的这些概念，其实对于普通人来说，本质上来看，都是在聊一件事。 都是在想着，如何才能早早地就不用上班，可以一直散漫自由下去。 我也很早就聊过，其实财富自由，不用上班的标准很容易达到。 只不过很多人都能力与欲望极其不匹配，所以一辈子都不可能财富自由，更不可能提前退休。 但事实是，只要你欲望足够低，财富自由的标准也会相应变得…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxixh/e1CiDOt8UqkgIlCgk1Mzg3MTU3MDUSCjI3OTc0NTQyNTcYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-12-11T23:29:02+08:00"
    },
    {
        "content": {
            "id": 2050267993,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/393254657/answer/2050267993",
            "created_time": 1628557268,
            "updated_time": 1628570836,
            "question": {
                "type": "question",
                "id": 393254657,
                "title": "面试前端工程师简历应该怎么写才容易通过？",
                "question_type": "normal",
                "created": 1588844886,
                "updated_time": 1588844886,
                "url": "https://www.zhihu.com/question/393254657",
                "is_deleted": false
            },
            "author": {
                "id": "c0e2a6c332e573b37d6f5387074ead98",
                "url_token": "doodlewind",
                "name": "doodlewind",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-e5351633ad642a651ed925656c64b76b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-e5351633ad642a651ed925656c64b76b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/c0e2a6c332e573b37d6f5387074ead98",
                "user_type": "people",
                "headline": "github.com/doodlewind",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19550901",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550901",
                                "name": "前端开发",
                                "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "前端开发话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1885,
            "comment_count": 86,
            "thanks_count": 531,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "need_payment",
            "content": "<p data-pid=\"LxRMK2Kt\">我整理一下近年来流行的套路。首先是面向关键词 SEO 报菜名：</p><ul><li data-pid=\"_4dtdq_D\">本人年轻时就用 Vue + Vue Router + Vuex + ElementUI 做过 XX 管理后台 A。</li><li data-pid=\"QqK_wMNC\">本人年轻时也用 React + Redux + Antd 做过 XX 管理后台 B。</li><li data-pid=\"YgTOE_pF\">本人年轻时还用 jQuery + Bootstrap + RequireJS 做过 XX 首页 C。</li></ul><p data-pid=\"C1K2-w8d\">然后要体现做题家气质：</p><ul><li data-pid=\"aSfwlpvt\">熟悉 JS 底层原理（<i>指背过 == 比较结果之类的犄角旮旯语言特性</i>）</li><li data-pid=\"CfPlCQxo\">熟悉浏览器底层原理（<i>指对那道「从输入网址到展示页面发生了什么」的题对答如流</i>）</li><li data-pid=\"vfD4yqO5\">熟悉数据结构和算法（<i>指偷偷刷过 LeetCode Easy</i>）</li><li data-pid=\"WUpPCUyS\">熟悉计算机网络（<i>指能秒答 HTTP 状态码，还能接着告诉你 TCP 和 UDP 的区别</i>）</li><li data-pid=\"Jby9nKwz\">熟悉 Linux 系统（<i>指 mkdir 和 sudo rm -rf</i>）</li><li data-pid=\"EDWRxxXA\">熟悉前端工程化（<i>指抄 webpack 和 babel 配置来用</i>）</li><li data-pid=\"hzCBwIyK\">熟悉性能优化（<i>指把前端优化 24 条建议和 35 条军规等博客背得滚瓜烂熟</i>）</li><li data-pid=\"3c1i1jaO\">熟悉源代码管理工具（<i>指实在不行就 git push -f</i>）</li><li data-pid=\"o8kwB_W1\">熟悉函数式编程思维（<i>指会用 reduce 代替 for 循环求数组最大值</i>）</li></ul><p data-pid=\"gMsf8pHW\">最后展示一下技术沉淀，升华一下政治正确：</p><ul><li data-pid=\"wKDK90Jc\">性格严谨，制定过团队技术规范（<i>指配置全家桶</i>）</li><li data-pid=\"4kud6Zmh\">富有热情，持续关注技术热点（<i>指朋友圈转发前端营销号推送</i>）</li><li data-pid=\"evNIL3ym\">热爱编程，希望长期深入前端技术（<i>指没有用过 JavaScript 以外的编程语言</i>）</li><li data-pid=\"zT49l6TF\">认真负责，具有一定的管理能力（<i>指带过实习生和外包</i>）</li><li data-pid=\"dcy1YIRp\">阳光开朗，能融入团队（<i>指破冰之类羞羞的事情都没有关系啦</i>）</li><li data-pid=\"FaG9hED1\">勤奋皮实，抗压能力强（<i>指什么不用说了吧</i>）</li></ul><p data-pid=\"FOMTY9R7\">暗号都对上了，还怕面试不通过吗？</p>",
            "excerpt": "我整理一下近年来流行的套路。首先是面向关键词 SEO 报菜名： 本人年轻时就用 Vue + Vue Router + Vuex + ElementUI 做过 XX 管理后台 A。本人年轻时也用 React + Redux + Antd 做过 XX 管理后台 B。本人年轻时还用 jQuery + Bootstrap + RequireJS 做过 XX 首页 C。然后要体现做题家气质： 熟悉 JS 底层原理（指背过 == 比较结果之类的犄角旮旯语言特性）熟悉浏览器底层原理（指对那道「从输入网址到展示页面发生了什么」的题对…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjZttLRByDXw9cXkgIlCgk0MDI4NTc4ODYSCjIwNTAyNjc5OTMYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2021-08-10T09:01:08+08:00"
    },
    {
        "content": {
            "id": 587849884,
            "title": "Z-library（libgen）文件IPFS化及搜索服务",
            "type": "article",
            "excerpt_title": "Z-library（libGen）IPFS化最近Z-library域名被扣押及两位创始人被美国抓捕后， Pirate Library Mirror 项目的创始人提出了将Z-library文件存放到IPFS网络的提议，具体请参考 Putting Z-Library on IPFS ，Help seed Z-Library on IPFS ，Putting 5,998,794 books on IPFS ，Help seed Z-Library on IPFS 。具体工作成果是 Anna&#39;s Archive 在此之前，已经有一些Library Genesis mirrors把libGen图书存放到IPFS网路，例如 …",
            "url": "https://zhuanlan.zhihu.com/p/587849884",
            "image_url": "",
            "created": 1669728454,
            "updated": 1673060235,
            "author": {
                "id": "5457ce21128d020a1563d970a8464ae8",
                "url_token": "chuanliang",
                "name": "梁川",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-a20977711aa05d1a4d17b006969b9fa4_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-a20977711aa05d1a4d17b006969b9fa4.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/5457ce21128d020a1563d970a8464ae8",
                "user_type": "people",
                "headline": "互联网金融从业者",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19586987",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19586987",
                                "name": "互联网金融",
                                "avatar_url": "https://pic1.zhimg.com/v2-b472d2f38752e5b70b4b9dc6ba5b07b1_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "互联网金融话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "互联网金融话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19586987",
                                    "token": "19586987",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19586987",
                                    "name": "互联网金融",
                                    "avatar_path": "v2-b472d2f38752e5b70b4b9dc6ba5b07b1",
                                    "avatar_url": "https://pic1.zhimg.com/v2-b472d2f38752e5b70b4b9dc6ba5b07b1_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "互联网金融话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19586987",
                                    "token": "19586987",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19586987",
                                    "name": "互联网金融",
                                    "avatar_path": "v2-b472d2f38752e5b70b4b9dc6ba5b07b1",
                                    "avatar_url": "https://pic1.zhimg.com/v2-b472d2f38752e5b70b4b9dc6ba5b07b1_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<h2>Z-library（libGen）IPFS化</h2><p data-pid=\"ZRbxlPkb\">最近Z-library域名被扣押及两位创始人被美国抓捕后，<a href=\"https://link.zhihu.com/?target=http%3A//pilimi.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Pirate Library Mirror</a>项目的创始人提出了将Z-library文件存放到IPFS网络的提议，具体请参考 <a href=\"https://link.zhihu.com/?target=https%3A//news.ycombinator.com/item%3Fid%3D33675224\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Putting Z-Library on IPFS</a> ，<a href=\"https://link.zhihu.com/?target=https%3A//news.ycombinator.com/item%3Fid%3D33716560\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Help seed Z-Library on IPFS</a> ，<a href=\"https://link.zhihu.com/?target=https%3A//annas-blog.org/blog-introducing.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Putting 5,998,794 books on IPFS</a> ，<a href=\"https://link.zhihu.com/?target=https%3A//annas-blog.org/help-seed-zlibrary-on-ipfs.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Help seed Z-Library on IPFS</a> 。具体工作成果是 <b><a href=\"https://link.zhihu.com/?target=https%3A//annas-archive.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Anna&#39;s Archive</a></b></p><p data-pid=\"CMh69K1b\">在此之前，已经有一些Library Genesis mirrors把libGen图书存放到IPFS网路，例如 <a href=\"https://link.zhihu.com/?target=https%3A//freeread.org/ipfs\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">freeread.org/ipfs</span><span class=\"invisible\"></span></a></p><h2>Z-library（libGen）IPFS文件搜索服务</h2><p data-pid=\"HvONn97e\">对于不熟悉IPFS的小白，怎样使用IPFS搜索下载Z-library和libGen的图书是个大问题。</p><p data-pid=\"zLAJuiQR\">目前针对IPFS资料中Z-library（libGen）进行搜索的项目主要有两个：Anna&#39;s Archive和zLib Searcher。</p><p data-pid=\"jelpmnlR\"><b>Anna&#39;s Archive</b></p><p data-pid=\"3c6ya6C4\">由<a href=\"https://link.zhihu.com/?target=http%3A//pilimi.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Pirate Library Mirror</a> 维护，值得强烈推荐。</p><p data-pid=\"diEhmJw2\">官网地址：<a href=\"https://link.zhihu.com/?target=https%3A//annas-archive.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://annas-archive.org</a></p><p data-pid=\"ONM9D7_U\"><b>hallowlib</b></p><p data-pid=\"LRfSy22z\">官网地址：<a href=\"https://link.zhihu.com/?target=https%3A//bk.hallowlib.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://bk.hallowlib.org</a></p><p data-pid=\"uBWFGl6M\"><b>zLib Searcher</b></p><p data-pid=\"aPfz2Kyv\">zLib Searcher算是一个IPFS网关服务，完全开源，主要提供对Z-library（libgen）文件在IPFS文件系统的搜索及下载服务。</p><p data-pid=\"bl4h4Nku\">官网地址：<a href=\"https://link.zhihu.com/?target=https%3A//zlib.knat.network/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://zlib.knat.network</a></p><p data-pid=\"TdsvAK_Y\">项目开源地址：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/zu1k/zlib-searcher\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/zu1k/zlib-se</span><span class=\"invisible\">archer</span><span class=\"ellipsis\"></span></a></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d07f6bb41fbd594a4c13e7d29785f606_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1907\" data-rawheight=\"560\" class=\"origin_image zh-lightbox-thumb\" width=\"1907\" data-original=\"https://pic3.zhimg.com/v2-d07f6bb41fbd594a4c13e7d29785f606_r.jpg\" data-original-token=\"v2-29f46d690a8e6cf017b7f098af6c2907\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"Nly8CjFj\">使用与传统图书搜索类似，在搜索框输入关键词后，在搜索结果页，点击搜索结果，展开为详情页，会有<a href=\"https://link.zhihu.com/?target=http%3A//cloudflare-ipfs.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">cloudflare-ipfs.com</span><span class=\"invisible\"></span></a>、dweb.link、<a href=\"https://link.zhihu.com/?target=http%3A//ipfs.io\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">ipfs.io</span><span class=\"invisible\"></span></a>几个常见的IPFS网关服务，点击会自动从IPFS网络获取下载文件。整体而言，<a href=\"https://link.zhihu.com/?target=http%3A//cloudflare-ipfs.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">cloudflare-ipfs.com</span><span class=\"invisible\"></span></a>、dweb.link的可用性要高得多。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-58987bdd010a0299ebb1cbf3ae5daba1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1850\" data-rawheight=\"487\" class=\"origin_image zh-lightbox-thumb\" width=\"1850\" data-original=\"https://pic2.zhimg.com/v2-58987bdd010a0299ebb1cbf3ae5daba1_r.jpg\" data-original-token=\"v2-1f0ab09daaac7ffea35dfd6187f785c8\"/></figure><h2>IPFS CID的使用方法</h2><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6a276ff96e1faea2186ab7b7bffef54f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1788\" data-rawheight=\"662\" class=\"origin_image zh-lightbox-thumb\" width=\"1788\" data-original=\"https://pic4.zhimg.com/v2-6a276ff96e1faea2186ab7b7bffef54f_r.jpg\" data-original-token=\"v2-d4571e0923b0b7bc9cef7a4b01b70e6e\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"Q6QDlul2\">通过zlib-searcher搜索，得到的最有用的信息是对应资源的IPFS CID。有很多小白问起，怎样使用IPFS CID从IPFS下载对应的资源文件。</p><p data-pid=\"_AH0gvsZ\">关于IPFS的基础知识请自行搜索学习。</p><p data-pid=\"RwpCB3Ic\">首先，要获取最新可用的IPFS网关，推荐如下两个网站：</p><p data-pid=\"77iTnFHu\"><a href=\"https://link.zhihu.com/?target=https%3A//ipfs.github.io/public-gateway-checker\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">ipfs.github.io/public-g</span><span class=\"invisible\">ateway-checker</span><span class=\"ellipsis\"></span></a></p><p data-pid=\"_H1rIAfQ\"><a href=\"https://link.zhihu.com/?target=https%3A//ipfs-checker.1kbtool.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">ipfs-checker.1kbtool.com</span><span class=\"invisible\">/</span><span class=\"ellipsis\"></span></a></p><p data-pid=\"TEYBP3jo\">例如：</p><p data-pid=\"r12IA9Mx\">1、通过<a href=\"https://link.zhihu.com/?target=https%3A//zlib.knat.network/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"> https://zlib.knat.network</a> 搜索 “托马斯･索维尔”的“知识分子与社会”得到对应的IPFS CID为: bafk2bzacean2aoojxovgmf7557mtrdyufo3t4bidc6haghxcbtbxznmwaaij2<br/></p><p data-pid=\"e2i1n9on\">2、通过 <a href=\"https://link.zhihu.com/?target=https%3A//ipfs.github.io/public-gateway-checker\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">ipfs.github.io/public-g</span><span class=\"invisible\">ateway-checker</span><span class=\"ellipsis\"></span></a> 得到cloudflare提供的IPFS网关为 <a href=\"https://link.zhihu.com/?target=https%3A//cloudflare-ipfs.com/ipfs/bafybeifx7yeb55armcsxwwitkymga5xf53dxiarykms3ygqic223w5sk3m%23x-ipfs-companion-no-redirect\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cloudflare-ipfs.com/ipf</span><span class=\"invisible\">s/bafybeifx7yeb55armcsxwwitkymga5xf53dxiarykms3ygqic223w5sk3m#x-ipfs-companion-no-redirect</span><span class=\"ellipsis\"></span></a></p><p data-pid=\"94WE4fX1\">使用“知识分子与社会”得到对应的IPFS CID替换cloudflare的示例IPFS CID，也即：</p><p data-pid=\"S8QEZG5X\"><a href=\"https://link.zhihu.com/?target=https%3A//cloudflare-ipfs.com/ipfs/bafk2bzacean2aoojxovgmf7557mtrdyufo3t4bidc6haghxcbtbxznmwaaij2\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">cloudflare-ipfs.com/ipf</span><span class=\"invisible\">s/bafk2bzacean2aoojxovgmf7557mtrdyufo3t4bidc6haghxcbtbxznmwaaij2</span><span class=\"ellipsis\"></span></a></p><h2>参考：</h2><p data-pid=\"bX0abPmE\"><a href=\"https://link.zhihu.com/?target=https%3A//www.yeeach.com/post/2291\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">基于zlib-searcher搭建自己的Z-Library的镜像站</a></p><p data-pid=\"Z0ixL6iC\"><a href=\"https://link.zhihu.com/?target=https%3A//www.yeeach.com/post/2153\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Z-library 域名被扣押，应急访问办法</a></p><p data-pid=\"rVTjnB5H\">更新日志</p><p data-pid=\"qu2mu7rh\">2023/01/07 新增 IPFS CID的使用方法</p><p data-pid=\"XhH6lEi3\">2022/11/29 创建</p>",
            "voteup_count": 1469,
            "column": {
                "id": "payment-thinking",
                "type": "column",
                "url_token": "payment-thinking",
                "title": "互联网支付杂思",
                "url": "https://zhuanlan.zhihu.com/payment-thinking",
                "created": 1557718805,
                "updated": 1590770307,
                "description": "",
                "image_url": "https://picx.zhimg.com/v2-eb86d2a6ef80e36fee4a424e07ecbae1_720w.jpg?source=d16d100b"
            },
            "comment_count": 71
        },
        "created": "2022-11-29T21:27:34+08:00"
    },
    {
        "content": {
            "id": 586418061,
            "title": "TypeScript 类型体操，实现编程语言的解析并求值",
            "type": "article",
            "excerpt_title": "之前看到了 brambles：TypeScript 类型体操天花板，用类型运算写一个 Lisp 解释器 这篇文章，感到非常震撼。这两天在研究一些文本解析的问题突然想起了这篇文章，然后自己也想糊一个。众所周知，TypeScript 的类型系统是图灵完备的，于是我们可以用 ts 的类型系统来做到一些奇妙的事情，比如上面那篇用类型系统实现的 lisp 解释器。而我想要做一个更通用的东西。 先看一下效果： type E&lt;I extends string&gt; = Eval&lt;Parse&lt;producer…",
            "url": "https://zhuanlan.zhihu.com/p/586418061",
            "image_url": "",
            "created": 1669291531,
            "updated": 1669718053,
            "author": {
                "id": "cb829bb90224ed0325f136f28f34e7de",
                "url_token": "Anillc",
                "name": "Anillc",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-b614ebb3616478156fe690c48c014085_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-b614ebb3616478156fe690c48c014085.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/cb829bb90224ed0325f136f28f34e7de",
                "user_type": "people",
                "headline": "Anillc Dayo~",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1501149341
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"H70LetEK\">之前看到了 <a href=\"https://zhuanlan.zhihu.com/p/427309936\" class=\"internal\">brambles：TypeScript 类型体操天花板，用类型运算写一个 Lisp 解释器</a> 这篇文章，感到非常震撼。这两天在研究一些文本解析的问题突然想起了这篇文章，然后自己也想糊一个。</p><p data-pid=\"MHX3Z5wy\">众所周知，TypeScript 的类型系统是图灵完备的，于是我们可以用 ts 的类型系统来做到一些奇妙的事情，比如上面那篇用类型系统实现的 lisp 解释器。而我想要做一个更通用的东西。</p><p data-pid=\"6DpZIpDD\">先看一下效果：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">E</span><span class=\"p\">&lt;</span><span class=\"nt\">I</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Eval</span><span class=\"p\">&lt;</span><span class=\"nt\">Parse</span><span class=\"err\">&lt;</span><span class=\"na\">producers</span><span class=\"err\">,</span> <span class=\"na\">table</span><span class=\"err\">,</span> <span class=\"na\">I</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">T</span> <span class=\"o\">=</span> <span class=\"nx\">E</span><span class=\"o\">&lt;</span><span class=\"sb\">`(1 + 2) * 3 + 4 * 5`</span><span class=\"o\">&gt;</span>\n<span class=\"c1\">//   ^? type T = 29  \n</span></code></pre></div><p data-pid=\"wyzgHMzz\"> 代码在 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/Anillc/yatcc\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - Anillc/yatcc: Yet Another Type Compiler-Compiler</a>。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"dXaXvOkT\">先糊一个词法分析器，</p><div class=\"highlight\"><pre><code class=\"language-text\">type LexTrim&lt;I extends string&gt; = I extends `${&#39; &#39; | &#39;\\t&#39; | &#39;\\n&#39;}${infer R}` ? LexTrim&lt;R&gt; : I\n\ntype Num = &#39;0&#39; | &#39;1&#39; | &#39;2&#39; | &#39;3&#39; | &#39;4&#39; | &#39;5&#39; | &#39;6&#39; | &#39;7&#39; | &#39;8&#39; | &#39;9&#39;\ntype LexNumber&lt;I extends string&gt; = I extends `${infer N extends Num}${infer R}`\n  ? [`${N}${LexNumber&lt;R&gt;[0]}`, LexNumber&lt;R&gt;[1]]\n  : I extends `.${infer R}`\n    ? [`.${LexNumber&lt;R&gt;[0]}`, LexNumber&lt;R&gt;[1]]\n    : [&#39;&#39;, I]\n\ntype LexString&lt;I extends string, In extends false | string = false, Ignore extends boolean = false&gt; = In extends false\n  ? I extends `${infer S extends &#34;&#39;&#34; | &#39;&#34;&#39; | &#39;`&#39;}${infer R}` ? LexString&lt;R, S&gt; : [&#39;&#39;, I]\n  : Ignore extends true\n    ? I extends `${infer L}${infer R}` ? [`${L}${LexString&lt;R, In&gt;[0]}`, LexString&lt;R, In&gt;[1]] : [&#39;&#39;, I]\n    : I extends `\\\\${infer R}`\n      ? LexString&lt;R, In, true&gt;\n      : I extends `${In}${infer R}`\n        ? [&#39;&#39;, R]\n        : I extends `${infer L}${infer R}`\n          ? [`${L}${LexString&lt;R, In&gt;[0]}`, LexString&lt;R, In&gt;[1]]\n          : never\n\ntype Id =\n  | &#39;a&#39; | &#39;b&#39; | &#39;c&#39; | &#39;d&#39; | &#39;e&#39; | &#39;f&#39; | &#39;g&#39;\n  | &#39;h&#39; | &#39;i&#39; | &#39;j&#39; | &#39;k&#39; | &#39;l&#39; | &#39;m&#39; | &#39;n&#39;\n  | &#39;o&#39; | &#39;p&#39; | &#39;q&#39; | &#39;r&#39; | &#39;s&#39; | &#39;t&#39; | &#39;u&#39;\n  | &#39;v&#39; | &#39;w&#39; | &#39;x&#39; | &#39;y&#39; | &#39;z&#39; | &#39;A&#39; | &#39;B&#39;\n  | &#39;C&#39; | &#39;D&#39; | &#39;E&#39; | &#39;F&#39; | &#39;G&#39; | &#39;H&#39; | &#39;I&#39;\n  | &#39;J&#39; | &#39;K&#39; | &#39;L&#39; | &#39;M&#39; | &#39;N&#39; | &#39;O&#39; | &#39;P&#39;\n  | &#39;Q&#39; | &#39;R&#39; | &#39;S&#39; | &#39;T&#39; | &#39;U&#39; | &#39;V&#39; | &#39;W&#39;\n  | &#39;X&#39; | &#39;Y&#39; | &#39;Z&#39; | &#39;_&#39;\ntype LexId&lt;I extends string, F extends boolean = true&gt; = F extends true\n  ? I extends `${infer L extends Id}${infer R}` ? [`${L}${LexId&lt;R, false&gt;[0]}`, LexId&lt;R, false&gt;[1]] : [&#39;&#39;, I]\n  : I extends `${infer L extends Id | number }${infer R}` ? [`${L}${LexId&lt;R, false&gt;[0]}`, LexId&lt;R, false&gt;[1]] : [&#39;&#39;, I]\n\ntype Equal&lt;A, B&gt; = [A] extends [B] ? true : false\n\nexport type Lex&lt;I extends string&gt; =\n  LexTrim&lt;I&gt; extends infer Trimmed extends string\n    ? Trimmed extends &#39;&#39; ? []\n    : LexNumber&lt;Trimmed&gt; extends [infer N extends string, infer R extends string] ? Equal&lt;N, &#39;&#39;&gt; extends false ? [{ type: &#39;num&#39;, value: ToNumber&lt;N&gt; }, ...Lex&lt;R&gt;]\n    : LexString&lt;Trimmed&gt; extends [infer S extends string, infer R extends string] ? Equal&lt;S, &#39;&#39;&gt; extends false ? [{ type: &#39;str&#39;, value: S }, ...Lex&lt;R&gt;]\n    : LexId&lt;Trimmed&gt;     extends [infer I extends string, infer R extends string] ? Equal&lt;I, &#39;&#39;&gt; extends false ? [{ type: &#39;id&#39; , value: I }, ...Lex&lt;R&gt;]\n    : Trimmed extends `${infer L}${infer R}` ? [{ type: L }, ...Lex&lt;R&gt;]\n  : never : never : never : never : never</code></pre></div><p data-pid=\"G7ITjAQP\"><code>LexTrim</code> 这个类型用于去除字符串前的空白字符，<code>LexNumber</code> <code>LexString</code> <code>LexId</code> 用于解析数字、字符串和标识符，<code>Lex</code> 把他们组合起来。</p><p data-pid=\"VryoB560\">然后糊语法分析器。LR 是一种解析上下文无关文法的算法，可以预先把解析文本所需要的所有可能的状态保存到表中，再使用一个状态机来解析他。分为 Action 表和 Goto 表，Action 表中保存移近和规约的规则，Goto 表保存规约过后应该往栈中加入的状态。简单糊一个 LR 表生成器过后，就可以愉快地用类型写语法分析器啦。</p><div class=\"highlight\"><pre><code class=\"language-text\">export type Parse&lt;\n  P extends Record&lt;number, Producer&gt;,\n  T extends Table,\n  S extends string[],\n  B extends (Node | Token)[],\n  F extends boolean,\n  Tokens,\n&gt; = F extends true ? B[0] :\n  Tokens extends Token[]\n    ? GetAction&lt;T, S, Tokens&gt; extends [infer Type extends number, infer Action extends number]\n      ? Type extends 0 ?\n        Parse&lt;P, T, [...S, ToString&lt;Action&gt;], [...B, Tokens[0]], false, Tail&lt;Tokens&gt;&gt;\n      : Type extends 1 ?\n        Parse&lt;\n          P, T,\n          [...Pop&lt;S, P[Action][&#39;tokens&#39;]&gt;[0],\n            ToString&lt;T[Last&lt;Pop&lt;S, P[Action][&#39;tokens&#39;]&gt;[0], string&gt;][P[Action][&#39;name&#39;]][1]&gt;],\n          [...Pop&lt;B, P[Action][&#39;tokens&#39;]&gt;[0], { id: Action, nodes: Pop&lt;B, P[Action][&#39;tokens&#39;]&gt;[1] }],\n          P[Action][&#39;name&#39;] extends &#39;G&#39; ? true : false, Tokens\n        &gt;\n      : never : never\n    : never</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"xfZCZq6W\">完事之后还需要对抽象语法树求值。</p><div class=\"highlight\"><pre><code class=\"language-text\">type CastEval&lt;N, T&gt; = Eval&lt;N&gt; extends T ? Eval&lt;N&gt; : never \ntype Eval&lt;N&gt; = N extends Node\n  ? N[&#39;id&#39;] extends 1 ? Eval&lt;N[&#39;nodes&#39;][0]&gt;\n  // @ts-ignore\n  : N[&#39;id&#39;] extends 2 ? Add&lt;CastEval&lt;N[&#39;nodes&#39;][0], number&gt;, CastEval&lt;N[&#39;nodes&#39;][2], number&gt;&gt;\n  : N[&#39;id&#39;] extends 3 ? Subtract&lt;CastEval&lt;N[&#39;nodes&#39;][0], number&gt;, CastEval&lt;N[&#39;nodes&#39;][2], number&gt;&gt;\n  : N[&#39;id&#39;] extends 4 ? Eval&lt;N[&#39;nodes&#39;][0]&gt;\n  : N[&#39;id&#39;] extends 5 ? Multiply&lt;CastEval&lt;N[&#39;nodes&#39;][0], number&gt;, CastEval&lt;N[&#39;nodes&#39;][2], number&gt;&gt;\n  : N[&#39;id&#39;] extends 6 ? DividedBy&lt;CastEval&lt;N[&#39;nodes&#39;][0], number&gt;, CastEval&lt;N[&#39;nodes&#39;][2], number&gt;&gt;\n  : N[&#39;id&#39;] extends 7 ? Eval&lt;N[&#39;nodes&#39;][0]&gt;\n  : N[&#39;id&#39;] extends 8 ? Eval&lt;N[&#39;nodes&#39;][1]&gt;\n  : N[&#39;id&#39;] extends 9 ? N[&#39;nodes&#39;][0] extends NumberToken ? N[&#39;nodes&#39;][0][&#39;value&#39;] : never\n  : never : N</code></pre></div><p data-pid=\"ApvXWFNE\">TypeScript 已经觉得递归太深不开心了，我们这里让他闭嘴。加减乘除直接抄了上面的 lisp 解释器的加减乘除。然后我们就得到了一个类型系统上的计算器。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-edf724db2fdc5c6d1307f9f77490c4ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"653\" data-rawheight=\"174\" class=\"origin_image zh-lightbox-thumb\" width=\"653\" data-original=\"https://pic1.zhimg.com/v2-edf724db2fdc5c6d1307f9f77490c4ec_r.jpg\" data-original-token=\"v2-edf724db2fdc5c6d1307f9f77490c4ec\"/></figure><p></p>",
            "voteup_count": 11,
            "comment_count": 2
        },
        "created": "2022-11-24T20:05:31+08:00"
    },
    {
        "content": {
            "id": 525186722,
            "title": "用TypeScript类型体操实现Base64编解码",
            "type": "article",
            "excerpt_title": "今天我们来体操一个 Base64 编码，因为这个东西比较简单，用体操来实现也不会很复杂。 首先，为什么有 Base64 编码这种东西呢？因为有时在某些环境下，只有部分文本是可以可靠传输的，比如在终端环境中，一些控制字符有特殊的用途，可能无法显示或复制。如果想在这些环境中传递二进制数据或完整的 Latin-1 字符集，可以使用 Base64 编码。 Base64 编码可以把数据重新编码为一系列安全的字符，具体地，它是通过将 8 位的字节流重…",
            "url": "https://zhuanlan.zhihu.com/p/525186722",
            "image_url": "https://picx.zhimg.com/v2-ce1831b1f31f6d5324dc2247ac0139f5_r.jpg?source=172ae18b",
            "created": 1654550877,
            "updated": 1661597085,
            "author": {
                "id": "a9cda735b6868ee54dccc666c72b52a2",
                "url_token": "fightingcat",
                "name": "Square",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-fda32568956e6965192a9ac63e33842c_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-fda32568956e6965192a9ac63e33842c.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/a9cda735b6868ee54dccc666c72b52a2",
                "user_type": "people",
                "headline": "▷ı|ΙıΙı||Ιı 5″",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1442594809
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"-6Ab9URr\">今天我们来体操一个 Base64 编码，因为这个东西比较简单，用体操来实现也不会很复杂。</p><p data-pid=\"SYruMzu3\">首先，为什么有 Base64 编码这种东西呢？因为有时在某些环境下，只有部分文本是可以可靠传输的，比如在终端环境中，一些控制字符有特殊的用途，可能无法显示或复制。如果想在这些环境中传递二进制数据或完整的 Latin-1 字符集，可以使用 Base64 编码。</p><p data-pid=\"p8tifuuw\">Base64 编码可以把数据重新编码为一系列安全的字符，具体地，它是通过将 8 位的字节流重新划分成 6 位的序列，然后将 6 位的数据映射到 64 个字符，这 64 个字符就是英文大小写字母和数字以及 + 和 /，对于末尾数据不足 6 位的情况，用 0 补足，并且在末尾加上等号。</p><p data-pid=\"z2gDQx0M\">那么第一步，我们要先实现把 Latin-1 字符序列转成二进制，因为只有 256 个码点，所以我们可以硬编码一个字典，就像这样：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Latin1</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&#34;\\x00&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;00000000&#34;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&#34;\\x01&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;00000001&#34;</span><span class=\"p\">,</span>\n    <span class=\"c1\">// ....\n</span><span class=\"c1\"></span>    <span class=\"s2\">&#34;\\xFF&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;11111111&#34;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"2b3AZYFU\">不过这样实在是太长了，对于这种娱乐性的体操要是写成一大坨就很劝退了，有什么办法能写起来短一点就好了。其实如果不追求一步到位的话，只是把 Latin-1 字符映射到它们对应的码点的话，我们可以把它们放进一个数组，这样数组的索引就是码点的十进制值，再想办法把十进制值转成二进制就好了。更进一步地，我们可以把所有字符放进一个字符串，再分割成数组，就更简短了。就像这样：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// 这里省略了一些字符，完整代码文末放出。\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Latin1Chars</span> <span class=\"o\">=</span> <span class=\"nx\">Split</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;\\x00\\x01\\x02\\x03...#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ...&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"vxZCH1R-\">然后我们需要实现一个用来分割字符串为数组的类型：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Split</span><span class=\"o\">&lt;</span>\n    <span class=\"nb\">String</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n    <span class=\"nx\">Separator</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">,</span>\n    <span class=\"nx\">Result</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nb\">String</span> <span class=\"kr\">extends</span> <span class=\"s2\">&#34;&#34;</span>\n    <span class=\"o\">?</span> <span class=\"nx\">Result</span>\n    : <span class=\"kt\">String</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">First</span><span class=\"si\">}${</span><span class=\"nx\">Separator</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nb\">String</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">Split</span><span class=\"p\">&lt;</span><span class=\"nt\">String</span><span class=\"err\">,</span> <span class=\"na\">Separator</span><span class=\"err\">,</span> <span class=\"err\">[</span><span class=\"na\">...Result</span><span class=\"err\">,</span> <span class=\"na\">First</span><span class=\"err\">]</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"p\">[...</span><span class=\"nx\">Result</span><span class=\"p\">,</span> <span class=\"nb\">String</span><span class=\"p\">];</span>\n</code></pre></div><p data-pid=\"SEQ1HaQ-\">这里就是利用了模板字符串类型（template string literal type）的推断，递归地去分割字符串，特别地处理了字符串为空的情况，直接返回了空数组。模板字符串类型具有一定的模式匹配能力，当在其中使用 <i>infer</i> 时，<i>infer</i> 出的变量会优先匹配单个字符，除非它后面有关于界限的提示，比如 <i>infer</i> 位于末尾时它会匹配字符串剩余的所有部分，或者像我们这里 <i>infer First</i> 后面有一个可以确定值的 <i>Seperator</i>，<i>First</i> 会匹配从开头到第一次出现 <i>Separator</i> 前的所有部分。</p><p data-pid=\"j9dJ7AbY\">然后码点到二进制编码的映射，我们也用这种方式去实现。这个就有点长了，虽然有多种方法体操去生成，但是写起来花里胡哨的，我们暂时保持简单一致：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// 这里省略了中间 250 个二进制串。\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Latin1Code</span> <span class=\"o\">=</span> <span class=\"nx\">Split</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;00000000,00000001,00000010,00000011,....,11111110,11111111&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;,&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"lb78NVZv\">有了这个映射数组，我们还需要一个办法根据数组值获取索引值，也就是 <i>indexOf</i> 操作。我们用一个反向映射类型（reverse mapped type）来实现：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">IndexOf</span><span class=\"p\">&lt;</span><span class=\"nt\">Array</span> <span class=\"na\">extends</span> <span class=\"na\">unknown</span><span class=\"err\">[],</span> <span class=\"na\">Value</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">[</span><span class=\"nx\">K</span> <span class=\"k\">in</span> <span class=\"k\">keyof</span> <span class=\"nb\">Array</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"nb\">Array</span><span class=\"p\">[</span><span class=\"nx\">K</span><span class=\"p\">]</span> <span class=\"kr\">extends</span> <span class=\"nx\">Value</span> <span class=\"o\">?</span> <span class=\"nx\">K</span> : <span class=\"kt\">never</span><span class=\"p\">;</span>\n<span class=\"p\">}[</span><span class=\"nx\">Exclude</span><span class=\"p\">&lt;</span><span class=\"nt\">keyof</span> <span class=\"na\">Array</span><span class=\"err\">,</span> <span class=\"na\">keyof</span> <span class=\"err\">[]</span><span class=\"p\">&gt;];</span>\n</code></pre></div><p data-pid=\"8exg-oxn\">其实就是对数组中的值过滤了一遍，仅留下我们要找的值对应的索引，得到一个新的映射类型（mapped type），再取它所有属性的值，得到所有找到的索引的联合（union），由于我们这里数组的值都是唯一的，索引的结果也是唯一的。当然也可以不 split 成数组，用一个递归类型直接从原来的字符串里查找。</p><p data-pid=\"AGI8KS_J\">值得注意的是，我们用了 <i>Exclude</i> 筛掉了 <i>keyof []</i>，这是怎么回事呢？其实这里有个隐式的规则是文档里没有详细说明的，当泛型参数是数组或者对象类型时，映射类型不会处理它们原型上的属性。也就是说，我们这段代码里的 <i>Array[K] extends Value ? K : never</i> 并不会过滤掉数组原型上的那些方法，映射类型的结果还是一个数组类型，此时如果直接用 <i>keyof Array</i> 去取映射类型的属性值类型的联合，会把除了索引以外的属性类型也混进来，所以我们把这些属性从 <i>keyof Array</i> 中排除掉就可以了，而空数组正是拥有所有索引以外的属性（因为为空所以没有索引）。</p><p data-pid=\"Zd_bjhyG\">（再多提一点，如果是直接写在映射类型里的字面量类型就不会这样，这或许是两种代码路径下的疏忽，又或许是刻意为之，正是因为这样的“深不可知”所以社区重写 TS 的尝试才会如此艰难吧……）</p><p data-pid=\"cxTr3vKB\">言归正传，有了这些我们现在可以把一个 Latin-1 字符串转成二进制串了，只要熟练地应用递归类型：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">__Base64EncodeBinary</span><span class=\"o\">&lt;</span>\n    <span class=\"nb\">String</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n    <span class=\"nx\">Binary</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nb\">String</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">Char</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nb\">String</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">__Base64EncodeBinary</span><span class=\"p\">&lt;</span><span class=\"nt\">String</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">Binary</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">Latin1Code</span><span class=\"err\">[</span><span class=\"na\">IndexOf</span><span class=\"err\">&lt;</span><span class=\"na\">Latin1Chars</span><span class=\"err\">,</span> <span class=\"na\">Char</span><span class=\"p\">&gt;]}</span><span class=\"sb\">`&gt;\n</span><span class=\"sb\">    : Binary;\n</span></code></pre></div><p data-pid=\"0MAtdRo0\">就是不断地取出下一个字符，用我们的 <i>IndexOf</i> 类型取得对应的码点值，再作为索引去取得对应的二进制串，拼接到用来保存结果的 <i>Binary</i> 参数里，直到无法取到下一个字符时，返回结果 <i>Binary</i>。</p><p data-pid=\"9ANOZ5Kp\">接下来我们要做的就是不断从二进制串里取出每 6 位，映射到 Base64 的编码字符去，所以首先，我们还要有一个 Base64 的编码字符，和它的 6 位二进制编码的映射。按照我们之前的思路，可以很容易地再硬编码两个数组出来：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Base64Chars</span> <span class=\"o\">=</span> <span class=\"nx\">Split</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"c1\">// 这里省略了中间 60 个二进制串\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">Base64Code</span> <span class=\"o\">=</span> <span class=\"nx\">Split</span><span class=\"o\">&lt;</span><span class=\"s2\">&#34;000000,000001,000010,....,111111&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;,&#34;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"t40yj1l3\">到这里最后的工作就呼之欲出了，还记得我们前面说过模板字符串类型中 <i>infer </i>的用法吧，连续写 6 个就可以取得 6 个二进制位的字符了：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">__Base64Encode</span><span class=\"o\">&lt;</span>\n    <span class=\"nx\">Binary</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n    <span class=\"nx\">Result</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">Binary</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">B1</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">B2</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">B3</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">B4</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">B5</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">B6</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">Binary</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">__Base64Encode</span><span class=\"o\">&lt;</span>\n          <span class=\"nx\">Binary</span><span class=\"p\">,</span>\n          <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">Result</span><span class=\"si\">}${</span><span class=\"nx\">Base64Chars</span><span class=\"p\">[</span><span class=\"nx\">IndexOf</span><span class=\"p\">&lt;</span><span class=\"nt\">Base64Code</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">B1</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B2</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B3</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B4</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B5</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B6</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;]</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n      <span class=\"o\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"nx\">Binary</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">B1</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">B2</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">B3</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">B4</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">?</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">Result</span><span class=\"si\">}${</span><span class=\"nx\">Base64Chars</span><span class=\"p\">[</span><span class=\"nx\">IndexOf</span><span class=\"p\">&lt;</span><span class=\"nt\">Base64Code</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">B1</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B2</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B3</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B4</span><span class=\"p\">}</span><span class=\"na\">00</span><span class=\"err\">`</span><span class=\"p\">&gt;]</span><span class=\"si\">}</span><span class=\"sb\">=`</span>\n    <span class=\"o\">:</span> <span class=\"nx\">Binary</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">B1</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">B2</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">?</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">Result</span><span class=\"si\">}${</span><span class=\"nx\">Base64Chars</span><span class=\"p\">[</span><span class=\"nx\">IndexOf</span><span class=\"p\">&lt;</span><span class=\"nt\">Base64Code</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">B1</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B2</span><span class=\"p\">}</span><span class=\"na\">0000</span><span class=\"err\">`</span><span class=\"p\">&gt;]</span><span class=\"si\">}</span><span class=\"sb\">==`</span>\n    <span class=\"o\">:</span> <span class=\"nx\">Result</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"JO4DJAT1\">虽然这里可能有点令人眼花，不过只要看清楚就会发现其实很简单，主要是 Base64Chars[IndexOf&lt;Base64Code, `${B1}${B2}${B3}${B4}${B5}${B6}`&gt;] 这段，使用我们的 <i>IndexOf</i> 类型先取得 6 位二进制串对应我们 Base64 编码字符的十进制码点，再从 Base64 编码字符中取得对应的字符，拼接到用来保存结果的参数 <i>Result</i> 上，不断递归，直到以下情况出现：剩余二进制串不足 6 位，如果只有 4 位就补两个 0，并在结果字符串末尾补一个等号，如果只有 2 位就补 4 个 0 和两个等号，否则（到达结尾）直接返回当前的结果 <i>Result</i>。</p><p data-pid=\"TTWCc_A_\">最后，我们把字符串转为二进制串和二进制串编码为 Base64 的类型组合起来，就是我们字符串编码到 Base64 的最后一步了：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Base64Encode</span><span class=\"p\">&lt;</span><span class=\"nt\">String</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">__Base64Encode</span><span class=\"p\">&lt;</span><span class=\"nt\">__Base64EncodeBinary</span><span class=\"err\">&lt;</span><span class=\"na\">String</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4ef4602707f26fd18aa5b5b4653b6b39_b.jpg\" data-size=\"normal\" data-rawwidth=\"346\" data-rawheight=\"121\" class=\"content_image\" width=\"346\" data-original-token=\"v2-4ef4602707f26fd18aa5b5b4653b6b39\"/><figcaption>测试一下</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5cb8826fbe811b8ab00411662007e416_b.jpg\" data-size=\"normal\" data-rawwidth=\"243\" data-rawheight=\"112\" class=\"content_image\" width=\"243\" data-original-token=\"v2-5cb8826fbe811b8ab00411662007e416\"/><figcaption>在浏览器控制台中验证一下</figcaption></figure><p data-pid=\"GRjqh81f\">经过验证，我们成功在类型体操中实现了 Base64 编码的功能。至于解码过程其实差不多，就不赘述了。</p><p data-pid=\"3DKxfWwe\">最后是完整代码的链接，可以在 Playground 中尝试验证一下： <a href=\"https://link.zhihu.com/?target=https%3A//73071.gitee.io/misc/playground2.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">73071.gitee.io/misc/pla</span><span class=\"invisible\">yground2.html</span><span class=\"ellipsis\"></span></a></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"i5TGmoXU\">最后的最后，以防你们会灵魂发问“这有什么业务价值？”，没有任何业务价值，就是玩……</p>",
            "voteup_count": 18,
            "column": {
                "id": "c_206498766",
                "type": "column",
                "url_token": "c_206498766",
                "title": "来玩TypeScript啊，机都给你开好了！",
                "url": "https://zhuanlan.zhihu.com/c_206498766",
                "created": 1529898760,
                "updated": 1599156476,
                "description": "",
                "image_url": "https://pic1.zhimg.com/v2-e96ec27e9e7fc3bbedf607cb352acb57_720w.jpg?source=d16d100b"
            },
            "comment_count": 3
        },
        "created": "2022-06-07T05:27:57+08:00"
    },
    {
        "content": {
            "id": 13150135,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/19850561/answer/13150135",
            "created_time": 1316060960,
            "updated_time": 1426058703,
            "question": {
                "type": "question",
                "id": 19850561,
                "title": "如何健身才能练出腹肌？",
                "question_type": "normal",
                "created": 1316059142,
                "updated_time": 1510539745,
                "url": "https://www.zhihu.com/question/19850561",
                "is_deleted": false
            },
            "author": {
                "id": "37e935623706e5e221d2756fba82acf5",
                "url_token": "luxenius",
                "name": "Luxenius",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/4e6ea52436d88d50b413e55ec8538b9b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/4e6ea52436d88d50b413e55ec8538b9b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/37e935623706e5e221d2756fba82acf5",
                "user_type": "people",
                "headline": "小隐隐于匿名用户，大隐隐于没有帮助",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pica.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19604128",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19604128",
                                "name": "医学",
                                "avatar_url": "https://picx.zhimg.com/v2-22342bad24eab31b77b7beb130587eea_720w.jpg?source=32738c0c"
                            }
                        ]
                    },
                    {
                        "type": "identity",
                        "description": "医师资格证书持证人"
                    }
                ],
                "badge_v2": {
                    "title": "医学话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "医学话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19604128",
                                    "token": "19604128",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19604128",
                                    "name": "医学",
                                    "avatar_path": "v2-22342bad24eab31b77b7beb130587eea",
                                    "avatar_url": "https://picx.zhimg.com/v2-22342bad24eab31b77b7beb130587eea_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "医师资格证书持证人",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "医学话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19604128",
                                    "token": "19604128",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19604128",
                                    "name": "医学",
                                    "avatar_path": "v2-22342bad24eab31b77b7beb130587eea",
                                    "avatar_url": "https://picx.zhimg.com/v2-22342bad24eab31b77b7beb130587eea_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "医师资格证书持证人",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pica.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-27bfcba90e66db79ce8768ab807e017e_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 3868,
            "comment_count": 184,
            "thanks_count": 1674,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"lYi1Sk7n\">【本文禁止转载】</p><ol><li data-pid=\"WTlPdibD\">不要依赖什么健腹器，健身怎么可能轻轻松松。当然，有些如腹肌轮，也可以做初期的辅助训练。<br/></li><li data-pid=\"DQHUXHpK\">买一个瑜伽垫，每天练卷腹（不能贴图和视频，具体动作麻烦网上搜一下，很多教程），从一组30个起做，耐力好点了可以往后面加，每次都做到力竭，刚练完的时候需有火辣辣的感觉。</li><li data-pid=\"xN3fPMqJ\">等你的腹肌有一定基本的耐力以后，可以开始一些更练爆发力、更全面锻炼“八块”腹肌的动作，比如p4p网站上的那段著名视频教程8min abs workout，中文视频网站很多以“八分钟给你六块腹肌”命名，搜一下吧。上腹和下腹要分开练，上腹以卷腹或类似的动作练，下腹以抬腿或类似的动作练，具体动作还是参考： <a href=\"https://link.zhihu.com/?target=http%3A//www.passion4profession.net/en/abs-exercises/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">passion4profession.net/</span><span class=\"invisible\">en/abs-exercises/</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"8qNS10or\">动作宁少勿假，落下去时背不要贴地、腿不要点地，腹部保持张力，不要用手辅助自己起身，不要用弹地的力量起来等。一句话，勿自欺欺人，不要以完成多少个为目标，而是以将自己做到做不动、确实的感觉到腹肌充分疲惫了为目标。</li><li data-pid=\"rmYyWiFi\">一开始会很难，第二三天腹部都会痛。力量不够的时候还会做得腰痛、脖子痛，但这些只是你腹肌力量和耐力不够的缘故，等到坚持了十来次后，这些情况就不会再出现。所以还是一定得坚持啊，可很多人就停在了这个阶段，整天上网问做了仰卧起坐以后腰痛是不是有问题什么的，这种人永远别想练出明显的腹肌来。</li><li data-pid=\"skoS0TZC\">肌肉充分运动后会充血，所以刚练完会显得很大很明显，不要被这种小小的胜利冲昏了头脑，几天不练、生病什么的，立马就蔫会去了，所以还是要坚持。</li><li data-pid=\"YdED7v0G\">饮食要合理，多吃含蛋白质多的，如鸡肉、鱼肉、鸡蛋、牛奶等，但注意科学合理，一次吃太多显然是浪费，每吨都吃、用作补充都不错。不要拿蛋白质类当饭吃来充饥，这种情况下氨基酸多走了脱氨基途径，难以再形成蛋白质补给肌肉了。还有注意固体蛋白质排空要3-4个小时，所以很多人锻炼完马上吃鸡蛋其实晚了，理论上锻炼前吃更好。</li><li data-pid=\"x034Zn7J\">保持较少的皮下脂肪水平，你才能有鲜明的肌肉线条，否则再发达的肌肉也是“隐隐约约”的轮廓。</li></ol>",
            "excerpt": "【本文禁止转载】 不要依赖什么健腹器，健身怎么可能轻轻松松。当然，有些如腹肌轮，也可以做初期的辅助训练。 买一个瑜伽垫，每天练卷腹（不能贴图和视频，具体动作麻烦网上搜一下，很多教程），从一组30个起做，耐力好点了可以往后面加，每次都做到力竭，刚练完的时候需有火辣辣的感觉。等你的腹肌有一定基本的耐力以后，可以开始一些更练爆发力、更全面锻炼“八块”腹肌的动作，比如p4p网站上的那段著名视频教程8min abs work…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogENCAQQAxi3z6IGIKiqB5ICIAoGMzc5MjkwEggxMzE1MDEzNRgEIgpJTUFHRV9URVhU",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2011-09-15T12:29:20+08:00"
    },
    {
        "content": {
            "id": 2756880317,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/374412997/answer/2756880317",
            "created_time": 1668335348,
            "updated_time": 1668359946,
            "question": {
                "type": "question",
                "id": 374412997,
                "title": "哪个瞬间让你发现了世界的bug？",
                "question_type": "normal",
                "created": 1582560776,
                "updated_time": 1582560776,
                "url": "https://www.zhihu.com/question/374412997",
                "is_deleted": false
            },
            "author": {
                "id": "2440f75f7bf990f93df185f09c73905f",
                "url_token": "zhen-nan-xi-gua-wang",
                "name": "镇南西瓜王",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-c953fa1dd67ffc7b4e5abf5f586e7a58_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-c953fa1dd67ffc7b4e5abf5f586e7a58.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/2440f75f7bf990f93df185f09c73905f",
                "user_type": "people",
                "headline": "格力，掌握核心科技。",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "谢菲尔德大学 管理学硕士"
                    }
                ],
                "badge_v2": {
                    "title": "谢菲尔德大学 管理学硕士",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "谢菲尔德大学 管理学硕士",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "谢菲尔德大学 管理学硕士",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1515389443
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1859,
            "comment_count": 251,
            "thanks_count": 436,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"vF6lhR9V\">不晓得大家有没有看过一个电影，叫爱乐之城。</p><p data-pid=\"-oLpgLH_\">非常棒的一部歌舞片，里面的好几个长镜头让人叹为观止，插曲city of stars也特别抓耳。</p><p data-pid=\"e_Sjsdpc\">当然，最吸引人的当属故事架构了。虽然剧情讲起来可能比较烂俗，就是一对郁郁不得志的小情侣在大城市相遇，各种委屈求取，但因为相互鼓励拥抱取暖，还是一直不改初心，最后好不容易梦想快达成之际，俩人却还是分道扬镳了。</p><p data-pid=\"oRzkl1_g\">典型的青春男女都市题材，但娓娓道来的讲述方式和恰到好处的歌舞编排，让人特别感动。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"G8b9okAm\">第一次看这个电影是17年，和当时的女朋友董姐一起。</p><p data-pid=\"1-UsF3j7\">董姐这个姑娘香盘腻发春云湿，酒入寒肌夜玉怜的，脚还特娘的很白；我们是在国外读书时候认识的，那会正是毕业后一起来上海打拼的第一年。</p><p data-pid=\"iCVllVTc\">电影前半段的时候，姑娘看得可带劲了，穿着大T蜷在沙发上啃鸡爪，胸前还特娘摞了一大堆零食，什么薯片话梅鸭翅膀，琳琅满目，目不暇接的。</p><p data-pid=\"rHPecwcH\">一双大长腿横搭在我膝盖上，有一搭没一搭随着音乐节拍乱抖着；</p><p data-pid=\"mER9ZxoE\">而对我来讲，除了她脚尖上的大红色指甲油，时常晃得让人有些心猿意马，整个画面可以说是非常典型的旖旎饭后小情侣日常了。</p><p data-pid=\"RgCWm8ON\">很幸福。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"TIZRWAbq\">但谁晓得这导演特娘的是个小坏坏，非要安排个BE来刀人。小丫头看完后久久不能释怀，片尾曲都播完了，还在那哭得的梨花一枝春带雨，泪痕红邑鲛绡透的。</p><p data-pid=\"lONy-rNt\">虽然着实有些让人心疼吧，但同时也有丢丢小悸动，犹豫了六点九秒后，决定想想办法帮她转移注意力。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"Fi8dQmwb\">吞吞吐吐…的安慰了二十多分钟后吧，董姐终于平复好了心情，开始絮絮叨叨的和我复盘起电影情节来。</p><p data-pid=\"9GO7ur6U\">其实，我能够理解她的这番感同身受，因为故事里的情节和我们的处境实在太像。</p><p data-pid=\"WV1Wd0jG\">-我喜欢写酸文臭墨，她喜欢拍美食vlog；但少年人囊中羞涩，俩人都不得不人模狗样的成天窝在写字楼里，做着一份自己并不喜欢的工作。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"mxlZ5kdS\">姑娘止住眼泪，重新扎好头发，抽回双腿，跪坐在沙发上，然后双手掰正我的脑袋，杏眼圆瞪，严肃认真的发出了灵魂三连问，</p><p data-pid=\"cYqDzHOo\">-现在这份不喜欢的工作，也会一直坚持下去直到挣到钱么？</p><p data-pid=\"tQbbdWB6\">-挣到钱后，还有勇气回过头重拾自己最初的爱好么？</p><p data-pid=\"4bX8o90I\">-这期间道阻且长的，会因为各种艰辛会离开我么？</p><p data-pid=\"EmWcoWCD\">我这个人向来冰雪聪明的，不会在送命题上犯什么浑；所以每个问题都像面试工作那样，答得滴水不漏，正能量十足。</p><p data-pid=\"yAtlGLPU\">董姐当然对此特别满意，随后自己也开始表起忠心来。</p><p data-pid=\"NqPBV-66\">不过最后还是补了句，</p><p data-pid=\"bwHJM8dd\">“男孩子家家的，不要那么恋爱脑；</p><p data-pid=\"VRaDs9Au\">“如果有朝一日，真的必须二选一，”</p><p data-pid=\"YDy5FrKO\">“希望你能更看重自己的前途，”</p><p data-pid=\"QGcshgwo\">“我不会因此记恨的。”</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"rps7E6NG\">当时年少，没明白话中深意，只是窃喜的觉着，身边的姑娘又温柔又识大体，遇此佳人，真是一辈子的福气。</p><p data-pid=\"YssFLfOi\">蓦然回首才发现，她的这些你侬我侬忘情嘱咐里，应该还藏了最后一句，埋在心底没有说，</p><p data-pid=\"gucW7qzd\">“因为换做我，我也会一样。”</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"F37GxBes\">饮食男女，滥俗情事；一年后，董姐有了更好的机会和未来，去了另一个国家发展。</p><p data-pid=\"LmwrNO0p\">山高水远的，她生性坚强，没有带着一丝哭哭啼啼和眷恋不舍。</p><p data-pid=\"sUXyag2o\">当然，也没有带着我。</p><p data-pid=\"Ntng_Qwn\">最终啊，我们还是像电影里男女主那样，各奔东西，永不相见。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"7NjN3y-f\">一晃经年，不知不觉中五年已经过去了，我也到了而立之年，泪腺萎缩的着实厉害。</p><p data-pid=\"19jAUSV4\">这期间，除了鉴赏几部三上老师著作的时候，为她的敬业热泪盈眶过，其余很少能再有什么电影让人涕泗横流了。</p><p data-pid=\"eC6Zg8fB\">佳人也难再得，身边人来人往，感觉自己像个用完即丢的玩具。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"9UmWm0qk\">直到今年国庆的时候，遇到了个姑娘，姓沈，在一家电台做内容编辑，锦江滑腻蛾眉秀的，脚特娘的更白。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"klCnCMfV\">那天晚饭后，沈编辑提议一起看部老电影吧，小情侣做这事多浪漫呀。</p><p data-pid=\"Apsp1W1y\">打开投影仪，问姑娘想挑哪部，除了泰坦尼克号都行，毕竟画画是个体力活，前些天已经给她画过太多次了。</p><p data-pid=\"jJEJxXyD\">“爱乐之城吧！看过没？前阵子刷公众号推荐的…”</p><p data-pid=\"JbPY2fGr\">一阵复杂的情绪涌上心头，摁遥控器的手指停顿了下，终归还是不忍扫了姑娘的兴致，去厨房煮上奶茶，顺便给她拿了一大包薯片。</p><p class=\"ztext-empty-paragraph\"><br/></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"UL02IQ-4\">电影结束时，望着号啕大哭的小丫头，我有点哭笑不得，表示正在热恋的人看这种劳燕分飞的故事，两相对比，不是应该心里暗爽么。</p><p data-pid=\"6LkHH35X\">话还没说完，姑娘抬起白嫩的小脚，对着脸就踹了过来，说老男人不懂情趣，没有文艺细菌。</p><p data-pid=\"FNeIAoSk\">闪躲的愣神功夫，脑子里突然涌现出五年前的那个灵魂三问，我望着姑娘好看的长睫毛，一时间不知合不合适提出。</p><p data-pid=\"C2hoIkd_\">哪晓得下一秒，沈编辑舀了勺西瓜喂到我嘴边，已经开始自顾自的呢喃起来，</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"uuOOPsZq\">“不想工作就不工作嘛，我们吃的又不多。”</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"oIFgvvwp\">“你有什么爱好都支持你呀。”</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"OrQxzas2\">“只要也别嫌弃我，我们一定会一直在一起的！”</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"T_hGdr1V\">看着姑娘脸上毫不犹豫的信誓旦旦，对a的胸腔更是被她拍的震耳欲聋，</p><p data-pid=\"UZeoEMjX\">这会，我才突然意识到到，眼前人，一副相同的高马尾，相同的认真表情，相同的大T恤，相同的大长腿，相同的指甲油颜色。</p><p data-pid=\"9VpL8zKl\">却是不同的回答。</p><p data-pid=\"PzeEir9T\">-唯一有点荒谬的是，问题都特娘还没问出口，对面居然改成抢答了。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"YxUXujjK\">我这个人，向来不信什么心有灵犀之类的屁话，但实在找不出理由来解释这种bug。所以肤若凝脂吹弹可破的小脸蛋顿时被惊得目瞪口呆，嚼着西瓜的嘴巴都忘了合上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"re1CcZnK\">“怎么啦，欲言又止的？”</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"VYc_Nkma\">姑娘打断了我的深思，双腿盘坐起来，右臂一把搂过我的脖子，轻笑了声，耳边随即传来了抹温热的旖旎，</p><p data-pid=\"5Cfa2pqL\">“不过，刚才电影到一半的时候，你吞吞…吐吐的样子，蛮可爱。”</p><p data-pid=\"WpNiVQcT\">瓜子壳散落在地板上，沙沙作响的，像极了下雨天。</p><p data-pid=\"-O_puo_Z\">“还想再看一遍。”</p>",
            "excerpt": "不晓得大家有没有看过一个电影，叫爱乐之城。 非常棒的一部歌舞片，里面的好几个长镜头让人叹为观止，插曲city of stars也特别抓耳。 当然，最吸引人的当属故事架构了。虽然剧情讲起来可能比较烂俗，就是一对郁郁不得志的小情侣在大城市相遇，各种委屈求取，但因为相互鼓励拥抱取暖，还是一直不改初心，最后好不容易梦想快达成之际，俩人却还是分道扬镳了。 典型的青春男女都市题材，但娓娓道来的讲述方式和恰到好处的歌舞编排，…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxi9z8qiCiCJ+9cVkgIlCgk1MzEzMzc3MTISCjI3NTY4ODAzMTcYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-11-13T18:29:08+08:00"
    },
    {
        "content": {
            "id": 2386786504,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/19615246/answer/2386786504",
            "created_time": 1647136896,
            "updated_time": 1647136896,
            "question": {
                "type": "question",
                "id": 19615246,
                "title": "怎么看待现在广州的房价？",
                "question_type": "normal",
                "created": 1303831400,
                "updated_time": 1319684757,
                "url": "https://www.zhihu.com/question/19615246",
                "is_deleted": false
            },
            "author": {
                "id": "aac3ead58af5cc28eae1f35f151b7f62",
                "url_token": "gutianlegege",
                "name": "小谷围古天樂",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-2ac9d62f2b6f24b109c1887343ef635e_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-2ac9d62f2b6f24b109c1887343ef635e.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/aac3ead58af5cc28eae1f35f151b7f62",
                "user_type": "people",
                "headline": "万物竞发，勃勃生机。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 708,
            "comment_count": 229,
            "thanks_count": 150,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"P8zJvIog\">据我潜伏在多个业主群、投资群和实地考察</p><p data-pid=\"aXcNFOCF\">目前（202203）广州的房产市场，呈现两极分化的趋势越来越明显</p><p data-pid=\"Hjw9tGVO\">富裕阶级和普通中产阶级的购买力差距</p><p data-pid=\"aCn8kmoO\">跟越南基尼系数一样大</p><p data-pid=\"24qYcMRm\">典型的上热、中冷、下温</p><p data-pid=\"nfOLY4NO\">上热：新富人区（珠城、琶洲），只要是好楼层、好户型基本现在是出一套卖一套，急着出售的只要略微降价成交也非常快，越贵的交投越活跃。特别是琶洲新房（保利天珺、越秀tod）基本都是万众瞩目，托上托上托关系都要去抢，套套过千万，几秒就抢光，新富购买力恐怖如斯。</p><p data-pid=\"lOnI51qA\">中冷：天河北、滨江东等老富人区，购买力与新富已经不是一个等级。价格仍然高企，但是交投不活跃，处于有价无市，基本锁死流动性，不降价基本没成交，去年高位买进的最少站岗3-5年。毕竟动辄千万对于楼龄差不多20年，又没有未来利好加持的成熟地区还是有点贵了。当然纯居住是很舒服滴，毕竟配套已经很成熟了，但是投资价值就不大了。能拿出过千万的家庭基本都会考虑去珠城东了，身边几个邻居用完学位都置换去珠城了。</p><p data-pid=\"rXJkQSwe\">下温：番禺、白云作为外来人口最多的刚需区，最近交投也转活跃了，毕竟那边多数是300来万的刚需盘，家庭凑一凑就能上车。大部分天河、海珠客都是从番禺、白云置换过去了，作为过渡盘的番禺白云还是挺不错的。可以留意一下雅居乐、祈福新村等地铁金刚大盘，他们热起来，整个区域的楼市也就热起来了，甚至天河海珠等600w左右的盘也就热起来了。目前我关注的几个金刚盘慢慢交投都转活跃了，有需要的可以考虑把握窗口期下手了。</p><p data-pid=\"UyviQP86\">像老东山的学位房，别说了，yyds，穿越牛熊，基业长青，比黄金还保值。（温馨提示：我有个在农林下某院上班的朋友建议我就近期不需要上学就别考虑这边了，这几年政策变化太大，一不小心理财变房东只能等拆迁了）</p><p data-pid=\"NTrEHa_n\">荔湾，不要说了，真正实现房住不炒，除了住没任何投资价值。</p><p data-pid=\"yfHQe3S-\">黄埔，建设如火如荼，未来可期，但是前期透支了未来价值，短期内还是站岗吧。特别是砍树换将后，旧改一停就…但是大趋势是不变的，黄埔还是广州的未来，看看产值和财政就知道了。</p><p data-pid=\"_Dvhek89\">海珠，除了珠江夜游这条沿江带，其他地方（哪怕也有江景）也没啥投资价值。江景在广州并不稀缺，稀缺的是产业和有钱人。</p><p data-pid=\"RR0n9pZf\">在已经明确松绑政策</p><p data-pid=\"6WdF60hr\">中心新富人区会继续涨，涨到你不相信人生</p><p data-pid=\"5YhCZGQ_\">次旧富人区就别碰了，信贷不放松，买进去就是站岗</p><p data-pid=\"5YQ5ZuRv\">刚需区，刚买就买吧，温和上涨是必然的</p><p data-pid=\"VUVOPCI5\">为什么必然，也很简单</p><p data-pid=\"JMGdkqXk\">财政缺钱（不卖地怎么六稳）</p><p data-pid=\"wChjtCWD\">银行缺业绩（各种信用贷重出江湖）</p><p data-pid=\"SClSjSAu\">刚需缺信心（谁踏马受的了暴涨）</p><p data-pid=\"jdpWwlGu\">未来300来万的房子会成为交易的主流</p><p data-pid=\"sYJKdY3D\">毕竟经济下行期</p><p data-pid=\"TNUXaIhd\">上吃肉，下喝汤</p><p data-pid=\"sjd9tnww\">不上不下夹心层</p><p data-pid=\"oj6AZF4X\">dddd</p><p></p><p></p>",
            "excerpt": "据我潜伏在多个业主群、投资群和实地考察 目前（202203）广州的房产市场，呈现两极分化的趋势越来越明显 富裕阶级和普通中产阶级的购买力差距 跟越南基尼系数一样大 典型的上热、中冷、下温 上热：新富人区（珠城、琶洲），只要是好楼层、好户型基本现在是出一套卖一套，急着出售的只要略微降价成交也非常快，越贵的交投越活跃。特别是琶洲新房（保利天珺、越秀tod）基本都是万众瞩目，托上托上托关系都要去抢，套套过千万，几秒…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxjI8Y3yCCCuywGSAiUKCTQ2NDA0MzU1OBIKMjM4Njc4NjUwNBgEIgpJTUFHRV9URVhU",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-03-13T10:01:36+08:00"
    },
    {
        "content": {
            "id": 580287220,
            "title": "声援 Library Genesis 和 Sci-Hub（搬运）",
            "type": "article",
            "excerpt_title": "在Z-library挨了大洋彼岸某国的铁拳的今天早上，有必要重新读一遍这一封几年前的公开信。（以及，现在Library Genesis还能用；窝小没有删过评论，如果不见了请咨询小管家）声援Library Genesis 和 Sci-Hub Translated by Bruce Ding, also by Yuk Hui simplified , traditional 在圣埃克苏佩里的童话里，小王子遇到了一个收集星星只为能够买更多星星的生意人。小王子对此疑惑不解。小王子只拥有一朵花，他每天都给它浇水。他还有三…",
            "url": "https://zhuanlan.zhihu.com/p/580287220",
            "image_url": "",
            "created": 1667527975,
            "updated": 1667548182,
            "author": {
                "id": "0c454d3a6d388b6014a0eff0e0453122",
                "url_token": "cyk-84-44",
                "name": "Nijika Fuldenses",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-de3e66909b06fea53b7ec7b7df6ce43d_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-de3e66909b06fea53b7ec7b7df6ce43d.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/0c454d3a6d388b6014a0eff0e0453122",
                "user_type": "people",
                "headline": "中世纪早期史爱好者，学历史家，高中生",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-51b9b88a4730e36ae51c0754a7de2675.png?source=6a64a727",
                        "night_mode_url": "https://pic1.zhimg.com/v2-51b9b88a4730e36ae51c0754a7de2675.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1481026684
            },
            "comment_permission": "all",
            "content": "<h2>在Z-library挨了大洋彼岸某国的铁拳的今天早上，有必要重新读一遍这一封几年前的公开信。</h2><h2>（以及，现在Library Genesis还能用；窝小没有删过评论，如果不见了请咨询小管家）</h2><a href=\"https://link.zhihu.com/?target=https%3A//custodians.online/chinese.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-c19895716fdaf0c0704116d6b97a2b61_200x0.jpg\" data-image-width=\"172\" data-image-height=\"336\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">声援Library Genesis 和 Sci-Hub</a><p data-pid=\"zju1lGSZ\">Translated by Bruce Ding, also by Yuk Hui <a href=\"https://link.zhihu.com/?target=https%3A//custodians.online/chinese_simplified.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">simplified</a>, <a href=\"https://link.zhihu.com/?target=https%3A//custodians.online/chinese_traditional.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">traditional</a></p><p data-pid=\"1b_CQXAB\">在圣埃克苏佩里的童话里，小王子遇到了一个收集星星只为能够买更多星星的生意人。小王子对此疑惑不解。小王子只拥有一朵花，他每天都给它浇水。他还有三座火山，他每天都会打扫。“我拥有火山和花，我对我的火山有用处，对我的花也有用处”，他说，“但是你对你拥有的星星并没有用处”。</p><p data-pid=\"t-llsZBN\">今天有许多这样的生意人在掌控着知识。拿Elsevier来说，这个最大的学术出版商37%的利润率[1]和高企的费用、不断扩大的学生贷款以及接近贫困线的教员工资形成鲜明的对比。Elsevier拥有几个最大的学术数据库，而这些数据库的使用费极端昂贵，连北半球最富有的大学——哈佛大学也感到难以负担。哈佛图书馆的前馆长罗伯特·达恩顿（Robert   Darnton）说：“我们的教职员工做研究、写论文、审阅别人的论文、做编委，都没有收一分钱……可却要回过头来用令人发指的高价买回我们自己的劳动成果。[2]”这些由公币支持的研究到头来肥了这些学术出版商，特别是那些因同侪审查而获得合法性的出版商，期刊文章的售价阻碍了世界上许多学者和所有不是学者的人接触科学的通路，使得获取科学成为一种特权[3]。</p><p data-pid=\"OOyCAC08\">Elsevier最近在纽约发起了一项针对Science Hub和Library  Genesis的版权侵害诉讼，并提出数百万美元的赔偿要求[4]。这件事引起的轩然大波，不仅仅关乎网站的管理者们，更关乎全球数以千计的研究者们；对于他们来说，这些网站是唯一可用的学术资料来源。社交媒体、邮件组和聊天室里充满了他们苦苦搜寻文章和出版物的求助信息。</p><p data-pid=\"RdhLPIKH\">就在纽约地区法院下达禁制令的时候，新闻爆出了极富声望的期刊《Lingua》的编委会集体辞职的消息，原因就是Elsevier拒绝开放他们的数据库，也不同意降低他们向作者及其学术机构所收取的高昂费用。在我们写下这些句子的时候，一项请愿正在要求泰勒弗朗西斯集团（Taylor  &amp;  Francis）不要关闭Ashgate[5]。Ashgate曾是一个独立的人文出版机构，在2015年被泰勒弗朗西斯集团收购。如今它面临着和其他小型出版机构一样的命运——被巨头和出版市场的集中化所摧毁。而这些只是系统垮台的其中几个征兆而已。它贬低作者、编辑和读者的价值；它寄生于我们的劳动中；它阻挠我们向公众提供服务；它拒绝我们接入[6]。</p><p data-pid=\"cdPIGmqi\">我们有技术和手段，能够使所有人以更加低廉的价格获取知识。但是，垄断寡头对学术出版的封锁、令人咋舌的利润以及他们在分配学术声望中的核心角色压倒了公共利益。商业出版商一次又一次成功地阻止了开放通路的实现、逼我们违法、控告我们的英雄、摧毁我们的图书馆。在Science  Hub和Library  Genesis之前，还有Library.nu和Gigapedia；在Gigapedia之前，还有<a href=\"https://link.zhihu.com/?target=http%3A//textz.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">textz.com</span><span class=\"invisible\"></span></a>；在<a href=\"https://link.zhihu.com/?target=http%3A//textz.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">textz.com</span><span class=\"invisible\"></span></a>之前，就没有什么了；而在没有什么之前，什么也没有。这就是他们想要的：让我们回到什么都没有。他们有法院和法律撑腰，就是要实现这个[7]。</p><p data-pid=\"nwvoYUHk\">在Elsevier诉Sci-Hub和Library  Genesis案中，法官说道：“把受到版权保护的内容通过国外网站免费传播出去会损害公共利益[8]”。Alexandra  Elbakyan所做辩护的赌注更高：“如果Elsevier能设法关掉我们的项目，或者逼迫项目进入暗网，那么这证明了一件重要的事：那就是公众没有权利获得知识。”</p><p data-pid=\"cZNDufxy\">我们每天都能看到，这个系统正在大规模的垮台。我们背着出版商秘密地分享我们的写作，绕过付费限制获取文章和出版物，数字化图书并上传到图书馆。这是37%利润率的另一面：我们的知识共同体在这个垮台系统的警戒线上成长。我们都是知识的监护人，都是我们赖以生产知识的机制的监护人，都是这个多产但又脆弱的共同体的监护人。作为一个监护人，实际上就是要下载、分享、阅读、写作、评论、编辑、数字化、存档、维护图书馆、提供通路。我们要好好利用我们的知识共同体，而不是把它变成财产。</p><p data-pid=\"XP-yJ1qN\">七年多以前，亚伦・斯沃茨（Aaron  Swartz）不畏风险地支持我们今天呼吁您也一样支持的事业，他写道：“不管在哪里存储，我们都需要获取信息，复制并和世界分享它们。我们需要把那些版权之外的东西拿出来，放入文献库。我们需要购买秘密数据库，并把它们放上网。我们需要下载科学期刊，然后把它们上传到分享网络。我们需要为“游击开放通路”而抗争。如果这世界上的我们足够多，那么我们就不仅能发出一个强有力的反对知识私有化的信息，我们还能使其变成过去。你愿意加入我们么？[9]”</p><p data-pid=\"pG5rZS9N\">现在我们到了决定的时刻。是时候了，我们该要认识到，我们大规模的知识共同体的存在本身，就是一种集体公民不服从行动。是时候了，我们该要从幕后走到台前，把我们的名字放在这一抵抗运动的后面。你也许感到孤单，但我们其实人数众多。互联网上随处可见的、对失去图书馆设施的愤怒、绝望和恐惧告诉了我们。是时候了，我们这些监护人——不管是狗、人还是赛博格——用我们的名字、暱称和替身来发出声音。</p><p data-pid=\"P8JZSzXl\">请分享这封信—在公开场合朗读它—把它留在打印机上。分享你的写作—数字化一本书—上传你的文件。不要让我们的知识被摧毁。关心我们的图书馆—关心元数据—关心备份。给花浇水—打扫火山。</p><p data-pid=\"3YG3PV0s\">30 November 2015</p><p data-pid=\"2fzknRJy\">Dušan Barok, Josephine Berry, Bodó Balázs, Sean  Dockray, Kenneth Goldsmith, Anthony Iles, Lawrence Liang, Sebastian  Lütgert, Pauline van Mourik Broekman, Marcell Mars, spideralex, Tomislav  Medak, Dubravka Sekulić, Femke Snelting...</p><ol><li data-pid=\"bgt3ElGS\">Larivière, Vincent, Stefanie Haustein, and Philippe Mongeon. “<a href=\"https://link.zhihu.com/?target=http%3A//journals.plos.org/plosone/article%3Fid%3D10.1371/journal.pone.0127502\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Oligopoly of Academic Publishers in the Digital Era.</a>” PLoS ONE 10, no. 6 (June 10, 2015): e0127502. doi:10.1371/journal.pone.0127502., <br/>“<a href=\"https://link.zhihu.com/?target=http%3A//svpow.com/2012/01/13/the-obscene-profits-of-commercial-scholarly-publishers/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Obscene Profits of Commercial Scholarly Publishers.</a>” svpow.com. Accessed November 30, 2015.                 </li><li data-pid=\"MkNyFH7Z\">Sample, Ian. “<a href=\"https://link.zhihu.com/?target=http%3A//www.theguardian.com/science/2012/apr/24/harvard-university-journal-publishers-prices\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Harvard University Says It Can’t Afford Journal Publishers’ Prices.</a>” The Guardian, April 24, 2012, sec. Science. theguardian.com. \t\t</li><li data-pid=\"YNrzxZtn\">“<a href=\"https://link.zhihu.com/?target=http%3A//www.aljazeera.com/indepth/opinion/2012/10/20121017558785551.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Academic Paywalls Mean Publish and Perish - Al Jazeera English.</a>” Accessed November 30, 2015. aljazeera.com.                 </li><li data-pid=\"aucSu_Cb\">“<a href=\"https://link.zhihu.com/?target=https%3A//torrentfreak.com/sci-hub-tears-down-academias-illegal-copyright-paywalls-150627/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Sci-Hub Tears Down Academia’s ‘Illegal’ Copyright Paywalls.</a>” TorrentFreak. Accessed November 30, 2015. torrentfreak.com.                 </li><li data-pid=\"fBbqfybG\">“<a href=\"https://link.zhihu.com/?target=https%3A//www.change.org/p/save-ashgate-publishing\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Save Ashgate Publishing.</a>” Change.org. Accessed November 30, 2015. change.org.                 </li><li data-pid=\"iKSTsLLn\">“<a href=\"https://link.zhihu.com/?target=http%3A//thecostofknowledge.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Cost of Knowledge.</a>” Accessed November 30, 2015. thecostofknowledge.com.                 </li><li data-pid=\"DenvwJMq\"> 事实上，随着TPP和TTIP急着通过立法程序，没有一个域名注册商、ISP服务商和人权组织能够阻止版权产业和法院给网站定罪并“高效地”关闭它们。 </li><li data-pid=\"QJ7YuIV1\">“<a href=\"https://link.zhihu.com/?target=https%3A//torrentfreak.com/court-orders-shutdown-of-libgen-bookfi-and-sci-hub-151102/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Court Orders Shutdown of Libgen, Bookfi and Sci-Hub.</a>” TorrentFreak. Accessed November 30, 2015. torrentfreak.com.                 </li><li data-pid=\"9_PlCEBt\">“<a href=\"https://link.zhihu.com/?target=https%3A//archive.org/stream/GuerillaOpenAccessManifesto/Goamjuly2008_djvu.txt\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Guerilla Open Access Manifesto.</a>” Internet Archive. Accessed November 30, 2015. archive.org.                 </li></ol>",
            "voteup_count": 2300,
            "comment_count": 119
        },
        "created": "2022-11-04T10:12:55+08:00"
    },
    {
        "content": {
            "id": 568915443,
            "title": "谈谈JS二进制：File、Blob、FileReader、ArrayBuffer、Base64",
            "type": "article",
            "excerpt_title": "大家好，我是 CUGGZ。 JavaScript 提供了一些 API 来处理文件或原始文件数据，例如：File、Blob、FileReader、ArrayBuffer、base64 等。下面就来看看它们都是如何使用的，它们之间又有何区别和联系！ [图片] 1. Blob Blob 全称为 binary large object ，即二进制大对象，它是 JavaScript 中的一个对象，表示原始的类似文件的数据。下面是 MDN 中对 Blob 的解释： Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或…",
            "url": "https://zhuanlan.zhihu.com/p/568915443",
            "image_url": "https://picx.zhimg.com/v2-959b0038306972efe89aeb9bef957d3c_r.jpg?source=172ae18b",
            "created": 1664332831,
            "updated": 1695359122,
            "author": {
                "id": "4956afc5629037159754892829555f02",
                "url_token": "qian-duan-chong-dian-bao",
                "name": "前端充电宝",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-c13262fced1a8efc5fd65b844c198a31_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-c13262fced1a8efc5fd65b844c198a31.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/4956afc5629037159754892829555f02",
                "user_type": "people",
                "headline": "微信公众号:前端充电宝，回复\"面试题\"获取30w字前端面试题",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pica.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1637001372
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"3n9aWDr9\">大家好，我是 CUGGZ。</p><p data-pid=\"buVO79t9\">JavaScript 提供了一些 API 来处理文件或原始文件数据，例如：File、Blob、FileReader、ArrayBuffer、base64 等。下面就来看看它们都是如何使用的，它们之间又有何区别和联系！</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-93c296e3765eb827f68cefd2a3ad49c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1958\" data-rawheight=\"1386\" class=\"origin_image zh-lightbox-thumb\" width=\"1958\" data-original=\"https://pic1.zhimg.com/v2-93c296e3765eb827f68cefd2a3ad49c4_r.jpg\" data-original-token=\"v2-5b291b8a2ae8ba428f15a652ea47e3be\"/></figure><h2><b>1. Blob</b> </h2><p data-pid=\"QxffNCm-\">Blob 全称为 binary large object ，即二进制大对象，它是 JavaScript 中的一个对象，表示原始的类似文件的数据。下面是 MDN 中对 Blob 的解释：</p><blockquote data-pid=\"dq_A2vw4\"> Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 <b><a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ReadableStream</a></b> 来用于数据操作。<br/> </blockquote><p data-pid=\"HKvGBfed\">实际上，Blob 对象是包含有只读原始数据的类文件对象。简单来说，Blob 对象就是一个不可修改的二进制文件。</p><h3><b>（1）Blob 创建</b></h3><p data-pid=\"8X6ih7oh\">可以使用 Blob() 构造函数来创建一个 Blob：</p><div class=\"highlight\"><pre><code class=\"language-text\">new Blob(array, options);\n</code></pre></div><p data-pid=\"Bh_J_xD_\">其有两个参数：</p><ul><li data-pid=\"RYbn3CO_\"><code>array</code>：由 <code>ArrayBuffer</code>、<code>ArrayBufferView</code>、<code>Blob</code>、<code>DOMString</code> 等对象构成的，将会被放进 <code>Blob</code>；</li><li data-pid=\"pc7w8RGD\"><code>options</code>：可选的 <code>BlobPropertyBag</code> 字典，它可能会指定如下两个属性 </li><ul><li data-pid=\"tAnYbNxV\"><code>type</code>：默认值为 &#34;&#34;，表示将会被放入到 <code>blob</code> 中的数组内容的 MIME 类型。</li><li data-pid=\"csHxVAoB\"><code>endings</code>：默认值为&#34;<code>transparent</code>&#34;，用于指定包含行结束符<code>\\n</code>的字符串如何被写入，不常用。</li></ul></ul><p data-pid=\"6OqSSNc_\">常见的 MIME 类型如下：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-407823e9ffcdc71ed510e5543225772e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"954\" data-rawheight=\"1070\" class=\"origin_image zh-lightbox-thumb\" width=\"954\" data-original=\"https://pic3.zhimg.com/v2-407823e9ffcdc71ed510e5543225772e_r.jpg\" data-original-token=\"v2-9bb6eacbcc2d79cf715bd1f5e05eaf7a\"/></figure><p data-pid=\"WL7founm\">下面来看一个简单的例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">const blob = new Blob([&#34;Hello World&#34;], {type: &#34;text/plain&#34;});\n</code></pre></div><p data-pid=\"txQARKWs\">这里可以成为动态文件创建，其正在创建一个类似文件的对象。这个 blob 对象上有两个属性：</p><ul><li data-pid=\"LiZYKxW8\"><code>size</code>：Blob对象中所包含数据的大小（字节）；</li><li data-pid=\"kXnp7Qnb\"><code>type</code>：字符串，认为该Blob对象所包含的 MIME 类型。如果类型未知，则为空字符串。</li></ul><p data-pid=\"XTKd-e63\">下面来看打印结果：</p><div class=\"highlight\"><pre><code class=\"language-text\">const blob = new Blob([&#34;Hello World&#34;], {type: &#34;text/plain&#34;});\n\nconsole.log(blob.size); // 11\nconsole.log(blob.type); // &#34;text/plain&#34;\n</code></pre></div><p data-pid=\"A7Bxp1x-\">注意，字符串&#34;Hello World&#34;是 UTF-8 编码的，因此它的每个字符占用 1 个字节。</p><p data-pid=\"issO0hba\">到现在，Blob 对象看起来似乎我们还是没有啥用。那该如何使用 Blob 对象呢？可以使用 URL.createObjectURL() 方法将将其转化为一个 URL，并在 Iframe 中加载：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;iframe&gt;&lt;/iframe&gt;\n\nconst iframe = document.getElementsByTagName(&#34;iframe&#34;)[0];\n\nconst blob = new Blob([&#34;Hello World&#34;], {type: &#34;text/plain&#34;});\n\niframe.src = URL.createObjectURL(blob);\n</code></pre></div><h3><b>（2）Blob 分片</b></h3><p data-pid=\"-UqU2xBX\">除了使用<code>Blob()</code>构造函数来创建blob 对象之外，还可以从 blob 对象中创建blob，也就是将 blob 对象切片。Blob 对象内置了 slice() 方法用来将 blob 对象分片，其语法如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">const blob = instanceOfBlob.slice([start [, end [, contentType]]]};\n</code></pre></div><p data-pid=\"h52IRnbu\">其有三个参数：</p><ul><li data-pid=\"BO2Gun9y\"><code>start</code>：设置切片的起点，即切片开始位置。默认值为 0，这意味着切片应该从第一个字节开始；</li><li data-pid=\"iVWidsrn\"><code>end</code>：设置切片的结束点，会对该位置之前的数据进行切片。默认值为<code>blob.size</code>；</li><li data-pid=\"U7q08W9g\"><code>contentType</code>：设置新 blob 的 MIME 类型。如果省略 type，则默认为 blob 的原始值。</li></ul><p data-pid=\"l0OeTcSr\">下面来看例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">const iframe = document.getElementsByTagName(&#34;iframe&#34;)[0];\n\nconst blob = new Blob([&#34;Hello World&#34;], {type: &#34;text/plain&#34;});\n\nconst subBlob = blob.slice(0, 5);\n\niframe.src = URL.createObjectURL(subBlob);\n</code></pre></div><p data-pid=\"1zEC6iqv\">此时页面会显示&#34;Hello&#34;。</p><h2><b>2. File</b> </h2><p data-pid=\"_aIQGo5u\">文件（File）接口提供有关文件的信息，并允许网页中的 JavaScript 访问其内容。实际上，File 对象是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中。Blob 的属性和方法都可以用于 File 对象。</p><blockquote data-pid=\"6Dqw0hAd\"> 注意：File 对象中只存在于浏览器环境中，在 Node.js 环境中不存在。<br/> </blockquote><p data-pid=\"djLyHYhv\">在 JavaScript 中，主要有两种方法来获取 File 对象：</p><ul><li data-pid=\"CCmfE5vx\"><code>&lt;input&gt;</code> 元素上选择文件后返回的 FileList 对象；</li><li data-pid=\"z5Amjo24\">文件拖放操作生成的 <code>DataTransfer</code> 对象；</li></ul><h3><b>（1）input</b></h3><p data-pid=\"su71PIkG\">首先定义一个输入类型为 file 的 <code>input</code> 标签：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;input type=&#34;file&#34; id=&#34;fileInput&#34; multiple=&#34;multiple&#34;&gt;\n</code></pre></div><p data-pid=\"NcaXgLOo\">这里给 <code>input</code> 标签添加了三个属性：</p><ul><li data-pid=\"x84ATKKV\"><code>type=&#34;file&#34;</code>：指定 <code>input</code> 的输入类型为文件；</li><li data-pid=\"Oo3ASYgg\"><code>id=&#34;fileInput&#34;</code>：指定 <code>input</code> 的唯一 id；</li><li data-pid=\"rgoJvsQP\"><code>multiple=&#34;multiple&#34;</code>：指定 <code>input</code> 可以同时上传多个文件；</li></ul><p data-pid=\"VTA8wFMI\">下面来给 <code>input</code> 标签添加 <code>onchange</code> 事件，当选择文件并上传之后触发：</p><div class=\"highlight\"><pre><code class=\"language-text\">const fileInput = document.getElementById(&#34;fileInput&#34;);\n\nfileInput.onchange = (e) =&gt; {\n    console.log(e.target.files);\n}\n</code></pre></div><p data-pid=\"rhzrHSer\">当点击上传文件时，控制台就会输出一个 FileList 数组，这个数组的每个元素都是一个 File 对象，一个上传的文件就对应一个 File 对象：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7bbe974b8ff668f7c06dda9a2d5561be_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2876\" data-rawheight=\"686\" class=\"origin_image zh-lightbox-thumb\" width=\"2876\" data-original=\"https://pic3.zhimg.com/v2-7bbe974b8ff668f7c06dda9a2d5561be_r.jpg\" data-original-token=\"v2-26a17be27d5d013ab6536ae0e66d0922\"/></figure><p data-pid=\"UAtWwk1k\">每个 <code>File</code> 对象都包含文件的一些属性，这些属性都继承自 Blob 对象：</p><ul><li data-pid=\"2mo5Njae\"><code>lastModified</code>：引用文件最后修改日期，为自1970年1月1日0:00以来的毫秒数；</li><li data-pid=\"ml3saO1O\"><code>lastModifiedDate</code>：引用文件的最后修改日期；</li><li data-pid=\"VYIXOfnq\"><code>name</code>：引用文件的文件名；</li><li data-pid=\"o8LwNiPg\"><code>size</code>：引用文件的文件大小；</li><li data-pid=\"dInSxNll\"><code>type</code>：文件的媒体类型（MIME）；</li><li data-pid=\"NJmviqnh\"><code>webkitRelativePath</code>：文件的路径或 URL。</li></ul><p data-pid=\"20HI10ft\">通常，我们在上传文件时，可以通过对比 size 属性来限制文件大小，通过对比 type 来限制上传文件的格式等。</p><h3><b>（2）文件拖放</b></h3><p data-pid=\"Or24RNP6\">另一种获取 File 对象的方式就是拖放 API，这个 API 很简单，就是将浏览器之外的文件拖到浏览器窗口中，并将它放在一个成为拖放区域的特殊区域中。拖放区域用于响应放置操作并从放置的项目中提取信息。这些是通过 <code>ondrop</code> 和 <code>ondragover</code> 两个 API 实现的。</p><p data-pid=\"fCejfJ5j\">下面来看一个简单的例子，首先定义一个拖放区域：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;div id=&#34;drop-zone&#34;&gt;&lt;/div&gt;\n</code></pre></div><p data-pid=\"L0U8bwEn\">然后给这个元素添加 <code>ondragover</code> 和 <code>ondrop</code> 事件处理程序：</p><div class=\"highlight\"><pre><code class=\"language-text\">const dropZone = document.getElementById(&#34;drop-zone&#34;);\n\ndropZone.ondragover = (e) =&gt; {\n    e.preventDefault();\n}\n\ndropZone.ondrop = (e) =&gt; {\n    e.preventDefault();\n    const files = e.dataTransfer.files;\n    console.log(files)\n}\n</code></pre></div><p data-pid=\"dqfj1tZW\"><b>注意</b>：这里给两个 API 都添加了 <code>e.preventDefault()</code>，用来阻止默认事件。它是非常重要的，可以用来阻止浏览器的一些默认行为，比如放置文件将显示在浏览器窗口中。</p><p data-pid=\"-vXTHaXI\">当拖放文件到拖放区域时，控制台就会输出一个  FileList 数组，该数组的每一个元素都是一个 <code>File</code> 对象。这个 FileList 数组是从事件参数的 <code>dataTransfer</code> 属性的 <code>files</code> 获取的：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4be0b5fab5d6e041b6fc553e7de81b02_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2356\" data-rawheight=\"1102\" class=\"origin_image zh-lightbox-thumb\" width=\"2356\" data-original=\"https://pic3.zhimg.com/v2-4be0b5fab5d6e041b6fc553e7de81b02_r.jpg\" data-original-token=\"v2-83f9623159d9028d79b6bd5e7b6c2a79\"/></figure><p data-pid=\"Y_V10p9Z\">可以看到，这里得到的 <code>File</code> 对象和通过 <code>input</code> 标签获得的 <code>File</code> 对象是完全一样的。</p><h2><b>3. FileReader</b> </h2><p data-pid=\"8h_zG0sc\">FileReader 是一个异步 API，用于读取文件并提取其内容以供进一步使用。FileReader 可以将 Blob 读取为不同的格式。</p><blockquote data-pid=\"wyyggNwb\"> 注意：FileReader 仅用于以安全的方式从用户（远程）系统读取文件内容，不能用于从文件系统中按路径名简单地读取文件。<br/> </blockquote><h3><b>（1）基本使用</b></h3><p data-pid=\"4GZ0jWSI\">可以使用 FileReader 构造函数来创建一个 FileReader 对象：</p><div class=\"highlight\"><pre><code class=\"language-text\">const reader = new FileReader();\n</code></pre></div><p data-pid=\"EVxtdHw_\">这个对象常用属性如下：</p><ul><li data-pid=\"E3ofGmKp\"><code>error</code>：表示在读取文件时发生的错误；</li><li data-pid=\"ZO1DhPX9\"><code>result</code>：文件内容。该属性仅在读取操作完成后才有效，数据的格式取决于使用哪个方法来启动读取操作。</li><li data-pid=\"cCtJnWDQ\"><code>readyState</code>：表示<code>FileReader</code>状态的数字。取值如下：</li></ul><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c6011d116d12c7d74974d53ba8de87e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1122\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb\" width=\"1122\" data-original=\"https://pic3.zhimg.com/v2-c6011d116d12c7d74974d53ba8de87e2_r.jpg\" data-original-token=\"v2-62dc67e2a1bbf5e45b138149b6668e33\"/></figure><p data-pid=\"thb0CMer\">FileReader 对象提供了以下方法来加载文件：</p><ul><li data-pid=\"xpdGzj2K\"><code>readAsArrayBuffer()</code>：读取指定 Blob 中的内容，完成之后，<code>result</code> 属性中保存的将是被读取文件的 <code>ArrayBuffer</code> 数据对象；</li><li data-pid=\"4oZtyEFs\"><code>FileReader.readAsBinaryString()</code>：读取指定 Blob 中的内容，完成之后，<code>result</code> 属性中将包含所读取文件的原始二进制数据；</li><li data-pid=\"Pkbut03T\"><code>FileReader.readAsDataURL()</code>：读取指定 Blob 中的内容，完成之后，<code>result</code> 属性中将包含一个<code>data: URL</code> 格式的 Base64 字符串以表示所读取文件的内容。</li><li data-pid=\"-xDj-BB1\"><code>FileReader.readAsText()</code>：读取指定 Blob 中的内容，完成之后，<code>result</code> 属性中将包含一个字符串以表示所读取的文件内容。</li></ul><p data-pid=\"MYRAIjs9\">可以看到，上面这些方法都接受一个要读取的 blob 对象作为参数，读取完之后会将读取的结果放入对象的 <code>result</code> 属性中。</p><h3><b>（2）事件处理</b></h3><p data-pid=\"lTlz4FYb\">FileReader 对象常用的事件如下：</p><ul><li data-pid=\"MgZfrv-Y\"><code>abort</code>：该事件在读取操作被中断时触发；</li><li data-pid=\"XqaiMt6u\"><code>error</code>：该事件在读取操作发生错误时触发；</li><li data-pid=\"pRGmbZrV\"><code>load</code>：该事件在读取操作完成时触发；</li><li data-pid=\"0KU8DW0I\"><code>progress</code>：该事件在读取 Blob 时触发。</li></ul><p data-pid=\"ARE6e7-W\">当然，这些方法可以加上前置 on 后在HTML元素上使用，比如<code>onload</code>、<code>onerror</code>、<code>onabort</code>、<code>onprogress</code>。除此之外，由于<code>FileReader</code>对象继承自<code>EventTarget</code>，因此还可以使用 <code>addEventListener()</code> 监听上述事件。</p><p data-pid=\"4cU4gnex\">下面来看一个简单的例子，首先定义一个 <code>input</code> 输入框用于上传文件：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;input type=&#34;file&#34; id=&#34;fileInput&#34;&gt;\n</code></pre></div><p data-pid=\"pSz1hPvr\">接下来定义 <code>input</code> 标签的 <code>onchange</code> 事件处理函数和<code>FileReader</code>对象的<code>onload</code>事件处理函数：</p><div class=\"highlight\"><pre><code class=\"language-text\">const fileInput = document.getElementById(&#34;fileInput&#34;);\n\nconst reader = new FileReader();\n\nfileInput.onchange = (e) =&gt; {\n    reader.readAsText(e.target.files[0]);\n}\n\nreader.onload = (e) =&gt; {\n    console.log(e.target.result);\n}\n</code></pre></div><p data-pid=\"O-X20oc4\">这里，首先创建了一个 <code>FileReader</code> 对象，当文件上传成功时，使用 <code>readAsText()</code> 方法读取 <code>File</code> 对象，当读取操作完成时打印读取结果。</p><p data-pid=\"1f4bB9QC\">使用上述例子读取文本文件时，就是比较正常的。如果读取二进制文件，比如png格式的图片，往往会产生乱码，如下：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ad2716c07e7a4a9dcba1c01c0fd1a308_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2874\" data-rawheight=\"1456\" class=\"origin_image zh-lightbox-thumb\" width=\"2874\" data-original=\"https://pic1.zhimg.com/v2-ad2716c07e7a4a9dcba1c01c0fd1a308_r.jpg\" data-original-token=\"v2-66e60455cc6617b8bf409ba2796d3808\"/></figure><p data-pid=\"g5dOSR8G\">那该如何处理这种二进制数据呢？<code>readAsDataURL()</code> 是一个不错的选择，它可以将读取的文件的内容转换为 base64 数据的 URL 表示。这样，就可以直接将 URL 用在需要源链接的地方，比如 img 标签的 src 属性。</p><p data-pid=\"23N_koeU\">对于上述例子，将 readAsText 方法改为 <code>readAsDataURL()</code>：</p><div class=\"highlight\"><pre><code class=\"language-text\">const fileInput = document.getElementById(&#34;fileInput&#34;);\n\nconst reader = new FileReader();\n\nfileInput.onchange = (e) =&gt; {\n    reader.readAsDataURL(e.target.files[0]);\n}\n\nreader.onload = (e) =&gt; {\n    console.log(e.target.result);\n}\n</code></pre></div><p data-pid=\"6M52qJ_M\">这时，再次上传二进制图片时，就会在控制台打印一个 base64 编码的 URL，如下：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-14e4fc24c8bc95d2e01fe9e1eb931b76_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2876\" data-rawheight=\"1482\" class=\"origin_image zh-lightbox-thumb\" width=\"2876\" data-original=\"https://pic3.zhimg.com/v2-14e4fc24c8bc95d2e01fe9e1eb931b76_r.jpg\" data-original-token=\"v2-646dcd9c62c46c1831096af30f307e90\"/></figure><p data-pid=\"TXjN6Zjv\">下面来修改一下这个例子，将上传的图片通过以上方式显示在页面上：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;input type=&#34;file&#34; id=&#34;fileInput&#34; /&gt;\n\n&lt;img id=&#34;preview&#34; /&gt;\n\nconst fileInput = document.getElementById(&#34;fileInput&#34;);\nconst preview = document.getElementById(&#34;preview&#34;);\nconst reader = new FileReader();\n\nfileInput.onchange = (e) =&gt; {\n  reader.readAsDataURL(e.target.files[0]);\n};\n\nreader.onload = (e) =&gt; {\n  preview.src = e.target.result;\n  console.log(e.target.result);\n};\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a2dba89e28e0cf8a0bd1089e8c3683a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2840\" data-rawheight=\"1468\" class=\"origin_image zh-lightbox-thumb\" width=\"2840\" data-original=\"https://pic4.zhimg.com/v2-a2dba89e28e0cf8a0bd1089e8c3683a7_r.jpg\" data-original-token=\"v2-11a692d60a996a1159c999b75b1cb3ff\"/></figure><p data-pid=\"H4oraLX8\">当上传大文件时，可以通过 <code>progress</code> 事件来监控文件的读取进度：</p><div class=\"highlight\"><pre><code class=\"language-text\">const reader = new FileReader();\n\nreader.onprogress = (e) =&gt; {\n  if (e.loaded &amp;&amp; e.total) {\n    const percent = (event.loaded / event.total) * 100;\n    console.log(`上传进度: ${Math.round(percent)} %`);\n  }\n});\n</code></pre></div><p data-pid=\"iIdI2N-8\"><code>progress</code> 事件提供了两个属性：<code>loaded</code>（已读取量）和<code>total</code>（需读取总量）。</p><h2><b>4. ArrayBuffer</b> </h2><h3><b>（1）ArrayBuffer</b></h3><p data-pid=\"PIYzhWud\">ArrayBuffer 对象用来表示通用的、固定长度的<b>原始二进制数据缓冲区</b>。ArrayBuffer 的内容不能直接操作，只能通过 DataView 对象或 TypedArrray 对象来访问。这些对象用于读取和写入缓冲区内容。</p><p data-pid=\"aP7u7ShE\">ArrayBuffer 本身就是一个黑盒，不能直接读写所存储的数据，需要借助以下视图对象来读写：</p><ul><li data-pid=\"txMDVYtV\"><b>TypedArray</b>：用来生成内存的视图，通过9个构造函数，可以生成9种数据格式的视图。</li><li data-pid=\"UZzoGGV4\"><b>DataViews</b>：用来生成内存的视图，可以自定义格式和字节序。</li></ul><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-15d46c9b432e7cb147a0bbdbd6776ca6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1029\" data-rawheight=\"729\" class=\"origin_image zh-lightbox-thumb\" width=\"1029\" data-original=\"https://pic3.zhimg.com/v2-15d46c9b432e7cb147a0bbdbd6776ca6_r.jpg\" data-original-token=\"v2-8881a8995d94d64d6847b82659ae9220\"/></figure><p data-pid=\"Q1DVMqIT\">TypedArray视图和 DataView视图的区别主要是<b>字节序</b>，前者的数组成员都是同一个数据类型，后者的数组成员可以是不同的数据类型。</p><p data-pid=\"X9iY1zj4\">那 ArrayBuffer 与 Blob 有啥区别呢？根据 ArrayBuffer 和 Blob 的特性，Blob 作为一个整体文件，适合用于传输；当需要对二进制数据进行操作时（比如要修改某一段数据时），就可以使用 ArrayBuffer。</p><p data-pid=\"f2P7NU_w\">下面来看看 ArrayBuffer 有哪些常用的方法和属性。</p><h3><b>① new ArrayBuffer()</b></h3><p data-pid=\"ldhX5jSK\">ArrayBuffer 可以通过以下方式生成：</p><div class=\"highlight\"><pre><code class=\"language-text\">new ArrayBuffer(bytelength)\n</code></pre></div><p data-pid=\"7JACFdSn\"><code>ArrayBuffer()</code>构造函数可以分配指定字节数量的缓冲区，其参数和返回值如下：</p><ul><li data-pid=\"9GWQPvwl\"><b>参数</b>：它接受一个参数，即 bytelength，表示要创建数组缓冲区的大小（以字节为单位。）；</li><li data-pid=\"IqKFhh2r\"><b>返回值</b>：返回一个新的指定大小的ArrayBuffer对象，内容初始化为0。</li></ul><h3><b>② ArrayBuffer.prototype.byteLength</b></h3><p data-pid=\"QcUzCrdA\">ArrayBuffer 实例上有一个 byteLength 属性，它是一个只读属性，表示 ArrayBuffer 的 byte 的大小，在 ArrayBuffer 构造完成时生成，不可改变。来看例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">const buffer = new ArrayBuffer(16); \nconsole.log(buffer.byteLength);  // 16\n</code></pre></div><h3><b>③ ArrayBuffer.prototype.slice()</b></h3><p data-pid=\"X1KNpOOr\">ArrayBuffer 实例上还有一个 slice 方法，该方法可以用来截取 ArrayBuffer 实例，它返回一个新的 ArrayBuffer ，它的内容是这个 ArrayBuffer 的字节副本，从 begin（包括），到 end（不包括）。来看例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">const buffer = new ArrayBuffer(16); \nconsole.log(buffer.slice(0, 8));  // 16\n</code></pre></div><p data-pid=\"_wCXecn5\">这里会从 buffer 对象上将前8个字节生成一个新的ArrayBuffer对象。这个方法实际上有两步操作，首先会分配一段指定长度的内存，然后拷贝原来ArrayBuffer对象的置顶部分。</p><h3><b>④ ArrayBuffer.isView()</b></h3><p data-pid=\"tq5QUF6B\">ArrayBuffer 上有一个 isView()方法，它的返回值是一个布尔值，如果参数是 ArrayBuffer 的视图实例则返回 true，例如类型数组对象或 DataView 对象；否则返回 false。简单来说，这个方法就是用来判断参数是否是 TypedArray 实例或者 DataView 实例：</p><div class=\"highlight\"><pre><code class=\"language-text\">const buffer = new ArrayBuffer(16);\nArrayBuffer.isView(buffer)   // false\n\nconst view = new Uint32Array(buffer);\nArrayBuffer.isView(view)     // true\n</code></pre></div><h3><b>（2）TypedArray</b></h3><p data-pid=\"X8Sal9Jp\">TypedArray 对象一共提供 9 种类型的视图，每一种视图都是一种构造函数。如下：</p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>元素</th><th>类型化数组</th><th>字节</th><th>描述</th></tr><tr><td>Int8</td><td>Int8Array</td><td>1</td><td>8 位有符号整数</td></tr><tr><td>Uint8</td><td>Uint8Array</td><td>1</td><td>8 位无符号整数</td></tr><tr><td>Uint8C</td><td>Uint8ClampedArray</td><td>1</td><td>8 位无符号整数</td></tr><tr><td>Int16</td><td>Int16Array</td><td>2</td><td>16 位有符号整数</td></tr><tr><td>Uint16</td><td>Uint16Array</td><td>2</td><td>16 位无符号整数</td></tr><tr><td>Int32</td><td>Int32Array</td><td>4</td><td>32 位有符号整数</td></tr><tr><td>Uint32</td><td>Uint32Array</td><td>4</td><td>32 位无符号整数</td></tr><tr><td>Float32</td><td>Float32Array</td><td>4</td><td>32 位浮点</td></tr><tr><td>Float64</td><td>Float64Array</td><td>8</td><td>64 位浮点</td></tr></tbody></table><p data-pid=\"78peojic\">来看看这些都是什么意思：</p><ul><li data-pid=\"-7g-6Lay\"><b>Uint8Array：</b> 将 ArrayBuffer 中的每个字节视为一个整数，可能的值从 0 到 255 （一个字节等于 8 位）。 这样的值称为“8 位无符号整数”。</li><li data-pid=\"NQJfEHMb\"><b>Uint16Array</b>：将 ArrayBuffer 中任意两个字节视为一个整数，可能的值从 0 到 65535。 这样的值称为“16 位无符号整数”。</li><li data-pid=\"SAfEFZVv\"><b>Uint32Array：</b>将 ArrayBuffer 中任何四个字节视为一个整数，可能值从 0 到 4294967295，这样的值称为“32 位无符号整数”。</li></ul><p data-pid=\"HbTc9KFL\">这些构造函数生成的对象统称为 TypedArray 对象。它们和正常的数组很类似，都有<code>length</code> 属性，都能用索引获取数组元素，所有数组的方法都可以在类型化数组上面使用。</p><p data-pid=\"gk-Tws5z\"><b>那类型化数组和数组有什么区别呢？</b></p><ul><li data-pid=\"TCCn41zS\">类型化数组的元素都是连续的，不会为空；</li><li data-pid=\"elWEBYb7\">类型化数组的所有成员的类型和格式相同；</li><li data-pid=\"VUXWvA6_\">类型化数组元素默认值为 0；</li><li data-pid=\"_C5ElhPJ\">类型化数组本质上只是一个视图层，不会存储数据，数据都存储在更底层的 ArrayBuffer 对象中。</li></ul><p data-pid=\"WHgI28Wc\">下面来看看 TypedArray 都有哪些常用的方法和属性。</p><h3><b>① new TypedArray()</b></h3><p data-pid=\"oUuaJSCv\">TypedArray 的语法如下（TypedArray只是一个概念，实际使用的是那9个对象）：</p><div class=\"highlight\"><pre><code class=\"language-text\">new Int8Array(length);\nnew Int8Array(typedArray);\nnew Int8Array(object);\nnew Int8Array(buffer [, byteOffset [, length]]);\n</code></pre></div><p data-pid=\"jzdek9Rn\">可以看到，TypedArray 有多种用法，下面来分别看一下。</p><ul><li data-pid=\"jfzPvNCG\"><b>TypedArray(length)</b> ：通过分配指定长度内容进行分配</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">let view = new Int8Array(16);\nview[0] = 10;\nview[10] = 6;\nconsole.log(view);\n</code></pre></div><p data-pid=\"tXyEaDXz\">输出结果如下：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2dc25897f81e53b73c711b801db5412a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1234\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1234\" data-original=\"https://pic3.zhimg.com/v2-2dc25897f81e53b73c711b801db5412a_r.jpg\" data-original-token=\"v2-156dc886bc48f87b3ee25a814ea8b4c1\"/></figure><p data-pid=\"3kyzQBF9\">这里就生成了一个 16个元素的 Int8Array 数组，除了手动赋值的元素，其他元素的初始值都是 0。</p><ul><li data-pid=\"XMMGtOiB\"><b>TypedArray(typeArray)</b> ：接收一个视图实例作为参数</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">const view = new Int8Array(new Uint8Array(6));\nview[0] = 10;\nview[3] = 6;\nconsole.log(view);\n</code></pre></div><p data-pid=\"llQ2wHsF\">输出结果如下：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-40bf12ff88fcaa7d86c28f33f1486b9c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1232\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb\" width=\"1232\" data-original=\"https://pic1.zhimg.com/v2-40bf12ff88fcaa7d86c28f33f1486b9c_r.jpg\" data-original-token=\"v2-fffc70cd99ce3881e2d969f16ac98eb7\"/></figure><ul><li data-pid=\"7fy9nFYY\"><b>TypedArray(object)</b> ：参数可以是一个普通数组</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">const view = new Int8Array([1, 2, 3, 4, 5]);\nview[0] = 10;\nview[3] = 6;\nconsole.log(view);\n</code></pre></div><p data-pid=\"UM3OKAqb\">输出结果如下：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0f41b7880e0cc33ed0bea7b71ec14bdb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1262\" data-rawheight=\"580\" class=\"origin_image zh-lightbox-thumb\" width=\"1262\" data-original=\"https://pic4.zhimg.com/v2-0f41b7880e0cc33ed0bea7b71ec14bdb_r.jpg\" data-original-token=\"v2-012ee769c6c0bc9847f9311a8cf42527\"/></figure><p data-pid=\"zES_6m9y\">需要注意，TypedArray视图会开辟一段新的内存，不会在原数组上建立内存。当然，这里创建的类型化数组也能转换回普通数组：</p><div class=\"highlight\"><pre><code class=\"language-text\">Array.prototype.slice.call(view); // [10, 2, 3, 6, 5]\n</code></pre></div><ul><li data-pid=\"P3pYIYLU\"><b>TypeArray(buffer [, byteOffset [, length]])</b> ：</li></ul><p data-pid=\"DiHIftpP\">这种方式有三个参数，其中第一个参数是一个ArrayBuffer对象；第二个参数是视图开始的字节序号，默认从0开始，可选；第三个参数是视图包含的数据个数，默认直到本段内存区域结束。</p><div class=\"highlight\"><pre><code class=\"language-text\">const buffer = new ArrayBuffer(8);\nconst view1 = new Int32Array(buffer); \nconst view2 = new Int32Array(buffer, 4); \nconsole.log(view1, view2);\n</code></pre></div><p data-pid=\"3DVCIPuJ\">输出结果如下：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d4d88336c40dd67173c1e31f8f5c1696_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1218\" data-rawheight=\"760\" class=\"origin_image zh-lightbox-thumb\" width=\"1218\" data-original=\"https://pic3.zhimg.com/v2-d4d88336c40dd67173c1e31f8f5c1696_r.jpg\" data-original-token=\"v2-e1c7ac830ab0164d8d586e54e15847bd\"/></figure><h3><b>② BYTES_PER_ELEMENT</b></h3><p data-pid=\"ACxG1din\">每种视图的构造函数都有一个 <code>BYTES_PER_ELEMENT</code> 属性，表示这种数据类型占据的字节数：</p><div class=\"highlight\"><pre><code class=\"language-text\">Int8Array.BYTES_PER_ELEMENT // 1\nUint8Array.BYTES_PER_ELEMENT // 1\nInt16Array.BYTES_PER_ELEMENT // 2\nUint16Array.BYTES_PER_ELEMENT // 2\nInt32Array.BYTES_PER_ELEMENT // 4\nUint32Array.BYTES_PER_ELEMENT // 4\nFloat32Array.BYTES_PER_ELEMENT // 4\nFloat64Array.BYTES_PER_ELEMENT // 8\n</code></pre></div><p data-pid=\"49nNTE6C\"><code>BYTES_PER_ELEMENT</code> 属性也可以在类型化数组的实例上获取：</p><div class=\"highlight\"><pre><code class=\"language-text\">const buffer = new ArrayBuffer(16); \nconst view = new Uint32Array(buffer); \nconsole.log(Uint32Array.BYTES_PER_ELEMENT); // 4\n</code></pre></div><h3><b>③ TypedArray.prototype.buffer</b></h3><p data-pid=\"tZBTtEsh\">TypedArray 实例的 buffer 属性会返回内存中对应的 ArrayBuffer对象，只读属性。</p><div class=\"highlight\"><pre><code class=\"language-text\">const a = new Uint32Array(8);\nconst b = new Int32Array(a.buffer); \nconsole.log(a, b);\n</code></pre></div><p data-pid=\"o2h4csKo\">输出结果如下：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-408f7129cc100e74b353234ed5a6dd1d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1260\" data-rawheight=\"1156\" class=\"origin_image zh-lightbox-thumb\" width=\"1260\" data-original=\"https://pic2.zhimg.com/v2-408f7129cc100e74b353234ed5a6dd1d_r.jpg\" data-original-token=\"v2-2e7c9af6473b36263c7f40db0b5a55fa\"/></figure><h3><b>④ TypedArray.prototype.slice()</b></h3><p data-pid=\"nO40fR6C\">TypeArray 实例的 slice方法可以返回一个指定位置的新的 TypedArray实例。</p><div class=\"highlight\"><pre><code class=\"language-text\">const view = new Int16Array(8);\nconsole.log(view.slice(0 ,5));\n</code></pre></div><p data-pid=\"RJbQVCbE\">输出结果如下：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b4d6e4f575b7a234c832380e556fba2b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1260\" data-rawheight=\"526\" class=\"origin_image zh-lightbox-thumb\" width=\"1260\" data-original=\"https://pic4.zhimg.com/v2-b4d6e4f575b7a234c832380e556fba2b_r.jpg\" data-original-token=\"v2-c1f5ef16fa2e140a5e79aec43730a705\"/></figure><h3><b>⑤ byteLength 和 length</b></h3><ul><li data-pid=\"V2gXpyub\"><code>byteLength</code>：返回 TypedArray 占据的内存长度，单位为字节；</li><li data-pid=\"XEBWc-vS\"><code>length</code>：返回 TypedArray 元素个数；</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">const view = new Int16Array(8);\nview.length;      // 8\nview.byteLength;  // 16\n</code></pre></div><h3><b>（3）DataView</b></h3><p data-pid=\"v65qZxQN\">说完 ArrayBuffer，下面来看看另一种操作 ArrayBuffer 的方式：DataView。<b>DataView</b> 视图是一个可以从 二进制 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。</p><p data-pid=\"nK9vYGiz\">DataView视图提供更多操作选项，而且支持设定字节序。本来，在设计目的上，ArrayBuffer对象的各种TypedArray视图，是用来向网卡、声卡之类的本机设备传送数据，所以使用本机的字节序就可以了；而DataView视图的设计目的，是用来处理网络设备传来的数据，所以大端字节序或小端字节序是可以自行设定的。</p><h3><b>① new DataView()</b></h3><p data-pid=\"P4y1kfua\">DataView视图可以通过构造函数来创建，它的参数是一个ArrayBuffer对象，生成视图。其语法如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">new DataView(buffer [, byteOffset [, byteLength]])\n</code></pre></div><p data-pid=\"DpSPpb9B\">其有三个参数：</p><ul><li data-pid=\"bDNLKQqI\"><code>buffer</code>：一个已经存在的 ArrayBuffer 对象，DataView 对象的数据源。</li><li data-pid=\"baQ3s7XH\"><code>byteOffset</code>：可选，此 DataView 对象的第一个字节在 buffer 中的字节偏移。如果未指定，则默认从第一个字节开始。</li><li data-pid=\"dg6_-MIx\"><code>byteLength</code>：可选，此 DataView 对象的字节长度。如果未指定，这个视图的长度将匹配 buffer 的长度。</li></ul><p data-pid=\"TczdE0FT\">来看一个例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">const buffer = new ArrayBuffer(16);\nconst view = new DataView(buffer);\nconsole.log(view);\n</code></pre></div><p data-pid=\"oNB7HdbO\">打印结果如下：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3d566a58786474b7b1c2175ea97131f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"616\" data-rawheight=\"540\" class=\"origin_image zh-lightbox-thumb\" width=\"616\" data-original=\"https://pic2.zhimg.com/v2-3d566a58786474b7b1c2175ea97131f9_r.jpg\" data-original-token=\"v2-665283236d2ea3159a258e9fe5b7883e\"/></figure><h3><b>② buffer、byteLength、byteOffset</b></h3><p data-pid=\"CWtv7_Qe\">DataView实例有以下常用属性：</p><ul><li data-pid=\"h0sNiXxQ\"><code>buffer</code>：返回对应的ArrayBuffer对象；</li><li data-pid=\"gDb-DLm2\"><code>byteLength</code>：返回占据的内存字节长度；</li><li data-pid=\"BXSSwdhr\"><code>byteOffset</code>：返回当前视图从对应的ArrayBuffer对象的哪个字节开始。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">const buffer = new ArrayBuffer(16);\nconst view = new DataView(buffer);\nview.buffer;\nview.byteLength;\nview.byteOffset;\n</code></pre></div><p data-pid=\"8kLaUPWs\">打印结果如下：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6f85c97ce04303d2a3473e5428cb8731_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1244\" data-rawheight=\"508\" class=\"origin_image zh-lightbox-thumb\" width=\"1244\" data-original=\"https://pic2.zhimg.com/v2-6f85c97ce04303d2a3473e5428cb8731_r.jpg\" data-original-token=\"v2-8967dde0d04bfc2c064815478595596d\"/></figure><h3><b>③ 读取内存</b></h3><p data-pid=\"KuWQqLye\">DataView 实例提供了以下方法来读取内存，它们的参数都是一个字节序号，表示开始读取的字节位置：</p><ul><li data-pid=\"ZupiJRtB\">getInt8：读取1个字节，返回一个8位整数。</li><li data-pid=\"Cjtrmwqm\">getUint8：读取1个字节，返回一个无符号的8位整数。</li><li data-pid=\"mVYRomKs\">getInt16：读取2个字节，返回一个16位整数。</li><li data-pid=\"zaYgqOUW\">getUint16：读取2个字节，返回一个无符号的16位整数。</li><li data-pid=\"OThCKGLF\">getInt32：读取4个字节，返回一个32位整数。</li><li data-pid=\"Ld02kzUc\">getUint32：读取4个字节，返回一个无符号的32位整数。</li><li data-pid=\"cuPQGfFY\">getFloat32：读取4个字节，返回一个32位浮点数。</li><li data-pid=\"TT1fIm6V\">getFloat64：读取8个字节，返回一个64位浮点数。</li></ul><p data-pid=\"deIy2GnA\">下面来看一个例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">const buffer = new ArrayBuffer(24);\nconst view = new DataView(buffer);\n\n// 从第1个字节读取一个8位无符号整数\nconst view1 = view.getUint8(0);\n\n// 从第2个字节读取一个16位无符号整数\nconst view2 = view.getUint16(1);\n\n// 从第4个字节读取一个16位无符号整数\nconst view3 = view.getUint16(3);\n</code></pre></div><h3><b>④ 写入内存</b></h3><p data-pid=\"rSi1RWoC\">DataView 实例提供了以下方法来写入内存，它们都接受两个参数，第一个参数表示开始写入数据的字节序号，第二个参数为写入的数据：</p><ul><li data-pid=\"k8anFUsd\">setInt8：写入1个字节的8位整数。</li><li data-pid=\"r_h4qFkQ\">setUint8：写入1个字节的8位无符号整数。</li><li data-pid=\"GNFcoAI6\">setInt16：写入2个字节的16位整数。</li><li data-pid=\"Ip1mCaPR\">setUint16：写入2个字节的16位无符号整数。</li><li data-pid=\"2i8Oo7pv\">setInt32：写入4个字节的32位整数。</li><li data-pid=\"GWaLeygC\">setUint32：写入4个字节的32位无符号整数。</li><li data-pid=\"fl5_TQNM\">setFloat32：写入4个字节的32位浮点数。</li><li data-pid=\"Q9uuyrXB\">setFloat64：写入8个字节的64位浮点数。</li></ul><h2><b>5. Object URL</b> </h2><p data-pid=\"-FSyw9eC\">Object URL（MDN定义名称）又称Blob URL（W3C定义名称），是HTML5中的新标准。它是一个用来表示File Object 或Blob Object 的URL。在网页中，我们可能会看到过这种形式的 Blob URL：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b2aa5d7fb287c35e22c94bdceb968a7b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"794\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb\" width=\"794\" data-original=\"https://pic4.zhimg.com/v2-b2aa5d7fb287c35e22c94bdceb968a7b_r.jpg\" data-original-token=\"v2-9f3bdfaa33a088e309196ecd4ffe1fa9\"/></figure><p data-pid=\"bEbpXELf\">其实 Blob URL/Object URL 是一种伪协议，允许将 Blob 和 File 对象用作图像、二进制数据下载链接等的 URL 源。</p><p data-pid=\"niBaQsOP\">对于 Blob/File 对象，可以使用 URL构造函数的 <code>createObjectURL()</code> 方法创建将给出的对象的 URL。这个 URL 对象表示指定的 File 对象或 Blob 对象。我们可以在<code>&lt;img&gt;</code>、<code>&lt;script&gt;</code> 标签中或者 <code>&lt;a&gt;</code> 和 <code>&lt;link&gt;</code> 标签的 <code>href</code> 属性中使用这个 URL。</p><p data-pid=\"BIGJ24by\">来看一个简单的例子，首先定义一个文件上传的 input 和一个 图片预览的 img：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;input type=&#34;file&#34; id=&#34;fileInput&#34; /&gt;\n\n&lt;img id=&#34;preview&#34; /&gt;\n</code></pre></div><p data-pid=\"YYBCA5rL\">再来使用 <code>URL.createObjectURL()</code> 将File 对象转化为一个 URL：</p><div class=\"highlight\"><pre><code class=\"language-text\">const fileInput = document.getElementById(&#34;fileInput&#34;);\nconst preview = document.getElementById(&#34;preview&#34;);\n\nfileInput.onchange = (e) =&gt; {\n  preview.src = URL.createObjectURL(e.target.files[0]);\n  console.log(preview.src);\n};\n</code></pre></div><p data-pid=\"BRAPTYVV\">可以看到，上传的图片转化成了一个 URL，并显示在了屏幕上：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-044078a9b91b14b907a180306bf19638_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2204\" data-rawheight=\"440\" class=\"origin_image zh-lightbox-thumb\" width=\"2204\" data-original=\"https://pic1.zhimg.com/v2-044078a9b91b14b907a180306bf19638_r.jpg\" data-original-token=\"v2-2ab9529e1d453c1a4db81d71054123d2\"/></figure><p data-pid=\"HsHZHXnb\">那这个 API 有什么意义呢？可以将Blob/File对象转化为URL，通过这个URL 就可以实现文件下载或者图片显示等。</p><p data-pid=\"EqEfMDe9\">当我们使用<code>createObjectURL()</code>方法创建一个data URL 时，就需要使用<code>revokeObjectURL()</code>方法从内存中清除它来释放内存。虽然浏览器会在文档卸载时自动释放 Data URL，但为了提高性能，我们应该使用<code>createObjectURL()</code>来手动释放它。<code>revokeObjectURL()</code>方法接受一个Data URL 作为其参数，返回<code>undefined</code>。下面来看一个例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">const objUrl = URL.createObjectURL(new File([&#34;&#34;], &#34;filename&#34;));\nconsole.log(objUrl);\nURL.revokeObjectURL(objUrl);\n</code></pre></div><h2><b>6. Base64</b> </h2><p data-pid=\"_GnQ11uV\">Base64 是一种基于64个可打印字符来表示二进制数据的表示方法。Base64 编码普遍应用于需要通过被设计为处理文本数据的媒介上储存和传输二进制数据而需要编码该二进制数据的场景。这样是为了保证数据的完整并且不用在传输过程中修改这些数据。</p><p data-pid=\"NDdk2HPj\">在 JavaScript 中，有两个函数被分别用来处理解码和编码 <i>base64</i> 字符串：</p><ul><li data-pid=\"4FquQvc6\"><code>atob()</code>：解码，解码一个 Base64 字符串；</li><li data-pid=\"VOGsCUTR\"><code>btoa()</code>：编码，从一个字符串或者二进制数据编码一个 Base64 字符串。</li></ul><div class=\"highlight\"><pre><code class=\"language-text\">btoa(&#34;JavaScript&#34;)       // &#39;SmF2YVNjcmlwdA==&#39;\natob(&#39;SmF2YVNjcmlwdA==&#39;) // &#39;JavaScript&#39;\n</code></pre></div><p data-pid=\"YQBYASou\">那 base64 的实际应用场景有哪些呢？其实多数场景就是基于Data URL的。比如，使用<code>toDataURL()</code>方法把 canvas 画布内容生成 base64 编码格式的图片：</p><div class=\"highlight\"><pre><code class=\"language-text\">const canvas = document.getElementById(&#39;canvas&#39;); \nconst ctx = canvas.getContext(&#34;2d&#34;);\nconst dataUrl = canvas.toDataURL();\n</code></pre></div><p data-pid=\"duCBVlOR\">除此之外，还可以使用<code>readAsDataURL()</code>方法把上传的文件转为base64格式的data URI，比如上传头像展示或者编辑：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;input type=&#34;file&#34; id=&#34;fileInput&#34; /&gt;\n\n&lt;img id=&#34;preview&#34; /&gt;\n\nconst fileInput = document.getElementById(&#34;fileInput&#34;);\nconst preview = document.getElementById(&#34;preview&#34;);\nconst reader = new FileReader();\n\nfileInput.onchange = (e) =&gt; {\n  reader.readAsDataURL(e.target.files[0]);\n};\n\nreader.onload = (e) =&gt; {\n  preview.src = e.target.result;\n  console.log(e.target.result);\n};\n</code></pre></div><p data-pid=\"ApT7-V2E\">效果如下，将图片（二进制数据）转化为可打印的字符，也便于数据的传输：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-935b30d8d9b25f60290b8f5c7f15f975_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1500\" data-rawheight=\"775\" class=\"origin_image zh-lightbox-thumb\" width=\"1500\" data-original=\"https://pic2.zhimg.com/v2-935b30d8d9b25f60290b8f5c7f15f975_r.jpg\" data-original-token=\"v2-42539cf674f624d2410bef30b62d70d8\"/></figure><p data-pid=\"FlWLumG1\">另外，一些小的图片都可以使用 base64 格式进行展示，<code>img</code>标签和<code>background</code>的 <code>url</code> 属性都支持使用base64 格式的图片，这样做也可以减少 HTTP 请求。</p><h2><b>7. 格式转化</b> </h2><p data-pid=\"2Z4B10JR\">看完这些基本的概念，下面就来看看常用格式之间是如何转换的。</p><h3><b>（1）ArrayBuffer → blob</b></h3><div class=\"highlight\"><pre><code class=\"language-text\">const blob = new Blob([new Uint8Array(buffer, byteOffset, length)]);\n</code></pre></div><h3><b>（2）ArrayBuffer → base64</b></h3><div class=\"highlight\"><pre><code class=\"language-text\">const base64 = btoa(String.fromCharCode.apply(null, new Uint8Array(arrayBuffer)));\n</code></pre></div><h3><b>（3）base64 → blob</b></h3><div class=\"highlight\"><pre><code class=\"language-text\">const base64toBlob = (base64Data, contentType, sliceSize) =&gt; {\n  const byteCharacters = atob(base64Data);\n  const byteArrays = [];\n\n  for (let offset = 0; offset &lt; byteCharacters.length; offset += sliceSize) {\n    const slice = byteCharacters.slice(offset, offset + sliceSize);\n\n    const byteNumbers = new Array(slice.length);\n    for (let i = 0; i &lt; slice.length; i++) {\n      byteNumbers[i] = slice.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n    byteArrays.push(byteArray);\n  }\n\n  const blob = new Blob(byteArrays, {type: contentType});\n  return blob;\n}\n</code></pre></div><h3><b>（4）blob → ArrayBuffer</b></h3><div class=\"highlight\"><pre><code class=\"language-text\">function blobToArrayBuffer(blob) { \n  return new Promise((resolve, reject) =&gt; {\n      const reader = new FileReader();\n      reader.onload = () =&gt; resolve(reader.result);\n      reader.onerror = () =&gt; reject;\n      reader.readAsArrayBuffer(blob);\n  });\n}\n</code></pre></div><h3><b>（5）blob → base64</b></h3><div class=\"highlight\"><pre><code class=\"language-text\">function blobToBase64(blob) {\n  return new Promise((resolve) =&gt; {\n    const reader = new FileReader();\n    reader.onloadend = () =&gt; resolve(reader.result);\n    reader.readAsDataURL(blob);\n  });\n}\n</code></pre></div><h3><b>（6）blob → Object URL</b></h3><div class=\"highlight\"><pre><code class=\"language-text\">const objectUrl = URL.createObjectURL(blob);</code></pre></div><p></p>",
            "voteup_count": 584,
            "column": {
                "id": "c_1466728580172820480",
                "type": "column",
                "url_token": "c_1466728580172820480",
                "title": "前端进阶之路",
                "url": "https://zhuanlan.zhihu.com/c_1466728580172820480",
                "created": 1642475344,
                "updated": 1642475344,
                "description": "",
                "image_url": "https://pic1.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 28
        },
        "created": "2022-09-28T10:40:31+08:00"
    },
    {
        "content": {
            "id": 2280903324,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/367082679/answer/2280903324",
            "created_time": 1640112899,
            "updated_time": 1640113200,
            "question": {
                "type": "question",
                "id": 367082679,
                "title": "为什么部分大一学生认为线性代数听不懂？",
                "question_type": "normal",
                "created": 1579445796,
                "updated_time": 1581609488,
                "url": "https://www.zhihu.com/question/367082679",
                "is_deleted": false
            },
            "author": {
                "id": "3723d7ee02464838e0b78042b498aab8",
                "url_token": "maryam-li",
                "name": "可乐少女",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-4b222c8bb1c89f663807d391365d391b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-4b222c8bb1c89f663807d391365d391b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/3723d7ee02464838e0b78042b498aab8",
                "user_type": "people",
                "headline": "人民教师",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "https://pica.zhimg.com/v2-385ee6110274e9b39d0a24527c8e2969_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 137,
            "comment_count": 39,
            "thanks_count": 34,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"j55Mvfq_\">刚好这学期教线性代数，用两种教材教了不同的两波学生。</p><p data-pid=\"5BbtLeV2\">一个班是传统工科的教学方法，使用类似同济版的教材，以解线性方程组入手，引入行列式和克拉默法则，矩阵，矩阵的秩，逆阵等概念及相关性质。之后莫名其妙的连接上向量空间，特征值，特征向量，对角化，二次型等内容。别说学生了，作为老师我自己都很难把散落全书的散碎知识点串联起来，感觉每一个概念的出现都是莫名其妙的，就是为了在这门课上讲这个内容而讲这个内容。学生很难从这些繁杂的知识点中理出来一条清晰的脉络，搞明白这门课到底在说啥。</p><p data-pid=\"EnZSiiHZ\">另一个班是未来学院实验性质的班级，使用如下教材</p><figure data-size=\"small\"><img src=\"https://picx.zhimg.com/50/v2-971db80cd20ccc3e21a3fede489c58dd_720w.jpg?source=2c26e567\" data-rawwidth=\"1125\" data-rawheight=\"1210\" data-size=\"small\" data-original-token=\"v2-385ee6110274e9b39d0a24527c8e2969\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-cfceab513ac9ad9cbd944275ee0df7b1_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1125\" data-original=\"https://picx.zhimg.com/v2-971db80cd20ccc3e21a3fede489c58dd_r.jpg?source=2c26e567\"/></figure><p data-pid=\"qZW1Z63F\">读这本书让我茅塞顿开，感觉这才是说人话嘛。通过足够多的案例引入，解释每个概念出现的原因，以及定义的逻辑（用主元个数定义秩显然比非零子式这种方式要自然许多），最重要的是学完一个结论之后还会回到现实应用中去，有大量的案例分析。整本书是有一个清晰的逻辑的，学完之后能明白自己到底学了点啥，而不仅仅是多学了一门奇奇怪怪的数学课程而已。但是，这本教材好归好，但在规定的一学期72课时内讲不了多少东西，根本完不成课程要求。想来是因为这个原因现在才没有推广使用吧。</p>",
            "excerpt": "刚好这学期教线性代数，用两种教材教了不同的两波学生。 一个班是传统工科的教学方法，使用类似同济版的教材，以解线性方程组入手，引入行列式和克拉默法则，矩阵，矩阵的秩，逆阵等概念及相关性质。之后莫名其妙的连接上向量空间，特征值，特征向量，对角化，二次型等内容。别说学生了，作为老师我自己都很难把散落全书的散碎知识点串联起来，感觉每一个概念的出现都是莫名其妙的，就是为了在这门课上讲这个内容而讲这个内容。…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 1,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pica.zhimg.com/v2-385ee6110274e9b39d0a24527c8e2969_720w.jpg?source=7e7ef6e2",
                        "width": 1125,
                        "height": 1210,
                        "token": "v2-385ee6110274e9b39d0a24527c8e2969",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxicpc+/CCDowvQUkgIlCgk0NDQ3OTAwNzASCjIyODA5MDMzMjQYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2021-12-22T02:54:59+08:00"
    },
    {
        "content": {
            "id": 575513452,
            "title": "算法学习笔记(88): 线段树合并",
            "type": "article",
            "excerpt_title": "线段树合并顾名思义就是将多棵线段树合并成一棵，当然，它是对动态开点线段树 （并且往往是权值线段树）的合并，因为动态开点线段树合并可以复用很多节点，而堆式建树的线段树合并起来复杂度就过高了。当我们合并两棵树的时候，我们把重合的节点的值相加，而把不重合的节点保持原样。 [图片] 这有两种实现方法，第一种我称为新建式，比较直观，我们用一个新的节点存合并的结果。这样会新生成重合节点那么多的新节点。 [图片] 实现很简单： int m…",
            "url": "https://zhuanlan.zhihu.com/p/575513452",
            "image_url": "",
            "created": 1666344959,
            "updated": 1666344959,
            "author": {
                "id": "e436fd89f08826624bd07c52cef0b012",
                "url_token": "one-seventh",
                "name": "Pecco",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-5b824746aed2e72d3cdd8f92a0f94136_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-5b824746aed2e72d3cdd8f92a0f94136.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/e436fd89f08826624bd07c52cef0b012",
                "user_type": "people",
                "headline": "",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1637507848
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"X2Zv-HrW\"><b>线段树合并</b>顾名思义就是将多棵线段树合并成一棵，当然，它是对<a href=\"https://zhuanlan.zhihu.com/p/246255556\" class=\"internal\">动态开点线段树</a>（并且往往是权值线段树）的合并，因为动态开点线段树合并可以复用很多节点，而堆式建树的线段树合并起来复杂度就过高了。</p><p data-pid=\"B7UHjyNs\">当我们合并两棵树的时候，我们把重合的节点的值相加，而把不重合的节点保持原样。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e6f23abbe7f0e93f300994e384f41936_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1605\" data-rawheight=\"560\" class=\"origin_image zh-lightbox-thumb\" width=\"1605\" data-original=\"https://pic3.zhimg.com/v2-e6f23abbe7f0e93f300994e384f41936_r.jpg\" data-original-token=\"v2-e6f23abbe7f0e93f300994e384f41936\"/></figure><p data-pid=\"KakOIvhk\">这有两种实现方法，第一种我称为新建式，比较直观，我们用一个新的节点存合并的结果。这样会新生成重合节点那么多的新节点。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-80b1249f9351fdd3bdd1405f0c3d9368_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1312\" data-rawheight=\"560\" class=\"origin_image zh-lightbox-thumb\" width=\"1312\" data-original=\"https://pic1.zhimg.com/v2-80b1249f9351fdd3bdd1405f0c3d9368_r.jpg\" data-original-token=\"v2-80b1249f9351fdd3bdd1405f0c3d9368\"/></figure><p data-pid=\"dWunH0Qg\">实现很简单：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">a</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span> <span class=\"c1\">// 如果有一个为空，就返回不为空的；如果都为空就返回空\n</span><span class=\"c1\"></span>    <span class=\"kt\">int</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">+</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">].</span><span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">].</span><span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">pushup</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"s7x8FRRJ\">第二种我称为挂靠式，也就是把第二棵树直接合并到第一棵树上。这样比较省空间（不要小看这点空间，这个算法挺吃空间的），缺点是会丢失合并前树的信息。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f91f46f9116f49ab4935d55d88176109_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"879\" data-rawheight=\"558\" class=\"origin_image zh-lightbox-thumb\" width=\"879\" data-original=\"https://pic2.zhimg.com/v2-f91f46f9116f49ab4935d55d88176109_r.jpg\" data-original-token=\"v2-f91f46f9116f49ab4935d55d88176109\"/></figure><p data-pid=\"5m2RYDMr\">实现其实也很简单：</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"kt\">int</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">a</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">+=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">pushup</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"4pK3rmxf\">其实多棵具有不同的根的线段树共用一部分节点也很容易让人想到<a href=\"https://zhuanlan.zhihu.com/p/250565583\" class=\"internal\">可持久化线段树</a>，实际上很多函数的写法确实与之有相似之处。</p><hr/><p data-pid=\"o-stmVTL\">接下来我们来分析线段树合并的复杂度，网上很多文章关于这块都没说清楚。本文规定， <img src=\"https://www.zhihu.com/equation?tex=T_1%2BT_2\" alt=\"T_1+T_2\" eeimg=\"1\"/> 表示将线段树 <img src=\"https://www.zhihu.com/equation?tex=T_1\" alt=\"T_1\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=T_2\" alt=\"T_2\" eeimg=\"1\"/> 合并后得到的线段树，而 <img src=\"https://www.zhihu.com/equation?tex=%7CT%7C\" alt=\"|T|\" eeimg=\"1\"/> 表示线段树的节点数。</p><p data-pid=\"B82cOm8Q\"><b>结论：有线段树 <img src=\"https://www.zhihu.com/equation?tex=T_1%2CT_2%2C%5Cdots%2CT_n\" alt=\"T_1,T_2,\\dots,T_n\" eeimg=\"1\"/> ，将它们以任意顺序合并的总时间复杂度为 <img src=\"https://www.zhihu.com/equation?tex=O%5Cleft%28%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%7B%5Cleft%7CT_i%5Cright%7C%7D-%5Cleft%7C%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%7BT_i%7D%5Cright%7C%5Cright%29\" alt=\"O\\left(\\sum_{i=1}^{n}{\\left|T_i\\right|}-\\left|\\sum_{i=1}^{n}{T_i}\\right|\\right)\" eeimg=\"1\"/> 。</b></p><p data-pid=\"pQ1EG3-q\">这个命题可以归纳地证明。首先，当 <img src=\"https://www.zhihu.com/equation?tex=n%3D1\" alt=\"n=1\" eeimg=\"1\"/> 时，复杂度显然为 <img src=\"https://www.zhihu.com/equation?tex=O%280%29\" alt=\"O(0)\" eeimg=\"1\"/> 。</p><p data-pid=\"tbQ8v4LN\">假如命题对 <img src=\"https://www.zhihu.com/equation?tex=n%3Ck\" alt=\"n&lt;k\" eeimg=\"1\"/> 都成立，当 <img src=\"https://www.zhihu.com/equation?tex=n%3Dk\" alt=\"n=k\" eeimg=\"1\"/> 时，我们把 <img src=\"https://www.zhihu.com/equation?tex=T_1%2CT_2%2C%5Cdots%2CT_k\" alt=\"T_1,T_2,\\dots,T_k\" eeimg=\"1\"/> 划分为两个非空、不交的集合 <img src=\"https://www.zhihu.com/equation?tex=S_1\" alt=\"S_1\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=S_2\" alt=\"S_2\" eeimg=\"1\"/> ，让它们分别以任意顺序合并，得到两棵树 <img src=\"https://www.zhihu.com/equation?tex=T_1%27\" alt=\"T_1&#39;\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=T_2%27\" alt=\"T_2&#39;\" eeimg=\"1\"/> ，然后再合并这两棵树得到 <img src=\"https://www.zhihu.com/equation?tex=T\" alt=\"T\" eeimg=\"1\"/> 。</p><p data-pid=\"Spj_EjCL\">第一步的复杂度按照归纳条件可知是 <img src=\"https://www.zhihu.com/equation?tex=O%28%5Csum_%7Bt_1%5Cin+S_1%7D%7B%7Ct_1%7C%7D-%7CT_1%27%7C%29%2BO%28%5Csum_%7Bt_2%5Cin+S_2%7D%7B%7Ct_2%7C%7D-%7CT_2%27%7C%29\" alt=\"O(\\sum_{t_1\\in S_1}{|t_1|}-|T_1&#39;|)+O(\\sum_{t_2\\in S_2}{|t_2|}-|T_2&#39;|)\" eeimg=\"1\"/> ，也就是 <img src=\"https://www.zhihu.com/equation?tex=O%28%5Csum_%7Bt%5Cin+S_1%5Ccup+S_2%7D%7B%7Ct%7C%7D-%7CT_1%27%7C-%7CT_2%27%7C%29\" alt=\"O(\\sum_{t\\in S_1\\cup S_2}{|t|}-|T_1&#39;|-|T_2&#39;|)\" eeimg=\"1\"/> ，即 <img src=\"https://www.zhihu.com/equation?tex=O%28%5Csum_%7Bi%3D1%7D%5En%7B%7CT_i%7C%7D-%7CT_1%27%7C-%7CT_2%27%7C%29\" alt=\"O(\\sum_{i=1}^n{|T_i|}-|T_1&#39;|-|T_2&#39;|)\" eeimg=\"1\"/>。</p><p data-pid=\"Z8Lg5Fko\">关于第二步的复杂度，注意我们遍历的节点包括重叠的节点和未重叠的节点，而遍历到的未重叠节点最多是重叠节点的两倍，所以复杂度就是 <img src=\"https://www.zhihu.com/equation?tex=O%28%E9%87%8D%E5%8F%A0%E8%8A%82%E7%82%B9%E6%95%B0%29\" alt=\"O(重叠节点数)\" eeimg=\"1\"/> ，也就是 <img src=\"https://www.zhihu.com/equation?tex=O%28%7CT_1%27%7C%2B%7CT_2%27%7C-%7CT_1%27%2BT_2%27%7C%29\" alt=\"O(|T_1&#39;|+|T_2&#39;|-|T_1&#39;+T_2&#39;|)\" eeimg=\"1\"/>。</p><p data-pid=\"Xi2aRhCX\">相加可得整个过程的时间复杂度为 <img src=\"https://www.zhihu.com/equation?tex=O%28%5Csum_%7Bi%3D1%7D%5En%7B%7CT_i%7C%7D-%7CT_1%27%2BT_2%27%7C%29\" alt=\"O(\\sum_{i=1}^n{|T_i|}-|T_1&#39;+T_2&#39;|)\" eeimg=\"1\"/> ，即 <img src=\"https://www.zhihu.com/equation?tex=O%5Cleft%28%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%7B%5Cleft%7CT_i%5Cright%7C%7D-%5Cleft%7C%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%7BT_i%7D%5Cright%7C%5Cright%29\" alt=\"O\\left(\\sum_{i=1}^{n}{\\left|T_i\\right|}-\\left|\\sum_{i=1}^{n}{T_i}\\right|\\right)\" eeimg=\"1\"/> 。</p><p data-pid=\"-0vo5ABJ\">如果选择新建式合并，额外的空间复杂度显然也是 <img src=\"https://www.zhihu.com/equation?tex=O%5Cleft%28%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%7B%5Cleft%7CT_i%5Cright%7C%7D-%5Cleft%7C%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%7BT_i%7D%5Cright%7C%5Cright%29\" alt=\"O\\left(\\sum_{i=1}^{n}{\\left|T_i\\right|}-\\left|\\sum_{i=1}^{n}{T_i}\\right|\\right)\" eeimg=\"1\"/> 。</p><p data-pid=\"enXn-vEg\">由上面的讨论我们还可以知道，<b>设值域为 <img src=\"https://www.zhihu.com/equation?tex=N\" alt=\"N\" eeimg=\"1\"/> 的若干线段树一共进行过 <img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"/> 次插入操作，那么合并它们的时间复杂度为 <img src=\"https://www.zhihu.com/equation?tex=O%28k%5Clog+N-%5Cleft%7C%5Csum_%7Bi%3D1%7D%5E%7Bn%7D%7BT_i%7D%5Cright%7C%29%3CO%28k%5Clog+N%29\" alt=\"O(k\\log N-\\left|\\sum_{i=1}^{n}{T_i}\\right|)&lt;O(k\\log N)\" eeimg=\"1\"/> 。</b></p><hr/><p data-pid=\"nKjf1Qx5\">接下来举一些例题：</p><p data-pid=\"aeiGhedR\">（<b><a href=\"https://link.zhihu.com/?target=https%3A//www.luogu.com.cn/problem/P3224\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">洛谷P3224 [HNOI2012]永无乡</a></b>）</p><blockquote data-pid=\"UdCPvJq-\">永无乡包含 n 座岛，编号从 1 到 n ，每座岛都有自己的独一无二的重要度，按照重要度可以将这 n 座岛排名，名次用 1 到 n 来表示。某些岛之间由巨大的桥连接，通过桥可以从一个岛到达另一个岛。如果从岛 a 出发经过若干座（含 0 座）桥可以 到达岛 b ，则称岛 a 和岛 b 是连通的。<br/>现在有两种操作：<br/>B x y 表示在岛 x 与岛 y 之间修建一座新桥。<br/>Q x k 表示询问当前与岛 x 连通的所有岛中第 k 重要的是哪座岛，即所有与岛 x 连通的岛中重要度排名第 k 小的岛是哪座，请你输出那个岛的编号。</blockquote><p data-pid=\"k-fMWjVQ\">很明显用并查集维护连通性，用权值线段树维护集合的第k小数。当我们合并两个集合的时候，直接合并它们的线段树即可。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mf\">1e5</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mf\">1e7</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"k\">namespace</span> <span class=\"n\">dsu</span> <span class=\"p\">{</span>\n<span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">iota</span><span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">,</span> <span class=\"n\">fa</span> <span class=\"o\">+</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">?</span> <span class=\"nl\">x</span> <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]));</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"c1\">// namespace dsu\n</span><span class=\"c1\"></span><span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">M</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">nn</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"k\">namespace</span> <span class=\"n\">segt</span> <span class=\"p\">{</span>\n<span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">kth</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span> <span class=\"o\">?</span> <span class=\"nl\">l</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"nf\">pushup</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">+</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">+=</span> <span class=\"n\">d</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span>\n        <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">pushup</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">+=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">pushup</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span> <span class=\"c1\">// namespace segt\n</span><span class=\"c1\"></span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">sync_with_stdio</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">tie</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">fixed</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"n\">nn</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">dsu</span><span class=\"o\">::</span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n    <span class=\"n\">P</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n        <span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">i</span><span class=\"p\">;</span>\n        <span class=\"n\">segt</span><span class=\"o\">::</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">fx</span> <span class=\"o\">=</span> <span class=\"n\">dsu</span><span class=\"o\">::</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">fy</span> <span class=\"o\">=</span> <span class=\"n\">dsu</span><span class=\"o\">::</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span>\n        <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">fy</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fx</span><span class=\"p\">;</span>\n        <span class=\"n\">segt</span><span class=\"o\">::</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">fx</span><span class=\"p\">],</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">fy</span><span class=\"p\">]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n    <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">--</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">char</span> <span class=\"n\">o</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n        <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">o</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">o</span> <span class=\"o\">==</span> <span class=\"sc\">&#39;Q&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">fx</span> <span class=\"o\">=</span> <span class=\"n\">dsu</span><span class=\"o\">::</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">segt</span><span class=\"o\">::</span><span class=\"n\">kth</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">fx</span><span class=\"p\">]);</span>\n            <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">P</span><span class=\"p\">[</span><span class=\"n\">ans</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">fx</span> <span class=\"o\">=</span> <span class=\"n\">dsu</span><span class=\"o\">::</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"n\">fy</span> <span class=\"o\">=</span> <span class=\"n\">dsu</span><span class=\"o\">::</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">);</span>\n            <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">fy</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fx</span><span class=\"p\">;</span>\n            <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">fy</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">segt</span><span class=\"o\">::</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">fx</span><span class=\"p\">],</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">fy</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"mbLIKfdY\">更多地，线段树合并会被用于<b>树上问题</b>。很多问题可以通过给树上每个节点建一个权值线段树解决，但那复杂度太高了，而如果父亲节点的权值线段树可以通过合并得到，问题便迎刃而解。</p><p data-pid=\"GnDUPnwF\">（<b><a href=\"https://link.zhihu.com/?target=https%3A//codeforces.com/contest/1009/problem/F\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CF1009F Dominant Indices</a></b>）</p><blockquote data-pid=\"tCU9QS8T\">You are given a rooted undirected tree consisting of n vertices. Vertex 1 is the root.<br/><br/>Let&#39;s denote a depth array of vertex x as an infinite sequence <img src=\"https://www.zhihu.com/equation?tex=%5Bd_%7Bx%2C0%7D%2Cd_%7Bx%2C1%7D%2Cd_%7Bx%2C2%7D%2C%5Cdots%5D\" alt=\"[d_{x,0},d_{x,1},d_{x,2},\\dots]\" eeimg=\"1\"/> , where <img src=\"https://www.zhihu.com/equation?tex=d_%7Bx%2Ci%7D\" alt=\"d_{x,i}\" eeimg=\"1\"/> is the number of vertices y such that both conditions hold:<br/><br/>- x is an ancestor of y;<br/>- the simple path from x to y traverses exactly i edges.<br/><br/>The dominant index of a depth array of vertex x (or, shortly, the dominant index of vertex x) is an index j such that:<br/><br/>- for every <img src=\"https://www.zhihu.com/equation?tex=k%3Cj\" alt=\"k&lt;j\" eeimg=\"1\"/> , <img src=\"https://www.zhihu.com/equation?tex=d_%7Bx%2Ck%7D%3Cd_%7Bx%2Cj%7D\" alt=\"d_{x,k}&lt;d_{x,j}\" eeimg=\"1\"/> ;<br/>- for every <img src=\"https://www.zhihu.com/equation?tex=k%3Ej\" alt=\"k&gt;j\" eeimg=\"1\"/> , <img src=\"https://www.zhihu.com/equation?tex=d_%7Bx%2Ck%7D%5Cle+d_%7Bx%2Cj%7D\" alt=\"d_{x,k}\\le d_{x,j}\" eeimg=\"1\"/> .<br/><br/>For every vertex in the tree calculate its dominant index.</blockquote><p data-pid=\"mqn5KzUI\">对于树上每个节点 <img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"p\" eeimg=\"1\"/>，求一个最小的<img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"/>，使得其子树中到<img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"p\" eeimg=\"1\"/>距离为<img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"k\" eeimg=\"1\"/>的节点数最多。</p><p data-pid=\"HMBsKRoN\"><i>又是你！</i>这道用<a href=\"https://zhuanlan.zhihu.com/p/565967113\" class=\"internal\">dsu on tree</a>和<a href=\"https://zhuanlan.zhihu.com/p/567864219\" class=\"internal\">长链剖分</a>都可以做的题目，用线段树合并也可以做。我们对每个点 <img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"p\" eeimg=\"1\"/> 建一棵维护最大值和第一个最大值的位置的线段树，然后插入一个 <img src=\"https://www.zhihu.com/equation?tex=dep%5Bp%5D\" alt=\"dep[p]\" eeimg=\"1\"/> ，再把它的儿子合并上来，就可以得到这棵子树对应的线段树。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mf\">1e6</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mf\">2.1e7</span><span class=\"p\">;</span>\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">nn</span><span class=\"p\">,</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">M</span><span class=\"p\">];</span>\n<span class=\"kt\">void</span> <span class=\"nf\">pushup</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">);</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">?</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">].</span><span class=\"nl\">id</span> <span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">].</span><span class=\"n\">id</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">+=</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span>\n        <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">pushup</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">q</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">q</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"n\">q</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">+=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">pushup</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"nl\">v</span> <span class=\"p\">:</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">d</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">);</span>\n            <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n    <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]].</span><span class=\"n\">id</span> <span class=\"o\">-</span> <span class=\"n\">d</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">sync_with_stdio</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"n\">nn</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n        <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">u</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n        <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n        <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">&#39;\\n&#39;</span><span class=\"p\">;</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"KSmKZaGD\">（<b><a href=\"https://link.zhihu.com/?target=https%3A//www.luogu.com.cn/problem/P4556\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">洛谷P4556 [Vani有约会]雨天的尾巴</a></b>）</p><blockquote data-pid=\"f6TLg-iG\">首先村落里的一共有 <img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"n\" eeimg=\"1\"/> 座房屋，并形成一个树状结构。然后救济粮分 <img src=\"https://www.zhihu.com/equation?tex=m\" alt=\"m\" eeimg=\"1\"/> 次发放，每次选择两个房屋 <img src=\"https://www.zhihu.com/equation?tex=%28x%2C~y%29\" alt=\"(x,~y)\" eeimg=\"1\"/> ，然后对于 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/> 到 <img src=\"https://www.zhihu.com/equation?tex=y\" alt=\"y\" eeimg=\"1\"/> 的路径上(含 <img src=\"https://www.zhihu.com/equation?tex=x\" alt=\"x\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=y\" alt=\"y\" eeimg=\"1\"/> )每座房子里发放一袋 <img src=\"https://www.zhihu.com/equation?tex=z\" alt=\"z\" eeimg=\"1\"/> 类型的救济粮。<br/>然后深绘里想知道，当所有的救济粮发放完毕后，每座房子里存放的最多的是哪种救济粮。</blockquote><p data-pid=\"YAXXKNuo\">本题和上道题其实很相似，不过这里求的不再是每个子树的信息。我们也为每个节点开一棵权值线段树，对于每个操作，我们令 <img src=\"https://www.zhihu.com/equation?tex=T_x%5Bz%5D\" alt=\"T_x[z]\" eeimg=\"1\"/> <sup data-text=\"这里表示“x所在线段树上的z位置的值”\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>和 <img src=\"https://www.zhihu.com/equation?tex=T_y%5Bz%5D\" alt=\"T_y[z]\" eeimg=\"1\"/> 加1，令 <img src=\"https://www.zhihu.com/equation?tex=T_%7B%5Cmathrm%7Blca%7D%28x%2Cy%29%7D%5Bz%5D\" alt=\"T_{\\mathrm{lca}(x,y)}[z]\" eeimg=\"1\"/> 和 <img src=\"https://www.zhihu.com/equation?tex=T_%7B%5Cmathrm%7Bfa%7D%28%5Cmathrm%7Blca%7D%28x%2Cy%29%29%7D%5Bz%5D\" alt=\"T_{\\mathrm{fa}(\\mathrm{lca}(x,y))}[z]\" eeimg=\"1\"/> 减一，然后从底部往顶部合并，即可得到答案。</p><div class=\"highlight\"><pre><code class=\"language-cpp\"><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;bits/stdc++.h&gt;</span><span class=\"cp\">\n</span><span class=\"cp\"></span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">N</span> <span class=\"o\">=</span> <span class=\"mf\">1e5</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"mf\">9e6</span><span class=\"p\">;</span>\n<span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"k\">struct</span> <span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">id</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">M</span><span class=\"p\">];</span>\n<span class=\"kt\">int</span> <span class=\"n\">cnt</span><span class=\"p\">,</span> <span class=\"n\">nn</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">void</span> <span class=\"nf\">pushup</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">);</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">&gt;=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">?</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">].</span><span class=\"nl\">id</span> <span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">].</span><span class=\"n\">id</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"o\">++</span><span class=\"n\">cnt</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">+=</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">l</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span>\n        <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">pushup</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">merge</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">a</span> <span class=\"o\">||</span> <span class=\"o\">!</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">v</span> <span class=\"o\">+=</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n    <span class=\"n\">pushup</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">__lg</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">N</span><span class=\"p\">],</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">N</span><span class=\"p\">];</span>\n<span class=\"kt\">void</span> <span class=\"nf\">dfs</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">f</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">__lg</span><span class=\"p\">(</span><span class=\"n\">N</span><span class=\"p\">);</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">u</span><span class=\"p\">]];</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"nl\">v</span> <span class=\"p\">:</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n            <span class=\"n\">dfs</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">lca</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">])</span> <span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">);</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">__lg</span><span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]);</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">v</span><span class=\"p\">]]</span> <span class=\"o\">&gt;=</span> <span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">])</span>\n            <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">v</span><span class=\"p\">];</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">u</span> <span class=\"o\">==</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">u</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">__lg</span><span class=\"p\">(</span><span class=\"n\">dep</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]);</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"o\">--</span><span class=\"n\">i</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">v</span><span class=\"p\">])</span>\n            <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">v</span><span class=\"p\">];</span>\n    <span class=\"k\">return</span> <span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">v</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">void</span> <span class=\"nf\">dfs2</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"k\">auto</span> <span class=\"nl\">v</span> <span class=\"p\">:</span> <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">v</span> <span class=\"o\">!=</span> <span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">dfs2</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">);</span>\n            <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">],</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">]);</span>\n        <span class=\"p\">}</span>\n    <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]].</span><span class=\"n\">v</span> <span class=\"o\">?</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">]].</span><span class=\"nl\">id</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">query</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">nn</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">l</span> <span class=\"o\">==</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">v</span><span class=\"p\">;</span>\n    <span class=\"kt\">int</span> <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">l</span> <span class=\"o\">+</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;=</span> <span class=\"n\">mid</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">ls</span><span class=\"p\">,</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">mid</span><span class=\"p\">);</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">T</span><span class=\"p\">[</span><span class=\"n\">p</span><span class=\"p\">].</span><span class=\"n\">rs</span><span class=\"p\">,</span> <span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">ios</span><span class=\"o\">::</span><span class=\"n\">sync_with_stdio</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">m</span><span class=\"p\">;</span>\n    <span class=\"n\">nn</span> <span class=\"o\">=</span> <span class=\"mf\">1e5</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">u</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n        <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">u</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span>\n        <span class=\"n\">G</span><span class=\"p\">[</span><span class=\"n\">v</span><span class=\"p\">].</span><span class=\"n\">push_back</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">dfs</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">m</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">lca</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">);</span>\n        <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">]);</span>\n        <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">]);</span>\n        <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]);</span>\n        <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">R</span><span class=\"p\">[</span><span class=\"n\">fa</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">c</span><span class=\"p\">]]);</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">dfs2</span><span class=\"p\">();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ans</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div><hr/><a href=\"https://zhuanlan.zhihu.com/p/105467597\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">Pecco：算法学习笔记（目录）</a><p></p>",
            "voteup_count": 57,
            "column": {
                "id": "c_1182444932760125440",
                "type": "column",
                "url_token": "c_1182444932760125440",
                "title": "算法学习笔记",
                "url": "https://zhuanlan.zhihu.com/c_1182444932760125440",
                "created": 1574696840,
                "updated": 1591360943,
                "description": "设立本专栏的初衷在于，我意识到我学习过的很多算法，一段时间不使用就会被我遗忘，于是决定把学习这些算法的过程记录下来，也同时分享给其他有需要的人。",
                "image_url": "https://pic1.zhimg.com/v2-b355c91e547673086f693d82b699dfc8_720w.jpg?source=d16d100b"
            },
            "comment_count": 4
        },
        "created": "2022-10-21T17:35:59+08:00"
    },
    {
        "content": {
            "id": 2715454594,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/30026587/answer/2715454594",
            "created_time": 1665742917,
            "updated_time": 1665831059,
            "question": {
                "type": "question",
                "id": 30026587,
                "title": "哪个网站的电子书最多？",
                "question_type": "normal",
                "created": 1430488805,
                "updated_time": 1430488805,
                "url": "https://www.zhihu.com/question/30026587",
                "is_deleted": false
            },
            "author": {
                "id": "df1cb31c56e1c40dd8a498e2c1426b6e",
                "url_token": "yi-sou-jun",
                "name": "一搜君",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-fd696b9c7392cc01223c531ee7089cb0_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-fd696b9c7392cc01223c531ee7089cb0.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/df1cb31c56e1c40dd8a498e2c1426b6e",
                "user_type": "people",
                "headline": "公众号：一搜君，带你搜罗宝藏级APP、网站、软件......",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://pic1.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1584667296
            },
            "thumbnail": "https://picx.zhimg.com/v2-88efc0394dbf7f6a288e055f592a7ccb_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1419,
            "comment_count": 16,
            "thanks_count": 926,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"B_UVhvfx\">收藏是点赞的8倍，大家点点赞吧（委屈脸.jpg）！电子书网站千万不要只盯着一个网站，毕竟说黄就黄！今天我就整理8个免费的电子书网站，个个电子书资源丰富，97%的电子书都能找得到，并且下载无套路，亲测好用！</p><p class=\"ztext-empty-paragraph\"><br/></p><h2>1、Zlibrary</h2><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"8q7yO_6x\">网址：<a href=\"https://link.zhihu.com/?target=https%3A//find.looks.wang/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">find.looks.wang/</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"ybETnSt2\">一个资源丰富的电子书网站，里面有1000万多万本电子书可以免费下载，不管是国内还是国外的电子书都有，而且还在不断更新中，想要什么电子书都可以在这搜索。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-88efc0394dbf7f6a288e055f592a7ccb_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1084\" data-original-token=\"v2-88efc0394dbf7f6a288e055f592a7ccb\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-cfbd8200b2f2fd1c4502c71c819a10f9_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-88efc0394dbf7f6a288e055f592a7ccb_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"191S72Vg\">就是网站访问不稳定，大家平时可以多收集一些镜像网站备用，原网站是需要注册登录才能下载的，但是镜像网站一般都能够直接下载的，也挺方便的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-d1215708b4a74c1703cbd61851c6a21c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1085\" data-original-token=\"v2-d1215708b4a74c1703cbd61851c6a21c\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-3707909268e50e0f32b93a9b8edb466b_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-d1215708b4a74c1703cbd61851c6a21c_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>2、Library genesis</h2><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"nCtqEBmU\">网址：<a href=\"https://link.zhihu.com/?target=https%3A//libgen.unblockit.nz/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">libgen.unblockit.nz/</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"K-q4dvcS\">一个国外高质量电子书下载网站，它里面有很多国内外的电子书资源，包括小说、电子教材、科学文章、小说、漫画等等，想要什么书籍直接搜就行，并且支持中文搜索。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-743e29afb05c0efed18ee016bc4068e1_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1383\" data-rawheight=\"550\" data-original-token=\"v2-743e29afb05c0efed18ee016bc4068e1\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-4dd57e5a70924da0e3aa2b92a8ed369f_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1383\" data-original=\"https://picx.zhimg.com/v2-743e29afb05c0efed18ee016bc4068e1_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"OjuTIC0f\">下载也是挺方便的，不需要注册登录，直接在书籍列表中点击1.2.3的数字，就可以进去下载界面了，然后点击GET，就可以将电子书保存到本地了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-8f0bd7536d468af543632d2cfd7d6644_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1894\" data-rawheight=\"919\" data-original-token=\"v2-8f0bd7536d468af543632d2cfd7d6644\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-e25b6e2a2402a389d9d50ef6512e2d14_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1894\" data-original=\"https://picx.zhimg.com/v2-8f0bd7536d468af543632d2cfd7d6644_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>3、古登堡计划</h2><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"-ocXuyWz\">网址：<a href=\"https://link.zhihu.com/?target=https%3A//www.gutenberg.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">gutenberg.org/</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"2K7lnI0h\">一个国外知名的电子书免费分享网站，里面大概有6万多本电子书资源可以下载，它里面的电子书类型还挺丰富的，包括小说类、有律类、教育类、历史类、地理类等等，不管是小说还是专业书籍，都能用它下载。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-c03fe92bf173e47422edf8e651c4db3c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1896\" data-rawheight=\"911\" data-original-token=\"v2-c03fe92bf173e47422edf8e651c4db3c\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-035ba6f1cea4ded1fb60bdaf3c281817_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1896\" data-original=\"https://picx.zhimg.com/v2-c03fe92bf173e47422edf8e651c4db3c_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"lUuEP_kc\">下载也方便，不需要注册登录，直接点击书籍详情界面，选择你需要的格式就可以下载了，下载的时候还能选择带图片的或者不带图片的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-12c73d22cf869cbb6bd99b1cea628c08_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1891\" data-rawheight=\"878\" data-original-token=\"v2-12c73d22cf869cbb6bd99b1cea628c08\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-15255f14688e0802efba31e576493209_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1891\" data-original=\"https://picx.zhimg.com/v2-12c73d22cf869cbb6bd99b1cea628c08_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>4、Sobooks</h2><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"xkFEo0z6\">网址：<a href=\"https://link.zhihu.com/?target=https%3A//sobooks.net/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">sobooks.net/</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"wb0eSW1z\">一个免费的电子书下载网站，主打的是小说类电子书资源，还有一些历史传记、人文社科、励志成功、经济管理、英文原版等资源可以下载，还有一些热门标签可以查看。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-0b677ce4b2005bc451ef5f955d53d904_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1899\" data-rawheight=\"936\" data-original-token=\"v2-0b677ce4b2005bc451ef5f955d53d904\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-24662f020a5d2ec45295f66db19c7d6c_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1899\" data-original=\"https://picx.zhimg.com/v2-0b677ce4b2005bc451ef5f955d53d904_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"HRahBK_X\">书籍下载的话，有的会直接显示网盘下载链接，有的需要关注公众号获取暗号才能下载，毕竟是免费的，还要啥自行车。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-a24ea8cdf85f4689accbe12819370adb_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1898\" data-rawheight=\"857\" data-original-token=\"v2-a24ea8cdf85f4689accbe12819370adb\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-5e5bc5f956d4efec0f381e2d07037d8a_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1898\" data-original=\"https://pic1.zhimg.com/v2-a24ea8cdf85f4689accbe12819370adb_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>5、鸠摩搜书</h2><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"bQNE_vW_\">网址：<a href=\"https://link.zhihu.com/?target=https%3A//www.jiumodiary.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">jiumodiary.com</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"aec8DdRy\">一个不错的电子书搜索引擎网站，不提供书籍列表，想要什么电子书直接在搜索框搜索就行，书籍资源大多来各大网盘，资源也是挺丰富的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-dcb3a277f2a6fa92d35a855f07af7b0e_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1901\" data-rawheight=\"845\" data-original-token=\"v2-dcb3a277f2a6fa92d35a855f07af7b0e\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-21b1326d70f9442316e9adf227a3cb80_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1901\" data-original=\"https://picx.zhimg.com/v2-dcb3a277f2a6fa92d35a855f07af7b0e_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"u6UKF88G\">搜索之后就可以看到书籍列表了，在搜索结果界面还可以筛选电子书格式，查找电子书效率更高，找到你想要的点进去就可以跳转网盘下载了。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-d7ba9a250c3e59c80be3b71868b017ef_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1884\" data-rawheight=\"876\" data-original-token=\"v2-d7ba9a250c3e59c80be3b71868b017ef\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-3dc535c040d17ffb69bee22ad8655540_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1884\" data-original=\"https://picx.zhimg.com/v2-d7ba9a250c3e59c80be3b71868b017ef_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>6、三秋书屋</h2><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"_OjTNO10\">网址：<a href=\"https://link.zhihu.com/?target=https%3A//www.sanqiu.mobi/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">sanqiu.mobi/</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"xWdnYI59\">一个精品电子书下载网站，它里面有小说文学、畅销图书、合集套装等类型的书籍，可以按照分类查看，也可以直接搜索。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-cd3c04a4f529b6897bf80a9834f0686b_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1903\" data-rawheight=\"936\" data-original-token=\"v2-cd3c04a4f529b6897bf80a9834f0686b\" data-default-watermark-src=\"https://pica.zhimg.com/50/v2-e3db965762b0fdc262129a95cc7c6e24_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1903\" data-original=\"https://pic1.zhimg.com/v2-cd3c04a4f529b6897bf80a9834f0686b_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"OLAM45Gn\">它每本书都有多种格式可以下载，并且下载不需要注册登录，直接点击就可以跳转网盘下载，还提供几种网盘下载格式，自己怎么方便怎么来就行。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-1d752d0e7cd61f855232e383110e3a9b_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1902\" data-rawheight=\"931\" data-original-token=\"v2-1d752d0e7cd61f855232e383110e3a9b\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-ef7590c69e027bfec412822cd364c157_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1902\" data-original=\"https://picx.zhimg.com/v2-1d752d0e7cd61f855232e383110e3a9b_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>7、知轩藏书</h2><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"rz5y4S9S\">网址：<a href=\"https://link.zhihu.com/?target=http%3A//zxcs.me/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">zxcs.me/</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"nkyuAuGx\">一个网络小说下载网站，它里面的小说类型还挺多的，包括都市娱乐、武侠仙侠、奇幻玄幻、科幻灵异、历史军事、竞技游戏等等，还有各种排行榜可以查看。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-b0c4319f40a3d0c1f92dabd8f863572f_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1889\" data-rawheight=\"936\" data-original-token=\"v2-b0c4319f40a3d0c1f92dabd8f863572f\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-56ed171c7b03d94c4dea8a17088c6327_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1889\" data-original=\"https://pica.zhimg.com/v2-b0c4319f40a3d0c1f92dabd8f863572f_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"MZ8KaAfN\">很多小说都是校对版本，里面错误比较少，阅读起来体验感也比较好，下载也方便，不需要注册登录，直接就可以下载到本地。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-b359f3104e097917ed01a56f677017af_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1901\" data-rawheight=\"936\" data-original-token=\"v2-b359f3104e097917ed01a56f677017af\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-ee3a440e14538da22887732e1514d0f8_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1901\" data-original=\"https://picx.zhimg.com/v2-b359f3104e097917ed01a56f677017af_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><h2>8、书享家</h2><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"0OMJZkCH\">网址：<a href=\"https://link.zhihu.com/?target=http%3A//shuxiangjia.cn/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">shuxiangjia.cn/</a></p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"t077gZ9M\">一个好用的电子书导航网站，它里面收录了各种各样的电子书网站，并且还对这些网站进行了简单的标注，不知道去哪找电子书的时候，就可以看看这个网站里的电子书网站，点击之后直接就能跳转。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-52fdd884aab4ec185859771c627f3088_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1827\" data-rawheight=\"989\" data-original-token=\"v2-52fdd884aab4ec185859771c627f3088\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-8d53cc00dfdc6a53137a89bdd5d657d9_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1827\" data-original=\"https://pica.zhimg.com/v2-52fdd884aab4ec185859771c627f3088_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"kyRfJCf5\">以上，就是一些好用的电子书网站，大家可以收藏一下，需要找电子书的时候随时都可以拿出来看。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"mLNIdb4A\">这里再分享一个电子书下载小技巧：有时候在下载电子书的时候，总是找不到自己想要的格式，大家可以找到什么格式就下载什么格式，然后后用<b>【迅捷PDF转换器】</b>在线网站转换成其他格式就行，它支持PDF、TXT、MOBI、EPUB、AZW3等格式之间的相互转换。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"Z8YDgLlg\">并且转换小文件不需要注册登录还支持批量转换，平时起来挺方便的。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-3e68192ced9e3993f17f13c717d7fb0c_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1134\" data-rawheight=\"304\" data-original-token=\"v2-3e68192ced9e3993f17f13c717d7fb0c\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-0d5b182f9f5a9da9ff9d754cb318c439_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1134\" data-original=\"https://picx.zhimg.com/v2-3e68192ced9e3993f17f13c717d7fb0c_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"9nvbUhke\"><b>最后，收藏前，也要记得点赞呀！</b></p>",
            "excerpt": "收藏是点赞的8倍，大家点点赞吧（委屈脸.jpg）！电子书网站千万不要只盯着一个网站，毕竟说黄就黄！今天我就整理8个免费的电子书网站，个个电子书资源丰富，97%的电子书都能找得到，并且下载无套路，亲测好用！ 1、Zlibrary 网址： find.looks.wang/ 一个资源丰富的电子书网站，里面有1000万多万本电子书可以免费下载，不管是国内还是国外的电子书都有，而且还在不断更新中，想要什么电子书都可以在这搜索。 [图片] 就是网站访问不稳定…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 16,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-88efc0394dbf7f6a288e055f592a7ccb_720w.jpg?source=7e7ef6e2",
                        "width": 1920,
                        "height": 1084,
                        "token": "v2-88efc0394dbf7f6a288e055f592a7ccb",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pica.zhimg.com/v2-d1215708b4a74c1703cbd61851c6a21c_720w.jpg?source=7e7ef6e2",
                        "width": 1920,
                        "height": 1085,
                        "token": "v2-d1215708b4a74c1703cbd61851c6a21c",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-743e29afb05c0efed18ee016bc4068e1_720w.jpg?source=7e7ef6e2",
                        "width": 1383,
                        "height": 550,
                        "token": "v2-743e29afb05c0efed18ee016bc4068e1",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxiCmeqOCiCk9v8BkgIlCgk1MjM4MDU0MTASCjI3MTU0NTQ1OTQYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-10-14T18:21:57+08:00"
    },
    {
        "content": {
            "id": 571915865,
            "title": "浅谈移动端单屏解决方案",
            "type": "article",
            "excerpt_title": "前文 《移动端常见适配方案》 中，我介绍了移动端的一些常见适配方案 移动端适配就是在进行屏幕宽度的等比例缩放文中我强调了移动端适配是对 屏幕宽度进行缩放：对于普通的流式布局(长屏幕页面)，页面内容是可以上下滚动的。屏幕小，一屏幕看到的东西虽然变少，但是用户可以通过手势滚动页面，继续浏览下一屏的内容。因此在常规情况下，对于屏幕宽度进行等比例缩放已经能解决大部分应用场景了但是对于一种特殊的场景：单屏页面（…",
            "url": "https://zhuanlan.zhihu.com/p/571915865",
            "image_url": "https://picx.zhimg.com/v2-0180d08b68524beeb145fcf8a921809c_r.jpg?source=172ae18b",
            "created": 1665314806,
            "updated": 1665315511,
            "author": {
                "id": "ac74d402b6495d39eccf08f34bfc66b5",
                "url_token": "tian-cong-53",
                "name": "深红",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-756a6335df6c423dc9d8936f395e396b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-756a6335df6c423dc9d8936f395e396b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/ac74d402b6495d39eccf08f34bfc66b5",
                "user_type": "people",
                "headline": "人类为什么要互相ntr",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"LYv1SyDw\">前文<a href=\"https://link.zhihu.com/?target=http%3A//anata.me/2022/05/09/%25E7%25A7%25BB%25E5%258A%25A8%25E7%25AB%25AF%25E5%25B8%25B8%25E8%25A7%2581%25E9%2580%2582%25E9%2585%258D%25E6%2596%25B9%25E6%25A1%2588/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《移动端常见适配方案》</a>中，我介绍了移动端的一些常见适配方案</p><blockquote data-pid=\"96zSpaxq\"> 移动端适配就是在进行<b>屏幕宽度的等比例缩放</b></blockquote><p data-pid=\"mTYclhJ1\">文中我强调了移动端适配是对<b>屏幕宽度</b>进行缩放：对于普通的流式布局(长屏幕页面)，页面内容是可以上下滚动的。屏幕小，一屏幕看到的东西虽然变少，但是用户可以通过手势滚动页面，继续浏览下一屏的内容。因此在常规情况下，对于屏幕宽度进行等比例缩放已经能解决大部分应用场景了</p><p data-pid=\"5AUzQWSZ\">但是对于一种特殊的场景：单屏页面（又称翻屏页面），由于需要把<b>一整屏</b>的内容<b>完整</b>展示给用户，同时又要求页面不能出现滚动条，那么，仅仅只是针对屏幕宽度进行等比例缩放的适配，其实效果并不理想</p><h3>设备独立像素 (CSS像素)</h3><blockquote data-pid=\"GhQAzuGk\"> 设备独立像素是一种可以被程序所控制的虚拟像素，在Web开发中对应CSS像素</blockquote><p data-pid=\"F16tj0B9\">以<code>iphone7</code>举例:</p><p data-pid=\"OgkFupnk\"><code>iphone7</code>的<code>设备独立像素</code>为 <code>375 * 667</code></p><p data-pid=\"UldRbAHq\">也就是手机全屏下的大小，同时也是<code>chrome</code>模拟器展示的尺寸</p><p data-pid=\"XA12u4aH\">可以通过js的<code>screen.width</code>和<code>screen.height</code>获取</p><h3>设备像素 (物理像素)</h3><blockquote data-pid=\"V5s98Wg3\"> 设备像素也可以叫物理像素，由设备的屏幕决定，其实就是屏幕中控制显示的最小单位</blockquote><p data-pid=\"zCJKlCC5\">以<code>iphone7</code>举例:</p><p data-pid=\"oHUaDbJH\"><code>iphone7</code>的<code>设备像素</code>为 <code>750 * 1334</code></p><p data-pid=\"PB2a87Ss\"><code>750 * 1334</code>这个尺寸也可以称为<code>设计像素</code>，我们设计和开发页面时，就是以这个设计像素为准</p><h3>设备像素比（DPR）</h3><blockquote data-pid=\"NdkcKQtB\"> 设备像素比(dpr) = 设备像素 / 设备独立像素</blockquote><p data-pid=\"xI8hy0R-\">以<code>iphone7</code>举例:</p><p data-pid=\"pO9GVQpS\"><code>iphone7</code>的<code>dpr = 2 = 750 / 375</code></p><p data-pid=\"ujod918e\">也就是说，在<code>iphone7</code>下，<code>1 css像素 = 2 物理像素</code></p><p data-pid=\"6-cmmyVv\">在<code>css</code>中一个<code>1x1</code>大小的正方形里面，其实有4个物理像素</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c82d6fc65690ba1827633c421d938d9e_b.jpg\" data-size=\"normal\" data-rawwidth=\"498\" data-rawheight=\"165\" class=\"origin_image zh-lightbox-thumb\" width=\"498\" data-original=\"https://pic3.zhimg.com/v2-c82d6fc65690ba1827633c421d938d9e_r.jpg\" data-original-token=\"v2-5c3c5c25a11bb7745bdd20b5a830a619\"/><figcaption>设备像素比</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"QekuY3xZ\"><code>dpr</code>大于2的屏幕也称为视网膜屏幕(Retina)</p><h3>实际物理像素</h3><p data-pid=\"Y0joo207\"><code>iphone7</code>的实际物理像素是<code>750 * 1334</code>，刚好等于<code>设备像素</code>。但不是所有的设备都是<code>实际物理像素</code>等于<code>设备像素</code></p><p data-pid=\"uhd4cWGn\"><code>iphone7 plus</code>的实际物理像素是<code>1080 * 1920</code>。它的<code>dpr</code>为3，<code>设备独立像素</code>为<code>414 * 736</code>，根据公式可以得出，它的<code>设备像素</code>等于<code>1242 x 2208</code>，远大于实际物理像素。手机会自动把<code>1242 * 2208</code>个像素点塞进<code>1080 * 1920</code>个物理像素点来渲染，我们不用关心这个过程</p><h3>单屏幕</h3><p data-pid=\"DVPlI4F6\">前面介绍了这么多概念，其实在真正开发中，我们主要关心的是<code>设备独立像素</code>和<code>设备像素</code></p><p data-pid=\"uFI6zOR4\"><code>设备像素</code> 决定了设计稿的尺寸。移动端设计稿一般是<code>750 * 1334</code> 尺寸大小（ iPhone6 的设备像素为标准的设计图），因此相对比较固定</p><p data-pid=\"I5-WWdxd\"><code>设备独立像素</code> 决定了设备的屏幕大小。<code>iOS</code>平台下，屏幕尺寸还算相对固定，但是到了<code>Android</code>平台下，屏幕尺寸那就~~千奇百怪，百花争鸣~~了。</p><p data-pid=\"fiHKsUnS\">特别需要注意的一点：即使<code>设备独立像素</code>确定了大小，我们的网页被用户看到的时候，实际高度还是比<code>设备独立像素</code>的高度小很多</p><p data-pid=\"08cIkmaA\">主要原因是：我们的网页往往是在手机的浏览器上访问的，而这些浏览器自带了顶部地址栏和底部工具栏，这两部分的高度又进一步压缩了我们网页展示的高度（如果我们的网页是在第三方客户端内打开的，比如微博，微信，Twitter, Facebook，那么一般只有顶部地址栏）</p><p data-pid=\"zU96afR3\">举个例子，<code>iphone11</code>的设备独立像素是<code>414 * 896</code></p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8a2ea398a5156ae34b90b56915760a9f_b.jpg\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"865\" class=\"content_image\" width=\"400\" data-original-token=\"v2-c7f14cf84210655cdf6311d4df263efc\"/><figcaption>图1: safari</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-250e99468f799608912f1277d1fd3da0_b.jpg\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"866\" class=\"content_image\" width=\"400\" data-original-token=\"v2-7da99867f3ed5e7377513c63f66cd4c2\"/><figcaption>图2: 微信浏览器</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"s0CC0vxp\">图1是在<code>safari</code>浏览器下：可以看到上下红框部分是浏览器自带的区域，只有蓝框是实际网页展示的高度，这个蓝框的大小是 <code>414 * 715</code>(documentElement.clientWidth/documentElement.clientHeight)，已经比设备独立像素的高度少了<code>181</code>像素(896 - 715)</p><p data-pid=\"Q8yRUPpo\">图2是在<code>微信</code>自带浏览器下：可以看到顶部红框部分是浏览器自带的区域，只有蓝框是实际网页展示的高度，这个蓝框的大小是 <code>414 * 804</code>(documentElement.clientWidth/documentElement.clientHeight)，也比设备独立像素的高度少了<code>92</code>像素(896 - 804)</p><p data-pid=\"Pb5PiuMp\">收集到的一些常见设备尺寸大小:</p><table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>品牌</th><th>操作系统</th><th>设备</th><th>设备独立像素 (screen.width/screen.height)</th><th>自带浏览器下(clientWidth/clientHeight)</th></tr><tr><td>苹果</td><td>iOS</td><td>iPhone 7</td><td>375 * 667</td><td>375 * 548</td></tr><tr><td></td><td></td><td>iPhone 12</td><td>390 * 844</td><td>390 * 664</td></tr><tr><td></td><td></td><td>Ipnone 11/XR</td><td>414 * 896</td><td>414 * 715</td></tr><tr><td></td><td></td><td>iPhone X</td><td>375 * 812</td><td>375 * 635</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>华为</td><td>安卓</td><td>P40</td><td>360 * 780</td><td>360 * 625</td></tr><tr><td></td><td></td><td>nova 8 SE</td><td>360 * 800</td><td>360 * 659</td></tr><tr><td></td><td></td><td>Mate 30</td><td>424 * 918</td><td>424 * 774</td></tr><tr><td></td><td></td><td>荣耀8</td><td>360 * 640</td><td>360 * 501</td></tr><tr><td></td><td></td><td>P10</td><td>360 * 640</td><td>360 * 526</td></tr><tr><td></td><td></td><td>畅玩7x</td><td>360 * 720</td><td>360 * 584</td></tr><tr><td>Oppo</td><td>安卓</td><td>R15x</td><td>360 * 780</td><td>360 * 650</td></tr><tr><td></td><td></td><td>R17</td><td>360 * 780</td><td>360 * 628</td></tr><tr><td></td><td></td><td>K1</td><td>360 * 780</td><td>360 * 622</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Xiaomi</td><td>安卓</td><td>MIX 2</td><td>393 * 786</td><td>393 * 666</td></tr><tr><td></td><td></td><td>小米10</td><td>393 * 851</td><td>393 * 720</td></tr><tr><td></td><td></td><td>小米6</td><td>360 * 640</td><td>360 * 521</td></tr><tr><td></td><td></td><td>k40</td><td>393 * 873</td><td>393 * 713</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3>单屏难点</h3><p data-pid=\"qSXYjxdY\">设计稿的的宽高比是固定的，但是真实设备的宽高比永远不是统一的，并且网页的可视区域还会随着访问方式(浏览器，APP客户端)有所改变。</p><p data-pid=\"uDf_ZYDV\">同一份设计稿，却要在不同尺寸的设备上，都展示出良好的布局：页面的内容要尽可能<b>完整</b>展示在<b>一屏</b>之中（甚至不能有滚动条）</p><h3>安全区 + 长背景图</h3><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"small\"><img src=\"https://pic4.zhimg.com/v2-9207daca1eed0d8625f3ac66b3d22b5f_b.jpg\" data-size=\"small\" data-rawwidth=\"614\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"614\" data-original=\"https://pic4.zhimg.com/v2-9207daca1eed0d8625f3ac66b3d22b5f_r.jpg\" data-original-token=\"v2-bc150858552ada5be5fe4e5f4fd5d521\"/><figcaption>750 * 1334 设计稿</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"gI3VXrNw\"><code>750 * 1334</code> 的设计稿，需要考虑到长屏幕时，页面的展示情况</p><p data-pid=\"L8WzZHr8\">比如默认<code>750 * 1334</code>大小的内容需要完整展示出来(安全区)，长屏幕<code>750 * 1750</code>时，把安全区的内容垂直居中展示即可</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a47f8158c929ee53e6bc80303ec6e981_b.jpg\" data-size=\"normal\" data-rawwidth=\"582\" data-rawheight=\"1250\" class=\"origin_image zh-lightbox-thumb\" width=\"582\" data-original=\"https://pic2.zhimg.com/v2-a47f8158c929ee53e6bc80303ec6e981_r.jpg\" data-original-token=\"v2-ec7f30b6c7f0354de6016e02b6a85e83\"/><figcaption>750 * 1750 长屏幕</figcaption></figure><p data-pid=\"l4C9PDwf\">此时，我们就需要使用一张长背景图(<code>750 * 1750</code>)上下居中作为整个网页的背景</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"o\">&lt;</span><span class=\"nt\">style</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">*</span> <span class=\"p\">{</span>\n    <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"k\">box-sizing</span><span class=\"p\">:</span> <span class=\"kc\">border-box</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nt\">html</span> <span class=\"p\">{</span>\n    <span class=\"c\">/* 750px 的设计图，1rem = 100px */</span>\n    <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"nb\">calc</span><span class=\"p\">(</span><span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"kt\">vw</span> <span class=\"o\">/</span> <span class=\"mi\">750</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nt\">html</span><span class=\"o\">,</span>\n  <span class=\"nt\">body</span> <span class=\"p\">{</span>\n    <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">relative</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"p\">#</span><span class=\"nn\">app</span> <span class=\"p\">{</span>\n    <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">relative</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 长背景图上下居中 */</span>\n    <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;./img/bg.jpg&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">center</span> <span class=\"o\">/</span> <span class=\"kc\">cover</span> <span class=\"mh\">#fff</span><span class=\"p\">;</span>\n    <span class=\"k\">overflow</span><span class=\"p\">:</span> <span class=\"kc\">hidden</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"p\">.</span><span class=\"nc\">safe-content</span> <span class=\"p\">{</span>\n    <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">absolute</span><span class=\"p\">;</span>\n    <span class=\"k\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n     <span class=\"c\">/* 限定安全区的高度 */</span>\n    <span class=\"k\">max-height</span><span class=\"p\">:</span> <span class=\"mf\">13.34</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n    <span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n    <span class=\"c\">/* 安全区上下居中 */</span>\n    <span class=\"k\">transform</span><span class=\"p\">:</span> <span class=\"nb\">translateY</span><span class=\"p\">(</span><span class=\"mi\">-50</span><span class=\"kt\">%</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"o\">&lt;/</span><span class=\"nt\">style</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;</span><span class=\"nt\">body</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"nt\">div</span> <span class=\"nt\">id</span><span class=\"o\">=</span><span class=\"s1\">&#39;app&#39;</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nt\">div</span> <span class=\"nt\">class</span><span class=\"o\">=</span><span class=\"s1\">&#39;safe-content&#39;</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nt\">div</span> <span class=\"nt\">class</span><span class=\"o\">=</span><span class=\"s1\">&#39;block1&#39;</span><span class=\"o\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nt\">div</span> <span class=\"nt\">class</span><span class=\"o\">=</span><span class=\"s1\">&#39;block2&#39;</span><span class=\"o\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;/</span><span class=\"nt\">div</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">&lt;/</span><span class=\"nt\">div</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&lt;/</span><span class=\"nt\">body</span><span class=\"o\">&gt;</span></code></pre></div><p data-pid=\"bFUmcF6O\">之后，我们把页面所有的内容，相对<code>safe-content</code>进行布局</p><p data-pid=\"y6AriUJy\">完整页面，点击此处<a href=\"https://link.zhihu.com/?target=http%3A//deepred5.com/single-page/example.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">预览</a> (手机模式查看)</p><p data-pid=\"1NTdJV6T\">完整代码</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#39;en&#39;</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">charset</span><span class=\"o\">=</span><span class=\"s\">&#39;UTF-8&#39;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">http-equiv</span><span class=\"o\">=</span><span class=\"s\">&#39;X-UA-Compatible&#39;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#39;IE=edge&#39;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">meta</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&#39;viewport&#39;</span> <span class=\"na\">content</span><span class=\"o\">=</span><span class=\"s\">&#39;width=device-width, initial-scale=1.0&#39;</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>Document<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">*</span> <span class=\"p\">{</span>\n      <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"k\">padding</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"k\">box-sizing</span><span class=\"p\">:</span> <span class=\"kc\">border-box</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nt\">html</span> <span class=\"p\">{</span>\n      <span class=\"c\">/* 750px 的设计图，1rem = 100px */</span>\n      <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"nb\">calc</span><span class=\"p\">(</span><span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"kt\">vw</span> <span class=\"o\">/</span> <span class=\"mi\">750</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nt\">html</span><span class=\"o\">,</span>\n    <span class=\"nt\">body</span> <span class=\"p\">{</span>\n      <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n      <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n      <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">relative</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">#</span><span class=\"nn\">app</span> <span class=\"p\">{</span>\n      <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n      <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n      <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">relative</span><span class=\"p\">;</span>\n      <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;./img/bg.jpg&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">center</span> <span class=\"o\">/</span> <span class=\"kc\">cover</span> <span class=\"mh\">#fff</span><span class=\"p\">;</span>\n      <span class=\"k\">overflow</span><span class=\"p\">:</span> <span class=\"kc\">hidden</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">safe-content</span> <span class=\"p\">{</span>\n      <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n      <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n      <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">absolute</span><span class=\"p\">;</span>\n      <span class=\"k\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"k\">max-height</span><span class=\"p\">:</span> <span class=\"mf\">13.34</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n      <span class=\"k\">transform</span><span class=\"p\">:</span> <span class=\"nb\">translateY</span><span class=\"p\">(</span><span class=\"mi\">-50</span><span class=\"kt\">%</span><span class=\"p\">);</span>\n      <span class=\"c\">/* border: 1px solid red; */</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">go-back</span> <span class=\"p\">{</span>\n      <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mf\">0.91</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mf\">0.92</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;./img/back.png&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">center</span> <span class=\"o\">/</span> <span class=\"kc\">contain</span><span class=\"p\">;</span>\n      <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">absolute</span><span class=\"p\">;</span>\n      <span class=\"k\">left</span><span class=\"p\">:</span> <span class=\"mf\">0.14</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mf\">0.15</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">rule-btn</span> <span class=\"p\">{</span>\n      <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mf\">0.83</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mf\">0.83</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;./img/rule-btn.png&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">center</span> <span class=\"o\">/</span> <span class=\"kc\">contain</span><span class=\"p\">;</span>\n      <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">absolute</span><span class=\"p\">;</span>\n      <span class=\"k\">left</span><span class=\"p\">:</span> <span class=\"mf\">1.27</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mf\">0.20</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">username</span> <span class=\"p\">{</span>\n      <span class=\"k\">min-width</span><span class=\"p\">:</span> <span class=\"mf\">1.67</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mf\">0.41</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">line-height</span><span class=\"p\">:</span> <span class=\"mf\">0.41</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;./img/user-bg.png&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">center</span> <span class=\"o\">/</span> <span class=\"kc\">cover</span><span class=\"p\">;</span>\n      <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">absolute</span><span class=\"p\">;</span>\n      <span class=\"k\">right</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mf\">0.25</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#fcfcfc</span><span class=\"p\">;</span>\n      <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mf\">0.22</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">right</span><span class=\"p\">;</span>\n      <span class=\"k\">padding-right</span><span class=\"p\">:</span> <span class=\"mf\">0.13</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">padding-left</span><span class=\"p\">:</span> <span class=\"mf\">0.48</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">gift-container</span> <span class=\"p\">{</span>\n      <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">absolute</span><span class=\"p\">;</span>\n      <span class=\"k\">left</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n      <span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"kt\">%</span><span class=\"p\">;</span>\n      <span class=\"k\">transform</span><span class=\"p\">:</span> <span class=\"nb\">translate</span><span class=\"p\">(</span><span class=\"mi\">-50</span><span class=\"kt\">%</span><span class=\"p\">,</span> <span class=\"mi\">-50</span><span class=\"kt\">%</span><span class=\"p\">);</span>\n      <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n      <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">column</span><span class=\"p\">;</span>\n      <span class=\"k\">align-items</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">gift-logo</span> <span class=\"p\">{</span>\n      <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mf\">6.79</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mf\">7.03</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;./img/game-title.png&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">center</span> <span class=\"o\">/</span> <span class=\"kc\">contain</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">gift-title</span> <span class=\"p\">{</span>\n      <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mf\">3.45</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mf\">0.63</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;./img/congratulate.png&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">center</span> <span class=\"o\">/</span> <span class=\"kc\">contain</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">gift-content</span> <span class=\"p\">{</span>\n      <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mf\">-1.8</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">display</span><span class=\"p\">:</span> <span class=\"kc\">flex</span><span class=\"p\">;</span>\n      <span class=\"k\">flex-direction</span><span class=\"p\">:</span> <span class=\"kc\">column</span><span class=\"p\">;</span>\n      <span class=\"k\">align-items</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">gift-name</span> <span class=\"p\">{</span>\n      <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mf\">0.3216</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">line-height</span><span class=\"p\">:</span> <span class=\"mf\">0.24</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">letter-spacing</span><span class=\"p\">:</span> <span class=\"mf\">0.032</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#bd5874</span><span class=\"p\">;</span>\n      <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n      <span class=\"k\">margin-top</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">text-shadow</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"mh\">#fff</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"mh\">#fff</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">gift-icon</span> <span class=\"p\">{</span>\n      <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"mf\">0.4</span><span class=\"kt\">rem</span> <span class=\"mi\">0</span> <span class=\"mf\">0.5</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mf\">1.94</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mf\">1.65</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;./img/gift-1.png&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">center</span> <span class=\"o\">/</span> <span class=\"kc\">contain</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">gift-desc</span> <span class=\"p\">{</span>\n      <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">line-height</span><span class=\"p\">:</span> <span class=\"mf\">0.2426</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">letter-spacing</span><span class=\"p\">:</span> <span class=\"mf\">0.019</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#90949e</span><span class=\"p\">;</span>\n      <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n      <span class=\"k\">margin-bottom</span><span class=\"p\">:</span> <span class=\"mf\">0.2</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">text-shadow</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"mh\">#fff</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"mh\">#fff</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">.</span><span class=\"nc\">gift-get-info</span> <span class=\"p\">{</span>\n      <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mf\">0.23</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">line-height</span><span class=\"p\">:</span> <span class=\"mf\">0.30</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n      <span class=\"k\">color</span><span class=\"p\">:</span> <span class=\"mh\">#d16b88</span><span class=\"p\">;</span>\n      <span class=\"k\">text-align</span><span class=\"p\">:</span> <span class=\"kc\">center</span><span class=\"p\">;</span>\n      <span class=\"k\">text-shadow</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"mh\">#fff</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">5</span><span class=\"kt\">px</span> <span class=\"mh\">#fff</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">style</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&#39;app&#39;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;safe-content&#34;</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;go-back&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;rule-btn&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;username&#34;</span><span class=\"p\">&gt;</span>深红<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;gift-container&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;gift-logo&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;gift-content&#34;</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;gift-title&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;gift-name&#34;</span><span class=\"p\">&gt;</span>水漾烛光礼盒<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;gift-icon&#34;</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;gift-desc&#34;</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>蒂普提克香氛蜡烛（70g）*1<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>krramel沐浴套装*1<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&#34;gift-get-info&#34;</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>请到游戏内【精彩活动-实物周边奖励兑换】<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>填写领取信息<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n          <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span></code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><h3>宽高比</h3><p data-pid=\"_dCeBg8G\">上面的方案，对于移动端(<b>屏幕高度大于屏幕宽度</b>)的大部分场景，的确够用了。</p><p data-pid=\"qwlvegp-\">但是在折叠屏手机(<b>屏幕宽度和高度差别不大</b>)，ipad，pc端(<b>屏幕高度小于屏幕宽度</b>)的设备下，我们的页面就很有可能超出了完整的一屏。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-52f5b1f7eebe6b285ac627899e8ed33f_b.jpg\" data-size=\"normal\" data-rawwidth=\"409\" data-rawheight=\"520\" class=\"content_image\" width=\"409\" data-original-token=\"v2-446b9ac89bd301942442e808e2bc8808\"/><figcaption>超出屏幕底部</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"8RKqrKcn\">如果此时，父级元素还设置了<code>overflow: hidden;</code>，那么用户甚至不能滑动查看超出屏幕的内容，如果底部是一个可交互的按钮，那么用户就永远不能触发之后的流程了！</p><h3>问题原因</h3><p data-pid=\"EQUV0kdS\">我们的<code>rem</code>适配方案，是相对于屏幕宽度进行缩放的，但是不同机型的手机，可视区域的宽高比并不固定，因此对于部分手机，页面内容就很有可能出现<b>超出屏幕底部</b>或者<b>底部留有空白</b>。</p><p data-pid=\"zjmEuCur\">对于<b>底部留有空白</b>，一般发生在可视高度比可视宽度大很多的情况，前面介绍的<code>安全区 + 长背景图</code>方案，就是针对此种情况的解决方案。</p><p data-pid=\"WP-GIJAm\">而对于<b>超出屏幕底部</b>，一般发生在可视高度和可视宽度相差不大(折叠屏手机)，甚至可视高度比可视宽度小(横屏或者pc端)的情况，解决方案一般如下: <i> 使用<code>css</code>进行宽高比判断 </i> 使用<code>js</code>进行宽高比判断 <i> 使用<code>js</code>动态修改<code>rem</code>大小 </i> 使用<code>js</code>动态缩放整体页面 * 使用<code>vw</code>和<code>vh</code>进行布局</p><h3>aspect-ratio</h3><p data-pid=\"-x4WEMWB\">注意和<code>device-aspect-ratio</code>进行区分，<code>device-aspect-ratio</code>是和设备尺寸进行绑定的，但是我们之前介绍过：网页的可视区域会随着访问方式(浏览器，APP客户端)有所改变，因此<code>aspect-ratio</code>才是我们真正需要的属性。</p><blockquote data-pid=\"aU1FuKfG\"> aspect-ratio 定义输出设备中的页面可见区域宽度与高度的比率</blockquote><p data-pid=\"VaUutups\">同时它有两个<code>max-aspect-ratio</code>和<code>min-aspect-ratio</code>兄弟属性，可以和<code>max-width</code>和<code>min-width</code>进行类比:</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-aspect-ratio</span><span class=\"o\">:</span> <span class=\"nt\">9</span><span class=\"o\">/</span><span class=\"nt\">16</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">//</span> <span class=\"nt\">只要宽高比大于等于9</span><span class=\"o\">/</span><span class=\"nt\">16</span><span class=\"err\">，</span><span class=\"nt\">就会执行</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-aspect-ratio</span><span class=\"o\">:</span> <span class=\"nt\">3</span><span class=\"o\">/</span><span class=\"nt\">4</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">//</span> <span class=\"nt\">只要宽高比大于等于3</span><span class=\"o\">/</span><span class=\"nt\">4</span><span class=\"err\">，</span><span class=\"nt\">就会执行</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-aspect-ratio</span><span class=\"o\">:</span> <span class=\"nt\">1</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n    <span class=\"o\">//</span> <span class=\"nt\">只要宽高比大于等于1</span><span class=\"o\">/</span><span class=\"nt\">1</span><span class=\"err\">，</span><span class=\"nt\">就会执行</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"JrWygLRy\">对于上面的页面，我们正常的设备独立像素是<code>375 * 667</code>，我们可以这样进行高度划分：</p><ul><li data-pid=\"QAl-2eWG\">高度大于667：无需调整，我们只怕高度小，不怕高度大，高度大时已经有前面的方案: <code>安全区 + 长背景图</code></li><li data-pid=\"XGIqgCX0\">530-667：还是正常，我们也不需要调整</li><li data-pid=\"15DHtLN7\">490-530</li><li data-pid=\"jAAyXUNN\">375-490</li><li data-pid=\"I4uXme8R\">小于375：pc端或者横屏，高度已经比宽度小了</li></ul><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-aspect-ratio</span><span class=\"o\">:</span> <span class=\"nt\">375</span> <span class=\"o\">/</span> <span class=\"nt\">530</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">.</span><span class=\"nc\">safe-content</span> <span class=\"p\">{</span>\n    <span class=\"k\">transform</span><span class=\"p\">:</span> <span class=\"nb\">translateY</span><span class=\"p\">(</span><span class=\"mi\">-50</span><span class=\"kt\">%</span><span class=\"p\">)</span> <span class=\"nb\">scale</span><span class=\"p\">(</span><span class=\"mf\">0.8</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-aspect-ratio</span><span class=\"o\">:</span> <span class=\"nt\">375</span> <span class=\"o\">/</span> <span class=\"nt\">490</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">.</span><span class=\"nc\">gift-logo</span> <span class=\"p\">{</span>\n    <span class=\"k\">transform</span><span class=\"p\">:</span> <span class=\"nb\">scale</span><span class=\"p\">(</span><span class=\"mf\">0.6</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">@</span><span class=\"k\">media</span> <span class=\"nt\">screen</span> <span class=\"nt\">and</span> <span class=\"o\">(</span><span class=\"nt\">min-aspect-ratio</span><span class=\"o\">:</span> <span class=\"nt\">375</span> <span class=\"o\">/</span> <span class=\"nt\">375</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"p\">.</span><span class=\"nc\">safe-content</span> <span class=\"p\">{</span>\n    <span class=\"k\">transform</span><span class=\"p\">:</span> <span class=\"nb\">translateY</span><span class=\"p\">(</span><span class=\"mi\">-50</span><span class=\"kt\">%</span><span class=\"p\">)</span> <span class=\"nb\">scale</span><span class=\"p\">(</span><span class=\"mf\">0.32</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"p\">.</span><span class=\"nc\">gift-logo</span> <span class=\"p\">{</span>\n    <span class=\"k\">transform</span><span class=\"p\">:</span> <span class=\"nb\">scale</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"GdbmqJF-\">比较简单暴力的，就是直接对主要页面区域施加 <code>transform: scale(0.8)</code> 这类样式，直接缩小。</p><p data-pid=\"uFn5lXLY\">至于我刚刚划分的高度区间，是通过<code>chrome模拟器</code>自己一次次实验调整出来的，这个要<b>具体页面具体分析</b>，并没有一个统一的宽高比规定。</p><p data-pid=\"YJG1HRMI\">完整页面，点击此处<a href=\"https://link.zhihu.com/?target=http%3A//deepred5.com/single-page/example-aspect-ratio.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">aspect-ratio-预览</a> (手机模式查看)</p><p data-pid=\"c3lhhrbK\">完整代码，直接右键源代码</p><h3>JS添加全局类</h3><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">detectAspectRatio</span><span class=\"p\">(</span><span class=\"nx\">aspectRatio</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"s1\">&#39;pc&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mobile1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mobile2&#39;</span><span class=\"p\">);</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">aspectRatio</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">375</span> <span class=\"o\">/</span> <span class=\"mi\">375</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">&#39;pc&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">aspectRatio</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">375</span> <span class=\"o\">/</span> <span class=\"mi\">490</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">&#39;mobile1&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">aspectRatio</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">375</span> <span class=\"o\">/</span> <span class=\"mi\">530</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">&#39;mobile2&#39;</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">function</span> <span class=\"nx\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">clientWidth</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">clientWidth</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">clientHeight</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">clientHeight</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">aspectRatio</span> <span class=\"o\">=</span> <span class=\"nx\">clientWidth</span> <span class=\"o\">/</span> <span class=\"nx\">clientHeight</span><span class=\"p\">;</span>\n  <span class=\"nx\">detectAspectRatio</span><span class=\"p\">(</span><span class=\"nx\">aspectRatio</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nx\">init</span><span class=\"p\">();</span>\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;resize&#39;</span><span class=\"p\">,</span> <span class=\"nx\">init</span><span class=\"p\">);</span>\n</code></pre></div><p data-pid=\"nA0X1EEs\">本质上就是把css的媒体查询<code>aspect-ratio</code>用js实现了一遍，所以这种方案区别不大。</p><h3>动态修改rem</h3><p data-pid=\"Pnm1GUib\">默认情况下，我们的<code>rem</code>是根据可视区域宽度进行计算的，但是在高度较小的情况下，我们可以动态的修改<code>rem</code>的参考对象，让它根据可视高度进行计算</p><p data-pid=\"RjT3G0xn\">我们甚至可以实现：无论窗口怎么变，我们的内容都保持原来的比例，并尽量占满窗口</p><p data-pid=\"08OTSsqd\">封装成一个通用<code>flexible.js</code>方法</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">defaultConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">pageWidth</span><span class=\"o\">:</span> <span class=\"mi\">750</span><span class=\"p\">,</span>\n  <span class=\"nx\">pageHeight</span><span class=\"o\">:</span> <span class=\"mi\">1334</span><span class=\"p\">,</span>\n  <span class=\"nx\">pageFontSize</span><span class=\"o\">:</span> <span class=\"mi\">32</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">flexible</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"nx\">defaultConfig</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span>\n    <span class=\"nx\">pageWidth</span> <span class=\"o\">=</span> <span class=\"nx\">defaultConfig</span><span class=\"p\">.</span><span class=\"nx\">pageWidth</span><span class=\"p\">,</span>\n    <span class=\"nx\">pageHeight</span> <span class=\"o\">=</span> <span class=\"nx\">defaultConfig</span><span class=\"p\">.</span><span class=\"nx\">pageHeight</span><span class=\"p\">,</span>\n    <span class=\"nx\">pageFontSize</span> <span class=\"o\">=</span> <span class=\"nx\">defaultConfig</span><span class=\"p\">.</span><span class=\"nx\">pageFontSize</span><span class=\"p\">,</span>\n  <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">config</span><span class=\"p\">;</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">pageAspectRatio</span> <span class=\"o\">=</span> <span class=\"nx\">defaultConfig</span><span class=\"p\">.</span><span class=\"nx\">pageAspectRatio</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">pageWidth</span> <span class=\"o\">/</span> <span class=\"nx\">pageHeight</span><span class=\"p\">);</span>\n  <span class=\"c1\">// 根据屏幕大小及dpi调整缩放和大小\n</span><span class=\"c1\"></span>  <span class=\"kd\">function</span> <span class=\"nx\">onResize</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">clientWidth</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">clientWidth</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">clientHeight</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">clientHeight</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">aspectRatio</span> <span class=\"o\">=</span> <span class=\"nx\">clientWidth</span> <span class=\"o\">/</span> <span class=\"nx\">clientHeight</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// 根元素字体\n</span><span class=\"c1\"></span>    <span class=\"kd\">let</span> <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"mi\">16</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">clientWidth</span> <span class=\"o\">&gt;</span> <span class=\"nx\">pageWidth</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 认为是ipad/pc\n</span><span class=\"c1\"></span>      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;认为是ipad/pc&#39;</span><span class=\"p\">);</span>\n      <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"nx\">pageFontSize</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">clientHeight</span> <span class=\"o\">/</span> <span class=\"nx\">pageHeight</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">aspectRatio</span> <span class=\"o\">&gt;</span> <span class=\"nx\">pageAspectRatio</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 宽屏移动端\n</span><span class=\"c1\"></span>      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;宽屏移动端&#39;</span><span class=\"p\">);</span>\n      <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"nx\">pageFontSize</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">clientHeight</span> <span class=\"o\">/</span> <span class=\"nx\">pageHeight</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 正常移动端\n</span><span class=\"c1\"></span>      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;正常移动端&#39;</span><span class=\"p\">);</span>\n      <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"nx\">pageFontSize</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"nx\">clientWidth</span> <span class=\"o\">/</span> <span class=\"nx\">pageWidth</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontSize</span> <span class=\"o\">=</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">e</span><span class=\"si\">}</span><span class=\"sb\">px`</span><span class=\"p\">;</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">realitySize</span> <span class=\"o\">=</span> <span class=\"nb\">parseFloat</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">getComputedStyle</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">).</span><span class=\"nx\">fontSize</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"o\">!==</span> <span class=\"nx\">realitySize</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">e</span> <span class=\"o\">=</span> <span class=\"nx\">e</span> <span class=\"o\">*</span> <span class=\"nx\">e</span> <span class=\"o\">/</span> <span class=\"nx\">realitySize</span><span class=\"p\">;</span>\n      <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontSize</span> <span class=\"o\">=</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">e</span><span class=\"si\">}</span><span class=\"sb\">px`</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"kr\">const</span> <span class=\"nx\">handleResize</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">onResize</span><span class=\"p\">();</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;resize&#39;</span><span class=\"p\">,</span> <span class=\"nx\">handleResize</span><span class=\"p\">);</span>\n  <span class=\"nx\">onResize</span><span class=\"p\">();</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nx\">defaultSize</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">removeEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;resize&#39;</span><span class=\"p\">,</span> <span class=\"nx\">handleResize</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">defaultSize</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">defaultSize</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;string&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontSize</span> <span class=\"o\">=</span> <span class=\"nx\">defaultSize</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">defaultSize</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;number&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontSize</span> <span class=\"o\">=</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">defaultSize</span><span class=\"si\">}</span><span class=\"sb\">px`</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">};</span>\n</code></pre></div><p data-pid=\"0mCJ5SQE\">使用时:</p><div class=\"highlight\"><pre><code class=\"language-text\">flexible({ pageFontSize: 100 });</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">safe-content</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mf\">7.5</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mf\">13.34</span><span class=\"kt\">rem</span><span class=\"p\">;</span>\n  <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">absolute</span><span class=\"p\">;</span>\n  <span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">bottom</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">right</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">margin</span><span class=\"p\">:</span> <span class=\"kc\">auto</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"E-Ic1wsT\">这时，只需要把<code>safe-content</code>的<code>witdh</code>和<code>height</code>写死，就能保证宽高比永远保持为<code>750 * 1334</code></p><p data-pid=\"i5De1iDr\">完整页面，点击此处<a href=\"https://link.zhihu.com/?target=http%3A//deepred5.com/single-page/example-js-rem.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">动态修改rem-预览</a> (手机模式查看)</p><p data-pid=\"ISYBTDHI\">改变屏幕大小，可以看到<code>safe-content</code>一直都保持正常的宽高比，并且总是宽度占满(宽度比高度小)或者高度占满(高度比宽度小)</p><p data-pid=\"WC6pdkB5\">完整代码，直接右键源代码</p><p data-pid=\"ZXJ5Ol41\">另外一个简化版本</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"nx\">init</span><span class=\"p\">(</span><span class=\"nx\">screenRatioByDesign</span> <span class=\"o\">=</span> <span class=\"mi\">750</span> <span class=\"o\">/</span> <span class=\"mi\">1334</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">docEle</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">setHtmlFontSize</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">screenRatio</span> <span class=\"o\">=</span> <span class=\"nx\">docEle</span><span class=\"p\">.</span><span class=\"nx\">clientWidth</span> <span class=\"o\">/</span> <span class=\"nx\">docEle</span><span class=\"p\">.</span><span class=\"nx\">clientHeight</span><span class=\"p\">;</span>\n    <span class=\"c1\">// 7.5 = 750 / 100  (100是设计稿上的1rem大小)\n</span><span class=\"c1\"></span>    <span class=\"kd\">var</span> <span class=\"nx\">fontSize</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n      <span class=\"nx\">screenRatio</span> <span class=\"o\">&gt;</span> <span class=\"nx\">screenRatioByDesign</span>\n        <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"nx\">screenRatioByDesign</span> <span class=\"o\">/</span> <span class=\"nx\">screenRatio</span><span class=\"p\">)</span>\n        <span class=\"o\">:</span> <span class=\"mi\">1</span>\n    <span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nx\">docEle</span><span class=\"p\">.</span><span class=\"nx\">clientWidth</span> <span class=\"o\">/</span> <span class=\"mf\">7.5</span><span class=\"p\">;</span>\n    <span class=\"nx\">docEle</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">fontSize</span> <span class=\"o\">=</span> <span class=\"nx\">fontSize</span><span class=\"p\">.</span><span class=\"nx\">toFixed</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&#34;px&#34;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"nx\">setHtmlFontSize</span><span class=\"p\">()</span>\n\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;resize&#39;</span><span class=\"p\">,</span> <span class=\"nx\">setHtmlFontSize</span><span class=\"p\">)</span>\n<span class=\"p\">})()</span>\n</code></pre></div><p data-pid=\"5OndSje_\">完整页面，点击此处<a href=\"https://link.zhihu.com/?target=http%3A//deepred5.com/single-page/example-js-rem2.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">动态修改rem2-预览</a> (手机模式查看)</p><h3>动态缩放整体页面</h3><p data-pid=\"ZGKbcMHO\">前面的适配方案，我们都借助了<code>rem</code>进行页面的大小缩放。其实我们也可以直接使用<code>px</code>进行页面的布局，最后统一使用<code>js</code>进行整体缩放</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">winWidth</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">clientWidth</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">winHeight</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">documentElement</span><span class=\"p\">.</span><span class=\"nx\">clientHeight</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">winScale</span> <span class=\"o\">=</span> <span class=\"nx\">winWidth</span> <span class=\"o\">/</span> <span class=\"nx\">winHeight</span><span class=\"p\">;</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">page</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;.safe-content&#39;</span><span class=\"p\">);</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">pageWidth</span> <span class=\"o\">=</span> <span class=\"mi\">750</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">pageHeight</span> <span class=\"o\">=</span> <span class=\"mi\">1334</span><span class=\"p\">;</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">pageScale</span> <span class=\"o\">=</span> <span class=\"nx\">pageWidth</span> <span class=\"o\">/</span> <span class=\"nx\">pageHeight</span><span class=\"p\">;</span>\n\n    <span class=\"kr\">const</span> <span class=\"nx\">origin</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;50% 50% 0&#39;</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">let</span> <span class=\"nx\">initialScale</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">winScale</span> <span class=\"o\">&gt;</span> <span class=\"nx\">pageScale</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 宽度长了，但是高度不够\n</span><span class=\"c1\"></span>      <span class=\"c1\">// 高度占满，宽度水平居中\n</span><span class=\"c1\"></span>      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;高度占满，宽度水平居中&#39;</span><span class=\"p\">);</span>\n      <span class=\"nx\">initialScale</span> <span class=\"o\">=</span> <span class=\"nx\">winHeight</span> <span class=\"o\">/</span> <span class=\"nx\">pageHeight</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;宽度占满，高度垂直居中&#39;</span><span class=\"p\">);</span>\n      <span class=\"c1\">// 高度长了，但是宽度不够\n</span><span class=\"c1\"></span>      <span class=\"c1\">// 宽度占满，高度垂直居中\n</span><span class=\"c1\"></span>      <span class=\"nx\">initialScale</span> <span class=\"o\">=</span> <span class=\"nx\">winWidth</span> <span class=\"o\">/</span> <span class=\"nx\">pageWidth</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">width</span> <span class=\"o\">=</span> <span class=\"nx\">pageWidth</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;px&#39;</span><span class=\"p\">;</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">height</span> <span class=\"o\">=</span> <span class=\"nx\">pageHeight</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;px&#39;</span><span class=\"p\">;</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">transform</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;scale(&#39;</span> <span class=\"o\">+</span> <span class=\"nx\">initialScale</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;)&#39;</span><span class=\"p\">;</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">transformOrigin</span> <span class=\"o\">=</span> <span class=\"nx\">origin</span><span class=\"p\">;</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">left</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">pageWidth</span> <span class=\"o\">-</span> <span class=\"nx\">winWidth</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;px&#39;</span><span class=\"p\">;</span>\n    <span class=\"nx\">page</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">top</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">pageHeight</span> <span class=\"o\">-</span> <span class=\"nx\">winHeight</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"o\">-</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;px&#39;</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">init</span><span class=\"p\">();</span>\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;resize&#39;</span><span class=\"p\">,</span> <span class=\"nx\">init</span><span class=\"p\">);</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">safe-content</span> <span class=\"p\">{</span>\n  <span class=\"c\">/* 布局直接写死成设计稿上的大小 */</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">750</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">1334</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">position</span><span class=\"p\">:</span> <span class=\"kc\">absolute</span><span class=\"p\">;</span>\n  <span class=\"k\">left</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">top</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">border</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"kt\">px</span> <span class=\"kc\">solid</span> <span class=\"kc\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">gift-logo</span> <span class=\"p\">{</span>\n  <span class=\"c\">/* 布局直接写死成设计稿上的大小 */</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mi\">679</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mi\">703</span><span class=\"kt\">px</span><span class=\"p\">;</span>\n  <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;./img/game-title.png&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">center</span> <span class=\"o\">/</span> <span class=\"kc\">contain</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"hZNDqBK-\">这时，只需要把<code>safe-content</code>的<code>witdh</code>和<code>height</code>写死，就能保证宽高比永远保持为<code>750 * 1334</code></p><p data-pid=\"pZvf0HMO\">完整页面，点击此处<a href=\"https://link.zhihu.com/?target=http%3A//deepred5.com/single-page/example-js-scale.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">动态缩放整体页面-预览</a> (手机模式查看)</p><p data-pid=\"hZpDcFDo\">改变屏幕大小，可以看到<code>safe-content</code>一直都保持正常的宽高比，并且总是宽度占满(宽度比高度小)或者高度占满(高度比宽度小)</p><p data-pid=\"hq1xPoXP\">完整代码，直接右键源代码</p><h3>vw和vh</h3><p data-pid=\"NVo3d0Xw\">单屏页面布局时，垂直定位尽可能相对高度进行定位，这时可以选择使用百分比或者<code>vh</code></p><div class=\"highlight\"><pre><code class=\"language-scss\"><span class=\"k\">@use</span> <span class=\"s1\">&#39;sass:math&#39;</span><span class=\"p\">;</span>\n\n<span class=\"k\">@function</span> <span class=\"nt\">px2vh</span><span class=\"o\">(</span><span class=\"err\">$</span><span class=\"nt\">px</span><span class=\"o\">,</span> <span class=\"err\">$</span><span class=\"nt\">height</span><span class=\"nd\">:</span> <span class=\"nt\">1334</span><span class=\"o\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return</span> <span class=\"nt\">math</span><span class=\"nc\">.div</span><span class=\"o\">(</span><span class=\"err\">$</span><span class=\"nt\">px</span><span class=\"o\">,</span> <span class=\"err\">$</span><span class=\"nt\">height</span><span class=\"o\">)</span> <span class=\"o\">*</span> <span class=\"nt\">100</span> <span class=\"o\">*</span> <span class=\"nt\">1vh</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"Br8lnu83\">可以封装一个<code>scss</code>方法，将测量得到的<code>px</code>转换成<code>vh</code></p><div class=\"highlight\"><pre><code class=\"language-scss\"><span class=\"nc\">.demo</span> <span class=\"p\">{</span>\n  <span class=\"nt\">position</span><span class=\"nd\">:</span> <span class=\"nt\">absolute</span><span class=\"p\">;</span>\n  <span class=\"nt\">left</span><span class=\"nd\">:</span> <span class=\"nt\">0</span><span class=\"p\">;</span>\n  <span class=\"nt\">top</span><span class=\"nd\">:</span> <span class=\"nt\">25</span><span class=\"err\">%</span><span class=\"p\">;</span> <span class=\"c1\">// 垂直定位单位为%\n</span><span class=\"c1\"></span>  <span class=\"nt\">top</span><span class=\"nd\">:</span> <span class=\"nt\">px2vh</span><span class=\"o\">(</span><span class=\"nt\">100</span><span class=\"o\">)</span><span class=\"p\">;</span> <span class=\"c1\">// 垂直定位单位为vh\n</span><span class=\"c1\"></span>  <span class=\"nt\">width</span><span class=\"nd\">:</span> <span class=\"nt\">100</span><span class=\"err\">%</span><span class=\"p\">;</span>\n  <span class=\"nt\">height</span><span class=\"nd\">:</span> <span class=\"nt\">1rem</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"Q1Y6Mg-A\">如果希望页面的元素在不同的高度下，均能完整展示，可以全部使用<code>vh</code>进行布局</p><div class=\"highlight\"><pre><code class=\"language-css\"><span class=\"p\">.</span><span class=\"nc\">gift-title</span> <span class=\"p\">{</span>\n  <span class=\"k\">width</span><span class=\"p\">:</span> <span class=\"mf\">25.86</span><span class=\"kt\">vh</span><span class=\"p\">;</span>\n  <span class=\"k\">height</span><span class=\"p\">:</span> <span class=\"mf\">4.72</span><span class=\"kt\">vh</span><span class=\"p\">;</span>\n  <span class=\"k\">background</span><span class=\"p\">:</span> <span class=\"nb\">url</span><span class=\"p\">(</span><span class=\"s1\">&#39;./img/congratulate.png&#39;</span><span class=\"p\">)</span> <span class=\"kc\">no-repeat</span> <span class=\"kc\">center</span> <span class=\"o\">/</span> <span class=\"kc\">contain</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"p\">.</span><span class=\"nc\">gift-name</span> <span class=\"p\">{</span>\n  <span class=\"k\">font-size</span><span class=\"p\">:</span> <span class=\"mf\">2.39</span><span class=\"kt\">vh</span><span class=\"p\">;</span>\n<span class=\"p\">}</span></code></pre></div><p data-pid=\"thk3y6bp\">完整页面，点击此处<a href=\"https://link.zhihu.com/?target=http%3A//deepred5.com/single-page/example-vh.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vh-预览</a> (手机模式查看)</p><p data-pid=\"_YCAbF2v\">完整代码，直接右键源代码</p><h3>总结</h3><p data-pid=\"RTOp1ELV\">前面介绍的5种适配方案，可以总结如下: </p><p data-pid=\"_B39XkgI\">1. 使用<code>vw</code>和<code>vh</code>这两个原生的<code>css3</code>单位，天然支持宽度和高度的适配：对于需要高度适配的元素，使用<code>vh</code>，对于需要宽度适配的元素，使用<code>vw</code> </p><p data-pid=\"s5c4xp7q\">2. <code>rem</code>相对宽度计算：划分几个高度区域，对于特定的宽高比，单独进行适配。整体页面还是相对宽度进行缩放，只针对部分宽高比，对页面进行特定的样式改动 </p><p data-pid=\"n1tB8h06\">3. <code>rem</code>动态改变：即可相对宽度，也可相对高度进行计算，此种方案，可以做到<b>保持设计稿的宽高比例，并尽量占满窗口</b>的极致效果 </p><p data-pid=\"GXEsdWb7\">4. 不使用<code>rem</code>，写死<code>px</code>，直接<code>js</code>整体缩放页面：此种方案，也可以做到<b>保持设计稿的宽高比例，并尽量占满窗口</b>的极致效果</p><p data-pid=\"dXd8zNEU\">对于<b>保持设计稿的宽高比例，并尽量占满窗口</b>的效果，可以点击下面的demo进行预览理解:</p><p data-pid=\"418MzXGF\">调整屏幕大小，可以看见页面会上下居中或者左右居中，并且保持宽高比</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7a19fa1b7b0cd9a25d6f738221db29a6_b.gif\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"348\" data-thumbnail=\"https://pic3.zhimg.com/v2-7a19fa1b7b0cd9a25d6f738221db29a6_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"714\" data-original=\"https://pic3.zhimg.com/v2-7a19fa1b7b0cd9a25d6f738221db29a6_r.jpg\" data-original-token=\"v2-7a19fa1b7b0cd9a25d6f738221db29a6\"/><figcaption>保持设计稿的宽高比例，并尽量占满窗口</figcaption></figure><p class=\"ztext-empty-paragraph\"><br/></p><ul><li data-pid=\"MSFhgnfk\"><a href=\"https://link.zhihu.com/?target=http%3A//deepred5.com/single-page/flexible.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">保持16:9的宽高比-rem动态改变</a></li><li data-pid=\"D0b8dkwE\"><a href=\"https://link.zhihu.com/?target=http%3A//deepred5.com/single-page/flexible2.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">保持16:9的宽高比-rem动态改变2</a></li><li data-pid=\"E11Xey39\"><a href=\"https://link.zhihu.com/?target=http%3A//deepred5.com/single-page/flexible3.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">保持16:9的宽高比-整体缩放</a></li></ul><p data-pid=\"8lOk36Qc\">源码直接右键即可查看</p><h3>参考</h3><ul><li data-pid=\"fAZT20BH\"><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903845617729549\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关于移动端适配，你必须要知道的</a></li><li data-pid=\"XR7rfmfa\"><a href=\"https://link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000017784801\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">不要再问我移动适配的问题了</a></li><li data-pid=\"5ap6Jfnr\"><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/lst619247/p/13539590.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">device-aspect-ratio与aspect-ratio单屏布局</a></li><li data-pid=\"6oKIHvo1\"><a href=\"https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/69ecd8ddbf75\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">翻页H5全分辨率适配最佳实践</a></li><li data-pid=\"f5KegRsk\"><a href=\"https://link.zhihu.com/?target=https%3A//evestorm.github.io/posts/61674/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">大屏上的全屏页面的自适应适配方案</a></li><li data-pid=\"qzyyGXj9\"><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/yangzhou33/p/9123998.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">移动端单屏解决方案</a></li><li data-pid=\"1c8gzUcU\"><a href=\"https://link.zhihu.com/?target=https%3A//www.cnblogs.com/yangzhou33/p/9136617.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">移动端单屏解决方案(续)</a></li><li data-pid=\"UDEyGn64\"><a href=\"https://link.zhihu.com/?target=https%3A//songyazhao.github.io/2017/02/17/%25E5%25A6%2582%25E4%25BD%2595%25E6%2589%2593%25E9%2580%25A0%25E4%25B8%2580%25E4%25B8%25AA%25E9%25AB%2598%25E6%2595%2588%25E9%2580%2582%25E9%2585%258D%25E7%259A%2584H5/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">如何打造一个高效适配的H5</a></li><li data-pid=\"XLaMAUHt\"><a href=\"https://link.zhihu.com/?target=https%3A//juejin.cn/post/6844903785576267790\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">全屏HTML5适配个人见解</a></li><li data-pid=\"eF5CW3oS\"><a href=\"https://link.zhihu.com/?target=http%3A//xiaoyuze88.github.io/blog/2015/05/12/%25E9%2580%259A%25E8%25BF%2587rem%25E5%25B8%2583%25E5%25B1%2580%2Bmedia-query%25E7%259A%2584aspect-ratio%25E5%25AE%259E%25E7%258E%25B0%25E7%25A7%25BB%25E5%258A%25A8%25E7%25AB%25AF%25E5%2585%25A8%25E6%259C%25BA%25E5%259E%258B%25E9%2580%2582%25E9%2585%258D%25E8%25A6%2586%25E7%259B%2596\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">通过rem布局+media-query:aspect-ratio实现移动端全机型适配覆盖</a></li></ul>",
            "voteup_count": 7,
            "column": {
                "id": "mahou",
                "type": "column",
                "url_token": "mahou",
                "title": "简单易懂的现代魔法",
                "url": "https://zhuanlan.zhihu.com/mahou",
                "created": 1536113854,
                "updated": 1591369065,
                "description": "麻瓜的世界",
                "image_url": "https://pica.zhimg.com/v2-c5c45ff51216c62661b87575a8bc7d1e_720w.jpg?source=d16d100b"
            },
            "comment_count": 0
        },
        "created": "2022-10-09T19:26:46+08:00"
    },
    {
        "content": {
            "id": 2662605848,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/532965157/answer/2662605848",
            "created_time": 1662462426,
            "updated_time": 1662462426,
            "question": {
                "type": "question",
                "id": 532965157,
                "title": "从事前端开发的你，如今过的怎么样了？",
                "question_type": "normal",
                "created": 1652618237,
                "updated_time": 1652618237,
                "url": "https://www.zhihu.com/question/532965157",
                "is_deleted": false
            },
            "author": {
                "id": "72077cc199fba7e0ae809bb8716995e9",
                "url_token": "riskers",
                "name": "一波不是一波",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/053117fdd7901ee47043e8eb4679c7d4_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/053117fdd7901ee47043e8eb4679c7d4.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/72077cc199fba7e0ae809bb8716995e9",
                "user_type": "people",
                "headline": "工程师",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-9d6bf92a514bdd492483df0aa390067b.png",
                        "night_mode_url": "https://picx.zhimg.com/v2-9b321c50a1718d276d9f02f011caf61f.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 128,
            "comment_count": 49,
            "thanks_count": 10,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"xTmMTGYt\">回老家 remote 了</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"hWfn01LZ\">不过不是前端了，或者说工作内容不全是前端了</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"iIMlMzbt\">一定要多学、多见，不要局限在「前端」这一个领域里。比如我，中间就写了三年 Java，从对后端一窍不通，到现在后端架构也能跟着设计。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"fI5887Zb\">人还是不要给自己设限，一直很好奇知乎总有人对比 React、Vue 这种框架，甚至成为某种政治正确的东西。或者对比 React Query、SWR、Redux、Recoil 这些工具库，总能说出个 123 来。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"E0iRm5FF\">我觉得，「一样东西会一个就行了，因为都是大同小异的」。比如 React、Vue、Angular，我都写过，对 React 最熟，其他的知道概念就行了。比如 React Query 我会了，就不要再对比 SWR 了吧。不要自己给自己找麻烦，真正用到的时候，看看学学不就行了吗。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"ui0kZPLm\">把时间用在该用的地方。</p>",
            "excerpt": "回老家 remote 了 不过不是前端了，或者说工作内容不全是前端了 一定要多学、多见，不要局限在「前端」这一个领域里。比如我，中间就写了三年 Java，从对后端一窍不通，到现在后端架构也能跟着设计。 人还是不要给自己设限，一直很好奇知乎总有人对比 React、Vue 这种框架，甚至成为某种政治正确的东西。或者对比 React Query、SWR、Redux、Recoil 这些工具库，总能说出个 123 来。 我觉得，「一样东西会一个就行了，因为都是大…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxiYyND1CSDO074mkgIlCgk1MTQxOTY1NDkSCjI2NjI2MDU4NDgYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-09-06T19:07:06+08:00"
    },
    {
        "content": {
            "id": 571182880,
            "title": "经验总结npm、yarn、pnpm和tnpm",
            "type": "article",
            "excerpt_title": "不管是yarn、pnpm还是tnpm的产生都是为了解决npm的不足，我们先来了解下npm是如何进行包管理的。 在npm@2.x中，包的目录结构是树状结构,node_modules是嵌套的，如下图 [图片] 这种结构是有问题的，多个包之间有公共的依赖，这样嵌套同样的依赖会复制很多次，从而占据很多磁盘空间。 除此之外，windows 的文件路径最长是 260 多个字符，这样嵌套是会超过 windows 路径的长度限制的。 当npm 还没解决这些问题，yarn给出了新的解决方案。 y…",
            "url": "https://zhuanlan.zhihu.com/p/571182880",
            "image_url": "",
            "created": 1665131221,
            "updated": 1672729668,
            "author": {
                "id": "7cbc18a589b874db10bef9508021daa1",
                "url_token": "18256035820",
                "name": "worm",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-3fb04617e06b83d82afa54fef8325a69_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-3fb04617e06b83d82afa54fef8325a69.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/7cbc18a589b874db10bef9508021daa1",
                "user_type": "people",
                "headline": "无",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://pic1.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1519615723
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"tG3p0Wk9\">不管是yarn、pnpm还是tnpm的产生都是为了解决npm的不足，我们先来了解下npm是如何进行包管理的。</p><p data-pid=\"9HltILDx\">在npm@2.x中，包的目录结构是树状结构,node_modules是嵌套的，如下图</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1cbc8a04717ebf86107841218e08c4fa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"558\" data-rawheight=\"466\" class=\"origin_image zh-lightbox-thumb\" width=\"558\" data-original=\"https://pic3.zhimg.com/v2-1cbc8a04717ebf86107841218e08c4fa_r.jpg\" data-original-token=\"v2-b8e12d8e07c05fc06c6cb4979a67c11f\"/></figure><p data-pid=\"pyz051Id\">这种结构是有问题的，多个包之间有公共的依赖，这样嵌套同样的依赖会复制很多次，从而占据很多磁盘空间。</p><p data-pid=\"mV1fKboe\">除此之外，windows 的文件路径最长是 260 多个字符，这样嵌套是会超过 windows 路径的长度限制的。</p><p data-pid=\"EioASPSS\">当npm 还没解决这些问题，yarn给出了新的解决方案。</p><p data-pid=\"Rnl4tSS7\">yarn的解决方案就是扁平化的node_modules目录结构, npm@3.x之后也采取了和yarn一样的方式，如图</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-afd77607ce10c2c2c314b22762c15f11_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"514\" data-rawheight=\"964\" class=\"origin_image zh-lightbox-thumb\" width=\"514\" data-original=\"https://pic2.zhimg.com/v2-afd77607ce10c2c2c314b22762c15f11_r.jpg\" data-original-token=\"v2-ae12558a1a6686dc0a3ea07bda151e30\"/></figure><p data-pid=\"YiIjaLCP\">这个方案解决了层级依赖太深的问题，一定程度上解决了多重身的问题，无法彻底解决重复依赖问题，具体可以参看这个<a href=\"https://link.zhihu.com/?target=https%3A//rushjs.io/zh-cn/pages/advanced/npm_doppelgangers/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NPM 分身 | Rush</a>同时扁平化也带来了一些其他的问题，</p><ol><li data-pid=\"K25oPfIE\">幽灵依赖问题</li><li data-pid=\"4MLjEpiM\"> 扁平化算法的复杂度和性能损耗</li></ol><blockquote data-pid=\"E35wBBiH\">关于什么是幻影依赖可以参照这个<a href=\"https://link.zhihu.com/?target=https%3A//rushjs.io/zh-cn/pages/advanced/phantom_deps/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">幻影依赖 | Rush</a>，简而言之，项目依赖的依赖也会被放到node_modules目录下，打个比方a包依赖b包，项目中也需要使用b包，实际使用中并没有显式的安装b包，但是b包依然可以正常使用（package.json中没有b包相关信息），这里b就是幻影包，这样a包如果哪天不依赖b包了，或者a包被其他包替代，就会导致项目出错。</blockquote><p data-pid=\"xZNwBkla\"><a href=\"https://link.zhihu.com/?target=https%3A//pnpm.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">pnpm</a>全称是 “Performant NPM”，即高性能的 npm。它结合软硬链接与新的依赖组织方式，大大提升了包管理的效率，也同时解决了 “幻影依赖” 的问题，让包管理更加规范，减少潜在风险发生的可能性。</p><p data-pid=\"pPVUXe70\">pnpm的初衷是为了节约磁盘空间和提高安装速度，它想做到的是不同的工作区也是共享一个包（其实不止于此，同一个包的不同版本之间也有共享）相比npm、yarn，多工作区场景占用的磁盘空间更小，要想了解实现原理，首先需要搞清楚什么是软链接和硬链接。</p><p data-pid=\"qvUhUY_Q\">硬链接： 硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬链接文件均被删除。</p><p data-pid=\"9Bzwp__G\">软链接：另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p><p data-pid=\"erGlq69T\">通过组合使用软连接和硬连接，pnpm实现了极致的磁盘空间节省，如图</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2ced499a98974106e484b0930d383cbb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2920\" data-rawheight=\"1392\" class=\"origin_image zh-lightbox-thumb\" width=\"2920\" data-original=\"https://pic4.zhimg.com/v2-2ced499a98974106e484b0930d383cbb_r.jpg\" data-original-token=\"v2-ff03e34da97405a5919439650a067153\"/></figure><p data-pid=\"VsQ77RoK\">其中node_modules根目录下的是项目package.json中声明的包,注意未将子包提升到根目录，是通过软链接来实现，这样的结构就解决了上文中所说的幽灵依赖问题，同时node_modules下面还有个.pnpm文件夹，这里是包的扁平化结构，包含子包，是通过硬链接来实现的；</p><p data-pid=\"aiQwQMXJ\">根目录下的软链接指向.pnpm目录下对应的文件。真实的文件一般是存储在磁盘根目录（比如我的windows下在D盘根目录下~/.pnpm-store），因为采用的是软硬链接相结合的方式，所以即使是在不同工作区其实也是共享的同一块磁盘空间。</p><p data-pid=\"eviHpj4O\">这样看来pnpm似乎都是优点，其实也是有一些局限性的。</p><ul><li data-pid=\"6SuVGmvH\">pnpm无法重复覆盖已安装的版本，你可能觉得为什么要覆盖安装相同的版本，实际项目过程中会发现pnpm存在实际安装的版本与pnpm_lock.yaml中版本不一致的情况，这可能是因为安装的包某个版本有重大bug，需要回退到某个版本导致的，一旦遇到基本只能通过删除磁盘根目录缓存去重新安装。</li><li data-pid=\"Np5s4PTP\">子依赖提升到同级的目录结构的<b>兼容性问题</b>，虽然由于 Node.js 的父目录上溯寻址逻辑，可以实现兼容。但对于类似 Egg、Webpack 的插件加载逻辑，在用到相对路径的地方，需要去适配。</li><li data-pid=\"tlPFCmhW\">不同应用的依赖是硬链接到同一份文件，调试时修改了文件有可能会无意中影响到其他项目。</li><li data-pid=\"9uyiLrIA\">软链在不同操作系统的实现不太一样，且在非 SSD 的硬盘上，还是会有一定的磁盘 IO 损耗的，即使是不支持，pnpm也有回退的方式，可以将<a href=\"https://link.zhihu.com/?target=https%3A//pnpm.io/zh/npmrc%23node-linker\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">node-linker</a>设置为<code>hoisted</code>。 这将指示 pnpm 创建一个类似于 npm 和 Yarn 的扁平化node_modules 目录。</li><li data-pid=\"1Jwt369i\">Binstubs（在 <code>node_modules/.bin</code>中的文件）总是 shell 文件，而不是指向 JS 文件的符号链接。 创建 shell 文件是为了帮助支持插件的 CLI 的程序在特殊的 <code>node_modules</code> 结构中能够正确地找到它们的插件。 这是很少有的问题，如果您希望文件是 JS 文件，请直接引用原始文件，如 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/pnpm/pnpm/issues/736\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">#736</a> 所示，这个暂时还没遇到，具体不是很清楚，有兴趣可以自己深扒下。</li></ul><p data-pid=\"GAi9ajkA\">说了这么多那pnpm到底值得使用么，答案是肯定，以上所列出来的问题在普通项目里大多数情况下都不会有问题的，而且pnpm的社区也是非常活跃，即使出现问题也是可以解决的，相比较优势，我觉得可以容忍，尤其有缓存后的二次安装速度，那快了不是一点点。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"6I2jA9N1\">关于yarn和npm项目更新为pnpm，其实成本还是比较低的，主要是解决幽灵依赖问题，需要显式的将项目中用到的幽灵依赖加入到package.json中，退一步说，这本就是应该处理的问题，他有着潜在的风险。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"cm5pnCIu\">tnpm也是我最近才了解到的，tnpm是阿里提出的，目标是优化依赖安装的速度，在我看来它更适用于企业私有域，更像一套融合阿里生态的完整的解决方案，使用了一些黑魔法：<a href=\"https://zhuanlan.zhihu.com/p/106719192\" class=\"internal\">FUSE</a>(FileSystem in Userspace)，即<b>用户态文件系统</b>。那到底什么是tnpm，可以看下面一张图</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-34cc2d8c59f9cabd52f32c1da7c1149c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"525\" class=\"origin_image zh-lightbox-thumb\" width=\"1440\" data-original=\"https://pic1.zhimg.com/v2-34cc2d8c59f9cabd52f32c1da7c1149c_r.jpg\" data-original-token=\"v2-841ba4549d13e29ff4e9f80e25de7f54\"/></figure><p data-pid=\"R_kwHsBd\">简单来说，tnpm 是阿里巴巴及蚂蚁集团的企业服务，基于 cnpm 之上做了企业级的能力定制，性能优势可以看下官方给出的测试数据</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5ffff415aaf7e419cbfb42ace40b115f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1342\" data-rawheight=\"764\" class=\"origin_image zh-lightbox-thumb\" width=\"1342\" data-original=\"https://pic4.zhimg.com/v2-5ffff415aaf7e419cbfb42ace40b115f_r.jpg\" data-original-token=\"v2-e744e3be6910af6e0233620a294d94b1\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d74819500b84ec0bcf55f87af97fbef0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"604\" class=\"origin_image zh-lightbox-thumb\" width=\"1440\" data-original=\"https://pic1.zhimg.com/v2-d74819500b84ec0bcf55f87af97fbef0_r.jpg\" data-original-token=\"v2-12c8dd3743805173197e04717783123e\"/></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7654bfd864b91f0c04a6698b7a7d751f_b.jpg\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"565\" class=\"origin_image zh-lightbox-thumb\" width=\"1440\" data-original=\"https://pic4.zhimg.com/v2-7654bfd864b91f0c04a6698b7a7d751f_r.jpg\" data-original-token=\"v2-a9dea2159a3e36adb0715a3731312ec3\"/><figcaption>无 lock + cache 情况，通过 strace 和 charles 采集了相关数据，及统计对应的文件数和体积。</figcaption></figure><p data-pid=\"huI7QwP1\">简单解读下：</p><ul><li data-pid=\"E4BD64zV\">文件数：扁平化依赖 和 软硬链接 的数量基本上差不多，都大幅减少了磁盘占用。</li><li data-pid=\"hXOIv2gK\">磁盘 IO：一个重要的指标，文件写入次数直接关系到安装速度。</li><li data-pid=\"q_NErjX7\">网络速度：体现的是安装过程是否能尽可能的跑满带宽，越大越好。</li><li data-pid=\"8m9-tAiB\">请求数：包括 tgz 下载数和查询包信息数，基本上都近似为模块个数。</li></ul><p data-pid=\"dupiZcjX\">从数据中可以看到，tnpm 对 磁盘 IO 和 网络 IO 都有较大的优化。</p><p data-pid=\"e7oldWiU\">那它究竟是如何优化的呢？概括来说主要是通过以下三个方面：</p><ol><li data-pid=\"Lo2bWJ2W\">优化依赖分析速度，在企业内部私有化部署的 Registry 开启依赖关系图分析能力，从而在服务端生成依赖关系图，并实现了多级缓存策略；由于服务端资源限制，该能力不对公共镜像站服务开放。</li><li data-pid=\"lz3D1Trt\">http请求预热，一次 tgz 的下载过程，会先访问 registry，然后被 302 到 云存储下载地址，通过提前预热，可以提高并发度，从而减少总的 HTTP 耗时。</li><li data-pid=\"gbhl-Ims\">提高IO速度，在海量的依赖包的情况下，小文件的频繁写入会导致文件 IO 瓶颈。仅把 tgz 解压为 tar 文件，tar 是归档文件格式，很容易在写入磁盘时适当地合并文件，1000 多个 tgz 最终合并存储为 40 个 tar；那tar文件如何使用呢？这就涉及上文提到的FUSE，<code>node_modules</code>通过 FUSE + 依赖关系图 映射到 tar 归档文件，省去了解压的文件 IO；最后， 用 Rust 替代node实现文件下载和解压（rust这块性能优于node），用 Rust 封装了 napi 模块供 tnpm 调用。</li></ol><p data-pid=\"oZGJ_s84\">同时tnpm中提到pnpm中所有项目本质公用一份文件，本地开发调试时很容易修改了一个文件影响了所有项目，tnpm通过使用OverlayFS来解决这个问题，通过复用底层文件，达到节省空间的目的，并支持独立的文件修改，隔离不同应用的互相干扰，安全的全局复用一份缓存<b>，</b>类似于Docker 中的镜像，具体大家可以自己去扒下。</p><p data-pid=\"bcIFgCOD\">总结：tnpm 比起 pnpm 的速度优势在于 依赖关系图 的 5 秒 + FUSE 免解压的 4 秒，且tnpm 初衷并不是另一个包管理器的竞品，它专注的领域是企业的私有化 Registry 服务。而 npmfs 在设计之初就不希望绑定特定的包管理器。</p><p data-pid=\"HoCn97V5\">以上。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"BJt5Ixbo\">参考资料</p><p data-pid=\"2IWYXJ2P\"><a href=\"https://link.zhihu.com/?target=https%3A//pnpm.io/zh/motivation\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">pnpm.io/zh/motivation</span><span class=\"invisible\"></span></a></p><p data-pid=\"oEPedT25\"><a href=\"https://zhuanlan.zhihu.com/p/549189023\" class=\"internal\">神说要有光：pnpm 是凭什么对 npm 和 yarn 降维打击的</a></p><p data-pid=\"YYS1gYQz\"><a href=\"https://zhuanlan.zhihu.com/p/553804414\" class=\"internal\">黄子毅：精读《pnpm》</a></p><p data-pid=\"eV0T1Tqi\"><a href=\"https://zhuanlan.zhihu.com/p/455809528\" class=\"internal\">天猪：深入浅出 tnpm rapid 模式 - 如何比 pnpm 快 10 秒</a></p>",
            "voteup_count": 18,
            "comment_count": 0
        },
        "created": "2022-10-07T16:27:01+08:00"
    },
    {
        "content": {
            "id": "1492607736500662272",
            "title": "【6min轻松跟练】颈椎最喜欢的7个动作，缓解肩颈疼痛！",
            "image_url": "https://picx.zhimg.com/v2-ae9d1072f4d6694f0ed7c6f761b53c3a_r.jpg?source=0df5f383",
            "type": "zvideo",
            "created_at": 1648645415,
            "updated_at": 1648825377,
            "description": "⭐️6分钟康复跟练版来啦！不一定每个都适合你，选择做的舒服的几个动作就行，随时随地都可以做，帮助你缓解颈椎疼痛，舒缓颈椎间盘的压力。\n\t\n⭐️每天一遍，改善头前伸，消除富贵包，保护颈椎健康！\n\t\n⭐️长期练习，可以恢复颈椎生理曲度，自我康复，简单易学，实用有效！\n\t\n颈椎病|富贵包|体态矫正|头前伸|颈前伸|颈椎曲度变直|宅家健身打卡|打工人的肩颈",
            "excerpt": "⭐️6分钟康复跟练版来啦！不一定每个都适合你，选择做的舒服的几个动作就行，随时随地都可以做，帮助你缓解颈椎疼痛，舒缓颈椎间盘的压力。 \t ⭐️每天一遍，改善头前伸，消除富贵包，保护颈椎健康！ \t ⭐️长期练习，可以恢复颈椎生理曲度，自我康复，简单易学，实用有效！ \t 颈椎病|富贵包|体态矫正|头前伸|颈前伸|颈椎曲度变直|宅家健身打卡|打工人的肩颈",
            "author": {
                "id": "65d99735decac541bf6fb5f63d89c01e",
                "url_token": "hao-qiang-87-36",
                "name": "郝强Fit",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-097a4e884b1cb782d956d2d61eb8899d_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-097a4e884b1cb782d956d2d61eb8899d.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/65d99735decac541bf6fb5f63d89c01e",
                "user_type": "people",
                "headline": "专注：健身/瑜伽/体态/康复，商务:xzbl7777",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic3.zhimg.com/v2-5445f8df8b43508e51a483337a386bac.png?source=6a64a727",
                        "night_mode_url": "https://pica.zhimg.com/v2-5445f8df8b43508e51a483337a386bac.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://pica.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "香港城市大学 理学硕士"
                    }
                ],
                "badge_v2": {
                    "title": "香港城市大学 理学硕士",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "香港城市大学 理学硕士",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "香港城市大学 理学硕士",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1519105087
            },
            "topics": [
                {
                    "id": "19613869",
                    "type": "NORMAL",
                    "url": "www.zhihu.com/topic/19613869",
                    "name": "颈椎病",
                    "avatar_url": "https://picx.zhimg.com/v2-40e779d5c5e6bcebda41e92d50594618_r.png?source=0df5f383",
                    "introduction": "颈椎病又称颈椎综合征，是颈椎骨关节炎、增生性颈椎炎、颈神经根综合征、颈椎间盘脱出症的总称,是一种以退行性病理改变为基础的疾患。主要由于颈椎长期劳损、骨质增生，或椎间盘脱出、韧带增厚，致使颈椎脊髓、神经根或椎动脉受压，出现一系列功能障碍的临床综合征。表现为椎节失稳、松动；髓核突出或脱出；骨刺形成；韧带肥厚和继发的椎管狭窄等，刺激或压迫了邻近的神经根、脊髓、椎动脉及颈部交感神经等组织，引起一系列症状和体征。颈椎病可分为：颈型颈椎病、神经根型颈椎病、脊髓型颈椎病、椎动脉型颈椎病、交感神经型颈椎病、食管压迫型颈椎病。",
                    "info": {
                        "id": 1023604070862401500,
                        "category": "n_wiki",
                        "name": "颈椎病",
                        "avatar_url": "https://pic1.zhimg.com/v2-6bf88b513bdb8cab99e1b8e7f77a685f_qhd.jpg?source=57bbeac9"
                    },
                    "avatar_type": 0
                },
                {
                    "id": "19771034",
                    "type": "NORMAL",
                    "url": "www.zhihu.com/topic/19771034",
                    "name": "康复治疗",
                    "avatar_url": "https://picx.zhimg.com/v2-40e779d5c5e6bcebda41e92d50594618_r.png?source=0df5f383",
                    "introduction": "",
                    "info": {
                        "id": 0,
                        "category": "basic",
                        "name": "",
                        "avatar_url": ""
                    },
                    "avatar_type": 0
                },
                {
                    "id": "19573586",
                    "type": "NORMAL",
                    "url": "www.zhihu.com/topic/19573586",
                    "name": "颈椎",
                    "avatar_url": "https://pic1.zhimg.com/c6830353447f5a3f9aa0ab4dd184c333_r.png?source=0df5f383",
                    "introduction": "颈椎，指颈椎骨，英文名为：cervical vertebra。颈椎位于头以下、胸椎以上的部位。颈椎共有七块颈椎骨组成，除第一颈椎和第二颈椎外，其他颈椎之间都夹有一个椎间盘，加上第七颈椎和第一胸椎之间的椎间盘，颈椎共有6个椎间盘。除第1、第2颈椎结构有所特殊外，其余颈椎与胸、腰段椎骨大致相似，均由椎体、椎弓、突起（包括横突、上下关节突和棘突）等基本结构组成。椎体在前，椎弓在后，两者环绕共同形成椎孔。所有的椎孔相连就构成了椎管，脊髓就容纳其中。颈椎又是脊柱椎骨中体积最小，但灵活性最大、活动频率最高、负重较大的节段。",
                    "info": {
                        "id": 1023605057161465900,
                        "category": "n_wiki",
                        "name": "颈椎",
                        "avatar_url": "https://picx.zhimg.com/v2-38cabba76613049b56d78031f3ed6bb4_qhd.jpg?source=57bbeac9"
                    },
                    "avatar_type": 0
                },
                {
                    "id": "19674425",
                    "type": "NORMAL",
                    "url": "www.zhihu.com/topic/19674425",
                    "name": "颈部",
                    "avatar_url": "https://pic1.zhimg.com/v2-40e779d5c5e6bcebda41e92d50594618_r.png?source=0df5f383",
                    "introduction": "",
                    "info": {
                        "id": 0,
                        "category": "basic",
                        "name": "颈部",
                        "avatar_url": ""
                    },
                    "avatar_type": 0
                },
                {
                    "id": "19694619",
                    "type": "NORMAL",
                    "url": "www.zhihu.com/topic/19694619",
                    "name": "康复医学",
                    "avatar_url": "https://picx.zhimg.com/0bf8352eab5ee5c5561897e4694ea2eb_r.png?source=0df5f383",
                    "introduction": "康复医学是一门新兴的学科，是20世纪中期出现的一个新的概念。康复医学和预防医学、保健医学、临床医学并称为“四大医学”，它是一门以消除和减轻人的功能障碍，弥补和重建人的功能缺失，设法改善和提高人的各方面功能的医学学科，也就是功能障碍的预防、诊断、评估、治疗、训练和处理的医学学科。运动疗法、作业疗法、言语疗法等是现代康复医学的重要内容和手段。",
                    "info": {
                        "id": 0,
                        "category": "basic",
                        "name": "康复医学",
                        "avatar_url": ""
                    },
                    "avatar_type": 0
                },
                {
                    "id": "19555542",
                    "type": "NORMAL",
                    "url": "www.zhihu.com/topic/19555542",
                    "name": "养生",
                    "avatar_url": "https://pic1.zhimg.com/316688632_r.png?source=0df5f383",
                    "introduction": "养生，动词也，亦可为名词。原指道家通过各种方法颐养生命、增强体质、预防疾病，从而达到延年益寿的一种医事活动。养，即调养、保养、补养之意；生，即生命、生存、生长之意。现代意义的“养生”指的是根据人的生命过程规律主动进行物质与精神的身心养护活动。保养，是指遵循生命法则，通过适度运动，加之外在护理等手段，让身体机能及外在皮肤得以休养生息，恢复应有机能，这是养生的第一层面；涵养，是指开阔视野、通达心胸、广闻博见，通过对自身的道德和素质的修炼和提升，让身心得到一种静养与修为，从而达到修心修神的目的；滋养，是指通过适时适地适人，遵循天地四时之规律，调配合宜食疗，以滋养调理周身，达到治未病而延年的目的。实质上，养生就是保养五脏，使生命得以绵长的意思。养生学是一门涉及诸多学科的综合科学，它包括中华中医学、康复学、营养学、美学、心理学、国学、物理学、化学、艺术、烹饪、运动学、佛学、道学、儒学等等。",
                    "info": {
                        "id": 1023603485681492000,
                        "category": "n_wiki",
                        "name": "养生",
                        "avatar_url": "https://picx.zhimg.com/v2-0eef33717ebf0eb2fd070f41d33e57b7_qhd.jpg?source=57bbeac9"
                    },
                    "avatar_type": 0
                }
            ],
            "video": {
                "video_id": "1492607735066259456",
                "width": 1920,
                "height": 1080,
                "duration": 359.77,
                "type": "video",
                "thumbnail": "https://picx.zhimg.com/v2-ae9d1072f4d6694f0ed7c6f761b53c3a_r.jpg?source=0df5f383",
                "playlist": {
                    "fhd": {
                        "play_url": "https://vdn6.vzuu.com/FHD/cee76c42-b029-11ec-8dc5-6e5db74b6973-v1_t10001111-wdEkeQUmsN.mp4?pkey=AAW-wjrcH9FLfJg7H9-9zK4uXttvFkJOASbkU33PXyHLRBhwUCNjTe-StjYMZ1Hoaj4lP7WC0bTJXytbdcb053qH&c=avc.0.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks6",
                        "bitrate": 1361.734,
                        "duration": 359.77,
                        "format": "mp4",
                        "fps": 25,
                        "size": 61238922,
                        "height": 1080,
                        "width": 1920,
                        "channels": 2,
                        "sample_rate": 44100,
                        "url": "https://vdn6.vzuu.com/FHD/cee76c42-b029-11ec-8dc5-6e5db74b6973-v1_t10001111-wdEkeQUmsN.mp4?pkey=AAW-wjrcH9FLfJg7H9-9zK4uXttvFkJOASbkU33PXyHLRBhwUCNjTe-StjYMZ1Hoaj4lP7WC0bTJXytbdcb053qH&c=avc.0.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks6"
                    },
                    "hd": {
                        "play_url": "https://vdn6.vzuu.com/HD/cee76c42-b029-11ec-8dc5-6e5db74b6973-v1_t10001111-wdEkeQUmsN.mp4?pkey=AAXKFCh0K0_K3SKlCRb6IRXiuEqO3E18jc2A_aLHaRZ8g3lsRCkDBllTxu-VshqiB0c2eh4p_U_qOd8DK81yMU3M&c=avc.0.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks6",
                        "bitrate": 692.694,
                        "duration": 359.77,
                        "format": "mp4",
                        "fps": 25,
                        "size": 31151327,
                        "height": 720,
                        "width": 1280,
                        "channels": 2,
                        "sample_rate": 44100,
                        "url": "https://vdn6.vzuu.com/HD/cee76c42-b029-11ec-8dc5-6e5db74b6973-v1_t10001111-wdEkeQUmsN.mp4?pkey=AAXKFCh0K0_K3SKlCRb6IRXiuEqO3E18jc2A_aLHaRZ8g3lsRCkDBllTxu-VshqiB0c2eh4p_U_qOd8DK81yMU3M&c=avc.0.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks6"
                    },
                    "ld": {
                        "play_url": "https://vdn6.vzuu.com/SD/cee76c42-b029-11ec-8dc5-6e5db74b6973-v1_t10001111-wdEkeQUmsN.mp4?pkey=AAVlcsSHawhB0rOKXNZOfxCfQYJL_d2nW5W369eBpBCghKdpwXcZD6OpplzLLX673-BL8HE0uGwdZdeK3i8WqtjF&c=avc.0.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks6",
                        "bitrate": 422.009,
                        "duration": 359.77,
                        "format": "mp4",
                        "fps": 25,
                        "size": 18978307,
                        "height": 478,
                        "width": 848,
                        "channels": 2,
                        "sample_rate": 44100,
                        "url": "https://vdn6.vzuu.com/SD/cee76c42-b029-11ec-8dc5-6e5db74b6973-v1_t10001111-wdEkeQUmsN.mp4?pkey=AAVlcsSHawhB0rOKXNZOfxCfQYJL_d2nW5W369eBpBCghKdpwXcZD6OpplzLLX673-BL8HE0uGwdZdeK3i8WqtjF&c=avc.0.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks6"
                    },
                    "sd": {
                        "play_url": "https://vdn6.vzuu.com/SD/cee76c42-b029-11ec-8dc5-6e5db74b6973-v1_t10001111-wdEkeQUmsN.mp4?pkey=AAVlcsSHawhB0rOKXNZOfxCfQYJL_d2nW5W369eBpBCghKdpwXcZD6OpplzLLX673-BL8HE0uGwdZdeK3i8WqtjF&c=avc.0.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks6",
                        "bitrate": 422.009,
                        "duration": 359.77,
                        "format": "mp4",
                        "fps": 25,
                        "size": 18978307,
                        "height": 478,
                        "width": 848,
                        "channels": 2,
                        "sample_rate": 44100,
                        "url": "https://vdn6.vzuu.com/SD/cee76c42-b029-11ec-8dc5-6e5db74b6973-v1_t10001111-wdEkeQUmsN.mp4?pkey=AAVlcsSHawhB0rOKXNZOfxCfQYJL_d2nW5W369eBpBCghKdpwXcZD6OpplzLLX673-BL8HE0uGwdZdeK3i8WqtjF&c=avc.0.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks6"
                    }
                },
                "playlist_v2": {
                    "fhd": {
                        "play_url": "https://vdn5.vzuu.com/mediacloud/catchingfire/video/27174c9411025430-532ba5f8675e86bf87a701a9789a8565-1080p_mp4_h265_ad_1.mp4?pkey=AAX3cKUiivgSa7FfcF2OgpBMTyqjbUOkwr8pGCxqUSNyel-NZuBqqhbB_hFlBkmBZgTfHPUB7Q5eAHv-0iviybCE&c=hevc.8.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks",
                        "bitrate": 389,
                        "duration": 359.92,
                        "format": "mp4",
                        "fps": 25,
                        "size": 17531003,
                        "height": 1080,
                        "width": 1920,
                        "channels": 2,
                        "sample_rate": 44100,
                        "url": "https://vdn5.vzuu.com/mediacloud/catchingfire/video/27174c9411025430-532ba5f8675e86bf87a701a9789a8565-1080p_mp4_h265_ad_1.mp4?pkey=AAX3cKUiivgSa7FfcF2OgpBMTyqjbUOkwr8pGCxqUSNyel-NZuBqqhbB_hFlBkmBZgTfHPUB7Q5eAHv-0iviybCE&c=hevc.8.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks"
                    },
                    "hd": {
                        "play_url": "https://vdn5.vzuu.com/mediacloud/catchingfire/video/27174c9411025430-6414634a9924d373b39d2f137e0d757d-720p_mp4_h265_ad_1.mp4?pkey=AAXDbeA9fSyJHzs2nFwggbvFv75HNmEqHKeIvEW2tMuz3r-LLRVKuwTXz5jw4q_tnZzS3cfNmsFZX6D1XGJ0PrFu&c=hevc.8.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks",
                        "bitrate": 313,
                        "duration": 359.92,
                        "format": "mp4",
                        "fps": 25,
                        "size": 14100473,
                        "height": 720,
                        "width": 1280,
                        "channels": 2,
                        "sample_rate": 44100,
                        "url": "https://vdn5.vzuu.com/mediacloud/catchingfire/video/27174c9411025430-6414634a9924d373b39d2f137e0d757d-720p_mp4_h265_ad_1.mp4?pkey=AAXDbeA9fSyJHzs2nFwggbvFv75HNmEqHKeIvEW2tMuz3r-LLRVKuwTXz5jw4q_tnZzS3cfNmsFZX6D1XGJ0PrFu&c=hevc.8.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks"
                    },
                    "sd": {
                        "play_url": "https://vdn5.vzuu.com/mediacloud/catchingfire/video/27174c9411025430-9a32de03504ba20f801c8fc139b9c50c-480p_mp4_h265_ad_1.mp4?pkey=AAVd3kSayMJswriT6Pu4q4DvJaRIsYI03EAnk46XQBe_NWJWwt_LVe_5LJVIV_iGe3Z0Sfa-cry_pLzx5jRs7yDN&c=hevc.8.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks",
                        "bitrate": 238,
                        "duration": 359.92,
                        "format": "mp4",
                        "fps": 25,
                        "size": 10710414,
                        "height": 480,
                        "width": 852,
                        "channels": 2,
                        "sample_rate": 44100,
                        "url": "https://vdn5.vzuu.com/mediacloud/catchingfire/video/27174c9411025430-9a32de03504ba20f801c8fc139b9c50c-480p_mp4_h265_ad_1.mp4?pkey=AAVd3kSayMJswriT6Pu4q4DvJaRIsYI03EAnk46XQBe_NWJWwt_LVe_5LJVIV_iGe3Z0Sfa-cry_pLzx5jRs7yDN&c=hevc.8.0&f=mp4&pu=da4bec50&bu=8e41cd4e&expiration=1704524138&v=ks"
                    }
                },
                "status": "success",
                "is_paid": false,
                "is_trial": false,
                "url": "https://pic1.zhimg.com/v2-ae9d1072f4d6694f0ed7c6f761b53c3a.jpg?source=382ee89a",
                "customized_page_url": "https://www.zhihu.com/zvideo/1492607736500662272",
                "video_type": "video"
            },
            "published_at": 1648645796,
            "play_count": 868116,
            "comment_count": 55,
            "voteup_count": 1017,
            "liked_count": 2830,
            "voting": 0,
            "is_reviewing": false,
            "is_update_reviewing": false,
            "url": "https://www.zhihu.com/zvideo/1492607736500662272",
            "comment_permission": "all",
            "can_comment": {
                "status": true,
                "reason": ""
            },
            "is_visible": true,
            "zvideo_type": "original",
            "thumbnail_info": {
                "count": 2,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-ae9d1072f4d6694f0ed7c6f761b53c3a_720w.jpg?source=7e7ef6e2",
                        "width": 1920,
                        "height": 1080,
                        "token": "v2-ae9d1072f4d6694f0ed7c6f761b53c3a",
                        "data_id": 1492607735066259500,
                        "type": "video"
                    },
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-ae9d1072f4d6694f0ed7c6f761b53c3a_720w.jpg?source=7e7ef6e2",
                        "width": 998,
                        "height": 561,
                        "token": "v2-ae9d1072f4d6694f0ed7c6f761b53c3a",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "duration": 359.77,
            "height": 1080,
            "width": 1920,
            "thumbnail": "https://picx.zhimg.com/v2-ae9d1072f4d6694f0ed7c6f761b53c3a_720w.jpg?source=7e7ef6e2",
            "video_id": "1492607735066259456",
            "is_original": true,
            "state": "Published"
        },
        "created": "2022-03-30T21:09:56+08:00"
    },
    {
        "content": {
            "id": 2335668564,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/365536397/answer/2335668564",
            "created_time": 1644043558,
            "updated_time": 1644043558,
            "question": {
                "type": "question",
                "id": 365536397,
                "title": "为什么最近Steam上经常会出现「错误代码：-118」？",
                "question_type": "normal",
                "created": 1578578399,
                "updated_time": 1673960884,
                "url": "https://www.zhihu.com/question/365536397",
                "is_deleted": false
            },
            "author": {
                "id": "51e2ccedd85ec2a2719bef1e7d92c3d7",
                "url_token": "orochi2k",
                "name": "orochi2k",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-f808321c1e64c63d4eb91c8c4b81ee6e_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-f808321c1e64c63d4eb91c8c4b81ee6e.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/51e2ccedd85ec2a2719bef1e7d92c3d7",
                "user_type": "people",
                "headline": "NEOLITHIA作者/在不摸鱼地支持乌克兰。(✺ω✺)",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1479272199
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1559,
            "comment_count": 58,
            "thanks_count": 312,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"g6xtDpHT\">如果没有行政部门背锅，那么就是电信、网通、移动利用垄断地位进行了违法活动。</p><p data-pid=\"0pTSBde-\">现在发现的症状基本是DNS污染。</p><p data-pid=\"LlneVZoB\">解决方法是把DNS服务器换成208.67.222.222或208.67.220.220 o(*￣︶￣*)o</p>",
            "excerpt": "如果没有行政部门背锅，那么就是电信、网通、移动利用垄断地位进行了违法活动。 现在发现的症状基本是DNS污染。 解决方法是把DNS服务器换成208.67.222.222或208.67.220.220 o(*￣︶￣*)o",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjU8t3ZCCCyxN8UkgIlCgk0NTQ3NDg2NzYSCjIzMzU2Njg1NjQYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-02-05T14:45:58+08:00"
    },
    {
        "content": {
            "id": 424624874,
            "title": "音视频必读书单--基础数学篇",
            "type": "article",
            "excerpt_title": "作为一个音视频多年开发的老兵，把我觉得最好的一些书籍整理出来，按最小系统原则，把音视频每一个分支领域最好的参考书籍，推荐1～2本给大家。希望阅读这些参考书籍，是熟悉音视频概念的最佳路径；希望读完这些参考书籍，你能成为这个行业的最佳手艺人！ ——— 第一篇：基础数学第一本：《微积分》 Dale Varberg、Edwin J. Purcell、Steven E. Rigdon所著的《微积分(翻译版·原书第9版)》，微积分最好的教材，没有之一，翻…",
            "url": "https://zhuanlan.zhihu.com/p/424624874",
            "image_url": "",
            "created": 1634905595,
            "updated": 1634905595,
            "author": {
                "id": "100439a2446d93f0e2aa67736ab5f941",
                "url_token": "Watterry",
                "name": "Wattskemov",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-83f64b091dad7cb222f187a60fcb297e_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-83f64b091dad7cb222f187a60fcb297e.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/100439a2446d93f0e2aa67736ab5f941",
                "user_type": "people",
                "headline": "有山皆图画，无水不文章",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"YX2HRyNv\">作为一个音视频多年开发的老兵，把我觉得最好的一些书籍整理出来，按最小系统原则，把音视频每一个分支领域最好的参考书籍，推荐1～2本给大家。希望阅读这些参考书籍，是熟悉音视频概念的最佳路径；希望读完这些参考书籍，你能成为这个行业的最佳手艺人！</p><p data-pid=\"gBOdJ_eR\">—————</p><h2><b>第一篇：基础数学</b></h2><h2><b>第一本：<a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/6822205/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《微积分》</a></b></h2><p data-pid=\"_oaTtoJR\">Dale Varberg、Edwin J. Purcell、Steven E. Rigdon所著的《微积分(翻译版·原书第9版)》，微积分最好的教材，没有之一，翻译也好，纸张也好，印刷也好，排版也好，几乎没有缺点，非常适合自学，华南理工大学计算机双语班用的就是此书的英文版。全书图文并茂，主线条清晰又隐藏了一些对初学者不重要的细节，对微积分的数学含义介绍得很直观。</p><p data-pid=\"rVs3q1eg\">音视频处理，一切一切的基础都是微积分，等后续我再推荐书籍的时候，你就知道为什么这么说。</p><p data-pid=\"tnptgFKA\">要从原理上理解音视频，无它，先把微积分这门最最基础的课程学好，重要的是理解微积分公式背后所代表的含义，把微积分“读薄”。</p><h2><b>第二本：<a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26694188/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《概率导论》</a></b></h2><p data-pid=\"jhyElcPs\">最优化和控制论领域大师 Dimitri P. Bertsekas 的《概率导论》，MIT开设的概率论入门课程。</p><p data-pid=\"nLiqdcpc\">推荐本书作为概论论入门书籍，写得非常有条理并且易于理解；大学学过概率论中文教材的同学，也建议重新读一读本书，严谨而又直观的数学叙述，读起来完全是一种享受。如果概率论要我只推荐一本参考书的话，我会推荐本书。之前我也特意<a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/review/13140177/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为它写过书评</a>，有兴趣的同学可以读一读。</p><p data-pid=\"FreXudq2\">概率与统计思想，在音视频处理逻辑中，扮演着十分重要的角色。对于概率与统计的思想，人们花了很长的时间才接受，人类天生就喜欢确定性的世界，对于不确定性世界的描述，始终是非常困惑。所以本学科的历史也并不算久远，但是并不意味着它欠缺深度，恰恰相反，需要把它往深里学。</p><p data-pid=\"E-i2XtN1\">对于想了解概率与统计历史的同学，另外再推荐<a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26838150/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《女士品茶》</a>和<a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/1522839/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《数理统计学简史》</a>（中国学者陈希孺作品）这两本科普书籍。</p><h2><b>第三本：<a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26761202/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《应用随机过程：概率模型导论》</a></b></h2><p data-pid=\"UIsWSCaS\">人类习惯用确定性的思想来看世界，小到几月几号是什么日子、理财利息与收益，大到做战争决策，诸如种种。牛顿和爱因斯坦是用确定性思想来看世界的典范，而现代物理的量子力学，则是用不确定性思想来看世界的典范。</p><p data-pid=\"k2SftLbB\">但是在现实生活中，大量存在不能用确定性数学理论来进行描述的现象。拉格朗日在解决这类问题的时候，是引入了一个误差项来描述。但在大量的工科类信号处理中，我们习惯用随机信号理论来进行描述。</p><p data-pid=\"Wjb4ITdG\">在我们音视频领域中，随机信号处理最有用武之地的领域，就是噪声信号的建模与处理。而在进行统计信号处理之前，必须来一个完整、理论性强的随机信号处理课程，而 Ross 教授的这本书，就是此类教材的典范。本书内容、编排、排版、翻译都属上乘佳作。</p><h2><b>第四本：<a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/4214656/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《统计推断》</a></b></h2><p data-pid=\"AFHLCYP4\">如果对基本的随机过程进行了学习，对此更有兴趣的话，可以看看更深入的统计推断类教材，这些教材里，我首推这本。本书更偏统计与推断，但是又不失概率严谨性的作品。本书同样是美国著名数学教授的作品，建议搞音视频的同学一定要读一读，在音视频处理里，有关质量分析、参数最优化等，涉及到大量需要根据统计信息来进行推断的工作，学习与理解这方面的思想，是不可或缺。</p><p data-pid=\"cxGiOpEt\">本书的中文版本的翻译质量很高，文字优美流畅，建议选用中文版本阅读即可。</p><p data-pid=\"nH0bQe9J\">另外，作者一定是一个福尔摩斯谜，书中每一章的开场白名言都是接自福尔摩斯。原来在某些方面我们和大拿是一样的。像这样学识涵养高而又富有生活情趣的大师，真不多，本书值得带上人文情怀来仔细研读。</p><h2><b>第五本：<a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/3788399/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《复分析：可视化方法》</a></b></h2><p data-pid=\"dYTM8XlG\">作为工科学生，复数是一个迈不过去的坎，是一个不可或缺的工具。复数本身又特别抽象，它完全是从数学范畴引申出来的工具，你在现实世界找不到对应物。一开始接触复数的时候，很多人都会很困惑它的物理意义。对于自然数、负数、实数，甚至于有理数、无理数这些定义，我们都容易理解，毕竟还有现实世界的对照。但是对于复数，如何理解呢？如何与我们现实世界对照起来呢？</p><p data-pid=\"lsHfhg-6\">这本武大校长、著名数学教授齐民友翻译的复分析领域经典著作，从大量图表可视化地表达复数理论，替代之前复数教学中的纯符号逻辑推理，让整个复数理论变得直观易懂，读者在透彻理解理论的同时，还能充分领略数学之美。如果你大学的复变函数理论学得不好，不要怀疑自己，先怀疑一下你们选用的教材。</p><p data-pid=\"GfIFCMV5\">本书更难能可贵的是，非常注重数学历史发展的介绍，这是所有传统数学教材最缺乏的地方。正如 Auguste Comte 说过：“为了理解一种科学，必须知道它的历史”。这本书的观念是如此精彩，所以前言就值得仔细阅读一遍，这篇前言甚至当作数学哲学来看，也不为过。前言里提到的参考文献，我也找出来仔细读了一遍。所有文献，我都有一种相见恨晚的感觉。</p><p data-pid=\"D51qx_sa\">本书的习题也是一大特色，正如作者所说：“求解一个问题的最本质的前提是有一种愿望要去找到解答，所以我尽力给出一些能激起好奇心的习题。”</p><p data-pid=\"89p_eO5V\">本书有多个版本，包括中文和英文版本，强烈推荐齐民友教授的中文翻译版本，除了原书的可视化方法，译者还加入了自己的很多备注，为本书增色不少。有一些书必须读翻译版本，翻译版本能较原版更加优秀，本书就是此类翻译神作的典范。</p><p data-pid=\"YSU4NxkP\">另外，让我们缅怀一下数学家齐民友，他因病医治无效于2021年8月8日17：17分在武汉逝世，享年92岁。齐民友的著作我基本都读过，从《重温微积分》到《普林斯顿数学指南》，无不代表着各个领域的最高度，有兴趣的同学可以当作小说来读一读，看看我们老一辈学者那朴实而又严谨的治学态度。</p><h2><b>附书籍详细信息：</b></h2><p data-pid=\"z0mqzrRW\">[1] 沃伯格, 柏塞尔, 里格登, and 刘深泉. 微积分: 翻译版. 北京: 机械工业出版社, 2011.<br/>[2] Bertsekas, Dimitri, John N Tsitsiklis, 郑忠国, and 童行伟. 槪率导论. 北京: 人民邮电出版社, 2016.<br/>[3] Ross, Sheldon M and 龚光鲁. 应用随机过程: 概率模型导论, 2016.<br/>[4] 卡塞拉, Sella Ca, 贝耶, Rger Be, 张忠占, and 傅莺莺. 统计推断: 翻译版. 北京: 机械工业出版社, 2010.<br/>[5] 尼达姆 and 齐民友. 复分析：可视化方法. 北京: 人民邮电出版社, 2009.</p>",
            "voteup_count": 11,
            "column": {
                "id": "c_1477357219910418432",
                "type": "column",
                "url_token": "c_1477357219910418432",
                "title": "灌水音视频",
                "url": "https://zhuanlan.zhihu.com/c_1477357219910418432",
                "created": 1645009409,
                "updated": 1645009409,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 0
        },
        "created": "2021-10-22T20:26:35+08:00"
    },
    {
        "content": {
            "id": 2554359755,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/527209043/answer/2554359755",
            "created_time": 1656681018,
            "updated_time": 1657439801,
            "question": {
                "type": "question",
                "id": 527209043,
                "title": "当代男性结婚的意义是啥？",
                "question_type": "normal",
                "created": 1649625768,
                "updated_time": 1650589735,
                "url": "https://www.zhihu.com/question/527209043",
                "is_deleted": false
            },
            "author": {
                "id": "237f23d528bbc3db4b9f10e2b8f441f2",
                "url_token": "yang-yi-23-3",
                "name": "杨逸",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-abed1a8c04700ba7d72b45195223e0ff.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/237f23d528bbc3db4b9f10e2b8f441f2",
                "user_type": "people",
                "headline": "笑口常开，笑天下可笑之事。",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1476018473
            },
            "thumbnail": "https://picx.zhimg.com/v2-a050c0098e159242dc85b832fc046c3d_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 8738,
            "comment_count": 6296,
            "thanks_count": 2248,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p></p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-cd9d0d25c7a9021abeddb309a094f9f0_720w.jpg?source=2c26e567\" data-rawwidth=\"1075\" data-rawheight=\"1187\" data-size=\"normal\" data-original-token=\"v2-a050c0098e159242dc85b832fc046c3d\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-1e6af48cbda49cdd8d7ace4eb4c4eaf2_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1075\" data-original=\"https://picx.zhimg.com/v2-cd9d0d25c7a9021abeddb309a094f9f0_r.jpg?source=2c26e567\"/></figure><p data-pid=\"KmJuGegG\">感谢各位黑子和规劝大军帮我翻出了当年的牢骚，现在你们知道我当年为了这个所谓的家，为了她的贪婪，是怎么当牛当马的。</p><p data-pid=\"ulMYLIFe\">————————————————————</p><p data-pid=\"idBlGMSk\">谢谢大家关心，女儿接回来了，因为是暑假，我又加了一层保险，爷爷奶奶已经提前安排好行程核酸，带着欢天喜地的儿子女儿回了老家，开学之前都不会回来。</p><p data-pid=\"KiOJOyLA\">方法很简单，我没和前妻谈一句，只是连着约前岳父喝酒(胃疼 )，这几天烟酒红包送了将近两万，女儿回来的时候又给她外公包了一万的感谢金。我知道前岳父一直想前妻再嫁，如果下家知道她连女儿都带不好必然影响她再嫁，只要我言明以后不要她一分钱的抚养费，保证他们的探视权，前岳父必然心动。</p><p data-pid=\"Z47AnfnF\">前妻可以为了面子和我硬顶，但只要他爹出动劝说，事情就变得非常顺利，一物降一物嘛，哈哈哈哈哈哈。</p><p data-pid=\"dap61tww\">虽然花了三四万块，但比起上法院和前妻撕得昏天黑地，这已经是最小代价，再说了，我女儿的前途也不止这点钱，能视频看到儿子女儿在一起嬉笑，我胃痛一个月也值了 。</p><p data-pid=\"0L9hBRHT\">至此，我延绵十年的噩梦终结(应该)</p><p data-pid=\"oMTz0SCl\">至于这场不幸婚姻中的对错是非，我的家人，她的家人，我们的儿女心里最清楚，我能做到问心无愧。</p><p data-pid=\"UiVs9zL3\">愿她能找个比我更好的下家，</p><p data-pid=\"kiLpXvg8\">愿我们生生世世，永不复见。</p><p data-pid=\"jGo2SHrS\">——————————————</p><p data-pid=\"rmZOBWvz\">观前提示：觉得我是骗肚巨婴的务必思索——你老公能不能在结婚十年后，在相看两厌的情况下，任然把无贷款的房子和车子划到你名下？你老公能不能持续十年每月给你至少2-3万随你挥霍？</p><p data-pid=\"uXIb9cW7\"><b><i>觉得我前妻惨的人，你先想想有我前妻活得爽吗？</i></b></p><p data-pid=\"LZ9-00JO\"><b><i>你笑我前妻活得惨，她肯定笑你还房贷。</i></b></p><p data-pid=\"jeFDvCfW\">至于我女儿，我肯定要接回来，我对前妻已经没有指望，但我绝对不允许她把她奇奇怪怪的人生观价值观再传给女儿，前妻的人生未来是肉眼可见的失败，无可挽回，但我要尽力阻止女儿走她的老路。</p><p data-pid=\"uM-bOs2S\">我已经咨询了律师，我和她的离婚没有涉及子女监护权分割，我们依旧共享着儿女的监护权，法条原文：<b><i>子女已满八周岁的，应当尊重其真实意愿。</i></b>所以只要女儿愿意，我可以随时接回来——那事情就变得非常简单，比我预计得简单得多。</p><p data-pid=\"hlNn8vQI\">---------------以下为原答案----------------------------------------</p><p data-pid=\"ka4bJWRr\">现身说法的中年男人来了，人到中年，儿女双全，已离婚。</p><p data-pid=\"r0pKDyID\"><b>你问我当年结婚的感觉，我现在感觉当年被下了降头！！！！！！</b></p><p data-pid=\"_cvSB3ad\">曾经被上级各种PUA，在家被老婆PUA，微信里被儿子老师PUA，整天没个好日子过，月入三万左右，自己一分钱留不下来，口袋长期空空，还好烟酒都是逢场应酬，自觉活得跟牛马一样。</p><p data-pid=\"EVLwN1LE\">后来想通了，前年，滚你xx的，劳资到底是为谁活的?我曾经当了二十年的宝贝，现在居然给你们当了十多年的孙子，我脑子有病啊？</p><p data-pid=\"V9XdjSeq\">离婚分家一条龙，儿子我带，女儿她带，用家里全部积蓄把房贷结清了(公积金覆盖房贷的不算)，然后两套房子一人一套，互不亏欠，看在她收入不如我的前提下，车给她了，以后大路朝天各走一边，再也别来烦我。</p><p data-pid=\"JgTqmU0c\">单位那边也放开了，和领导拍了桌子，推掉一切兼责，月入降到两万左右，反正我是正式编，我就不上进，随便你画饼，你能把我咋滴?</p><p data-pid=\"c1CREnaY\">知乎说得对，<b>只要我不想当领导，就没人是我的领导！</b></p><p data-pid=\"_2SuiTkq\">老师电话一律不接，直接给儿子说了，你劳资我当年读书从来没麻烦过家长，也从来没有请过家教，是我的种你就认真读，我能供到你读博士，但凡不行就给我进厂送外卖，后人自有后人福，你是我儿子不是我祖宗。</p><p data-pid=\"8W6NV2bt\">然后我就感觉自己终于活得像个人了。</p><p data-pid=\"483w52ii\">晚上想什么时候睡就什么时候睡，袜子裤子衣服往地上随便扔，哑铃跑步机全部搬进主卧，睡前跑步锻炼，再躺在床上刷一小时的手机，大学时候无忧无虑的感觉马上回来了。</p><p data-pid=\"CQRNFs_D\">每两天把父子两人的衣服裤子往自动洗衣机一扔，一个小时后拿出来上晾衣杆。扫地拖地交给机器人，自己再处理一下大件垃圾，每次搞家务不过二十分钟。</p><p data-pid=\"kHNeTBJg\">我就不懂前妻为什么每次搞家务都搞得鸡飞狗跳，<b>有洗衣机还要再拿出来搓一次衣，有扫地机器人还要拖一次地，一边洗碗一边骂，</b>我从来没有发现这么洗的衣服和地板到底有什么区别，然后她一边洗一边叽叽歪歪，抱怨这抱怨哪，我电视都看不顺心。</p><p data-pid=\"545ILlUE\">一个月两万左右的收入，父子两人计划是一人五千，我父母都是退休职工，有养老金不用我管，我们父子两个男人在一起根本不花钱，再也没有化妆品换季衣服和乱七八糟不知道啥用处的网购。</p><p data-pid=\"wjSZDWxC\">和儿子活成了兄弟的感觉，开始我懒得管他，他也懒得理我，除了玩游戏看电视下馆子基本不说话。反正我规矩立下了，我没法大包大揽他的人生，不行就给我进厂，他也知道我不是开玩笑，成绩过得去，考试比以前还提高了点，每次考试完了带他出去吃麦当劳，心里想着果然是我的种，我当年初中就离家几百公里去外市上高中，根本没人管，不是照样读出来了，读书这种事，怎么能强求？</p><p data-pid=\"J7PznBxA\">我们吃好睡好玩好，花钱大手大脚，但一个月家里的日常花销却降到惊人的八九千左右(至今不知道前妻怎么开销到每月两万多，我还活成一条狗的)</p><p data-pid=\"PrGwWWce\">目前每月能存一万多，离婚一年下来，居然有十万的结余，全部握在我手里。</p><p data-pid=\"rSlC5zt4\">年末，儿子期末考试不错，给儿子一万买游戏机和他喜欢的高达模型，我自己则预算了两三万多买几套甲胄，没错，我喜欢中国甲胄 ，B站上杰哥的那种，前妻在的时候根本不能入手，提都不能提，她非把地板给你砸烂，现在终于圆梦了。</p><p data-pid=\"1Rvv0W7Y\">说起来不怕笑话，春节跨年，我和儿子在家里穿着甲胄摔跤打拳击，真心从父子活成了兄弟，现在感情好的很。</p><p data-pid=\"lTvLjxbj\">车没有再买，每天出门就喊出租车，不觉得任何不方便，单位有人问我为啥不买车了，什么男人没车不行，我直接说没钱，呵呵，只要我不要脸，尴尬的就是别人。</p><p data-pid=\"neh-uN8-\">至于那方面，讲道理，我现在一不缺钱，二无压力，还天天健身，仿佛再度进入青春期，中年欲望反而高涨，但我也不想结婚了，和同样不想结婚的女人交流再也不考虑感情因素，红颜来来去去，你情我愿，纯粹得很，双方都高兴。</p><p data-pid=\"3TZFnKmS\">我甚至感觉自己焕发了人生的第二春。</p><p data-pid=\"FJPGiB8N\">唯一的缺憾是女儿，前妻收入低，脾气又坏，带不好，一年下来瘦了不少，爷爷奶奶看不下去，想接过来，但她又不肯放手，我有几个月悄悄给女儿几千块买衣服，她发现后干脆不准我和女儿见面，甚至把女儿当成继续报复折磨我的工具，反正我和她已经恩断义绝了，不愿过多纠缠，我正在找律师，考虑去法院夺回女儿的监护权。以她这一年多来的鬼样子。我很有希望把女儿接回来。</p><p data-pid=\"82AniFCj\"><b>总之，你如果问我从婚姻中得到怎么，我只能说生活中的琐碎事逼得我精疲力尽，除了一对儿女外，没有任何值得留念的</b>。</p><p data-pid=\"sl54tKRf\">但我的人生不能套用给你，你的未来如何，或许只有等你到了我这个岁数的时候才知道。</p>",
            "excerpt": "[图片] 感谢各位黑子和规劝大军帮我翻出了当年的牢骚，现在你们知道我当年为了这个所谓的家，为了她的贪婪，是怎么当牛当马的。 ——— 谢谢大家关心，女儿接回来了，因为是暑假，我又加了一层保险，爷爷奶奶已经提前安排好行程核酸，带着欢天喜地的儿子女儿回了老家，开学之前都不会回来。 方法很简单，我没和前妻谈一句，只是连着约前岳父喝酒(胃疼 )，这几天烟酒红包送了将近两万，女儿回来的时候…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 1,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-a050c0098e159242dc85b832fc046c3d_720w.jpg?source=7e7ef6e2",
                        "width": 1075,
                        "height": 1187,
                        "token": "v2-a050c0098e159242dc85b832fc046c3d",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxjL34HCCSDzy/AlkgIlCgk0OTQ1MTM1MjcSCjI1NTQzNTk3NTUYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-07-01T21:10:18+08:00"
    },
    {
        "content": {
            "id": 25634119,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/23757237/answer/25634119",
            "created_time": 1400132703,
            "updated_time": 1400146826,
            "question": {
                "type": "question",
                "id": 23757237,
                "title": "设计模式有何不妥，所谓的荼毒体现在哪？",
                "question_type": "normal",
                "created": 1399981767,
                "updated_time": 1400059291,
                "url": "https://www.zhihu.com/question/23757237",
                "is_deleted": false
            },
            "author": {
                "id": "6ef2e77274cb0719253a577665cf690e",
                "url_token": "Ivony",
                "name": "Ivony",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/23a5bca736788ab73e3bd58e56761cda_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/23a5bca736788ab73e3bd58e56761cda.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/6ef2e77274cb0719253a577665cf690e",
                "user_type": "people",
                "headline": "大隐隐知乎",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://picx.zhimg.com/v2-d05b2d4ec9a296ff85afd419be6596e2_r.png?source=0df5f383",
                        "night_mode_url": "https://picx.zhimg.com/v2-cb5afc4a90072144d4e476dc5df8f0a1_r.png?source=0df5f383"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19554298",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19554298",
                                "name": "编程",
                                "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "编程话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "编程话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "编程话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 899,
            "comment_count": 103,
            "thanks_count": 96,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"Ga3bkjUE\">好吧，专注黑设计模式十余年的我来凑个热闹。</p><p data-pid=\"i-EnWnUX\">就<b>设计模式</b>而言，其本身没有任何问题。</p><p data-pid=\"ft0o7ibF\">所有的设计模式，都是广泛运用于OO软件开发中的常见的一些Pattern（个人认为应当翻译成手法，而非模式）。</p><p data-pid=\"k82Rg850\">这些Pattern我都用了好多年了，并且也将一直用下去。</p><br/><br/><p data-pid=\"ntwUokWW\">真正流毒甚广的，就是GoF的这本书<b>《设计模式》</b>，或者说<b>中文版流毒最甚</b>。</p><p data-pid=\"en7VsySK\">设计模式这本书的英文全称是：Design Patterns - Element of Resuable Object-Oriented software design</p><p data-pid=\"mX6Obff4\">从英文原文来说，问题不大，因为大概意思是：<b>一些设计手法的集锦，进行可复用的面向对象软件设计的基础</b>。</p><br/><p data-pid=\"rNyq5OAC\">中文版翻译成<b>设</b><b>计模式：可复用面向对象软件的基础</b>。一下子就高大上了有木有？甚至于很多人根本都不知道这个小标题，只知道：<b>《设计模式》</b>，卧槽，又是设计又是模式的。这一定是葵花宝典一样的不传之秘，不学会这个，你好意思说你会做软件设计？</p><br/><p data-pid=\"22bMEiMx\">结果就是一帮子像我这样的把设计模式用了几年的人，因为没听说过神马装饰模式，神马享元模式，<b>一下子就low爆了好不</b>？</p><br/><br/><br/><p data-pid=\"P93Ze6Ox\">设计模式你妹啊！</p><p data-pid=\"xHCIKQ02\">就是<b>一大堆有几年经验的程序员都知道的手法集锦而已啊</b>，说白了就是<b>写给第一次去西餐厅吃牛排的二货的一本入门手册而已</b>。</p><p data-pid=\"7PgRfcgT\">软件开发中的Pattern何止20余种，成百上千好不？像PHP里面的$conn || $conn = mysql_connect( $server );这也是一种Pattern啊，反复出现啊。</p><br/><p data-pid=\"VehIhjzl\">《设计模式》的流毒在于，一本讲Element的书被抬高到了<b>银弹</b>的程度，<b>没有银弹啊</b>你们这群<b>low逼</b>和<b>二货老板</b>，回去把<b>《没有银弹》</b>再反复读十遍。</p><p data-pid=\"he-0Axj3\">《设计模式》的流毒还在于，<b>他给low逼们一条快速提升逼格的途径</b>，那就是<b>把所有设计模式的名字都！背！下！来！<br/><br/></b>君不见多少二货整天乐此不疲的背诵设计模式的名字，而连一行像样的代码都写不出来。</p><br/><br/><p data-pid=\"wg4tWYhy\">顺便说一下，还有很多人说，设计模式建立了一套话语体系，让我们这些有逼格的程序员可以用一个名词来指代一个三两句话说不清的Pattern，提高了沟通的效率。</p><p data-pid=\"RhMbtjm1\">不得不说我曾经被这种说法唬住过，</p><p data-pid=\"8ti1j-EW\">但事实的真相是，程序员其实是这样沟通的：</p><blockquote data-pid=\"fiVUON9O\">这个类负责创建这个对象，对。然后这边包装一下，对的。<br/>嗯，你这个类就是针对他的Interface做的一个Adapter，是的。<br/>你这个只创建一次，提高性能。对。</blockquote><br/><p data-pid=\"HXO2_K5d\">和那些高大上的名词有个屁的关系。<b>两个程序员在一个层次的时候，根本不需要任何装逼的名词都能很顺畅的沟通</b>。</p><br/><br/><br/><p data-pid=\"rivJzU2H\">最后送所有程序员两句话：</p><p data-pid=\"Oeb-laP3\"><b>通向二逼之路，常由逼格铺就。</b></p><p data-pid=\"PJY8oRkn\"><b>没有银弹。</b></p><br/><p data-pid=\"GhqQFMMU\">共勉之。</p>",
            "excerpt": "好吧，专注黑设计模式十余年的我来凑个热闹。 就 设计模式而言，其本身没有任何问题。所有的设计模式，都是广泛运用于OO软件开发中的常见的一些Pattern（个人认为应当翻译成手法，而非模式）。 这些Pattern我都用了好多年了，并且也将一直用下去。 真正流毒甚广的，就是GoF的这本书 《设计模式》，或者说中文版流毒最甚。设计模式这本书的英文全称是：Design Patterns - Element of Resuable Object-Oriented software design 从…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogENCAQQAxjHypwMIOnoZpICIQoHNTU1MzE0NhIIMjU2MzQxMTkYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2014-05-15T13:45:03+08:00"
    },
    {
        "content": {
            "id": 559892399,
            "title": "配置Haskell开发环境（2022）",
            "type": "article",
            "excerpt_title": "两年前我写过一篇在Windows上安装Haskell的文章： [文章: 在Windows上安装Haskell] 现在两年过去了，Haskell社区内也有了很多变化，此前那篇文章里表述的流程以及给出的很多建议已经不再适用。前文仍然保留，但现在仅对希望了解工具链历史的人具有考古价值，流程和建议请以本文为准。 说明：本文将首先简述我推荐的安装流程，并在最后附上我给出这个流程的理由以及一些分析说明。关于Haskell的包管理器（stack和cabal-install），…",
            "url": "https://zhuanlan.zhihu.com/p/559892399",
            "image_url": "https://picx.zhimg.com/v2-a916155783af2249ce9a8700aefe22d7_r.jpg?source=172ae18b",
            "created": 1661945077,
            "updated": 1661945077,
            "author": {
                "id": "381f9f49ce7b0786149efa74848f388f",
                "url_token": "krantz-40",
                "name": "Monad",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-60d5aaaf453c894fb6abccee8e14f631_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-60d5aaaf453c894fb6abccee8e14f631.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/381f9f49ce7b0786149efa74848f388f",
                "user_type": "people",
                "headline": "因真理，得自由，以幸福",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1498082490
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"jB_h6F6Y\">两年前我写过一篇在Windows上安装Haskell的文章：</p><a href=\"https://zhuanlan.zhihu.com/p/259393917\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-0a00c2706d86ef6478aa11d5bf798ddf_qhd.jpg\" data-image-width=\"561\" data-image-height=\"221\" class=\"internal\">Monad：在Windows上安装Haskell</a><p data-pid=\"N_GHtX6K\">现在两年过去了，Haskell社区内也有了很多变化，此前那篇文章里表述的流程以及给出的很多建议已经不再适用。前文仍然保留，但现在仅对希望了解工具链历史的人具有考古价值，流程和建议请以本文为准。</p><blockquote data-pid=\"qDaeFUz0\"><b>说明：</b>本文将首先简述我推荐的安装流程，并在最后附上我给出这个流程的理由以及一些分析说明。关于Haskell的包管理器（<code>stack</code>和<code>cabal-install</code>），最近仍然有一些正在进行的改动尚未正式发布，我会将目前的状况以及所说的那些改动正式发布后可能适用的一些建议也附在文末。预计此后相当一段时间安装流程不会再有大变动了，有小修小补或者有新的推荐我会尽量更新。</blockquote><p data-pid=\"tpeqchRl\">与前文不同，本文不仅适用于Windows，Linux/macOS/FreeBSD/WSL2等平台也推荐采用同样的流程。</p><hr/><h2>安装GHCup</h2><p data-pid=\"0H-1rr30\"><a href=\"https://link.zhihu.com/?target=https%3A//www.haskell.org/ghcup/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GHCup</a>是Haskell社区维护的一个Haskell安装器，能用来安装编译器GHC（Glasgow Haskell Compiler）、包管理器stack和cabal-install，以及IDE支持HLS（Haskell Language Server）。这种安装器算是近年比较流行的一种模式，看GHCup的名字应该也很容易想到Rust的<a href=\"https://link.zhihu.com/?target=https%3A//rustup.rs/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Rustup</a>。GHCup会全面接管安装Haskell工具链的方方面面，包括安装、移除、更新，也允许多版本并存。</p><p data-pid=\"x0VlCV91\">GHCup给出的安装方式是熟悉的<code>curl | sh</code>模式，即给出一行命令，从官方网站下载安装脚本并交给本地shell执行。对于Linux/macOS/FreeBSD/WSL2用户，命令就是<code>curl | sh</code>结构；对于Windows用户，官方给出的是等价的PowerShell命令。建议直接点击页面上的复制按钮直接复制命令来执行。如果直接复制执行遇到了网络错误（考虑到国内的互联网稳定性），可以点击页面上的“I don&#39;t like curl | sh”（或直接访问<a href=\"https://link.zhihu.com/?target=https%3A//downloads.haskell.org/~ghcup/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">downloads.haskell.org/~</span><span class=\"invisible\">ghcup/</span><span class=\"ellipsis\"></span></a>），下载适合你操作系统的安装程序手动安装GHCup。</p><blockquote data-pid=\"tz_FIoDM\"><b>注意：</b>应该使用非管理员模式的shell（在官方页面也有这个提示）。对于Linux等，这通常意味着不应当使用<code>sudo</code>等，你应该看到shell使用<code>$</code>而不是<code>#</code>作为提示符。对于Windows 10，右击开始菜单选择“Powershell”而不是“Powershell（管理员）”；对于Windows 11也类似，右击开始菜单选择“Windows终端”而不是“Windows终端（管理员）”。</blockquote><p data-pid=\"k60FHMMc\">值得注意的是，GHCup提供的安装命令会改变当前Powershell进程的设置，允许执行任意远程脚本。如果对安全性有所顾虑，GHCup安装完成后可以另开一个新的Powershell进程，或手动还原相关设置。</p><blockquote data-pid=\"2-le8QK7\"><b>建议：</b>对于Windows，建议使用<a href=\"https://link.zhihu.com/?target=https%3A//docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows%3Fview%3Dpowershell-7.2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Powershell 7</a>（或此后有可能推出的更新的版本），而不是Windows Powershell。</blockquote><h3>〔仅Windows用户〕安装MSYS2</h3><p data-pid=\"ejptnnTr\">在Windows平台上，GHCup会提示安装MSYS2；我的建议是按照提示让GHCup自动安装。GHCup仅会在初次安装时提示安装MSYS2，此后会根据环境变量<code>GHCUP_MSYS2</code>的值（由安装脚本自动设置）取得MSYS2的路径。如果此时选择不安装MSYS2，后续就只能自行手动安装和配置环境变量了。</p><blockquote data-pid=\"E6sW5TFN\">如果你已经安装过MSYS2：原则上这意味着你知道自己在做什么。可以让GHCup复用你此前安装的MSYS2，方法是在安装脚本提示时输入你的MSYS2的安装路径。复用MSYS2的好处是你的shell/SSH/GPG配置以及使用pacman安装的软件包都将复用，其缺点亦是如此。这里举出一个和MSYS2相关的已知bug：如果你的MSYS2之前安装过<code>mingw-w64-x86_64-libsystre</code>，你的包含路径里面就会有一个<code>regex.h</code>；Haskell的正则表达式包<code>regex-posix-clib</code>里面也提供了一个<code>regex.h</code>，会和系统包含路径中的同名文件冲突。让GHCup安装全新的MSYS2可以最大限度地避免此类问题，这需要你自己做出权衡。</blockquote><h3>〔仅Windows用户〕GHCup的安装路径</h3><p data-pid=\"shOtllxu\">默认情况下，GHCup会尝试把自己安装到<code>C:\\ghcup</code>，这个路径会随后自动存储到环境变量<code>GHCUP_INSTALL_BASE_PREFIX</code>中。 不建议更改这个安装路径，如果一定需要更改，请指定一个长度相仿的不含中文的短路径（“短”就是字面意思，路径包含的字符不要超过10个为宜）。</p><blockquote data-pid=\"1ChfVGfT\">这仍然是因为Windows/Haskell遗留下来的上古路径长度bug：使用老版本Windows路径API时，指定的路径长度不能超过<code>MAX_PATH</code>，而<code>MAX_PATH</code>的值由于Windows的稳定性保证永久固定在了260。所以如果把GHCup安装在比较长的路径下，GHC等工具以及后续安装的Haskell包都会有相对更长的路径，就更容易触发这个bug。一旦在后续使用中发现这个bug，唯一的解决办法就是移动相关文件夹到更短的路径中。</blockquote><h2>使用GHCup安装GHC和HLS</h2><p data-pid=\"DyMGWeMg\">GHCup首次安装会提示自动安装推荐版本的GHC。我推荐至少要安装GHC和HLS，stack和cabal-install可以学习一段时间Haskell之后有了更深的了解再根据自己的喜好选择一个。如果错过了提示，GHCup已经安装完毕，后续也可以执行<code>ghcup install</code>命令手动安装。写作本文时Stack最新的LTS-19.21中使用的是GHC 9.0.2，因此这里以安装这个版本的GHC为例（<code>$</code>符号表示提示符，后面的文本是需要输入的命令，不以<code>$</code>开头的行是程序显示的输出，下同）：</p><p data-pid=\"eRl2Z2G-\">先列出可用的所有版本（这里摘取了作为示例的版本，实际的列表会很长）。注意选择的版本后面一定要有hls-powered字样，否则后面VSCode中就没有IDE功能了：</p><div class=\"highlight\"><pre><code class=\"language-console\">$ ghcup list\n...\nX  ghc   9.0.2    base-4.15.1.0             hls-powered\n...\nX  hls   1.7.0.0  latest,recommended</code></pre></div><p data-pid=\"eA2Y_iBC\">然后安装我们需要的GHC和HLS（省略了过程中的输出）：</p><div class=\"highlight\"><pre><code class=\"language-console\">$ ghcup install ghc 9.0.2\n$ ghcup install hls 1.7.0.0</code></pre></div><h2>〔可选〕设置默认工具链版本</h2><p data-pid=\"AwyDJ1CL\">为了能够在命令行直接使用<code>ghc</code>以及<code>ghci</code>命令，需要设置默认工具链版本。如果在GHCup首次安装时一并安装了GHC，那么这个设置应该也会自动提示配置好。我们也可以手动来执行这个配置：</p><div class=\"highlight\"><pre><code class=\"language-text\">$ ghcup set ghc 9.0.2</code></pre></div><p data-pid=\"gQAVDmkV\">这里我仍然是用了前面作为示例的9.0.2版本，实际安装时应该根据实际情况调整这个版本号。</p><h2>升级维护以及多版本并存</h2><p data-pid=\"Q9bd83cN\">执行<code>ghcup upgrade</code>会更新GHCup<b>本身</b>。与Rustup不同，GHCup不会自动更新GHC的版本，因为GHC提供了诸多非标准的语言扩展，而且并不像<code>rustc</code>一样提供严格的向前兼容保证（所以在过去版本的GHC中能够编译的程序在更新编译器后不一定仍然能通过编译）。</p><p data-pid=\"vEOdFBB9\">虽然不能更新工具链，但我们可以同时安装多个版本的GHC/cabal-install/stack/HLS。直接使用上面提到过的<code>ghcup install</code>指令即可安装需要的工具。如果需要，可以进一步使用<code>ghcup set</code>命令设置新的默认工具链版本。如果确认不再需要某个版本的编译器，可以使用<code>ghcup rm</code>命令来卸载。</p><blockquote data-pid=\"xrxlljXC\">如果需要彻底删除GHCup（连同它安装的所有工具），可以使用“核按钮”命令<code>ghcup nuke</code>。 </blockquote><h2>配置编辑器</h2><p data-pid=\"6YB5q4lY\">安装VSCode以及名为Haskell的官方扩展（这个扩展会使用前面安装的HLS）。不推荐VSCode的其他扩展（例如ghc-mod、ghcide、ghcid），因为配置更为复杂，并且体验不佳；现在HLS提供Haskell社区的唯一的官方IDE支持，其他项目大多已停止开发，有些也已经合并到了HLS项目中。</p><p data-pid=\"IMu7a9GZ\"><b>不推荐code-runner。</b>这个扩展似乎是使用过C/C++/Python的同学（尤其是参加过OI的同学）非常喜欢的一个扩展，但从过去两年的经验看这个扩展对Haskell的支持并不好。此外，code-runner只能执行有主函数的Haskell程序，但按一般学习进度，学习Haskell的前几周都不会涉及IO以及主函数。建议按照授课老师的说明，学习使用Haskell的解释器GHCi（可以自行阅读相关手册，尝试一下<code>:type</code>、<code>:info</code>、<code>:browse</code>等指令）。</p><hr/><p data-pid=\"_nSmTFWj\">以上是安装Haskell开发环境的流程概述，下面是开头提到的理由和分析说明部分。</p><h2>GHCup还是stack？</h2><p data-pid=\"qboSLlDJ\">两年前的文章我推荐了stack，现在我则推荐至少要有一个GHCup，同时可以考虑在stack和cabal-install中选择stack。实际上正如两年前的文章所写的那样，stack完全可以很好地管理GHC，支持多版本并存，并且本身是一个相当优秀的包管理器。但是，stack目前还不支持管理HLS，而今年VSCode的Haskell官方扩展停止了对安装HLS的支持，转而依赖GHCup。因此我们目前就处于一个相当尴尬的处境，不可能推荐所有人都手动管理HLS安装，即便对相关流程非常熟悉的人也是如此（就像即便你完全熟悉软件从下载源代码到编译的完整流程，也还是包管理器来得更方便一点）。</p><p data-pid=\"eU-BfbTE\">现在我采取了这样的折中策略：改用GHCup管理GHC和LHS，同时stack保持原样。这样VSCode就能从GHCup获得HLS提供的IDE支持，同时我也不必更改我的基于stack的开发流程。这一方案的问题是我会有两个不同版本的GHC，占用两份空间。如果是在一台新设备上从头开始配置环境，我会考虑使用GHCup管理GHC、LHS和stack，并在stack配置中暂时开启<code>system-ghc</code>选项来使用全局的GHC。这个方案的问题在于stack将不再检查GHC版本是否正确，同时也会导致需要本地和CI使用不同的<code>stack.yaml</code>配置。</p><p data-pid=\"nyYLcKfT\">好消息是，GHCup的开发者已经向stack项目提交了一个相关的PR（<a href=\"https://link.zhihu.com/?target=https%3A//github.com/commercialhaskell/stack/pull/5585\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">stack#5585</a>），目前已经合并；GHCup一侧也已经开始了兼容工作（<a href=\"https://link.zhihu.com/?target=https%3A//gitlab.haskell.org/haskell/ghcup-hs/-/merge_requests/135\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ghcup-hs#135</a>）。等到这两侧的支持分别都完全实现并发布相应的新版本之后，这一问题将能彻底解决。如果想了解这方面的具体进度等，可以参看我给出的两个PR链接。关于GHCup和stack的对比，可以参看GHCup的FAQ：</p><a href=\"https://link.zhihu.com/?target=https%3A//www.haskell.org/ghcup/about/%23faq\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">About - GHCup</a><h2>stack还是cabal-install？</h2><p data-pid=\"-MiEuA7p\">尽管stack目前和GHCup的配合不如cabal-install（这完全可以理解，因为GHCup最早就是为了和cabal-install一起使用而设计的），但我仍然推荐stack。当然，这是我个人的主观判断，并且可以部分归因于我习惯了stack的工作流程。如果你喜欢cabal-install的风格，或者nix，那也完全没问题。</p><p data-pid=\"bYODxxp5\">这里有一个问题需要解释，就是cabal-install这个工具的名字。cabal-install用户通常把这个工具简称为cabal，而stack用户则更多使用cabal-install。这里的混乱主要来源于stack/cabal-install的关系：它们共同依赖一个名为Cabal的包管理库（注意这里是大写）。看名字就可以得知，cabal-install（或小写的cabal）是Cabal的第一个命令行界面，而stack则是后起的。它们具体的区别可以参看stack文档的如下FAQ：</p><a href=\"https://link.zhihu.com/?target=https%3A//docs.haskellstack.org/en/stable/faq/%23what-is-the-relationship-between-stack-and-cabal-the-tool\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">What is the relationship between Stack and Cabal (the tool)?</a><hr/><p data-pid=\"MK-rNzaP\">本文遵守<a href=\"https://link.zhihu.com/?target=https%3A//creativecommons.org/licenses/by-nc-sa/4.0/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Attribution-NonCommercial-ShareAlike 4.0 International</a>许可协议。</p>",
            "voteup_count": 68,
            "column": {
                "id": "c_1298020781801066496",
                "type": "column",
                "url_token": "c_1298020781801066496",
                "title": "Haskell拾遗",
                "url": "https://zhuanlan.zhihu.com/c_1298020781801066496",
                "created": 1602252270,
                "updated": 1602252270,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 14
        },
        "created": "2022-08-31T19:24:37+08:00"
    },
    {
        "content": {
            "id": 140753769,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/54319353/answer/140753769",
            "created_time": 1484288269,
            "updated_time": 1484294075,
            "question": {
                "type": "question",
                "id": 54319353,
                "title": "有教抽象能力的书么？",
                "question_type": "normal",
                "created": 1483348741,
                "updated_time": 1483348741,
                "url": "https://www.zhihu.com/question/54319353",
                "is_deleted": false
            },
            "author": {
                "id": "0251012c87c2d3f56ac34de7d71cdcbc",
                "url_token": "marisa.moe",
                "name": "圆角骑士魔理沙",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/466406875631534fc5629e5c75a58a7a_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/466406875631534fc5629e5c75a58a7a.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/0251012c87c2d3f56ac34de7d71cdcbc",
                "user_type": "people",
                "headline": "千锤百炼",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19552826",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19552826",
                                "name": "编程语言",
                                "avatar_url": "https://pic1.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "编程语言话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "编程语言话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19552826",
                                    "token": "19552826",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552826",
                                    "name": "编程语言",
                                    "avatar_path": "v2-14ae19e0df2e9517722a4832fc682743",
                                    "avatar_url": "https://pic1.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "编程语言话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19552826",
                                    "token": "19552826",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552826",
                                    "name": "编程语言",
                                    "avatar_path": "v2-14ae19e0df2e9517722a4832fc682743",
                                    "avatar_url": "https://pic1.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1511,
            "comment_count": 85,
            "thanks_count": 260,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"B7Kbr1KU\">抽象答SICP，递归答SICP，CS Intro答SICP，Lisp教程答SICP，天下谁人不知道SICP。。。本小姐姐就给你们看下类似的还有什么书，尝尝鲜吧。</p><p data-pid=\"e2XyWi7l\">Java - <a href=\"https://link.zhihu.com/?target=https%3A//mitpress.mit.edu/books/little-java-few-patterns\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">A Little Java, A Few Patterns</a> - 为什么Java101会讲Expression Problem跟Church Numeral啊。。。这画风有什么地方不对。。。Dan Friedman出品必属精品</p><p data-pid=\"uAiFBVPR\">C++ - <a href=\"https://link.zhihu.com/?target=http%3A//www.fm2gp.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">From Mathematics to Generic Programming</a> - 就是字面意思，慢慢的讲如何实现数学算法，然后引入抽象代数，代码也随之抽象化起来。另：一股Haskell的味道扑面而来</p><p data-pid=\"jf0sffyd\">Haskell - 讲真，那本书都行 - 学Haskell无论什么书都会花大幅篇章讲抽象讲Typeclass，反而是避免Overgeneralization需要慢慢去试坑。。。</p><p data-pid=\"DfvYofrp\">OCaml - <a href=\"https://link.zhihu.com/?target=https%3A//realworldocaml.org/v1/en/html/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Real World OCaml</a> - 谈起抽象化，不可能不知道ML系的Module。</p><p data-pid=\"yUfLTXup\">Lisp - <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/The_Art_of_the_Metaobject_Protocol\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">The Art of the Metaobject Protocol</a> - Meta Circular Evaluator爽不？想不想接着爽下去？这本书能让你再爽300页。具体的说，跟Meta Circular Evaluator有点相似的，MetaObject Protocol讲的是如何在实现一个语言的时候，把实现的内部机制通过Object反射到该语言里面，于是整个语言就变得可扩展的。</p><p data-pid=\"GOa6DPmj\">Lisp - <a href=\"https://link.zhihu.com/?target=http%3A//norvig.com/paip.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Paradigms of Artificial Intelligence Programming</a> - 教你用宏，S表达式，高阶函数，老式（eliza style）NLP接口写AI</p><p data-pid=\"RZfrCrNm\">Lisp - <a href=\"https://link.zhihu.com/?target=https%3A//people.eecs.berkeley.edu/~bh/v1-toc2.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Symbolic Computing contents</a> - 扩展板的SICP，该有的都有了（宏，高阶函数，Abstract Data Type），不该有的（划掉）也有，比如classical AI，海龟画图，PL Design。。。什么鬼，作为一本101书这比Little Java还离谱啊（当然这本书比Little Java厚的多，Java也远远没Logo有花样）</p><p data-pid=\"Jl6eYEbH\">另：请不要因为我口头上说一句小姐姐就fo我。。。无论我真实身份是什么这样都很不尊重人。</p>",
            "excerpt": "抽象答SICP，递归答SICP，CS Intro答SICP，Lisp教程答SICP，天下谁人不知道SICP。。。本小姐姐就给你们看下类似的还有什么书，尝尝鲜吧。 Java - A Little Java, A Few Patterns - 为什么Java101会讲Expression Problem跟Church Numeral啊。。。这画风有什么地方不对。。。Dan Friedman出品必属精品C++ - From Mathematics to Generic Programming - 就是字面意思，慢慢的讲如何实现数学算法，然后引入抽象代数，代码也随之抽象…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxjp9o5DIIKm0waSAiMKCDUxODI5MzkxEgkxNDA3NTM3NjkYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2017-01-13T14:17:49+08:00"
    },
    {
        "content": {
            "id": 2678636696,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/520634558/answer/2678636696",
            "created_time": 1663473016,
            "updated_time": 1663473016,
            "question": {
                "type": "question",
                "id": 520634558,
                "title": "从事程序员多年感觉到了天花板，应该转管理吗?",
                "question_type": "normal",
                "created": 1646666154,
                "updated_time": 1661848420,
                "url": "https://www.zhihu.com/question/520634558",
                "is_deleted": false
            },
            "author": {
                "id": "11c4242fd92613a7f85ad9fff60c29c9",
                "url_token": "catchen",
                "name": "Cat Chen",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/1916213aa_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/1916213aa.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/11c4242fd92613a7f85ad9fff60c29c9",
                "user_type": "people",
                "headline": "知乎只写用户",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19550901",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550901",
                                "name": "前端开发",
                                "avatar_url": "https://pic1.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19560641",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19560641",
                                "name": "职业规划",
                                "avatar_url": "https://pic1.zhimg.com/v2-98ba63611671c9911d17432016c70a4e_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19552330",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19552330",
                                "name": "程序员",
                                "avatar_url": "https://pic1.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "前端开发等 3 个话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "前端开发等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://pic1.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19560641",
                                    "token": "19560641",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19560641",
                                    "name": "职业规划",
                                    "avatar_path": "v2-98ba63611671c9911d17432016c70a4e.jpg",
                                    "avatar_url": "https://pic1.zhimg.com/v2-98ba63611671c9911d17432016c70a4e_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552330",
                                    "token": "19552330",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552330",
                                    "name": "程序员",
                                    "avatar_path": "v2-3d917fb11613b7b13ecd7bbeb1c554e6",
                                    "avatar_url": "https://pic1.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "前端开发等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://pic1.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19560641",
                                    "token": "19560641",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19560641",
                                    "name": "职业规划",
                                    "avatar_path": "v2-98ba63611671c9911d17432016c70a4e.jpg",
                                    "avatar_url": "https://pic1.zhimg.com/v2-98ba63611671c9911d17432016c70a4e_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552330",
                                    "token": "19552330",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552330",
                                    "name": "程序员",
                                    "avatar_path": "v2-3d917fb11613b7b13ecd7bbeb1c554e6",
                                    "avatar_url": "https://pic1.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 210,
            "comment_count": 13,
            "thanks_count": 20,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<blockquote data-pid=\"ZjI-30s-\">我今年32干开发已经5年了，觉得技术方面基本上都了解了，大数据，人工智能都做过了。</blockquote><p data-pid=\"68RL-f2I\">觉得自己什么都懂了不是天花板。天花板应该是知道自己不懂什么或者是缺乏什么，并且觉得自己有生之年不可能获得那些东西。</p><p data-pid=\"eWC4DirH\">你现在的问题是不知道自己缺了什么，不知道那些站的比你高的人都有什么你没有的东西，不知道做管理是否适合自己。你真正需要研究的问题是你如何能够把这种「不知道」转变为「知道」，无论是自己折腾还是知乎提问。</p>",
            "excerpt": "我今年32干开发已经5年了，觉得技术方面基本上都了解了，大数据，人工智能都做过了。觉得自己什么都懂了不是天花板。天花板应该是知道自己不懂什么或者是缺乏什么，并且觉得自己有生之年不可能获得那些东西。 你现在的问题是不知道自己缺了什么，不知道那些站的比你高的人都有什么你没有的东西，不知道做管理是否适合自己。你真正需要研究的问题是你如何能够把这种「不知道」转变为「知道」，无论是自己折腾还是知乎提问。",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxiYgaP9CSCKtZclkgIlCgk1MTcxMTI2ODcSCjI2Nzg2MzY2OTYYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-09-18T11:50:16+08:00"
    },
    {
        "content": {
            "id": 88538670,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/21410150/answer/88538670",
            "created_time": 1456676700,
            "updated_time": 1667367152,
            "question": {
                "type": "question",
                "id": 21410150,
                "title": "如何掌握函数式编程？",
                "question_type": "normal",
                "created": 1375258688,
                "updated_time": 1415533595,
                "url": "https://www.zhihu.com/question/21410150",
                "is_deleted": false
            },
            "author": {
                "id": "2ff239f95aaa7f4612a23d220ff4ce48",
                "url_token": "hongbo_zhang",
                "name": "张宏波",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-d64059d847cc9eeefda413cf7316bdb3_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-d64059d847cc9eeefda413cf7316bdb3.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/2ff239f95aaa7f4612a23d220ff4ce48",
                "user_type": "people",
                "headline": "Moonbit &lt;- ReScript &lt;- OCaml ",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://pic1.zhimg.com/v2-aa8a1823abfc46f14136f01d55224925.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-aa8a1823abfc46f14136f01d55224925.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 464,
            "comment_count": 36,
            "thanks_count": 84,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"FecG9m2I\">==========</p><p data-pid=\"v3-NjFnE\">2022年 10月更新： 这篇文章很多年了，不代表我现在的看法，人生很多时候会经历三个阶段：<br/>看山是山，看山不是山，看山还是山。 我2021年休了近一年的产假，对很多问题有了一些豁然开朗的感觉，和当时的想法也不太一样了。<br/>但当时还是认真写的，就留着做个纪念吧。<br/>==========<br/>作为一个过来人 说几句.</p><p data-pid=\"cHdXmObN\">函数式编程并不难 但是它是一门冷门的技术，学习一门冷门的技术 回报比是很低的 学习它可能还没有刷题找工作更有效率。同样是因为一门冷门的技术 如果旁边没有有经验的人指点的话 学习时间更长。所以如果你想真正掌握它的精髓的话 注意说得是很高层次的掌握不是像(functional programming in javascript 这种), 旁边有非常经验的人 或者 自己悟性比较好(比如top2姚班的人）或者 很小的时候就接触编程了可以参考下我的经历（年代久远可能记忆有误差).</p><p data-pid=\"U_5LdDkm\">我是08年大三在msra的时候接触到fp 的当时 是微软的 F#, 和很多人一样觉得这东西很美，编程第一次觉得有乐趣（我当时还在学习wpf..) 于是我把当时所有能找到的关于F#的书都看了遍， 当时比较好的是 expert F# (apress 出版的）但是卡壳了，monad理解不了(F#叫computation expression) 还有continuation.</p><p data-pid=\"WdkvaA0c\">于是google了下monad的资料发现全是haskell的东西 所以开始学习haskell （注意因为我很早就使用emacs了 所以搭建工作环境是很方便的) 还是理解不了monad 于是就把mtl package里所有的 class type 手工抄写了好几遍 豁然开朗 学习haskell 是一个非常漫长的过程 当时读过的书有real world haskell, haskell 的wiki,  还有很多很多haskell的论文, haskell的论文不是一般的难懂啊 因为很多论文里面别说英文字母了 全是希腊字母啊 当然也有一些简单的论文 比如walder的几篇关于monad的 还有john huges的论文都比较好懂（关于arrow, quick check 之类的）</p><p data-pid=\"3l6EidAY\">与此同时我还在寻找自己觉得最高效的编程语言 大四的时候因为受冰河的影响读了几本关于lisp宏的书， on lisp 和 paradigms of artificial intelligence in common lisp, let over lambda. 后来意识到宏虽好 但一切没有类型的语言写大型程序都是耍流氓 就忍着没去了解clojure了。</p><p data-pid=\"R7C9ABDm\">后来研一 了 由于受宏的影响我就了解到metaocaml和camlp4 还有coq了  慢慢接触到ocaml了 有一本好书推荐(the functional approach to programming). 后来我有上过当时清华的一个暑期学校专门讲coq的。因为当时研究的热情不减 所以就跟我再msra的导师harry 说自己想出国念programming language，于是导师很nice的答应了 并帮我推荐</p><p data-pid=\"0lSXNDJZ\">注意到现在为止<b><i>看上去我懂了很多了</i></b>， <b><i>其实还是没有入门</i></b>， 因为没有受到真正科班的训练 没有写过大型fp程序， 或者说当时还是一个民科的水准</p><p data-pid=\"1pEOztS1\">记得当时我只申请了几所学校 有一所貌似还寄丢了 于是来到了宾大念phd. 导师是夫妻店都很nice, 经常周末去他们家和小孩下棋 。。</p><p data-pid=\"Reyy15c7\">老板娘算是haskell界的权威之一了， 当时跟着她学习了一学期 终于看haskell的形式化研究的论文没有什么压力了 但是忽然发现自己跳到一个自己其实并不喜欢的东西里面去了 因为全都是定理证明之类的 定理证明的问题有两类：一类是这也能证明 另一类是这也需要证明。。</p><p data-pid=\"NPm6qV4s\">这一学期跟老板娘还学了generic programming in haskell, 因为自己对ocaml也感兴趣就port 到 ocaml里去了 用的是camlp4. 后来就慢慢接触到ocaml 的编译器里面了。当时老板娘也让我去看看haskell的编译器 但是haskell的编译器实在编译太慢了 兴趣受到很大打击。因为老板是研究ML的 所以 就不跟老板娘 跟老板了。老板鼓励我把camlp4重写一下 因为我自己之前研究过很长时间lisp了 然后ocaml的编译器实在设计的简单 思路清晰， 这次重写对我的影响很大 因为camlp4算是ocaml里面最复杂的软件之一了，自己终于不是一个理论派了 有着大型软件工程经验</p><p data-pid=\"5xuGKBBD\">后来第二年现在的雇主需要一个ocaml expert， 然后老板也觉得这是一个不错的机会 就让我走了。宾大的这两年让我从一个悟性不错的民科变成了一个业内人士吧。所以要想学习冷门技术 旁边有一个引路人 真的很重要。</p><p data-pid=\"Z2Ejb-DJ\">对了 我现在天天写javascript (ocaml 编译成的 js)</p>",
            "excerpt": "=== 2022年 10月更新： 这篇文章很多年了，不代表我现在的看法，人生很多时候会经历三个阶段： 看山是山，看山不是山，看山还是山。 我2021年休了近一年的产假，对很多问题有了一些豁然开朗的感觉，和当时的想法也不太一样了。 但当时还是认真写的，就留着做个纪念吧。 === 作为一个过来人 说几句.函数式编程并不难 但是它是一门冷门的技术，学习一门冷门的技术 回报比是很低的 学习它可能还没有刷题找工作更有效…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogENCAQQAxiu/JsqINO6LZICIgoIMzA4NTAxMDkSCDg4NTM4NjcwGAQiCklNQUdFX1RFWFQ=",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2016-02-29T00:25:00+08:00"
    },
    {
        "content": {
            "id": 564194625,
            "title": "如何检测 JavaScript 原生函数 是否被打过 猴子补丁",
            "type": "article",
            "excerpt_title": "本文为翻译 原文标题：Checking if a JavaScript native function is monkey patched 原文作者：Mazzarolo Matteo 原文地址：https://mmazzarolo.com/blog/2022-07-30-checking-if-a-javascript-native-function-was-monkey-patched/ 简单讲：如何确定 JavaScript 的 原生函数有没有被重写过呢？ 我们没法做到，或者说判定结果的可信度并不会特别高。我们有很多方法可以检查，但是无法保证万无一失。JavaScript 中的原生函数在 J…",
            "url": "https://zhuanlan.zhihu.com/p/564194625",
            "image_url": "https://picx.zhimg.com/v2-5dc7e778b861ff275bce0331393588e6_r.jpg?source=172ae18b",
            "created": 1663122023,
            "updated": 1663122023,
            "author": {
                "id": "031c06f348c312ac4c431c3092530d68",
                "url_token": "tapir42",
                "name": "Tapir",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-6bb0037404b02d7daec89b4aed0fb334_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-6bb0037404b02d7daec89b4aed0fb334.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/031c06f348c312ac4c431c3092530d68",
                "user_type": "people",
                "headline": "Dev | Game | Music | ACG | PHO",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "奇虎360 前端工程师"
                    }
                ],
                "badge_v2": {
                    "title": "奇虎360 前端工程师",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "奇虎360 前端工程师",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "奇虎360 前端工程师",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1444445617
            },
            "comment_permission": "all",
            "content": "<blockquote data-pid=\"As0uaSxh\"> 本文为翻译<br/> 原文标题：Checking if a JavaScript native function is monkey patched<br/> 原文作者：Mazzarolo Matteo<br/> 原文地址：<a href=\"https://link.zhihu.com/?target=https%3A//mmazzarolo.com/blog/2022-07-30-checking-if-a-javascript-native-function-was-monkey-patched/%3Futm_source%3Dpocket_mylist\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://mmazzarolo.com/blog/2022-07-30-checking-if-a-javascript-native-function-was-monkey-patched/</a><br/><b>简单讲：如何确定 JavaScript 的 原生函数有没有被重写过呢？</b> 我们没法做到，或者说判定结果的可信度并不会特别高。我们有很多方法可以检查，但是无法保证万无一失。</blockquote><h3>JavaScript 中的原生函数</h3><p data-pid=\"8_4zzl8W\">在 JavaScript 中，“原生函数”（Native function） 是那些源代码被编译为原生机器码的函数。我们可以在 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JavaScript 标准内置对象</a> 中找到原生函数（诸如 <code>eval()</code>，<code>parseInt()</code>） ，或者在 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/API\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">浏览器 Web API</a> 找到（诸如 <code>fetch()</code>，<code>localStorage.getItem()</code>）。</p><p data-pid=\"y9IsGlf2\">由于 JavaScript 的动态特性，开发者可以覆盖浏览器暴露出的原生函数。这种技巧被我们称作 <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Monkey_patch\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">猴子补丁（Monkey patching ）</a> 。</p><h3>猴子补丁</h3><p data-pid=\"DRo8SKxR\">猴子补丁主要用于修改浏览器内置 API 和原生函数的默认行为。这通常是添加特定功能、polyfill 特性、hook 到 API 的唯一方法，因为我们没法直接对这些 API 进行访问。</p><p data-pid=\"x1gntmRv\">例如，像是 <a href=\"https://link.zhihu.com/?target=https%3A//www.bugsnag.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Bugsnag</a> 这样的监测工具，重写了 Fetch 和 XMLHttpRequest 的 API 来获取由 JavaScript 代码触发的网络连接相关信息。</p><p data-pid=\"WucWWp7P\">猴子补丁是个强大而危险的技巧，因为你没法控制那些被你覆盖的代码：未来 JavaScript 引擎的更新可能会打破你在补丁中做出的一些假设，并导致严重的 Bug。</p><p data-pid=\"MlKKtlnv\">另外，对那些并非由你负责的代码打猴子补丁，可能会覆盖一些被其他开发者加入的猴子补丁，引入潜在的冲突。</p><p data-pid=\"Tqee2_-w\">由于种种原因，有时需要确定给定函数是否是原生函数，是否被打了猴子补丁，但是我们能做到吗？</p><h3>用 <code>toString()</code> 来检查函数上的猴子补丁</h3><p data-pid=\"ZyFGo-uD\">检查一个函数是否 “干净”（没有猴子补丁） 最常用的方式那就是检查函数的 <code>toString()</code> 输出。</p><p data-pid=\"yBQSxHuO\">默认情况下，原生函数的 <code>toString()</code> 返回这么一行 <code>&#34;function fetch() { [native code] }&#34;</code> </p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-be35f19ef0f0f3446bf640f148934e63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1236\" data-rawheight=\"718\" class=\"origin_image zh-lightbox-thumb\" width=\"1236\" data-original=\"https://pic4.zhimg.com/v2-be35f19ef0f0f3446bf640f148934e63_r.jpg\" data-original-token=\"v2-5fa31c550e02864d295fe0094b1bc9e7\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"2MD7GVUB\">依照运行 JavaScript 引擎的不同，输出结果会略有不同。不过，在大多数浏览器中，还是可以很安全的假定返回的字符串中会包含 <code>&#34;[native code]&#34;</code> 。</p><p data-pid=\"7Bz4xhK7\">打过猴子补丁的原生函数，它的 <code>toString()</code> 将不会返回包含 <code>&#34;[native code]&#34;</code> 的字符串，而是会返回字符串化的函数体。</p><p data-pid=\"Rg7LnaoU\">所以说，想要知道函数是否仍是原生的，我们可以通过检测 <code>toString()</code> 输出是否包含 <code>&#34;[native code]&#34;</code> 来简单判断。</p><p data-pid=\"Jf3hW1bV\">基本的检测方式如下：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">isNativeFunction</span><span class=\"p\">(</span><span class=\"nx\">f</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">f</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">().</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"s2\">&#34;[native code]&#34;</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">isNativeFunction</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">);</span> <span class=\"c1\">// → true\n</span><span class=\"c1\"></span>\n<span class=\"c1\">// 对 fetch API 打猴子补丁\n</span><span class=\"c1\"></span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">fetch</span><span class=\"o\">:</span> <span class=\"nx\">originalFetch</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">;</span>\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">fetch</span><span class=\"p\">(...</span><span class=\"nx\">ƒargs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;Fetch call intercepted:&#34;</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">originalFetch</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">})();</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">();</span> <span class=\"c1\">// → &#34;function fetch(...args) {\\n console.log(&#34;Fetch...\n</span><span class=\"c1\"></span>\n<span class=\"nx\">isNativeFunction</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">);</span> <span class=\"c1\">// → false\n</span></code></pre></div><p data-pid=\"zVfyie2p\">这种方式在大多数场景下都能正常生效。然而，你得清楚，很多伎俩可以让函数绕过这个检测。无论是出于恶意目的（注入恶意代码）还是说你不希望自己的覆盖行为被发现，有几种方法可以让函数看起来很 “原生”。</p><p data-pid=\"PW2ubTr4\">比如，可以添加一些包含 <code>&#34;[native code]&#34;</code> 的代码（甚至是一条注释！）在函数体里：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">fetch</span><span class=\"o\">:</span> <span class=\"nx\">originalFetch</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">;</span>\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">fetch</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// function fetch() { [native code] }\n</span><span class=\"c1\"></span>    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;Fetch call intercepted:&#34;</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">originalFetch</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">})();</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">();</span> <span class=\"c1\">// → &#34;function fetch(...args) {\\n // function fetch...\n</span><span class=\"c1\"></span>\n<span class=\"nx\">isNativeFunction</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">);</span> <span class=\"c1\">// → true\n</span></code></pre></div><p data-pid=\"EnaSi2vq\">… 或者，可以重写 <code>toString()</code> 方法，返回包含 <code>&#34;[native code]&#34;</code> 的字符串：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">fetch</span><span class=\"o\">:</span> <span class=\"nx\">originalFetch</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">;</span>\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">fetch</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;Fetch call intercepted:&#34;</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">originalFetch</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n  <span class=\"p\">};</span>\n<span class=\"p\">})();</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">.</span><span class=\"nx\">toString</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">toString</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"sb\">`function fetch() { [native code] }`</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">();</span> <span class=\"c1\">// → &#34;function fetch() { [native code] }&#34;\n</span><span class=\"c1\"></span>\n<span class=\"nx\">isNativeFunction</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">);</span> <span class=\"c1\">// → true\n</span></code></pre></div><p data-pid=\"MHMGAbih\">… 或者，可以用 <code>bind</code> 创建猴子补丁函数，这会生成一个原生函数：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"p\">{</span> <span class=\"nx\">fetch</span><span class=\"o\">:</span> <span class=\"nx\">originalFetch</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nb\">window</span><span class=\"p\">;</span>\n  <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"nx\">fetch</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;Fetch call intercepted:&#34;</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">originalFetch</span><span class=\"p\">(...</span><span class=\"nx\">args</span><span class=\"p\">);</span>\n  <span class=\"p\">}.</span><span class=\"nx\">bind</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">);</span> <span class=\"c1\">//  \n</span><span class=\"c1\"></span><span class=\"p\">})();</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">();</span> <span class=\"c1\">// → &#34;function fetch() { [native code] }&#34;\n</span><span class=\"c1\"></span>\n<span class=\"nx\">isNativeFunction</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">);</span> <span class=\"c1\">// → true\n</span></code></pre></div><p data-pid=\"ngZSqyFE\">… 或者，可以通过 ES6 的 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Proxy</a> 来捕获 <code>apply()</code> 调用，这样一来，从外部来看，函数完全是原生的：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nb\">Proxy</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">apply</span><span class=\"o\">:</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">thisArg</span><span class=\"p\">,</span> <span class=\"nx\">argumentsList</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;Fetch call intercepted:&#34;</span><span class=\"p\">,</span> <span class=\"p\">...</span><span class=\"nx\">argumentsList</span><span class=\"p\">);</span>\n    <span class=\"nx\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">apply</span><span class=\"p\">(...</span><span class=\"nx\">arguments</span><span class=\"p\">);</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">});</span>\n\n<span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">();</span> <span class=\"c1\">// → &#34;function fetch() { [native code] }&#34;\n</span><span class=\"c1\"></span>\n<span class=\"nx\">isNativeFunction</span><span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">);</span> <span class=\"c1\">// → true\n</span></code></pre></div><p data-pid=\"6H4pfl4m\">好了，我就不举例子了。</p><p data-pid=\"oai3p4dy\">我主要想强调的是： <b>开发者可以轻易地绕开你的 <code>toString()</code> 检测</b>。</p><p data-pid=\"IQPOBvrW\">我觉得大多数情况下，不需要太在意上面那些边缘情况。但是如果你想的话，还是可以用一些额外检测来覆盖上面的用例。</p><p data-pid=\"TwyQEJQO\">例如： - 可以使用一次性的 iframe 来获取 “干净” 的 <code>toString()</code> 值，再做严格匹配； - 可以多次调用 <code>.toString().toString()</code> 确保 <code>toString()</code> 不被重写； - 使用元编程技巧，对 <code>Proxy</code> 构造函数自身来打个猴子补丁，以此来确定原生函数是否被代理过了（因为依照规范，无法察觉到什么东西是 <code>Proxy</code>） - 等等 …</p><p data-pid=\"dTYFYAez\">这完全取决于你想在 <code>toString()</code> 这个兔子洞里钻多深。</p><p data-pid=\"toxV8VwV\">但是这真的值得吗？我们能够覆盖所有的边缘情况吗？</p><h3>从 <code>iframe</code> 获取干净的函数</h3><p data-pid=\"kjEafldd\">如果你需要调用一个 “干净” 的函数，而不是去检查原生函数是不是被打过猴子补丁，那么我们可以从同源的 <code>iframe</code> 中获取：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 创建一个同源的 iframe\n</span><span class=\"c1\">// 你可能需要添加一些样式先隐藏 iframe，稍后再从 DOM 中彻底删除\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">iframe</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">createElement</span><span class=\"p\">(</span><span class=\"s2\">&#34;iframe&#34;</span><span class=\"p\">);</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">appendChild</span><span class=\"p\">(</span><span class=\"nx\">iframe</span><span class=\"p\">);</span>\n<span class=\"c1\">// 新的 iframe 会创建它自身的 “干净” window 对象，这样你就可以从这里拿到你想要的函数了\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">cleanFetch</span> <span class=\"o\">=</span> <span class=\"nx\">iframe</span><span class=\"p\">.</span><span class=\"nx\">contentWindow</span><span class=\"p\">.</span><span class=\"nx\">fetch</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"0s3QIgBT\">尽管，我觉得这种方式比调用 <code>toString()</code> 去做验证要好，但也会有一些局限性； - iframe 有时会由于 <a href=\"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/HTTP/CSP\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">强 CSP</a> 或者 你的代码没有通过浏览器运行 而导致不可用。 - 尽管不太现实，但第三方可以给 iframe API 上猴子补丁。所以还是不能 100% 信任生成 iframe 的 window 对象。 - 修改或调用 DOM 的原生函数（比如 <code>document.createElement</code>）没法使用这种方法，因为它们会指向 iframe 的 DOM 而不是顶层的 DOM。</p><p data-pid=\"BVFAyV5Q\">这个解决方案来自 <a href=\"https://link.zhihu.com/?target=https%3A//lobste.rs/s/pppun8/checking_if_javascript_native_function\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">lobste.rs/s/pppun8/chec</span><span class=\"invisible\">king_if_javascript_native_function</span><span class=\"ellipsis\"></span></a> 。</p><h3>通过判断引用是否相等来检查函数上的猴子补丁</h3><p data-pid=\"lMsrmW0q\">如果安全是你首要考虑的因素，我认为你可以选择一种不同的方法：长期存储一个 “干净” 的原生函数引用，然后，用它来和可能的猴子补丁函数进行比较：</p><div class=\"highlight\"><pre><code class=\"language-text\">&lt;html&gt;\n  &lt;head&gt;\n    &lt;script&gt;\n      // 在其他脚本修改原生函数之前，保存 “干净” 原生函数的原始引用。\n      // 在这个例子中，我们保存了 fetch API 的原始引用\n      // 并把它保存在闭包里。如果你无法预先决定要检查什么 API，\n      // 那可以存储多个 window 对象。\n      (function () {\n        const { fetch: originalFetch } = window;\n        window.__isFetchMonkeyPatched = function () {\n          return window.fetch !== originalFetch;\n        };\n      })();\n      // 现在开始，你可以调用 window.__isFetchMonkeyPatched()\n      // 来检查 fetch API 是不是被打了猴子补丁\n      //\n      // 例如：\n      window.fetch = new Proxy(window.fetch, {\n        apply: function (target, thisArg, argumentsList) {\n          console.log(&#34;Fetch call intercepted:&#34;, ...argumentsList);\n          Reflect.apply(...arguments);\n        },\n      });\n      window.__isFetchMonkeyPatched(); // → true\n    &lt;/script&gt;\n  &lt;/head&gt;\n&lt;/html&gt;</code></pre></div><p data-pid=\"Z-bukowT\">通过严格的引用检查，我们可以避免所有的 <code>toString()</code> 漏洞。甚至这种方式也能应用于Proxy，因为 Proxy 没法捕获相等性比较  。</p><p data-pid=\"IS-wHbEK\">这种方法最大的问题在于有点不切实际。它需要在运行任何 app 中其他代码之前，保存函数的原始引用，以确保函数没有被动过手脚。但我们有时根本没法做到这一点（比如，你构建的是库）。</p><blockquote data-pid=\"Z-3RtcQ-\"> 可能有些方式能绕过这项测试，但是我在撰写本文时没有想到。欢迎大家补充。</blockquote><h3>那么，如何确定 JavaScript 原生函数是否被重写过呢？</h3><p data-pid=\"xmzYcJZP\">我 <b>需要</b> 检查函数上猴子补丁的次数，用一只手都能数得过来。</p><p data-pid=\"59ktspZf\">不过我对这个问题很感兴趣，我认为对于很多场景，不存在真正万无一失的判定方法。</p><ul><li data-pid=\"AwOkwyTU\">如果你能控制整个网页，可以预先在函数都还是 “干净” 的时候存储它们，之后再进行比较。</li><li data-pid=\"fJGBhX1b\">不然，你可以使用 iframe，创建一次性的 iframe 并从中获取 “干净” 的函数。但你要明白你还是无法 100% 确定 iframe API 是否被动了手脚。</li><li data-pid=\"0CXpQxLb\">再者，由于 JavaScript 的动态特性，你可以简单使用 <code>toString().includes(&#34;[native code])&#34;</code> 来检查（但恶意代码很容易绕过这种检测）。你还可以增加大量的安全检测来覆盖大多数（没法做到全部）的边缘情况。</li></ul>",
            "voteup_count": 29,
            "comment_count": 1
        },
        "created": "2022-09-14T10:20:23+08:00"
    },
    {
        "content": {
            "id": 563598232,
            "title": "写给前端仔的自动化测试入门小作文",
            "type": "article",
            "excerpt_title": "前言：前端领域的自动化测试一直以来对于前端同学来说，自动化测试都是一个比较特殊的命题。一方面，大家其实都知道自动化测试的好处，做了什么改动只要跑一遍测试用例就知道有没有改挂了之前的逻辑，进行修改时也更有底气。而另一方面，前端本身就具有特殊性，活动页从需求评审到正式上线可能在一周内就完成了，这种迭代速度还写测试用例就是折磨自己。 但实际上，自动化测试在前端工程中也是相当重要的一部分。即使是快速迭代…",
            "url": "https://zhuanlan.zhihu.com/p/563598232",
            "image_url": "https://picx.zhimg.com/v2-9177c012eaa18a1c9132db91855252af_r.jpg?source=172ae18b",
            "created": 1662963033,
            "updated": 1662963033,
            "author": {
                "id": "a27e792097318bbd4337499fbc7f1c56",
                "url_token": "599-75-63",
                "name": "林不渡",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-21574bc97e11efe8fd64eaa527d6b9b2_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-21574bc97e11efe8fd64eaa527d6b9b2.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/a27e792097318bbd4337499fbc7f1c56",
                "user_type": "people",
                "headline": "我佛不渡",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pica.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1535263524
            },
            "comment_permission": "all",
            "content": "<h2><b>前言：前端领域的自动化测试</b></h2><p data-pid=\"67gW7KmK\">一直以来对于前端同学来说，自动化测试都是一个比较特殊的命题。一方面，大家其实都知道自动化测试的好处，做了什么改动只要跑一遍测试用例就知道有没有改挂了之前的逻辑，进行修改时也更有底气。而另一方面，前端本身就具有特殊性，活动页从需求评审到正式上线可能在一周内就完成了，这种迭代速度还写测试用例就是折磨自己。</p><p data-pid=\"Zf3MCcFp\">但实际上，自动化测试在前端工程中也是相当重要的一部分。即使是快速迭代的活动页面，也会有通用的工具函数与 SDK，对这一部分的代码进行测试用例的完善是有必要且意义重大的，而对于某些流量巨大且长期存在的页面，我们甚至需要进行多种测试场景的保障。</p><p data-pid=\"nIFv8di3\">然而由于这两种情况的存在，很多前端同学其实都对自动化测试的认知相当空白，它有哪些分类？有哪些推荐的实践？有哪些框架与方案？而这篇文章的目的就是进行一个基础的扫盲，至少完成阅读以后你会知道如何为项目编写测试用例，以及应该编写哪些场景的测试用例。</p><h2><b>单元测试与集成测试</b></h2><p data-pid=\"Bih4bcjT\">单元测试（Unit Testing）正如其名，其中的测试用例应当是针对代码中的各个单元的，如前端代码中，每一个工具方法都可以被作为一个单元，对应一个独立的测试用例。但这么说并不意味着你要写出非常细粒度的代码——这不是没事折磨自己吗？我通常使用“功能单元”的方式来确定粒度，比如生产薯条的流水线上，清洗-削皮-切片-包装就是四个完全独立的功能单元。</p><p data-pid=\"33KQf5LJ\">你可能会感到疑惑，这四个功能单元明明存在依赖关系，为何说是完全独立的？这是因为在单元测试时，非常重要的一个步骤就是对当前测试单元的外部依赖进行模拟，比如我在测试削皮功能时，会直接给到“已经清洗完毕的土豆”，然后检查“削皮后的土豆”，而不会真的去调用前后的功能单元。</p><blockquote data-pid=\"t5nA1JGj\"> 常见的模拟操作可以分为 Fake、Stub、Mock、Spy 这么几种，我们在下文会有更详细的介绍。<br/> </blockquote><p data-pid=\"uzn3dQtB\">一种常见的情况是工具方法中会基于外部依赖的表现执行不同分支的代码（if/else，try/catch，resolve/reject 等）。这种时候，我们需要做的就是通过修改外部依赖的表现，来检查工具方法内部各个代码分支的执行情况。比如，在 fetch 成功返回时应当调用 processData 方法，在 fetch 失败时应当调用 reportError 方法，此时你就可以篡改掉 fetch 的实现，然后检查 processData 、reportError 方法是否被调用（注意，这两个方法也需要被模拟（Stub / Spy） ，然后才能检查它们的调用情况）。</p><p data-pid=\"OSbXcCS8\">当然，完全模拟所有外部依赖是最理想的情况，在很多时候一个工具方法可能具有许多外部依赖，此时你可以省略掉其中能确定无副作用（如 logger 这样的纯函数），或者是与核心逻辑无关的部分。</p><p data-pid=\"ZKVLz58F\">我们知道，测试用例也可以反过来对代码产生检查作用，而在单元测试阶段这种作用基本是最明显的，比如你可以很容易发现某一处功能单元设计得过于耦合，或是某一外部依赖将导致代码进入错误分支等情况。</p><p data-pid=\"S2bKQWbv\">目前推荐的单元测试方案主要有这么几种，Jest、Mocha、Sinon、Jasime 以及 AVA，它们之间各有优劣，这里不做比较。但需要注意的是，一套完整的，能够满足实际需求的单元测试方案，通常意味着需要包括这么几个功能：</p><ul><li data-pid=\"JhHXy2tc\">断言，Jest 提供了注入到全局的 expect 风格断言（<code>expect(1+1).toBe(2)</code>），而 Sinon 提供的则是类似 NodeJs asserts 模块风格的断言（``sinon.assert.pass(1 + 1 === 2)`），而 Mocha 则不绑定断言库，你可以使用 asserts 模块或者 Chai 来进行断言。另外，断言又包括了几种不同的风格，我们同样在下文讲解。<br/> </li><li data-pid=\"k5Zz7D6S\">用例收集，编写测试用例时我们同样需要基于功能单元区分，常见的方式就是 <code>describe</code> 收集一个功能单元，内部又使用 <code>it</code>  / <code>test</code> 来进行功能单元各个逻辑分支的验证。如：</li></ul><div class=\"highlight\"><pre><code class=\"language-text\"> describe(&#39;Utils.Reporter&#39;, () =&gt; {\n  it(&#39;should report error when xxx&#39;, () =&gt; {})\n  it(&#39;should show warnings when xxx&#39;, () =&gt; {})\n})</code></pre></div><ul><li data-pid=\"XbxkSF5U\">模拟功能（Stub 、Fake Timers 等），包括对一个对象的 Spy，一个函数的 Stub，对一个模块的 Mock，都属于模拟的范畴。<br/> </li><li data-pid=\"yhbNaPa0\">测试覆盖率报告，这一功能常见的方式是通过 istanbul （1.0版本，2.0 更名为 nyc）或 c8 来进行实现，其原理包括代码插桩与使用 V8 引擎内置功能两种，这里不再赘述。另外一个常见的场景是输出其他语言格式的覆盖率报告（如 JUnit），社区也通过 Reporters 的机制为这些测试框架做了支持。<br/> </li></ul><p data-pid=\"6w9du3Fz\">如果你此前并没有对这些单元测试方案非常熟悉，那我推荐你了解一下 Vitest ，来自 antfu 的作品，特色是快（毕竟基于 Vite）以及对 TypeScript、ES Module 的良好支持，我目前在工作中的单元测试也已经全部迁移到 Vitest，同时 Vitest 还自带了 UI 界面，让你可以更享受编写测试并看着它们一个个通过的过程。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1f31bee417e34981be29267446e38ab0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2770\" data-rawheight=\"1676\" class=\"origin_image zh-lightbox-thumb\" width=\"2770\" data-original=\"https://pic1.zhimg.com/v2-1f31bee417e34981be29267446e38ab0_r.jpg\" data-original-token=\"v2-8b911a22ef8d4aaeeaf531ff1dc149bc\"/></figure><p data-pid=\"WBLVcYrT\">如果说单元测试是为了测试单个功能单元，那么集成测试（Integration Testing）很明显就是为了测试多个功能单元的协作。但需要注意的是，多个功能单元协作并不意味着对整个系统（流水线）进行完整的功能测试，通常我们还会将几个功能单元分散开进行组合，成为系统的某一部分，比如清洗-削皮作为预处理功能，需要确定一箩筐土豆能否正确地变成干净的去皮土豆，切片-包装作为核心功能，需要确定去皮土豆能变成冷冻薯条。</p><p data-pid=\"MFSi_QmJ\">而要进行集成测试的编写，其实我们仍然只需要使用单元测试方案即可，因为本质上集成测试就是同时对多个功能单元进行测试，我们验证的范畴也随之扩大了而已。</p><p data-pid=\"6E0xiXVb\">而关于集成测试的维度拆分则并没有准确的界限，你可以像上面那样将预处理功能作为一个系统部分，也可以将整个流水线作为一个系统部分（还有供应链部分、烹饪部分与服务部分），按照你的实际业务场景就行。</p><h3><b>Mock、Fake、Stub</b></h3><p data-pid=\"ny-IMFIZ\">很多时候测试用例的运行时是受限的，比如我们并不希望真的发起网络请求，或者是和数据库交互，以及 DOM API 的操作等。这个时候我们会使用一系列模拟手段，来特定地模拟一个可交互的对象，并通过修改它的行为来检查预期的处理逻辑是否执行。</p><p data-pid=\"kzHP6jRj\">这个模拟行为通常被直接称为 Mock，但实际上，由于模拟的对象类型以及注入的模拟逻辑，更准确的描述是将这些行为划分为三大类。首先是最常用的 Stub ，假设我们在为 UserService 编写单元测试，其内部注入的 PrismaService 负责数据库的读写，我们可以使用一个 PrismaServiceStub 替换掉实际的服务，并且在其内部提供对应 PrismaService.user.findUnique 这样的方法，然后在我们调用 UserService.queryUser 时，就可以检查 PrismaServiceStub 上对应的方法是否被预期的入参调用，而其出参是否被预期地处理后返回。Spy 也可以认为是 Stub 的一种，但它更强调“是否按照预期调用”这个过程，我们甚至可以仅仅监听一个对象而无需提供模拟实现（如 console 这样的 API）。</p><p data-pid=\"B2dpELRN\">而如果我们不希望替换掉 PrismaService，而是希望它真的去进行数据读写，但不是对真实的数据库，就可以提供一个 Fake 的数据库——比如一个对象，这样对数据库的读写就变成了对内存对象的读写，变得更加快捷和稳定，这就是 Fake。另外一个常见的 Fake 场景就是定时器，常见的单元测试框架都提供了 Fake Timers 的功能支持。</p><p data-pid=\"U7hPZZe4\">而 Mock 其实和 Stub 也非常类似，但 Mock 更像是其中“预期的入参”，而并不关注返回值，我个人理解通常项目中 fixtures 文件夹下的各种对象和 JSON 就是典型的 Mock 。</p><p data-pid=\"ooVWvwfJ\">当然，Mock、Stub、Spy 三者还是非常相似的，我们也并不是必须搞清楚其中的差异，因为它们的本质都是模拟罢了。</p><h3><b>断言：expect、assert、should</b></h3><p data-pid=\"HRhFU4VR\">我们常见的断言包括 expect 与 assert 形式，NodeJs 提供了原生的 asserts 模块让你来编写一些简单的断言，你可以在实际代码中也使用断言来确保逻辑正确运行，而 expect 形式则通常只见于测试用例中。如检查一个函数的调用和比较两个对象，两种风格分别是这样的：</p><div class=\"highlight\"><pre><code class=\"language-text\">expect(mockFn).toBeCalledWith(&#34;linbudu&#34;);\nassert.pass(mockFn.calls[0].arg === &#34;linbudu&#34;);\n\nexpect(obj1).toEqual(obj2);\nassert.equal(obj1, obj2);</code></pre></div><p data-pid=\"Z8NCU9Gy\">通常我个人更喜欢命令式风格明显的 expect 断言，而除了这两种风格以外，其实还有一种 should 形式的链式风格断言，它写起来是这样的：</p><div class=\"highlight\"><pre><code class=\"language-text\">mockFn.should.be.called();\nobj1.should.equal(obj2);</code></pre></div><p data-pid=\"m9ob3EN7\">值得一提的是在 Chai 这个断言库中对以上三种断言风格都进行了支持，如果你有兴趣，不妨都试一试。</p><h2><b>前端页面中的组件测试与 E2E 测试</b></h2><p data-pid=\"cDCKWyzZ\">单元测试和集成测试是前后端应用中通用的概念，而完成了对基础功能单元的测试以后，我们需要更进一步，关注领域中特定的功能，比如从前端视角来看一个组件的 UI 与功能，从后端视角来看一个接口面对千奇百怪入参的响应。</p><p data-pid=\"zEwqL4G7\">在当今的前端项目中，组件化应该是最明显的一个趋势，那么进行组件维度的测试也自然是相当有必要的。以 React 组件为例，我们可以模拟这个组件的入参，并观察其实际渲染的 UI 组件是否正确，以及使用快照的方式，来检查组件的实际渲染是否一致。</p><p data-pid=\"m_ZyNpHj\">目前使用的组件测试方案通常是和框架绑定的，如 React 下的 <code>@testing-library/react</code> 和 Enzyme，Vue 下的 <code>@vue/test-utils</code>，Svelte 下的 <code>@testing-library/svelte</code>，这是因为本质上我们是在孤立地渲染这个组件，并模拟框架行为来验证其表现。</p><p data-pid=\"PaZCpkNu\">在组件测试方案中，我更推荐 <code>@testing-library/react</code> （还包括 <code>@testing-library/react-hooks</code>），Enzyme 的 API 要更加复杂，同时其目前应该已经不再维护（或是维护力度堪忧）。使用其编写的测试用例是这样的：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">HiddenMessage</span><span class=\"p\">({</span><span class=\"nx\">children</span><span class=\"p\">})</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"p\">[</span><span class=\"nx\">showMessage</span><span class=\"p\">,</span> <span class=\"nx\">setShowMessage</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">div</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">label</span> <span class=\"nx\">htmlFor</span><span class=\"o\">=</span><span class=\"s2\">&#34;toggle&#34;</span><span class=\"o\">&gt;</span><span class=\"nx\">Show</span> <span class=\"nx\">Message</span><span class=\"o\">&lt;</span><span class=\"err\">/label&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">input</span>\n        <span class=\"nx\">id</span><span class=\"o\">=</span><span class=\"s2\">&#34;toggle&#34;</span>\n        <span class=\"nx\">type</span><span class=\"o\">=</span><span class=\"s2\">&#34;checkbox&#34;</span>\n        <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">e</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">setShowMessage</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">checked</span><span class=\"p\">)}</span>\n        <span class=\"nx\">checked</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">showMessage</span><span class=\"p\">}</span>\n      <span class=\"o\">/&gt;</span>\n      <span class=\"p\">{</span><span class=\"nx\">showMessage</span> <span class=\"o\">?</span> <span class=\"nx\">children</span> <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">}</span>\n    <span class=\"o\">&lt;</span><span class=\"err\">/div&gt;</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">HiddenMessage</span>\n\n<span class=\"kr\">import</span> <span class=\"o\">*</span> <span class=\"nx\">as</span> <span class=\"nx\">React</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span><span class=\"nx\">render</span><span class=\"p\">,</span> <span class=\"nx\">fireEvent</span><span class=\"p\">,</span> <span class=\"nx\">screen</span><span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@testing-library/react&#39;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">HiddenMessage</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;../hidden-message&#39;</span>\n\n<span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"s1\">&#39;shows the children when the checkbox is checked&#39;</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">const</span> <span class=\"nx\">testMessage</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Test Message&#39;</span>\n  <span class=\"c1\">// 将组件模拟渲染出来\n</span><span class=\"c1\"></span>  <span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">HiddenMessage</span><span class=\"o\">&gt;</span><span class=\"p\">{</span><span class=\"nx\">testMessage</span><span class=\"p\">}</span><span class=\"o\">&lt;</span><span class=\"err\">/HiddenMessage&gt;)</span>\n <span class=\"c1\">// 基于模糊查询来验证 DOM 元素的存在\n</span><span class=\"c1\"></span>  <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">queryByText</span><span class=\"p\">(</span><span class=\"nx\">testMessage</span><span class=\"p\">)).</span><span class=\"nx\">toBeNull</span><span class=\"p\">()</span>\n <span class=\"c1\">// 同样基于模糊查询来触发事件\n</span><span class=\"c1\"></span>  <span class=\"nx\">fireEvent</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByLabelText</span><span class=\"p\">(</span><span class=\"sr\">/show/i</span><span class=\"p\">))</span>\n <span class=\"c1\">// 验证结果是否符合预期\n</span><span class=\"c1\"></span>  <span class=\"nx\">expect</span><span class=\"p\">(</span><span class=\"nx\">screen</span><span class=\"p\">.</span><span class=\"nx\">getByText</span><span class=\"p\">(</span><span class=\"nx\">testMessage</span><span class=\"p\">)).</span><span class=\"nx\">toBeInTheDocument</span><span class=\"p\">()</span>\n<span class=\"p\">})</span>\n</code></pre></div><p data-pid=\"nbuuVN2n\">单元测试、集成测试、组件测试，看起来我们已经非常完美地使用自动化测试从不同场景与不同维度进行了功能的验证，但实际上，我们还少了一个非常重要的维度——用户视角。在程序最终交付验收时，我们可爱的测试同学会来把各个功能和链路都检查一遍，而即使你已经写了巨量的测试用例，还是有可能会被发现大量的问题，这就是因为视角不同。作为程序的开发者，你清楚地了解程序的控制流走向，也对每一个分支了然于胸，所以在编写测试用例时你其实更像是上帝视角。</p><p data-pid=\"PZOzmDBM\">要从用户的视角出发，实际上我们只需要屏蔽对程序内部的所有感知，而只是去使用这个程序即可。这样的测试被称为端到端测试（End-to-End Testing，E2E），它不再关注内部功能单元的细节，而是完全从外部还原一个真实的用户视角，如前端应用中，用户登录-搜索商品-加入购物车-编辑商品-结算商品的一系列交互，谁管你的登录背后隐藏了多少权限分级，商品货架分级设计得多么精细，只要这个流程无法顺利走通，那你的系统就是有问题的。</p><p data-pid=\"3cFDvp1H\">而既然 E2E 测试是在模拟用户行为，那么其实我们所需要做的就是使用用户的环境来运行系统罢了。如对于前端页面，其实就是浏览器（更准确地说是浏览器内核），而对于后端服务则是客户端。</p><p data-pid=\"XbaijxQk\">以 Cypress 的功能为例，来看看我们是如何模拟用户行为的：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9bea24a55c6af17170a1e1349f1af1f8_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" data-thumbnail=\"https://pic1.zhimg.com/v2-9bea24a55c6af17170a1e1349f1af1f8_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-9bea24a55c6af17170a1e1349f1af1f8_r.jpg\" data-original-token=\"v2-9bea24a55c6af17170a1e1349f1af1f8\"/></figure><p data-pid=\"R5o6ZLNS\">在前端领域中编写 E2E 测试，常见的 E2E 测试框架主要包括 Puppeteer、Cypress、Playwright、Selenium 这么几种。它们之间各有优劣，适用场景也有所不同，我们会在下面进行比较。</p><p data-pid=\"iHADMqiT\">与其他测试场景的重要不同之一，就是 E2E 测试是可以由测试同学来编写的（如支持 Python 和 Java 的 Selenium），在产品进行迭代的同时，测试同学会按照功能点变化对应地完善测试用例，同时确保以往所有功能的测试用例不受影响。</p><h3><b>Puppeteer、Cypress、Playwright 的取舍</b></h3><p data-pid=\"QX57AiUY\">前端 E2E 测试目前常用的包括 Puppeteer、Cypress、Playwright 这么几款，这就可能让你感到选择困难，到底应该选哪个？万一选了一个，写着写着发现不符合需求了，咋办？这一部分我们就来简单介绍一下它们。</p><p data-pid=\"AGGfDYNC\">先上结论：非常简单的场景使用 Puppeteer（需要搭配 Jest-Puppeteer），PC 应用使用 Cypress，移动端应用使用 Playwright。</p><p data-pid=\"JYw_pS23\">接着我们再来一个个解释。首先是 Puppeteer，认真地说，它就不应该用来做 E2E 测试，因为人家真的就只是一个无头浏览器，你要用它来写写爬虫之类的倒还好，强行霸王硬上弓要人家给你干 E2E，一方面是只支持 Chrome + Chromium 内核，另一方面人家不带断言库，你还得带一个 Jest-Puppeteer 一起。但如果是真的非常非常简单的场景，你还是可以用 Puppeteer ，加上 NodeJs 的基础断言库，通过自动化方式确定一些页面功能还是没问题的。</p><p data-pid=\"a8_z6tuT\">然后是 Cypress ，其场景从人家的 Slogan 其实也能感觉出来：<i>Fast, easy and reliable testing for anything that runs in a browser</i>，注意 in a browser，其实人家就是提供了无头浏览器，断言，GUI，以及 Web 下的各种 API ，然后你就可以完全模拟使用浏览器进行的一切行为了。同时 Cypress 也通过代码插桩的方式支持了覆盖率报告相关的能力。需要注意的是，Cypress 只支持浏览器维度的配置，如 chrome（也支持chromium）、edge、firefox。</p><p data-pid=\"TUpoEXzz\">因此，如果你更侧重于检查应用在移动端的表现，那其实应该使用 Playwright 。为什么？Playwright 支持同时运行多个 project，这些 project 可以被配置为使用浏览器内核（检验 PC、桌面端场景），也可以被配置为使用内置的 devices 预设，来检验其在移动端的表现，这些预设包括了视口大小、默认浏览器内核（chromium，webkit，safari 等）等等，参考官网的示例配置：</p><div class=\"highlight\"><pre><code class=\"language-text\">// playwright.config.ts\nimport { type PlaywrightTestConfig, devices } from &#39;@playwright/test&#39;;\n\nconst config: PlaywrightTestConfig = {\n  projects: [\n    {\n      name: &#39;Desktop Chromium&#39;,\n      use: {\n        browserName: &#39;chromium&#39;,\n        viewport: { width: 1280, height: 720 },\n      },\n    },\n    {\n      name: &#39;Desktop Safari&#39;,\n      use: {\n        browserName: &#39;webkit&#39;,\n        viewport: { width: 1280, height: 720 },\n      }\n    },\n    {\n      name: &#39;Desktop Firefox&#39;,\n      use: {\n        browserName: &#39;firefox&#39;,\n        viewport: { width: 1280, height: 720 },\n      }\n    },\n    {\n      name: &#39;Mobile Chrome&#39;,\n      use: devices[&#39;Pixel 5&#39;],\n    },\n    {\n      name: &#39;Mobile Safari&#39;,\n      use: devices[&#39;iPhone 12&#39;],\n    },\n  ],\n};\nexport default config;</code></pre></div><p data-pid=\"n-vPD60-\">在我所在的团队，目前也正在基于 Playwright 建立 E2E 测试用例，来更方便快捷地保障核心应用的页面功能。</p><p data-pid=\"fjI3afgH\">最后，如果你并不是在开发一个前端应用，而是在开发一个 UI 组件库，那你可以使用 StoryBook 提供的测试能力（基于 Jest 与 Playwright），这样一来你既能够基于 StoryBook 获得组件的可视化文档说明，也可以获得自动生成的 E2E 测试用例：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2fd696142211bf8ab6bae88a97a2b498_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"400\" data-thumbnail=\"https://pic1.zhimg.com/v2-2fd696142211bf8ab6bae88a97a2b498_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-2fd696142211bf8ab6bae88a97a2b498_r.jpg\" data-original-token=\"v2-2fd696142211bf8ab6bae88a97a2b498\"/></figure><h2><b>后端服务中的 E2E 测试与压力测试</b></h2><p data-pid=\"npPiBONX\">而对于后端服务中的测试，由于我暂时还没有比较深入地实践，这里就只简单介绍下 Node API 中的 E2E 测试、压力测试。</p><p data-pid=\"tOCFO8dx\">上面我们已经提到，对于后端服务来说其实用户就是各个客户端，而我们也只需要模拟客户端，向 API 发起请求，模拟登录态信息和各种参数，然后查看最终返回的结果是否符合预期即可。在这个过程中，API 由哪个 Controller 承接，调用了哪些 Service，走过了哪些 Middleware ，我们都不应该也无需关心。而假装自己是客户端的方式就简单多了，常见的方式是使用 supertest 。另外，通常后端服务的 E2E 测试也应该是尽量模拟完整的交互过程：上传商品-编辑商品-上架商品-下架商品-...，只不过这个过程并不像在前端那样直观。</p><p data-pid=\"Th3WERw3\">另外后端服务中的 E2E 测试如何 Mock 也有不同的情况，如果希望尽可能模拟用户，可以使用专用的测试环境数据库，但这样测试的执行就不完全稳定。如果希望从简，那么可以像单元测试与集成测试中那样模拟掉外部依赖。另外，部分 NodeJs 框架也直接提供了原生的测试支持，如 <code>@nestjs/testing</code>，<code>@midwayjs/mock</code> 等等。</p><p data-pid=\"VEyZQIe7\">另外一个后端服务特殊的测试场景则是压力测试，在某些时候也可以被等价于性能测试，从某些方面它其实也是在模拟用户，只不过不是模拟一个用户的交互行为，而是模拟较大量级的用户访问，以此来测试服务的性能。本质上压力测试并不是在测试 API 的逻辑，而是承载 API 的服务器性能与负载均衡相关逻辑。进行压力测试可以很简单地使用脚本开多线程并发请求，也可以使用 Apache Bench、Webbench、wrk（wrk2）测试工具，或者 npm 社区也有 autocannon 这样的实现。</p><p data-pid=\"oegg0qPX\">在压力测试下，我们主要关注这么几个指标：</p><ul><li data-pid=\"sx29vqtT\">每秒请求数 RPS，Request Per Second，更常见的称呼是每秒查询数 QPS，Query Per Second，它代表了到达服务器的请求数量。</li><li data-pid=\"ep9AODgl\">并发用户数 CL，Concurrency Level，不同于 RPS，并发数代表了当前仍未完结的等待处理的请求。举例来说，假设某个神奇 API 的请求处理速度非常快，每个请求的处理时间无限趋近于 0 ，那么即使其 RPS 可能达到一百万，并发数却也非常低（趋近于0）——因为它处理的实在是太快了，几乎不需要同时处理两个请求。</li><li data-pid=\"Yu9kX55n\">每秒事务数 TPS，Transactions Per Second，TPS 有点类似于 QPS，但它所关注的事务其实是比请求-响应过程更具象的过程，举例来说，访问 server/index.html ，实际上还访问了 server/index.css 与 server/index.js 文件，那么这个过程实际上只会记为一次事务，但会记为三次查询。</li><li data-pid=\"oEVgClc4\">响应时间 RT，Response Time，一个请求从进入到带走响应的耗时，这个耗时包括了等待时间-处理时间-IO读写时间-响应到达时间。</li></ul><p data-pid=\"bhLlTt38\">除了这些指标以外，我们还会关注服务器当前的性能指标，如内存与 CPU 占用率，驻留集（RSS，当前进程获得分配的物理内存，包括堆、栈与执行代码段等），你也可以使用 NodeJs 提供的 <code>--prof</code> <code>--prof-process</code> 等启动参数，或使用 heapdump 提供的内存快照打印功能来帮助分析 Node API 的性能。</p><h2><b>尾声</b></h2><p data-pid=\"xmXEO6dV\">除了以上介绍的这些自动化测试分类，其实还有着前端页面的性能测试（如基于 LightHouse、Performance API），主要关注各种“首次”的指标，如首屏绘制、可交互时间、最大内容绘制等等，基于 axe-core 的可访问性测试（Accessibility Testing），关注网页的可访问性，以及一些相对少见的场景，如基于 Needle 的 CSS 测试、基于 Coffee 的命令行应用测试，以及混沌工程理念中的混沌测试等，这些概念要么在社区里已经存在大量的高质量介绍文章，要么我并没有深入了解过，在这里就不赘述了。</p><p data-pid=\"nk2qf3Gw\">另外，想要进一步地保障页面的功能稳定性，监控平台（白屏，JS Error，404）这一类的存在也是相当有意义的，但这一部分功能已经存在太多方案，社区的 Sentry，以及各大厂内部自己建设的平台等等，这里就不再赘述。</p><p data-pid=\"oWcNNX2A\">这篇不长也不短的小作文里，我们基本上把前端开发者会接触到的自动化测试种类都了解了一遍，包括它们的使用场景，实践方式，以及可选的库/框架。在完成全文阅读后，如果你恰好在开发“值得投入精力编写测试”的应用，不妨思考下，上面是否恰好有符合你所需求的部分。</p><hr/>",
            "voteup_count": 14,
            "comment_count": 2
        },
        "created": "2022-09-12T14:10:33+08:00"
    },
    {
        "content": {
            "id": 551413903,
            "title": "使用Vue.js编写命令行界面,前端开发CLI的利器",
            "type": "article",
            "excerpt_title": "前言大家好,我是 webfansplz .继将 Vue 渲染到嵌入式液晶屏 后,今天要跟大家分享的是如何将Vue渲染到命令行工具 :).关于命令行工具,大家应该都比较熟悉了,比如vue-cli、Vite等.我们在编写前端应用面向用户时,通常会非常关注用户体验,作为开发者,我们在使用工具时,它给予我们的开发者体验(DX)我们也会十分关注. 现代前端工程化离不开CLI的开发与使用、那么是否能有较低成本的方案能让前端小伙伴快速开发CLI,大家可以像编写前端应用…",
            "url": "https://zhuanlan.zhihu.com/p/551413903",
            "image_url": "https://pica.zhimg.com/v2-2d2aad1f621255e2534f5dd04e362fb4_r.jpg?source=172ae18b",
            "created": 1660004457,
            "updated": 1660004519,
            "author": {
                "id": "62eefeee6e7e87230749f4c095984bc8",
                "url_token": "weber-23-9",
                "name": "webfansplz",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-0bf4785b3300ff59322630690c6dbea5_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-0bf4785b3300ff59322630690c6dbea5.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/62eefeee6e7e87230749f4c095984bc8",
                "user_type": "people",
                "headline": "Vue.js &amp; VueUse团队成员•开源爱好者",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1481243709
            },
            "comment_permission": "all",
            "content": "<h2><b>前言</b></h2><p data-pid=\"w4nxroVR\">大家好,我是<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">webfansplz</a></b>.继<b><a href=\"https://zhuanlan.zhihu.com/p/333179202\" class=\"internal\">将 Vue 渲染到嵌入式液晶屏</a></b>后,今天要跟大家分享的是如何将Vue渲染到命令行工具 :).关于命令行工具,大家应该都比较熟悉了,比如vue-cli、Vite等.我们在编写前端应用面向用户时,通常会非常关注用户体验,作为开发者,我们在使用工具时,它给予我们的开发者体验(DX)我们也会十分关注. 现代前端工程化离不开CLI的开发与使用、那么是否能有较低成本的方案能让前端小伙伴快速开发CLI,大家可以像编写前端应用一样搞定它.因此,<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Temir</a></b>应运而生.</p><h2><b>Temir</b></h2><h3><b>介绍</b></h3><p data-pid=\"U0dic3Zi\"><b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Temir</a></b>,一个用Vue组件来编写命令行界面应用的工具.开发者只需要使用Vue就可以编写命令行应用,不需要任何额外的学习成本.</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-30e7f20676099ee049ca072d3fc4afa9_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"466\" data-thumbnail=\"https://pic2.zhimg.com/v2-30e7f20676099ee049ca072d3fc4afa9_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic2.zhimg.com/v2-30e7f20676099ee049ca072d3fc4afa9_r.jpg\" data-original-token=\"v2-30e7f20676099ee049ca072d3fc4afa9\"/></figure><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;ts&#34;</span> <span class=\"na\">setup</span><span class=\"p\">&gt;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ref</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/runtime-core&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TBox</span><span class=\"p\">,</span> <span class=\"nx\">TText</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/core&#39;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">counter</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">setInterval</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">counter</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"o\">++</span>\n<span class=\"p\">},</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;green&#34;</span><span class=\"p\">&gt;</span>\n      {{ counter }} tests passed\n    <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</code></pre></div><h3><b>组件</b></h3><p data-pid=\"awdaLyaV\"><b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Temir</a></b>提供了一些基础组件帮助开发者编写与扩展命令行工具:</p><h3><b>文本组件 (Text)</b></h3><p data-pid=\"z2QLuPT6\">文本组件可以显示文本,将其样式更改为粗体、下划线、斜体或删除线.</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4ccf09512ea0175f2dd03363d80f3827_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"178\" data-rawheight=\"172\" class=\"content_image\" width=\"178\" data-original-token=\"v2-4ccf09512ea0175f2dd03363d80f3827\"/></figure><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;green&#34;</span><span class=\"p\">&gt;</span>\n  I am green\n<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;black&#34;</span> <span class=\"na\">background-color</span><span class=\"o\">=</span><span class=\"s\">&#34;white&#34;</span><span class=\"p\">&gt;</span>\n  I am black on white\n<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;white&#34;</span><span class=\"p\">&gt;</span>\n  I am white\n<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">:bold</span><span class=\"o\">=</span><span class=\"s\">&#34;true&#34;</span><span class=\"p\">&gt;</span>\n  I am bold\n<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">:italic</span><span class=\"o\">=</span><span class=\"s\">&#34;true&#34;</span><span class=\"p\">&gt;</span>\n  I am italic\n<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">:underline</span><span class=\"o\">=</span><span class=\"s\">&#34;true&#34;</span><span class=\"p\">&gt;</span>\n  I am underline\n<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">:strikethrough</span><span class=\"o\">=</span><span class=\"s\">&#34;true&#34;</span><span class=\"p\">&gt;</span>\n  I am strikethrough\n<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">:inverse</span><span class=\"o\">=</span><span class=\"s\">&#34;true&#34;</span><span class=\"p\">&gt;</span>\n  I am inversed\n<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n</code></pre></div><h3><b>盒子组件 (Box)</b></h3><p data-pid=\"OxaspBhi\"><code>&lt;Box&gt;</code>是构建布局必不可少的Temir组件.就像在浏览器中<code>&lt;div style=&#39;display: flex&#39;&gt;.</code>它提供了一些构建布局的常用属性,比如尺寸、内外边距、对齐方式等.</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span> <span class=\"na\">justify-content</span><span class=\"o\">=</span><span class=\"s\">&#34;flex-start&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>X<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n  // [X      ]\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span> <span class=\"na\">justify-content</span><span class=\"o\">=</span><span class=\"s\">&#34;center&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>X<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n  // [   X   ]\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span> <span class=\"na\">justify-content</span><span class=\"o\">=</span><span class=\"s\">&#34;flex-end&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>X<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n  // [      X]\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span> <span class=\"na\">justify-content</span><span class=\"o\">=</span><span class=\"s\">&#34;space-between&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>X<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>Y<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n  // [X      Y]\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span> <span class=\"na\">justify-content</span><span class=\"o\">=</span><span class=\"s\">&#34;space-around&#34;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>X<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>Y<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n  // [  X   Y  ]\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</code></pre></div><h3><b>换行组件 (Newline)</b></h3><p data-pid=\"NitrLtUp\">添加一个或多个换行符(\\n)。 必须在<code>&lt;Text&gt;</code>组件中使用。</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TBox</span><span class=\"p\">,</span> <span class=\"nx\">TNewline</span><span class=\"p\">,</span> <span class=\"nx\">TText</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/core&#39;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;green&#34;</span><span class=\"p\">&gt;</span>\n        Hello\n      <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">TNewline</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;red&#34;</span><span class=\"p\">&gt;</span>\n        World\n      <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</code></pre></div><h3><b>填充组件 (Spacer)</b></h3><p data-pid=\"ry07q0UI\">沿其包含布局的主轴展开的灵活空间。 作为填充元素之间所有可用空间的快捷方式，它非常有用。</p><p data-pid=\"pK1ZOk1c\">例如，在具有默认伸缩方向(<code>row</code>)的<code>&lt;Box&gt;</code>中使用<code>&lt;Spacer&gt;</code>将把&#34;Left&#34;定位到左边，并将&#34;Right&#34;推到右边。</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;ts&#34;</span> <span class=\"na\">setup</span><span class=\"p\">&gt;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TBox</span><span class=\"p\">,</span> <span class=\"nx\">TSpacer</span><span class=\"p\">,</span> <span class=\"nx\">TText</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/core&#39;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>Left<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TSpacer</span> <span class=\"p\">/&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>Right<span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n\n</code></pre></div><h3><b>超链接组件 (Link)</b></h3><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-25afe4d15e238702f63733c1604096ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"254\" data-rawheight=\"127\" class=\"content_image\" width=\"254\" data-original-token=\"v2-02c6c7fe96616355c2ca512d2618b1f6\"/></figure><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;ts&#34;</span> <span class=\"na\">setup</span><span class=\"p\">&gt;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TBox</span><span class=\"p\">,</span> <span class=\"nx\">TText</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/core&#39;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">TLink</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/link&#39;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span>\n    <span class=\"na\">:margin</span><span class=\"o\">=</span><span class=\"s\">&#34;5&#34;</span>\n    <span class=\"na\">width</span><span class=\"o\">=</span><span class=\"s\">&#34;20&#34;</span>\n    <span class=\"na\">border-style</span><span class=\"o\">=</span><span class=\"s\">&#34;round&#34;</span>\n    <span class=\"na\">justify-content</span><span class=\"o\">=</span><span class=\"s\">&#34;center&#34;</span>\n  <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TLink</span> <span class=\"na\">url</span><span class=\"o\">=</span><span class=\"s\">&#34;https://github.com&#34;</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;yellow&#34;</span><span class=\"p\">&gt;</span>\n        Hi\n      <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;cyan&#34;</span><span class=\"p\">&gt;</span>\n        Github\n      <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">TLink</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</code></pre></div><h3><b>加载中组件 (Spinner)</b></h3><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-50e3e973518f77116617e52248a349be_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"238\" data-rawheight=\"126\" data-thumbnail=\"https://pic3.zhimg.com/v2-50e3e973518f77116617e52248a349be_b.jpg\" class=\"content_image\" width=\"238\" data-original-token=\"v2-50e3e973518f77116617e52248a349be\"/></figure><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;ts&#34;</span> <span class=\"na\">setup</span><span class=\"p\">&gt;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TBox</span><span class=\"p\">,</span> <span class=\"nx\">TText</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/core&#39;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">TSpinner</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/spinner&#39;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span>\n    <span class=\"na\">:margin</span><span class=\"o\">=</span><span class=\"s\">&#34;5&#34;</span>\n    <span class=\"na\">width</span><span class=\"o\">=</span><span class=\"s\">&#34;20&#34;</span>\n    <span class=\"na\">border-style</span><span class=\"o\">=</span><span class=\"s\">&#34;round&#34;</span>\n    <span class=\"na\">justify-content</span><span class=\"o\">=</span><span class=\"s\">&#34;center&#34;</span>\n  <span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;yellow&#34;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">TSpinner</span> <span class=\"p\">/&gt;</span>\n      <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n      Loading\n    <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</code></pre></div><h3><b>标签页组件 (Tab)</b></h3><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b97d41b7f89436f525f225f5c869b2f2_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"466\" data-thumbnail=\"https://pic3.zhimg.com/v2-b97d41b7f89436f525f225f5c869b2f2_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic3.zhimg.com/v2-b97d41b7f89436f525f225f5c869b2f2_r.jpg\" data-original-token=\"v2-b97d41b7f89436f525f225f5c869b2f2\"/></figure><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;ts&#34;</span> <span class=\"na\">setup</span><span class=\"p\">&gt;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">computed</span><span class=\"p\">,</span> <span class=\"nx\">ref</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/runtime-core&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TBox</span><span class=\"p\">,</span> <span class=\"nx\">TText</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/core&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TTab</span><span class=\"p\">,</span> <span class=\"nx\">TTabs</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/tab&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">tabs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;Vue&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;React&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Angular&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Solid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Svelte&#39;</span><span class=\"p\">]</span>\n<span class=\"kr\">const</span> <span class=\"nx\">activeIndex</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kr\">const</span> <span class=\"nx\">selectedText</span> <span class=\"o\">=</span> <span class=\"nx\">computed</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">tabs</span><span class=\"p\">[</span><span class=\"nx\">activeIndex</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">])</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n      Selected Text :\n      <span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;red&#34;</span><span class=\"p\">&gt;</span>\n        {{ selectedText }}\n      <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TTabs</span> <span class=\"na\">:on-change</span><span class=\"o\">=</span><span class=\"s\">&#34;(index) =&gt; activeIndex = +index&#34;</span><span class=\"p\">&gt;</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">TTab</span> <span class=\"na\">v-for</span><span class=\"o\">=</span><span class=\"s\">&#34;item in tabs&#34;</span> <span class=\"na\">:key</span><span class=\"o\">=</span><span class=\"s\">&#34;item&#34;</span><span class=\"p\">&gt;</span>\n        {{ item }}\n      <span class=\"p\">&lt;/</span><span class=\"nt\">TTab</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">TTabs</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</code></pre></div><h3><b>选择组件</b></h3><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-873c9c29618025ff6fcef66905d6190b_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"604\" data-rawheight=\"508\" data-thumbnail=\"https://pic4.zhimg.com/v2-873c9c29618025ff6fcef66905d6190b_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"604\" data-original=\"https://pic4.zhimg.com/v2-873c9c29618025ff6fcef66905d6190b_r.jpg\" data-original-token=\"v2-873c9c29618025ff6fcef66905d6190b\"/></figure><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;ts&#34;</span> <span class=\"na\">setup</span><span class=\"p\">&gt;</span>\n<span class=\"kr\">import</span> <span class=\"nx\">TSelectInput</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/select-input&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"p\">{</span>\n    <span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Vue&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Vue&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Vite&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Vite&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n  <span class=\"p\">{</span>\n    <span class=\"nx\">label</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Temir&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">value</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Temir&#39;</span><span class=\"p\">,</span>\n  <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n<span class=\"kd\">function</span> <span class=\"nx\">onSelect</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;selected&#39;</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">TSelectInput</span> <span class=\"na\">:items</span><span class=\"o\">=</span><span class=\"s\">&#34;items&#34;</span> <span class=\"na\">:on-select</span><span class=\"o\">=</span><span class=\"s\">&#34;onSelect&#34;</span> <span class=\"p\">/&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n\n</code></pre></div><h3><b>安装</b></h3><div class=\"highlight\"><pre><code class=\"language-bash\">npm install @temir/core</code></pre></div><h3><b>使用</b></h3><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&#34;ts&#34;</span> <span class=\"na\">setup</span><span class=\"p\">&gt;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ref</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/runtime-core&#39;</span>\n<span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">TBox</span><span class=\"p\">,</span> <span class=\"nx\">TText</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@temir/core&#39;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">counter</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">setInterval</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">counter</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"o\">++</span>\n<span class=\"p\">},</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">TText</span> <span class=\"na\">color</span><span class=\"o\">=</span><span class=\"s\">&#34;green&#34;</span><span class=\"p\">&gt;</span>\n      {{ counter }} tests passed\n    <span class=\"p\">&lt;/</span><span class=\"nt\">TText</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">TBox</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">template</span><span class=\"p\">&gt;</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-30e7f20676099ee049ca072d3fc4afa9_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"466\" data-thumbnail=\"https://pic2.zhimg.com/v2-30e7f20676099ee049ca072d3fc4afa9_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic2.zhimg.com/v2-30e7f20676099ee049ca072d3fc4afa9_r.jpg\" data-original-token=\"v2-30e7f20676099ee049ca072d3fc4afa9\"/></figure><h3><b>HMR支持</b></h3><p data-pid=\"WG_9SE6_\">前面我们提到了开发者体验(DX),在现在的前端工程中,对开发者很有帮助且提效的就是HMR,这么香的东西<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Temir</a></b>没有理由不拥有它,话不多说,直接展示:</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-aae3323f2741b42c38a115537e4558f6_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1244\" data-rawheight=\"654\" data-thumbnail=\"https://pic3.zhimg.com/v2-aae3323f2741b42c38a115537e4558f6_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1244\" data-original=\"https://pic3.zhimg.com/v2-aae3323f2741b42c38a115537e4558f6_r.jpg\" data-original-token=\"v2-aae3323f2741b42c38a115537e4558f6\"/></figure><h3><b>开箱即用</b></h3><p data-pid=\"LlnW3hCT\">使用<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Temir</a></b>定制化CLI非常简单,我们提供了<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir/tree/main/packages/cli\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@temir/cli</a></b>帮助你快速构建一个基于<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Temir</a></b>的CLI.</p><div class=\"highlight\"><pre><code class=\"language-bash\">mkdir my-temir-cli\n\n<span class=\"nb\">cd</span> my-temir-cli\n\ntouch main.ts\n\nnpm install @temir/cl\n\n<span class=\"c1\"># Dev (开发)</span>\n\ntemir main.ts\n\n<span class=\"c1\"># Build (打包)</span>\n\ntemir build main.ts\n</code></pre></div><p data-pid=\"3GGR-4Om\">你可以通过下载这个 <b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir/tree/main/examples/hi-temir\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">例子</a></b> 来快速开始，你也可以打开 <b><a href=\"https://link.zhihu.com/?target=https%3A//replit.com/%40webfansplz/hi-temir%3Fv%3D1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">repl.it sandbox</a></b>来在线体验和尝试它。</p><h2><b>演示</b></h2><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir/tree/main/examples/hi-temir\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Hi Temir</a></b></h3><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0db5affb1a78f217d3f7adbded386810_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"495\" class=\"origin_image zh-lightbox-thumb\" width=\"584\" data-original=\"https://pic1.zhimg.com/v2-0db5affb1a78f217d3f7adbded386810_r.jpg\" data-original-token=\"v2-d44cd9a8b94f8377e75878225bd5be92\"/></figure><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir/tree/main/examples/borders\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Borders</a></b></h3><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir/tree/main/examples/table\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Table</a></b></h3><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-58cced6295817de5d593b368b6c56969_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"450\" class=\"origin_image zh-lightbox-thumb\" width=\"594\" data-original=\"https://pic2.zhimg.com/v2-58cced6295817de5d593b368b6c56969_r.jpg\" data-original-token=\"v2-a066f562c600dd4d1340547f0ee5a451\"/></figure><h3><b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir/tree/main/examples/vitest\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Vitest</a></b></h3><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-827267f6a0ba6e13950f6a0c1216673a_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"604\" data-rawheight=\"508\" data-thumbnail=\"https://pic3.zhimg.com/v2-827267f6a0ba6e13950f6a0c1216673a_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"604\" data-original=\"https://pic3.zhimg.com/v2-827267f6a0ba6e13950f6a0c1216673a_r.jpg\" data-original-token=\"v2-827267f6a0ba6e13950f6a0c1216673a\"/></figure><h2><b>实现</b></h2><ul><li data-pid=\"_5V_BGTX\">createRenderer</li></ul><p data-pid=\"7mDYCibY\">Temir的实现主要得益于Vue3出色的跨平台能力,我们可以通过<b><a href=\"https://link.zhihu.com/?target=https%3A//v3.cn.vuejs.org/api/global-api.html%23createrenderer\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">createRenderer</a></b> API创建一个自定义渲染器,通过创建宿主环境中对应的Node和Element,并对元素进行增删改查操作.</p><ul><li data-pid=\"JqL2xzpF\">Yoga</li></ul><p data-pid=\"L71D9QaG\">Vue提供了跑在命令行界面的接口,那我们就还缺少一个布局引擎就能把Vue 跑在命令行工具了.Temir使用了Yoga,一款Flexbox布局引擎.使用你在构建浏览器应用时使用过的类似CSS的属性，为你的CLI构建出色的用户界面。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-68d0ee9b6d25f55887e025ecddc486d2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1580\" data-rawheight=\"491\" class=\"origin_image zh-lightbox-thumb\" width=\"1580\" data-original=\"https://pic3.zhimg.com/v2-68d0ee9b6d25f55887e025ecddc486d2_r.jpg\" data-original-token=\"v2-ef2ff1285913cb7e5b12c895de288c42\"/></figure><h2><b>致谢</b></h2><ul><li data-pid=\"DlH3VCOq\">这个项目的灵感来源于<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/vadimdemedes/ink\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ink</a></b><br/> </li><li data-pid=\"HxUkETvk\"><b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/antfu/vite-node\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vite-node</a></b>为实现HMR提供了强力的支持<br/> </li></ul><h2><b>结语</b></h2><p data-pid=\"WDAcJOI7\">文章到这里就结束了,如果我的文章和项目对你有所启发和帮助,请给一个<b><a href=\"https://link.zhihu.com/?target=https%3A//github.com/webfansplz/temir\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">star</a></b>支持作者 ✌</p>",
            "voteup_count": 38,
            "comment_count": 7
        },
        "created": "2022-08-09T08:20:57+08:00"
    },
    {
        "content": {
            "id": 562612374,
            "title": "我所了解的 FIRE 生活",
            "type": "article",
            "excerpt_title": "FIRE: Financial Independence, Retire Early. 经济独立，早日退休。但在当代中国，它更多被用来形容一种拒绝为工作拼命，拒绝内卷，不再踩着同辈奋力向上爬，拒绝被消费主义捆绑的生活方式。 我从 2019 年离开谷歌北京，回到家乡晋中当大学老师，渐渐把自己的生活过成了 FIRE 的样子。在平日，我每周固定上一点课，算是给自己这么多年所受的教育一个交代。如果需要更多的钱才能达成目标，我就带一点信息学竞赛的一对一课程，目…",
            "url": "https://zhuanlan.zhihu.com/p/562612374",
            "image_url": "",
            "created": 1662628028,
            "updated": 1662628028,
            "author": {
                "id": "f9267a3503a51a03795f111e295654d2",
                "url_token": "kunweiz92",
                "name": "张昆玮",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/6aabdd658_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/6aabdd658.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/f9267a3503a51a03795f111e295654d2",
                "user_type": "people",
                "headline": "",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"YBlcjF8J\">FIRE: Financial Independence, Retire Early. </p><p data-pid=\"MChR1eZ1\">经济独立，早日退休。但在当代中国，它更多被用来形容一种拒绝为工作拼命，拒绝内卷，不再踩着同辈奋力向上爬，拒绝被消费主义捆绑的生活方式。</p><p data-pid=\"wC401Quz\">我从 2019 年离开谷歌北京，回到家乡晋中当大学老师，渐渐把自己的生活过成了 FIRE 的样子。在平日，我每周固定上一点课，算是给自己这么多年所受的教育一个交代。如果需要更多的钱才能达成目标，我就带一点信息学竞赛的一对一课程，目前带两个晚上的收入大约与平日一个月的工资相当。我没有固定的客源，也没有缜密的赚钱计划，因此要像我的同学们那样，努力过上真正财务自由的日子，对我来说是不可能的。我一个人的生活，允许我进一步地去追求幸福感，而不是去追求财富。我渐渐开始健身，开始看朋友推荐的小众和人文的书籍。我一天有12个小时的空闲时间，我可以一个人看电影，一个人听音乐，一个人编一本关于信息学的书，也可以在任何时间陪任何朋友一聊一晚上或者两杯茶过一下午。也可以有一场说走就走的旅行，虽然只是乘坐 3 元钱的公交车，去省城看一看植物，爬一爬山。</p><p data-pid=\"VGoouLzz\">与父母的关系也大幅度和解。家里不再要求我做上进的人，也不催相亲，催婚。很多徒劳的努力之后，现在我才意识到，婚恋不是人生的必修课。我所相亲的大部分女生，都和我说过她们所渴望的未来，不一定是早日走入婚恋的困局。在21世纪，我们有更加多元化的人际关系，而这些解放所带来的自由，越是自身条件优越的女生，越有机会体验得到。对我而言，与其纠结于门当户对，或者纠结于眼缘，纠结于家庭条件，三观匹配，沉湎于不受欢迎和被拒绝之中，不如拥抱变革，相信你若盛开，清风自来的坦然。</p><p data-pid=\"6KK5l0Bd\">说到 FIRE 最大的阻力，可能就是人世间的风险。没有积蓄，可能一个浪头就会打倒生活的风帆。我也曾为此而痛苦，可是人生几十年的时光，即使谨小慎微，也不可能毫无风险平庸地度过。我也曾经过心里很困难的时光，我觉得有一点是毫无疑问的，其实物质上的风险只是一方面，精神上的惧怕和痛苦才是最大的问题。物质保险并不能真正保障幸福的生活，而对待生活的不执着，却可以。我想起了李白，五花马千金裘换美酒，千金散尽还复来。如果李白想的是安度晚年，明哲保身，大概不能这样喝酒。但这些都不重要，我们还是喜欢李白。</p><p data-pid=\"j_5qmktq\">最后引用一段《漠河舞厅》，给某个多年未见，已经很陌生的朋友。</p><p data-pid=\"ReDW3c9_\">如果有时间，你会来看一看我吧</p><p data-pid=\"RTtRP77u\">看大雪如何衰老的，我的眼睛如何融化</p>",
            "voteup_count": 548,
            "comment_count": 39
        },
        "created": "2022-09-08T17:07:08+08:00"
    },
    {
        "content": {
            "id": 2656216841,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/521754857/answer/2656216841",
            "created_time": 1662079721,
            "updated_time": 1662080278,
            "question": {
                "type": "question",
                "id": 521754857,
                "title": "疫情下的大学生失去了什么？",
                "question_type": "normal",
                "created": 1647184254,
                "updated_time": 1647184254,
                "url": "https://www.zhihu.com/question/521754857",
                "is_deleted": false
            },
            "author": {
                "id": "00a69a0323d435435c7bbd0f1bd535e5",
                "url_token": "canglimo",
                "name": "墨苍离",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-10aa5ef81e99982b71958119f1543b65_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-10aa5ef81e99982b71958119f1543b65.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/00a69a0323d435435c7bbd0f1bd535e5",
                "user_type": "people",
                "headline": "文明其精神，野蛮其意志。世故其言行，耿直其理想。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic4.zhimg.com/v2-59a550a6ad00f886cde123057787d47f_r.png",
                        "night_mode_url": "https://pic2.zhimg.com/v2-93b1fb5a63a8755d887f4a312ac34d1c.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-aa8a1823abfc46f14136f01d55224925.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-aa8a1823abfc46f14136f01d55224925.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1468,
            "comment_count": 142,
            "thanks_count": 213,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "need_payment",
            "content": "<p data-pid=\"7z7KHGA3\">你们以为自己失去的：</p><p data-pid=\"7AeQvyR1\">自由自在的学校生活；</p><p data-pid=\"9cUs0Axx\">更多更好的就业机会；</p><p data-pid=\"hgp7oadn\">丰富多彩的实践活动；</p><p data-pid=\"fJ-G5p1B\">值得期盼的假期旅游；</p><p data-pid=\"dZWIMo2O\">。。。。。。</p><p data-pid=\"AjwMBP-e\">其实你们可能会失去的：</p><p data-pid=\"jatK6veH\">与人们成熟的打交道的能力。</p><p data-pid=\"zOFxm9zb\">通过实践来演习进入社会分工的机会；</p><p data-pid=\"C75_lBNG\">专注的学习的能力；</p><p data-pid=\"5XBWKLgr\">团队配合的精神；</p><p data-pid=\"AtW3oelE\">包容性的看待社会现象的能力；</p><p data-pid=\"w13NG3Wa\">通过思考突破信息茧房的能力；</p><p data-pid=\"IlYANlDR\">尊重别人也尊重自己的能力；</p><p data-pid=\"PvK94VFE\">用正常语言而不是梗来说话的能力；</p><p data-pid=\"VLoFCW6t\">。。。。。。</p><p data-pid=\"CDE4b9NV\">在统计学上（而不是个案上），这届应届生，是我这么多年来，看到的最不会交流、最没有团队意识、最难自我检讨、最喜欢人云亦云的一届。</p><p data-pid=\"1VkRdBjZ\">这其实是疫情的副作用。</p><p data-pid=\"aiv48jfv\">同学们抓紧补补（这些）课吧。</p>",
            "excerpt": "你们以为自己失去的： 自由自在的学校生活； 更多更好的就业机会； 丰富多彩的实践活动； 值得期盼的假期旅游； 。。。 其实你们可能会失去的： 与人们成熟的打交道的能力。 通过实践来演习进入社会分工的机会； 专注的学习的能力； 团队配合的精神； 包容性的看待社会现象的能力； 通过思考突破信息茧房的能力； 尊重别人也尊重自己的能力； 用正常语言而不是梗来说话的能力； 。。。 在统计学上（而不是个案上），…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxiJzsryCSCTz6YlkgIlCgk1MTMwMzQyNjgSCjI2NTYyMTY4NDEYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-09-02T08:48:41+08:00"
    },
    {
        "content": {
            "id": 558338467,
            "title": "用TypeScript类型体操实现大整数计算",
            "type": "article",
            "excerpt_title": "两年前，我写了一篇在 TypeScript 中 实现 8 位数的算术运算 ，时过境迁，如今的 TS 增加了许多新特性，尤其是模板字符串类型使得 TS 的类型可以做更多有趣的事情，如今，我们可以把 8 位数的限制去掉了。所以这一次，我们来尝试实现大整数计算。计算的思路不变，仍然使用二进制计算，因为实现简单。那么第一个问题就是，如何在十进制和二进制数字之间进行转换。上一次，我们使用了硬编码一个前缀树的方法来进行转换，这也限制了…",
            "url": "https://zhuanlan.zhihu.com/p/558338467",
            "image_url": "",
            "created": 1661549807,
            "updated": 1661589020,
            "author": {
                "id": "a9cda735b6868ee54dccc666c72b52a2",
                "url_token": "fightingcat",
                "name": "Square",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-fda32568956e6965192a9ac63e33842c_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-fda32568956e6965192a9ac63e33842c.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/a9cda735b6868ee54dccc666c72b52a2",
                "user_type": "people",
                "headline": "▷ı|ΙıΙı||Ιı 5″",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1442594809
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"ufS6cjew\">两年前，我写了一篇在 TypeScript 中<a href=\"https://zhuanlan.zhihu.com/p/85655537\" class=\"internal\">实现 8 位数的算术运算</a>，时过境迁，如今的 TS 增加了许多新特性，尤其是模板字符串类型使得 TS 的类型可以做更多有趣的事情，如今，我们可以把 8 位数的限制去掉了。所以这一次，我们来尝试实现大整数计算。</p><p data-pid=\"j1ZCZrq5\">计算的思路不变，仍然使用二进制计算，因为实现简单。那么第一个问题就是，如何在十进制和二进制数字之间进行转换。上一次，我们使用了硬编码一个前缀树的方法来进行转换，这也限制了我们能够支持的二进制数字位数，因为位数越多字典树越大。现在我们有了模板字符串类型，我们可以用数字字符串来表示数字（在将要到来的 TS 3.8 里还可以将其转换回数字类型）。</p><p data-pid=\"ChOxbAyH\">先来复习一个小知识。众所周知，曾经为了显示数字，使用的是叫做“数码管”，或称“辉光管”的技术，它需要在玻璃管中前后叠加 10 个数字的金属丝，这不仅不降本增效，还不容易减小体积，所以后来七段式显示器被发明了出来，它用七段短线组合成不同的数字，然后广泛地取代了辉光管。</p><figure data-size=\"small\"><img src=\"https://pic1.zhimg.com/v2-40a8327f731c9e3047bf93d83984f284_b.jpg\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"1455\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-40a8327f731c9e3047bf93d83984f284_r.jpg\" data-original-token=\"v2-40a8327f731c9e3047bf93d83984f284\"/><figcaption>如今看来辉光管有一种独特的美感（引用自维基百科）</figcaption></figure><figure data-size=\"small\"><img src=\"https://pic2.zhimg.com/v2-2bae2b19890581e251010da6c7d19935_b.jpg\" data-size=\"small\" data-rawwidth=\"1011\" data-rawheight=\"1000\" class=\"origin_image zh-lightbox-thumb\" width=\"1011\" data-original=\"https://pic2.zhimg.com/v2-2bae2b19890581e251010da6c7d19935_r.jpg\" data-original-token=\"v2-2bae2b19890581e251010da6c7d19935\"/><figcaption>七段式显示器我们都很熟悉了（引用自维基百科）</figcaption></figure><p data-pid=\"Y2Fptf9Z\">七段式显示器在数字电路中通常会有一个译码器来驱动，那么就需要一种编码来对应十进制的数字，其实也很简单，就是把十进制数的每一位用对应的 4 位二进制数表示，这就是 BCD 码。</p><div class=\"highlight\"><pre><code class=\"language-text\">十进制数字对应的 BCD 码：\n0   0000\n1   0001\n2   0010\n3   0011\n4   0100\n5   0101\n6   0110\n7   0111\n8   1000\n9   1001</code></pre></div><p data-pid=\"tt97vjFb\">所以十进制数字和 BCD 码是很容易互相转换的，只要逐数字查表转换就可以了（为了方便区分，接下来我们把 123 这样的数字称作“数字”，而其中的 1、2、3 称作“数位数字”，二进制数字也是如此）。</p><p data-pid=\"dt07dKRl\">不过 BCD 码是每一个数位数字的二进制编码，而不是整个数字的二进制编码，我们不能直接对它应用二进制数的计算，那么有没有办法在 BCD 码和二进制数之间进行转换呢？</p><p data-pid=\"bU_5KciY\">恰好有一种叫做 Double Dabble，又称“满 5 加 3”的算法，可以将二进制数转为 BCD 码，实现起来也非常简单：不断将二进制最高位移入BCD 码的最低位，判断每个十进制数位的 BCD 码是否大于等于5，如果是就加3。而且它是可逆的，只要把规则变为“满 8 减 3”，就可以实现 BCD 码转二进制数。</p><div class=\"highlight\"><pre><code class=\"language-text\">示例，二进制数字 11110011(243) 转 BCD 码过程：\nBCD 码           二进制数\n0000 0000 0000   11110011   开始\n0000 0000 0001   11100110   移位\n0000 0000 0011   11001100   移位\n0000 0000 0111   10011000   移位\n0000 0000 1010   10011000   个位为7（0111），加3（得1010）\n0000 0001 0101   00110000   移位\n0000 0001 1000   00110000   个位为5（0101），加3（得1000）\n0000 0011 0000   01100000   移位\n0000 0110 0000   11000000   移位\n0000 1001 0000   11000000   十位为6（0110），加3（得1001）\n0001 0010 0001   10000000   移位\n0010 0100 0011   00000000   移位（结束）\n   2    4    3</code></pre></div><p data-pid=\"ql4NB9b6\">它的原理其实也很简单，想象我们在计算器上输入一个十进制数字，首先输入的是最高数位的数字，当输入下一数位数字时，实际上是当前数字左移（乘以 10）再加上新输入的数字，对于二进制数字也是一样，从高位开始不断输入下一个数字时，当前的二进制数字左移（乘以 2）再加上新输入的数字。</p><p data-pid=\"WwOO_Dz9\">Double Dabble 算法就是将二进制数字从最高位开始依次移入 BCD 码的低位，每次移入都会使得已经编码的 BCD 码乘 2。4 位二进制编码能表达的数字范围是 0 到 15，只是 BCD 码只用了前 10 个编码来表示 10 进制数字，如果一个十进制数位的 BCD 码大于等于 5，那么乘 2 后就会超过十进制最大数位数字 9，显然是不合理的，此时应该产生进位并使这个超过 9 的数字减去 10 作为最低数位数字，这样它的个位数字不变（比如 14 - 10 = 4）。</p><p data-pid=\"Yssykt2D\">这个进位并减 10 的操作我们可以通过加 6 来实现，为什么不是减 10 而是加 6 呢？可以这样理解，从 BCD 码的二进制上来看，要向下一组编码进位需要加 16（二进制的10000），从十进制上来看，要减 10 来消去进位的部分。所以加 16 减 10 结果就是要加 6。</p><p data-pid=\"ctziwhdI\">等一下，不是说满 5 加 3 吗，为什么变成加 6 了？其实不难发现，一个十进制数位数字只有大于等于 5，它乘 2 以后才会大于 9，此时才需要进行加 6 修正，而 6 刚好是个偶数，所以我们可以提前判断，如果一个十进制数位的 BCD 码大于等于 5，则对其加 3，这样移位以后加上去的 3 也乘了 2，相当于加 6。这样的好处是我们不需要考虑 BCD  码编组之间的进位了，对于一组 BCD 码（最大不会超过9），如果加 3 产生了进位使得 4 位 BCD 码的最高位变为 1，下次左移时就会移入下一十进制数位的 BCD 编码中（进位到下一数位了），所以只要对每个十进制数位的 BCD 码编组分别处理就可以了。</p><p data-pid=\"AdeF83Xe\">至于 BCD 码转二进制的满 8 减 3 就不多说了，可以反推一下。那么接下来就是体操的部分了，让我们先来实现一个十进制数字转 BCD 编码的类型，很简单，逐位获取十进制数位数字，然后查表转换即可：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">LUTBCD</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">&#34;0&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0000&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;1&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0001&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;2&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0010&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;3&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0011&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;4&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0100&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;5&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0101&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;6&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0110&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;7&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0111&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;8&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1000&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;9&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1001&#34;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">DecimalToBCD</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">DEC</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">BCD</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">DEC</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">D</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">R</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n  <span class=\"o\">?</span> <span class=\"nx\">D</span> <span class=\"kr\">extends</span> <span class=\"k\">keyof</span> <span class=\"nx\">LUTBCD</span>\n    <span class=\"o\">?</span> <span class=\"nx\">DecimalToBCD</span><span class=\"p\">&lt;</span><span class=\"nt\">R</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">BCD</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">LUTBCD</span><span class=\"err\">[</span><span class=\"na\">D</span><span class=\"err\">]</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"nx\">BCD</span>\n  : <span class=\"kt\">BCD</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"92bvBnV6\">通过一个递归类型，使用条件类型配合模板字符串类型提取每一位数字，将查表转换后的 BCD 码拼接到作为结果的字符串类型里，直到处理完整个数字字符串。</p><p data-pid=\"GsMBSrqe\">反过来，用同样的方法可以实现 BCD 码转回十进制数字：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">LUTDEC</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">&#34;0000&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0001&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0010&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;2&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0011&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;3&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0100&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;4&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0101&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;5&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0110&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;6&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0111&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;7&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;1000&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;8&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;1001&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;9&#34;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">BCDToDecimal</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">BCD</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">DEC</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BCD</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">keyof</span> <span class=\"nx\">LUTDEC</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">R</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n  <span class=\"o\">?</span> <span class=\"nx\">BCD</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">B</span><span class=\"si\">}${</span><span class=\"nx\">R</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">BCDToDecimal</span><span class=\"p\">&lt;</span><span class=\"nt\">R</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">DEC</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">LUTDEC</span><span class=\"err\">[</span><span class=\"na\">B</span> <span class=\"err\">&amp;</span> <span class=\"na\">keyof</span> <span class=\"na\">LUTDEC</span><span class=\"err\">]</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"nx\">DEC</span>\n  : <span class=\"kt\">DEC</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"g5911L7A\">接下来我们先实现二进制数字转 BCD 码，对于满 5 加 3，我们仍然使用查表的方式：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">LUTADD3</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">&#34;0000&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0000&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0001&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0001&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0010&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0010&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0011&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0011&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0100&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0100&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0101&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1000&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0110&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1001&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0111&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1010&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;1000&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1011&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;1001&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1100&#34;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// 如果用 TS 3.7 可以用 infer extends 语法简化一下\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">_ADD3</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">R</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">keyof</span> <span class=\"nx\">LUTADD3</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">T</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n  <span class=\"o\">?</span> <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">K</span><span class=\"si\">}${</span><span class=\"nx\">T</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">_ADD3</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">R</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">LUTADD3</span><span class=\"err\">[</span><span class=\"na\">K</span> <span class=\"err\">&amp;</span> <span class=\"na\">keyof</span> <span class=\"na\">LUTADD3</span><span class=\"err\">]</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"kt\">never</span>\n  <span class=\"o\">:</span> <span class=\"nx\">R</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">BinaryToBCD</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">BIN</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">BCD</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;0000&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BIN</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">B</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">BIN</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n  <span class=\"o\">?</span> <span class=\"nx\">_ADD3</span><span class=\"p\">&lt;</span><span class=\"nt\">BCD</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"sb\">`0</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">BCD</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">BinaryToBCD</span><span class=\"p\">&lt;</span><span class=\"nt\">BIN</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">BCD</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"nx\">_ADD3</span><span class=\"p\">&lt;</span><span class=\"nt\">BCD</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"sb\">`1</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">BCD</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">BinaryToBCD</span><span class=\"p\">&lt;</span><span class=\"nt\">BIN</span><span class=\"err\">,</span> <span class=\"err\">`</span><span class=\"na\">0001</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">BCD</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">B</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"nx\">BCD</span>\n  : <span class=\"kt\">BCD</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"XzUJuI0W\">稍微解释一下，<code>LUTADD3</code> 这个表对十个 BCD 编码中大于等于 5 的五个编码做了加 3， <code>_ADD3</code> 则是不断取出下一个十进制数位的 BCD 编码，通过 <code>LUTADD3</code> 进行映射，拼接到作为结果的字符串类型里。<code>BinaryToBCD</code> 这个类型不断取出二进制数字的最高位（<code>B</code>）,先对已经编码的部分（<code>BCD</code>）进行满 5 加 3 处理，然后将 BCD 码左移，并把取出的二进制位数字拼到 BCD 码后面，如果 BCD 码最高位为 0，左移时就丢掉，如果为 1 就补齐为 4 位。</p><p data-pid=\"Cma5Nnk0\">用类似的方法，采用满 8 减 3 规则再实现 BCD 码转二进制：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"c1\">// 也是十个编码的表，一个正确的BCD码移位后只会出现这十种情况\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">LUTSUB3</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">&#34;0000&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0000&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0001&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0001&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0010&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0010&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0011&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0011&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;0100&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0100&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;1000&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0101&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;1001&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0110&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;1010&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;0111&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;1011&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1000&#34;</span><span class=\"p\">;</span>\n  <span class=\"s2\">&#34;1100&#34;</span><span class=\"o\">:</span> <span class=\"s2\">&#34;1001&#34;</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">_SUB3</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">R</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">keyof</span> <span class=\"nx\">LUTSUB3</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">T</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n  <span class=\"o\">?</span> <span class=\"nx\">S</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">K</span><span class=\"si\">}${</span><span class=\"nx\">T</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">_SUB3</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">R</span><span class=\"p\">}</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">LUTSUB3</span><span class=\"err\">[</span><span class=\"na\">K</span> <span class=\"err\">&amp;</span> <span class=\"na\">keyof</span> <span class=\"na\">LUTSUB3</span><span class=\"err\">]</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"kt\">never</span>\n  <span class=\"o\">:</span> <span class=\"nx\">R</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">BCDToBinary</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">BCD</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">BIN</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BCD</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"kt\">string</span><span class=\"si\">}</span><span class=\"sb\">1</span><span class=\"si\">${</span><span class=\"kt\">string</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n  <span class=\"o\">?</span> <span class=\"nx\">BCD</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">BCD</span><span class=\"si\">}</span><span class=\"sb\">0`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">BCDToBinary</span><span class=\"p\">&lt;</span><span class=\"nt\">_SUB3</span><span class=\"err\">&lt;`</span><span class=\"na\">0</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">BCD</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;,</span> <span class=\"sb\">`0</span><span class=\"si\">${</span><span class=\"nx\">BIN</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"nx\">BCD</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">BCD</span><span class=\"si\">}</span><span class=\"sb\">1`</span>\n    <span class=\"o\">?</span> <span class=\"nx\">BCDToBinary</span><span class=\"p\">&lt;</span><span class=\"nt\">_SUB3</span><span class=\"err\">&lt;`</span><span class=\"na\">0</span><span class=\"err\">$</span><span class=\"p\">{</span><span class=\"na\">BCD</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;,</span> <span class=\"sb\">`1</span><span class=\"si\">${</span><span class=\"nx\">BIN</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"nx\">BIN</span>\n  : <span class=\"kt\">BIN</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"zqTI1ML5\">在 BCD 转二进制时，先判断了 BCD 码是否包含 1，否则剩余的高位全 0 没必要再处理。然后 BCD 码右移（取出最低位，在最高位补 0），然后进行满 8 减 3 处理，把取出的最低位拼到二进制数字最高位，直到处理完。</p><p data-pid=\"LLXI_mM4\">把这两对类型组合在一起就可以实现十进制数字和二进制数字互相转换了：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">DecimalToBinary</span><span class=\"p\">&lt;</span><span class=\"nt\">DEC</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BCDToBinary</span><span class=\"p\">&lt;</span><span class=\"nt\">DecimalToBCD</span><span class=\"err\">&lt;</span><span class=\"na\">DEC</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">BinaryToDecimal</span><span class=\"p\">&lt;</span><span class=\"nt\">BIN</span> <span class=\"na\">extends</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BCDToDecimal</span><span class=\"p\">&lt;</span><span class=\"nt\">BinaryToBCD</span><span class=\"err\">&lt;</span><span class=\"na\">BIN</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"iYRMdj2O\">接下来实现二进制数字计算，这次我们的二进制数位数是不固定的，先来写一些二进制位操作的类型：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Bit</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;0&#34;</span> <span class=\"o\">|</span> <span class=\"s2\">&#34;1&#34;</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 二进制位运算表\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">NOT</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&#34;1&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;0&#34;</span><span class=\"p\">];</span>\n<span class=\"kr\">type</span> <span class=\"nx\">OR</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s2\">&#34;0&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;1&#34;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">&#34;1&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;1&#34;</span><span class=\"p\">]];</span>\n<span class=\"kr\">type</span> <span class=\"nx\">XOR</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s2\">&#34;0&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;1&#34;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">&#34;1&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;0&#34;</span><span class=\"p\">]];</span>\n<span class=\"kr\">type</span> <span class=\"nx\">AND</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s2\">&#34;0&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;0&#34;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">&#34;0&#34;</span><span class=\"p\">,</span> <span class=\"s2\">&#34;1&#34;</span><span class=\"p\">]];</span>\n\n<span class=\"c1\">// 取得最低位数字\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"kt\">string</span><span class=\"si\">}</span><span class=\"sb\">1`</span> <span class=\"o\">?</span> <span class=\"s2\">&#34;1&#34;</span> <span class=\"o\">:</span> <span class=\"s2\">&#34;0&#34;</span><span class=\"p\">;</span>\n<span class=\"c1\">// 取得最高位数字\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">MSB</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"sb\">`1</span><span class=\"si\">${</span><span class=\"kt\">string</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span> <span class=\"s2\">&#34;1&#34;</span> <span class=\"o\">:</span> <span class=\"s2\">&#34;0&#34;</span><span class=\"p\">;</span>\n<span class=\"c1\">// 左移去掉最高位数字\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">SHL</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">Bit</span><span class=\"si\">}${</span><span class=\"k\">infer</span> <span class=\"nx\">R</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span> <span class=\"nx\">R</span> <span class=\"o\">:</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">;</span>\n<span class=\"c1\">// 右移去掉最低位数字\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">SHR</span><span class=\"p\">&lt;</span><span class=\"nt\">T</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">R</span><span class=\"si\">}${</span><span class=\"nx\">Bit</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"o\">?</span> <span class=\"nx\">R</span> <span class=\"o\">:</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">;</span>\n<span class=\"c1\">// 检查两个参数是否都是空字符串\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">BothEmpty</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span><span class=\"err\">,</span> <span class=\"na\">B</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">A</span> <span class=\"kr\">extends</span> <span class=\"s2\">&#34;&#34;</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"nx\">B</span> <span class=\"kr\">extends</span> <span class=\"s2\">&#34;&#34;</span> <span class=\"o\">?</span> <span class=\"nx\">1</span> : <span class=\"kt\">0</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"ooZPge2n\">我们想要对两个长度不同的二进制数字进行运算，为了省去补齐位数的麻烦，我们让 <code>LSB</code> 和 <code>MSB</code> 对于空串也返回 &#34;0&#34;，然后用和之前差不多的方法实现二进制数的四则运算。以加法为例，只要不是两个参数都为空，就取出最低位进行计算，然后拼接结果，右移数字直到两个数字都为空：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">const</span> <span class=\"kr\">enum</span> <span class=\"nx\">Ordering</span> <span class=\"p\">{</span>\n  <span class=\"nx\">EQ</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"nx\">LT</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">GT</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 比较大小。从最低位开始比较，如果相等，保持之前的结果，否则改为当前位比较结果。\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">BinaryCMP</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">OperandA</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">OperandB</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">R</span> <span class=\"kr\">extends</span> <span class=\"nx\">Ordering</span> <span class=\"o\">=</span> <span class=\"nx\">Ordering</span><span class=\"p\">.</span><span class=\"nx\">EQ</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BothEmpty</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"err\">,</span> <span class=\"na\">OperandB</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"mi\">0</span>\n  <span class=\"o\">?</span> <span class=\"nx\">BinaryCMP</span><span class=\"o\">&lt;</span>\n      <span class=\"nx\">SHR</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"p\">&gt;,</span>\n      <span class=\"nx\">SHR</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandB</span><span class=\"p\">&gt;,</span>\n      <span class=\"p\">[[</span><span class=\"nx\">R</span><span class=\"p\">,</span> <span class=\"nx\">Ordering</span><span class=\"p\">.</span><span class=\"nx\">LT</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nx\">Ordering</span><span class=\"p\">.</span><span class=\"nx\">GT</span><span class=\"p\">,</span> <span class=\"nx\">R</span><span class=\"p\">]][</span><span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"p\">&gt;][</span><span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandB</span><span class=\"p\">&gt;]</span>\n    <span class=\"o\">&gt;</span>\n  <span class=\"o\">:</span> <span class=\"nx\">R</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 加法。从最低位开始相加，计算进位和相加结果。\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">BinaryADD</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">OperandA</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">OperandB</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">C</span> <span class=\"kr\">extends</span> <span class=\"nx\">Bit</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;0&#34;</span><span class=\"p\">,</span>\n  <span class=\"nx\">R</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BothEmpty</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"err\">,</span> <span class=\"na\">OperandB</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"mi\">0</span>\n  <span class=\"o\">?</span> <span class=\"nx\">BinaryADD</span><span class=\"o\">&lt;</span>\n      <span class=\"nx\">SHR</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"p\">&gt;,</span>\n      <span class=\"nx\">SHR</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandB</span><span class=\"p\">&gt;,</span>\n      <span class=\"p\">[[</span><span class=\"s2\">&#34;0&#34;</span><span class=\"p\">,</span> <span class=\"nx\">C</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"s2\">&#34;1&#34;</span><span class=\"p\">]][</span><span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"p\">&gt;][</span><span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandB</span><span class=\"p\">&gt;],</span>\n      <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">XOR</span><span class=\"p\">[</span><span class=\"nx\">XOR</span><span class=\"p\">[</span><span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"p\">&gt;][</span><span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandB</span><span class=\"p\">&gt;]][</span><span class=\"nx\">C</span><span class=\"p\">]</span><span class=\"si\">}${</span><span class=\"nx\">R</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">&gt;</span>\n  <span class=\"o\">:</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">C</span> <span class=\"kr\">extends</span> <span class=\"s2\">&#34;1&#34;</span> <span class=\"o\">?</span> <span class=\"nx\">C</span> <span class=\"o\">:</span> <span class=\"s2\">&#34;&#34;</span><span class=\"si\">}${</span><span class=\"nx\">R</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 减法。由加法修改而来，将计算补码包含在了计算过程中（相加结果取反，初始进位为1）。\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">BinarySUB</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">OperandA</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">OperandB</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">C</span> <span class=\"kr\">extends</span> <span class=\"nx\">Bit</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;1&#34;</span><span class=\"p\">,</span>\n  <span class=\"nx\">R</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BothEmpty</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"err\">,</span> <span class=\"na\">OperandB</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"mi\">0</span>\n  <span class=\"o\">?</span> <span class=\"nx\">BinarySUB</span><span class=\"o\">&lt;</span>\n      <span class=\"nx\">SHR</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"p\">&gt;,</span>\n      <span class=\"nx\">SHR</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandB</span><span class=\"p\">&gt;,</span>\n      <span class=\"p\">[[</span><span class=\"nx\">C</span><span class=\"p\">,</span> <span class=\"s2\">&#34;0&#34;</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"s2\">&#34;1&#34;</span><span class=\"p\">,</span> <span class=\"nx\">C</span><span class=\"p\">]][</span><span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"p\">&gt;][</span><span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandB</span><span class=\"p\">&gt;],</span>\n      <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">XOR</span><span class=\"p\">[</span><span class=\"nx\">XOR</span><span class=\"p\">[</span><span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"p\">&gt;][</span><span class=\"nx\">LSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandB</span><span class=\"p\">&gt;]][</span><span class=\"nx\">NOT</span><span class=\"p\">[</span><span class=\"nx\">C</span><span class=\"p\">]]</span><span class=\"si\">}${</span><span class=\"nx\">R</span><span class=\"si\">}</span><span class=\"sb\">`</span>\n    <span class=\"o\">&gt;</span>\n  <span class=\"o\">:</span> <span class=\"nx\">R</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 乘法。\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">BinaryMUL</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">OperandA</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">OperandB</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">P</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"nx\">OperandA</span><span class=\"p\">,</span>\n  <span class=\"nx\">R</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">OperandB</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">OperandB</span><span class=\"si\">}</span><span class=\"sb\">0`</span>\n  <span class=\"o\">?</span> <span class=\"nx\">BinaryMUL</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"err\">,</span> <span class=\"na\">OperandB</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">P</span><span class=\"p\">}</span><span class=\"na\">0</span><span class=\"err\">`,</span> <span class=\"na\">R</span><span class=\"p\">&gt;</span>\n  <span class=\"o\">:</span> <span class=\"nx\">OperandB</span> <span class=\"kr\">extends</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"k\">infer</span> <span class=\"nx\">OperandB</span><span class=\"si\">}</span><span class=\"sb\">1`</span>\n  <span class=\"o\">?</span> <span class=\"nx\">BinaryMUL</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"err\">,</span> <span class=\"na\">OperandB</span><span class=\"err\">,</span> <span class=\"err\">`$</span><span class=\"p\">{</span><span class=\"na\">P</span><span class=\"p\">}</span><span class=\"na\">0</span><span class=\"err\">`,</span> <span class=\"na\">BinaryADD</span><span class=\"err\">&lt;</span><span class=\"na\">P</span><span class=\"err\">,</span> <span class=\"na\">R</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">:</span> <span class=\"nx\">R</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// 除法。\n</span><span class=\"c1\"></span><span class=\"kr\">type</span> <span class=\"nx\">BinaryDIV</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">OperandA</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">OperandB</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span><span class=\"p\">,</span>\n  <span class=\"nx\">Q</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span><span class=\"p\">,</span>\n  <span class=\"nx\">R</span> <span class=\"kr\">extends</span> <span class=\"kt\">string</span> <span class=\"o\">=</span> <span class=\"s2\">&#34;&#34;</span>\n<span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">OperandA</span> <span class=\"kr\">extends</span> <span class=\"s2\">&#34;&#34;</span>\n  <span class=\"o\">?</span> <span class=\"p\">[</span><span class=\"nx\">Q</span><span class=\"p\">,</span> <span class=\"nx\">R</span><span class=\"p\">]</span>\n  <span class=\"o\">:</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">R</span><span class=\"si\">}${</span><span class=\"nx\">MSB</span><span class=\"p\">&lt;</span><span class=\"nt\">OperandA</span><span class=\"p\">&gt;</span><span class=\"si\">}</span><span class=\"sb\">`</span> <span class=\"kr\">extends</span> <span class=\"k\">infer</span> <span class=\"nx\">Remainder</span>\n  <span class=\"o\">?</span> <span class=\"nx\">BinaryCMP</span><span class=\"p\">&lt;</span><span class=\"nt\">Remainder</span> <span class=\"err\">&amp;</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">OperandB</span><span class=\"p\">&gt;</span> <span class=\"kr\">extends</span> <span class=\"nx\">Ordering</span><span class=\"p\">.</span><span class=\"nx\">LT</span>\n    <span class=\"o\">?</span> <span class=\"nx\">BinaryDIV</span><span class=\"p\">&lt;</span><span class=\"nt\">SHL</span><span class=\"err\">&lt;</span><span class=\"na\">OperandA</span><span class=\"p\">&gt;,</span> <span class=\"nx\">OperandB</span><span class=\"p\">,</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">Q</span><span class=\"si\">}</span><span class=\"sb\">0`</span><span class=\"p\">,</span> <span class=\"nx\">Remainder</span> <span class=\"o\">&amp;</span> <span class=\"kt\">string</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">:</span> <span class=\"nx\">BinaryDIV</span><span class=\"p\">&lt;</span><span class=\"nt\">SHL</span><span class=\"err\">&lt;</span><span class=\"na\">OperandA</span><span class=\"p\">&gt;,</span> <span class=\"nx\">OperandB</span><span class=\"p\">,</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">Q</span><span class=\"si\">}</span><span class=\"sb\">1`</span><span class=\"p\">,</span> <span class=\"nx\">BinarySUB</span><span class=\"p\">&lt;</span><span class=\"nt\">Remainder</span> <span class=\"err\">&amp;</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">OperandB</span><span class=\"p\">&gt;</span><span class=\"o\">&gt;</span>\n  <span class=\"o\">:</span> <span class=\"kt\">never</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"qyur3iDO\">最后把进制转换和二进制运算组合起来，实现十进制数字计算的类型（将来如果用上 TS 3.8 还可以把字符串转回数字类型）：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">Add</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span> <span class=\"na\">extends</span> <span class=\"na\">number</span> <span class=\"err\">|</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">B</span> <span class=\"na\">extends</span> <span class=\"na\">number</span> <span class=\"err\">|</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BinaryToDecimal</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">BinaryADD</span><span class=\"p\">&lt;</span><span class=\"nt\">DecimalToBinary</span><span class=\"err\">&lt;`$</span><span class=\"p\">{</span><span class=\"na\">A</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;,</span> <span class=\"nx\">DecimalToBinary</span><span class=\"o\">&lt;</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">B</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Sub</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span> <span class=\"na\">extends</span> <span class=\"na\">number</span> <span class=\"err\">|</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">B</span> <span class=\"na\">extends</span> <span class=\"na\">number</span> <span class=\"err\">|</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BinaryToDecimal</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">BinarySUB</span><span class=\"p\">&lt;</span><span class=\"nt\">DecimalToBinary</span><span class=\"err\">&lt;`$</span><span class=\"p\">{</span><span class=\"na\">A</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;,</span> <span class=\"nx\">DecimalToBinary</span><span class=\"o\">&lt;</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">B</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Mul</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span> <span class=\"na\">extends</span> <span class=\"na\">number</span> <span class=\"err\">|</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">B</span> <span class=\"na\">extends</span> <span class=\"na\">number</span> <span class=\"err\">|</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BinaryToDecimal</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">BinaryMUL</span><span class=\"p\">&lt;</span><span class=\"nt\">DecimalToBinary</span><span class=\"err\">&lt;`$</span><span class=\"p\">{</span><span class=\"na\">A</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;,</span> <span class=\"nx\">DecimalToBinary</span><span class=\"o\">&lt;</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">B</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Div</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span> <span class=\"na\">extends</span> <span class=\"na\">number</span> <span class=\"err\">|</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">B</span> <span class=\"na\">extends</span> <span class=\"na\">number</span> <span class=\"err\">|</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BinaryToDecimal</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">BinaryDIV</span><span class=\"p\">&lt;</span><span class=\"nt\">DecimalToBinary</span><span class=\"err\">&lt;`$</span><span class=\"p\">{</span><span class=\"na\">A</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;,</span> <span class=\"nx\">DecimalToBinary</span><span class=\"o\">&lt;</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">B</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"kr\">type</span> <span class=\"nx\">Mod</span><span class=\"p\">&lt;</span><span class=\"nt\">A</span> <span class=\"na\">extends</span> <span class=\"na\">number</span> <span class=\"err\">|</span> <span class=\"na\">string</span><span class=\"err\">,</span> <span class=\"na\">B</span> <span class=\"na\">extends</span> <span class=\"na\">number</span> <span class=\"err\">|</span> <span class=\"na\">string</span><span class=\"p\">&gt;</span> <span class=\"o\">=</span> <span class=\"nx\">BinaryToDecimal</span><span class=\"o\">&lt;</span>\n  <span class=\"nx\">BinaryDIV</span><span class=\"p\">&lt;</span><span class=\"nt\">DecimalToBinary</span><span class=\"err\">&lt;`$</span><span class=\"p\">{</span><span class=\"na\">A</span><span class=\"p\">}</span><span class=\"err\">`</span><span class=\"p\">&gt;,</span> <span class=\"nx\">DecimalToBinary</span><span class=\"o\">&lt;</span><span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">B</span><span class=\"si\">}</span><span class=\"sb\">`</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"86SUDF_s\">当然，还可以继续完善一下，比如加上符号的处理以支持负数，不过先到此为止吧。</p><p data-pid=\"tY4b5Khk\">简单写几个数字测试一下：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">type</span> <span class=\"nx\">should_be_2743</span> <span class=\"o\">=</span> <span class=\"nx\">Add</span><span class=\"p\">&lt;</span><span class=\"nt\">1926</span><span class=\"err\">,</span> <span class=\"na\">817</span><span class=\"p\">&gt;;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">should_be_1109</span> <span class=\"o\">=</span> <span class=\"nx\">Sub</span><span class=\"p\">&lt;</span><span class=\"nt\">1926</span><span class=\"err\">,</span> <span class=\"na\">817</span><span class=\"p\">&gt;;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">should_be_1573542</span> <span class=\"o\">=</span> <span class=\"nx\">Mul</span><span class=\"p\">&lt;</span><span class=\"nt\">1926</span><span class=\"err\">,</span> <span class=\"na\">817</span><span class=\"p\">&gt;;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">should_be_2</span> <span class=\"o\">=</span> <span class=\"nx\">Div</span><span class=\"p\">&lt;</span><span class=\"nt\">1926</span><span class=\"err\">,</span> <span class=\"na\">817</span><span class=\"p\">&gt;;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">should_be_292</span> <span class=\"o\">=</span> <span class=\"nx\">Mod</span><span class=\"p\">&lt;</span><span class=\"nt\">1926</span><span class=\"err\">,</span> <span class=\"na\">817</span><span class=\"p\">&gt;;</span>\n<span class=\"kr\">type</span> <span class=\"nx\">should_be_15241578750190521</span> <span class=\"o\">=</span> <span class=\"nx\">Mul</span><span class=\"p\">&lt;</span><span class=\"nt\">123456789</span><span class=\"err\">,</span> <span class=\"na\">123456789</span><span class=\"p\">&gt;;</span>\n</code></pre></div><p data-pid=\"EomS9qKt\">最后是 Playground 链接：<a href=\"https://link.zhihu.com/?target=https%3A//73071.gitee.io/misc/playground3.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">73071.gitee.io/misc/pla</span><span class=\"invisible\">yground3.html</span><span class=\"ellipsis\"></span></a>。</p><p data-pid=\"UeIlo4Uv\">部分图片和资料引用自维基百科：</p><ol><li data-pid=\"TxwiSRk9\">Nixie tube, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/w/index.php%3Ftitle%3DNixie_tube%26oldid%3D1105388078\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">en.wikipedia.org/w/inde</span><span class=\"invisible\">x.php?title=Nixie_tube&amp;oldid=1105388078</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"4rSpP_o1\">Seven-segment display, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Seven-segment_display\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">en.wikipedia.org/wiki/S</span><span class=\"invisible\">even-segment_display</span><span class=\"ellipsis\"></span></a></li><li data-pid=\"S-yj1f9i\">Double dabble, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Double_dabble\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">en.wikipedia.org/wiki/D</span><span class=\"invisible\">ouble_dabble</span><span class=\"ellipsis\"></span></a></li></ol>",
            "voteup_count": 32,
            "column": {
                "id": "c_206498766",
                "type": "column",
                "url_token": "c_206498766",
                "title": "来玩TypeScript啊，机都给你开好了！",
                "url": "https://zhuanlan.zhihu.com/c_206498766",
                "created": 1529898760,
                "updated": 1599156476,
                "description": "",
                "image_url": "https://pic1.zhimg.com/v2-e96ec27e9e7fc3bbedf607cb352acb57_720w.jpg?source=d16d100b"
            },
            "comment_count": 2
        },
        "created": "2022-08-27T05:36:47+08:00"
    },
    {
        "content": {
            "id": 2625826293,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/343096396/answer/2625826293",
            "created_time": 1660449097,
            "updated_time": 1683089806,
            "question": {
                "type": "question",
                "id": 343096396,
                "title": "有哪些优秀（好看）的电影电视剧推荐？",
                "question_type": "normal",
                "created": 1566927424,
                "updated_time": 1592708001,
                "url": "https://www.zhihu.com/question/343096396",
                "is_deleted": false
            },
            "author": {
                "id": "286aeb734a52ceea16d93d9a7eff8b46",
                "url_token": "fire-23-53",
                "name": "九畹",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-3ce89996bde72861538d8fec53f3c922_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-3ce89996bde72861538d8fec53f3c922.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/286aeb734a52ceea16d93d9a7eff8b46",
                "user_type": "people",
                "headline": "…",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "https://picx.zhimg.com/v2-785f1af6f254b5fc66e56e08ba776483_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 87,
            "comment_count": 11,
            "thanks_count": 31,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"vq4XfrJL\">为大家整理了一些 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/56031bebda91a7306c0b4610f47367f0\" data-hash=\"56031bebda91a7306c0b4610f47367f0\" data-hovercard=\"p$b$56031bebda91a7306c0b4610f47367f0\">@nell nell</a>  答主推荐的影视。</p><p data-pid=\"hDfgOsOv\">1.<b>德剧暗黑</b></p><p data-pid=\"d_NRy7j-\"><a href=\"https://www.zhihu.com/pin/1427839787205705728\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1427839787205705728</a></p><p data-pid=\"8C29Qo5D\">此想法下的评论</p><p data-pid=\"f8A2FpXl\">2.<b>Only Murders in the Building</b></p><blockquote data-pid=\"orj3qpzD\">推荐Hulu的“Only Murders in the Building”，非常精彩。感觉以后AI编剧出来的东西就应该是这样的。</blockquote><p data-pid=\"e3Nea8VG\"><a href=\"https://www.zhihu.com/pin/1436263244222189568\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1436263244222189568</a></p><p data-pid=\"6q0U_Dga\">3.<b>Dont look up</b></p><blockquote data-pid=\"y22u2CuN\">最后那场晚餐很不错，和人定胜天的灾难片比起来，这种无畏灭忙的勇气更让人动容。<br/>毁灭个球，有啥可怕？</blockquote><p data-pid=\"NMJeIEZv\"><a href=\"https://www.zhihu.com/pin/1461465832568496128\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1461465832568496128</a></p><p data-pid=\"uB3U3EWG\">4.<b>Fantastic Fungi</b></p><blockquote data-pid=\"5eq819HH\">Netflix上有一部纪录片《Fantastic Fungi》，非常值得一看。</blockquote><p data-pid=\"3VTAi3zh\"><a href=\"https://www.zhihu.com/pin/1453340613190463488\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1453340613190463488</a></p><p data-pid=\"KHKp4VPl\">5.<b>Cool Runnings</b></p><blockquote data-pid=\"9J8yqa7Z\">想起来一部片子，《Cool Runnings》，讲牙买加运动员参加冬奥会的，很好笑，也很励志，可以看看。</blockquote><p data-pid=\"rRtYU5GF\"><a href=\"https://www.zhihu.com/pin/1473246074156130304\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1473246074156130304</a></p><p data-pid=\"OYDFt14l\" class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"Pb5ruct_\"><b>6.佛州中部上帝养成史</b></p><blockquote data-pid=\"rv9NGNJj\">推荐《佛州中部上帝养成史》。看看人是怎么一步步被洗脑沦陷的。</blockquote><p data-pid=\"Z1_FutSV\"><a href=\"https://www.zhihu.com/pin/1466660716291379200\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1466660716291379200</a></p><p data-pid=\"USk5vT68\">7.<b>Midnight Mass</b></p><blockquote data-pid=\"WZP4b8Fa\">推荐“Midnight Mass”。但是胆子小的人建议白天或者和其他人一起看。声效关小点。</blockquote><p data-pid=\"De0pf3SY\"><a href=\"https://www.zhihu.com/pin/1462540653939331072\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1462540653939331072</a></p><p data-pid=\"UmwPJHtB\">8.<b>指环王</b></p><blockquote data-pid=\"B04Kfx9U\">封城期间适合重看《指环王》，对情绪低落有奇效。</blockquote><p data-pid=\"Fa3AEIny\"><a href=\"https://www.zhihu.com/pin/1493554864379006976\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1493554864379006976</a></p><p data-pid=\"ZjCIvW8A\">9.<b>《海边曼彻斯特》</b></p><blockquote data-pid=\"BETdLYVM\">比如《海边曼彻斯特》，灾难只是一笔带过，后面全是在讲获得和解与救赎的曲折与复杂，非常有耐心。它没有变着花儿的刻画绝望，而是真的想探讨走出绝望的途径。</blockquote><p data-pid=\"j89AyICp\"><a href=\"https://www.zhihu.com/pin/1512375970359554048\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1512375970359554048</a></p><p data-pid=\"fU6KSKVc\"><a href=\"https://www.zhihu.com/question/53523367/answer/751676961\" class=\"internal\">如何评价电影《海边的曼彻斯特》（Manchester by the Sea）? - nell nell的回答 - 知乎 https://www.zhihu.com/question/53523367/answer/751676961</a></p><p data-pid=\"GZ-CrYU8\">10.<b>昨日的美食</b></p><blockquote data-pid=\"id9qLeHC\">美食就算了，男主情侣之间的相处之道值得一看。</blockquote><p data-pid=\"kZoSSIcX\">11.<b>Tinder诈骗王</b></p><p data-pid=\"K7G_xigl\">12.<b>虚构安娜</b></p><blockquote data-pid=\"5e75gWyT\">《Tinder诈骗王》和《虚构安娜》可以一起看。</blockquote><p data-pid=\"x_lUDB5-\">13.《<b>Outfit</b>》，反转王</p><p data-pid=\"eoVvfuIa\">14.<b>Margin Call</b></p><blockquote data-pid=\"mgch-FZn\">最好的金融危机电影没有之一。</blockquote><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-785f1af6f254b5fc66e56e08ba776483_720w.jpg?source=2c26e567\" data-rawwidth=\"200\" data-rawheight=\"200\" data-size=\"normal\" data-caption=\"\" data-original-token=\"v2-785f1af6f254b5fc66e56e08ba776483\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-c850df376fc2ed7e36b32f622f6216c9_720w.jpg?source=2c26e567\" class=\"content_image\" width=\"200\"/></figure><p data-pid=\"hN78FI-t\"><a href=\"https://www.zhihu.com/pin/1513801297141108736\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1513801297141108736</a></p><p data-pid=\"qbv68Uwi\"><a href=\"https://www.zhihu.com/pin/1525445501407596544\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1525445501407596544</a></p><p data-pid=\"QlRMCvy8\">15.<b>Return to Space</b></p><p data-pid=\"FFve5K89\"><a href=\"https://www.zhihu.com/pin/1516709834505994240\" class=\"internal\">nell nell的想法 - 知乎 https://www.zhihu.com/pin/1516709834505994240</a></p><p data-pid=\"AqG98c24\">16.<b>《</b><a href=\"https://www.zhihu.com/search?q=%E5%90%89%E7%A5%A5%E5%A6%82%E6%84%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1768068760%7D\" class=\"internal\">吉祥如意</a><b>》</b></p><blockquote data-pid=\"TllJV_dS\">“如果还有和解的机会，和解的第一步，就是看懂对方的行为逻辑。不需要去改变对方，看懂、理解，就够了。”</blockquote><p data-pid=\"XITNbbi9\"><a href=\"https://www.zhihu.com/question/409589663/answer/1768068760\" class=\"internal\">如何评价大鹏导演的电影《吉祥如意》？ - nell nell的回答 - 知乎 https://www.zhihu.com/question/409589663/answer/1768068760</a></p><p data-pid=\"IqRWM1KK\">17.<b>《公寓大楼谋杀案》</b></p><blockquote data-pid=\"2tfCgDce\">第二季出来了，好看到停不下来，两个老家伙太逗了。</blockquote><p data-pid=\"Csg1Vxx-\" class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"mtFdPdhG\"><a href=\"https://www.zhihu.com/pin/1539708440078880768\" class=\"internal\">《公寓大楼谋杀案》第二季出来了，好看到…</a></p><p data-pid=\"T5Bv7Nb2\">18.《<b>小武</b>》</p><p data-pid=\"5lZnrZDp\">19.《<b>路边野餐</b>》</p><blockquote data-pid=\"a-D5zhOm\">中国文艺片最好的有两种，一种是原生态的，展现角色自身的原始生命力，比如《小武》《路边野餐》。</blockquote><p data-pid=\"iczz0Wlo\">20.《<b>气球</b>》</p><p data-pid=\"0_gzrMpN\" class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"1l-2rtte\"><a href=\"https://www.zhihu.com/pin/1545004211556786176\" class=\"internal\">《隐入尘烟》也不行啊</a></p><p data-pid=\"C_3gAlko\">21.《<b>白虎</b>》</p><blockquote data-pid=\"P7LexiEb\">关于印度人的奇迹发家，可以看看《白虎》</blockquote><p data-pid=\"26m5mhZV\" class=\"ztext-empty-paragraph\"><br/></p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/pin/1548097213804515328\" class=\"internal\">关于印度人的奇迹发家，可以看看《白虎》</a><p data-pid=\"g_wS6xLS\">22.大鱼</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/pin/1593009194386640897\" class=\"internal\">真好</a><p data-pid=\"CwYjEnPj\">23.漫长的季节</p><p data-pid=\"YOFgCp9Q\">平原上的摩西</p><hr/><p data-pid=\"RCkITulY\">目前整理了 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/56031bebda91a7306c0b4610f47367f0\" data-hash=\"56031bebda91a7306c0b4610f47367f0\" data-hovercard=\"p$b$56031bebda91a7306c0b4610f47367f0\">@nell nell</a> 答主目前想法区推荐的所有影视。</p><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/pin/special/1453340615556173824\" data-image=\"https://pic4.zhimg.com/v2-bc66a0d155f8380eb7e58a709428dec7.jpg\" data-image-width=\"1200\" data-image-height=\"640\" class=\"internal\">#nell推荐# - 知乎</a><p data-pid=\"jtKEN2q5\">上面这个链接是nell nell答主创建的一个#nell推荐#标签，里面还有推荐的游戏，书籍，学习方法，教育理念等内容。</p><p data-pid=\"UKXRkgV_\">未来会更新nell nell答主写的影评链接。</p><p data-pid=\"Y45h2ZOw\">祝好。</p>",
            "excerpt": "为大家整理了一些 @nell nell 答主推荐的影视。1. 德剧暗黑 nell nell的想法 - 知乎 https://www.zhihu.com/pin/1427839787205705728 此想法下的评论 2. Only Murders in the Building推荐Hulu的“Only Murders in the Building”，非常精彩。感觉以后AI编剧出来的东西就应该是这样的。 nell nell的想法 - 知乎 https://www.zhihu.com/pin/1436263244222189568 3. Dont look up最后那场晚餐很不错，和人定胜天的灾难片比起来，这种…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 1,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-785f1af6f254b5fc66e56e08ba776483_720w.jpg?source=7e7ef6e2",
                        "width": 200,
                        "height": 200,
                        "token": "v2-785f1af6f254b5fc66e56e08ba776483",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxj124vkCSCuja8SkgIlCgk1MDc1MDk3MzMSCjI2MjU4MjYyOTMYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-08-14T11:51:37+08:00"
    },
    {
        "content": {
            "id": 552739919,
            "title": "那些制作CLI可能用到的轮子(续)",
            "type": "article",
            "excerpt_title": "之前写过一篇 [文章: 那些制作CLI可能用到的轮子] 花开花落花落花开，随着前端工程化业务越来越复杂，功能越来越强大，涉及面越来越光，这里再补充一些CLI可能需要用到的轮子，方便进行开发。 figlethttps://github.com/patorjk/figlet.js figlet用来生成ASCII字符画，比如 const figlet = require(&#39;figlet&#39;) figlet(&#39;Hello World!!&#39;, function (err, data) { if (err) { console.log(&#39;Something went wrong...&#39;); console.dir(err); return; } conso…",
            "url": "https://zhuanlan.zhihu.com/p/552739919",
            "image_url": "https://picx.zhimg.com/v2-400befa8f9d69f18356aa1c630a91faa_r.jpg?source=172ae18b",
            "created": 1660306641,
            "updated": 1672905208,
            "author": {
                "id": "424f5347ab8f98aac1267daab69976fa",
                "url_token": "anli-li-69",
                "name": "AnLi",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-a1f6df099bf9a72c7ad624240b576ec6_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-a1f6df099bf9a72c7ad624240b576ec6.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/424f5347ab8f98aac1267daab69976fa",
                "user_type": "people",
                "headline": "",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"I9r9OPD4\">之前写过一篇</p><a href=\"https://zhuanlan.zhihu.com/p/128990729\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-7b2a8f9efe7e9bc668dee2ce9fb0010d_qhd.jpg\" data-image-width=\"1920\" data-image-height=\"1280\" class=\"internal\">AnLi：那些制作CLI可能用到的轮子</a><p data-pid=\"LDreQRf4\">花开花落花落花开，随着前端工程化业务越来越复杂，功能越来越强大，涉及面越来越光，这里再补充一些CLI可能需要用到的轮子，方便进行开发。</p><h2>figlet</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/patorjk/figlet.js\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/patorjk/figl</span><span class=\"invisible\">et.js</span><span class=\"ellipsis\"></span></a><p data-pid=\"DJ31Wwx8\">figlet用来生成ASCII字符画，比如</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">figlet</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;figlet&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nx\">figlet</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World!!&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;Something went wrong...&#39;</span><span class=\"p\">);</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">dir</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n</code></pre></div><p data-pid=\"bX2Mef8T\">能生成</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d1e03306924a89623469703547c556e5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1684\" data-rawheight=\"1156\" class=\"origin_image zh-lightbox-thumb\" width=\"1684\" data-original=\"https://pic2.zhimg.com/v2-d1e03306924a89623469703547c556e5_r.jpg\" data-original-token=\"v2-6b4aa52409485641c59c7947b133fd2d\"/></figure><p data-pid=\"TfQSeKdI\">还可以设置各种字体、宽度等配置，通过下面的代码获得支持的字体</p><div class=\"highlight\"><pre><code class=\"language-text\">figlet.fonts(function (err, fonts) {\n  if (err) {\n    console.log(&#39;something went wrong...&#39;);\n    console.dir(err);\n    return;\n  }\n  console.dir(fonts);\n});</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ff66c55607a6eee31727ea9381b1dfcb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1684\" data-rawheight=\"1192\" class=\"origin_image zh-lightbox-thumb\" width=\"1684\" data-original=\"https://pic4.zhimg.com/v2-ff66c55607a6eee31727ea9381b1dfcb_r.jpg\" data-original-token=\"v2-dec9c5b201f9b413b43ff684d6448710\"/></figure><p data-pid=\"mDso29vK\">挑一个字体</p><div class=\"highlight\"><pre><code class=\"language-text\">figlet.text(&#39;FooBar&#39;, {\n  font: &#39;Banner&#39;\n}, function (err, data) {\n  if (err) {\n    console.log(&#39;Something went wrong...&#39;);\n    console.dir(err);\n    return;\n  }\n  console.log(data);\n});</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-105048fe974f6849aff6783b249e29d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1684\" data-rawheight=\"1192\" class=\"origin_image zh-lightbox-thumb\" width=\"1684\" data-original=\"https://pic3.zhimg.com/v2-105048fe974f6849aff6783b249e29d6_r.jpg\" data-original-token=\"v2-83621f40b581e2b26a511e74de762414\"/></figure><h2>boxen</h2><p data-pid=\"9L-TLB6r\">它用来生成一个盒子图案</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/sindresorhus/boxen\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - sindresorhus/boxen: Create boxes in the terminal</a><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"nx\">boxen</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;boxen&#39;</span><span class=\"p\">;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">boxen</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello World&#39;</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n  <span class=\"nx\">backgroundColor</span><span class=\"o\">:</span> <span class=\"s1\">&#39;gray&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">borderColor</span><span class=\"o\">:</span> <span class=\"s1\">&#39;red&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">textAlignment</span><span class=\"o\">:</span> <span class=\"s1\">&#39;center&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">padding</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">margin</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n  <span class=\"nx\">borderStyle</span><span class=\"o\">:</span> <span class=\"s1\">&#39;classic&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">title</span><span class=\"o\">:</span> <span class=\"s1\">&#39;Title&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">titleAlignment</span><span class=\"o\">:</span> <span class=\"s1\">&#39;center&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">width</span><span class=\"o\">:</span> <span class=\"mi\">30</span><span class=\"p\">,</span>\n  <span class=\"nx\">height</span><span class=\"o\">:</span> <span class=\"mi\">10</span>\n<span class=\"p\">}))</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0f37ad0dc5c8490248fa5dfa12cb4133_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1684\" data-rawheight=\"1192\" class=\"origin_image zh-lightbox-thumb\" width=\"1684\" data-original=\"https://pic4.zhimg.com/v2-0f37ad0dc5c8490248fa5dfa12cb4133_r.jpg\" data-original-token=\"v2-45a33b5dcfe38a6a33c26e465124fd57\"/></figure><p data-pid=\"zbKsyIwh\">要注意的是，这个库只导出了<code>ES Module</code>的写法</p><div class=\"highlight\"><pre><code class=\"language-text\">export {default as _borderStyles} from &#39;cli-boxes&#39;;</code></pre></div><p data-pid=\"Yo_bbkAz\"> 所以在使用的时候也只能通过<code>import</code>来导入，记得在<code>package.json</code>里配置<code>type</code>为<code>module</code>。 </p><h2>node-emoji</h2><p data-pid=\"4JFNbcpT\">这个自然是提供了各种emoji图标</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/omnidan/node-emoji\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/omnidan/node</span><span class=\"invisible\">-emoji</span><span class=\"ellipsis\"></span></a><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">emoji</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;node-emoji&#39;</span><span class=\"p\">)</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;coffee&#39;</span><span class=\"p\">))</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">which</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;coffee&#39;</span><span class=\"p\">)))</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;:fast_forward:&#39;</span><span class=\"p\">))</span> \n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">emojify</span><span class=\"p\">(</span><span class=\"s1\">&#39;I :heart: :coffee:!&#39;</span><span class=\"p\">))</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">random</span><span class=\"p\">())</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">search</span><span class=\"p\">(</span><span class=\"s1\">&#39;cof&#39;</span><span class=\"p\">))</span> \n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">unemojify</span><span class=\"p\">(</span><span class=\"s1\">&#39;I ❤️  &#39;</span><span class=\"p\">))</span> \n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">))</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">find</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizza&#39;</span><span class=\"p\">))</span> \n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">hasEmoji</span><span class=\"p\">(</span><span class=\"s1\">&#39; &#39;</span><span class=\"p\">))</span> \n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">hasEmoji</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizza&#39;</span><span class=\"p\">))</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">strip</span><span class=\"p\">(</span><span class=\"s1\">&#39;⚠️ 〰️ 〰️ low disk space&#39;</span><span class=\"p\">))</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;⚠️ 〰️ 〰️ low disk space&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">emoji</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"sb\">`</span><span class=\"si\">${</span><span class=\"nx\">emoji</span><span class=\"p\">.</span><span class=\"nx\">key</span><span class=\"si\">}</span><span class=\"sb\">:`</span><span class=\"p\">))</span>\n</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d2f666578332cb38c991d4d5c444570b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1684\" data-rawheight=\"1192\" class=\"origin_image zh-lightbox-thumb\" width=\"1684\" data-original=\"https://pic4.zhimg.com/v2-d2f666578332cb38c991d4d5c444570b_r.jpg\" data-original-token=\"v2-c6c294a09d94393e9504ff09012cd953\"/></figure><h2>recursive-readdir</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jergason/recursive-readdir\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/jergason/rec</span><span class=\"invisible\">ursive-readdir</span><span class=\"ellipsis\"></span></a><p data-pid=\"lwnRrLYC\">这个库用来递归读文件的目录以及子目录</p><div class=\"highlight\"><pre><code class=\"language-text\">const recursive = require(&#34;recursive-readdir&#34;);\n\nrecursive(&#34;some/path&#34;, [&#34;foo.cs&#34;, &#34;*.html&#34;], function (err, files) {\n  console.log(files);\n});</code></pre></div><h2>ncp</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/AvianFlu/ncp\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-667d61928e32089cb12f490a3d43d96a_qhd.jpg\" data-image-width=\"1200\" data-image-height=\"600\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - AvianFlu/ncp: Asynchronous recursive file copying with Node.js.</a><p data-pid=\"iyyTUdvT\">这个库用来递归拷贝文件</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">ncp</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;ncp&#39;</span><span class=\"p\">).</span><span class=\"nx\">ncp</span><span class=\"p\">;</span>\n\n<span class=\"nx\">ncp</span><span class=\"p\">.</span><span class=\"nx\">limit</span> <span class=\"o\">=</span> <span class=\"mi\">16</span><span class=\"p\">;</span>\n\n<span class=\"nx\">ncp</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">,</span> <span class=\"nx\">destination</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"k\">return</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">);</span>\n <span class=\"p\">}</span>\n <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;done!&#39;</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div><h2>exec-sh</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/tsertkov/exec-sh\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/tsertkov/exe</span><span class=\"invisible\">c-sh</span><span class=\"ellipsis\"></span></a><p data-pid=\"d_V8Vil8\"><code>exec-sh</code>是对<code>child_process.spawn</code>做了一些改进的封装。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">execSh</span><span class=\"p\">(</span><span class=\"s2\">&#34;echo hello exec-sh &amp;&amp; bash&#34;</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"nx\">cwd</span><span class=\"o\">:</span> <span class=\"s2\">&#34;/home&#34;</span> <span class=\"p\">},</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">){</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&#34;Exit code: &#34;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">code</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div><h2>clui</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/nathanpeck/clui\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - nathanpeck/clui: Command Line UI toolkit for Node.js</a><p data-pid=\"hqwzvgZn\">cliui提供了如下一些工具</p><ul><li data-pid=\"__8G6EOm\">Gauges</li><li data-pid=\"WKJzlXQ2\">Progress Bars</li><li data-pid=\"S65j2jBX\">Sparklines</li><li data-pid=\"ShuWXjkn\">Spinners </li></ul><p data-pid=\"rEOVbjgH\">直接来看绘制效果</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8034c8492c903fa32a7d92302a0f77e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1684\" data-rawheight=\"1192\" class=\"origin_image zh-lightbox-thumb\" width=\"1684\" data-original=\"https://pic1.zhimg.com/v2-8034c8492c903fa32a7d92302a0f77e8_r.jpg\" data-original-token=\"v2-b4a4dbaeebdf5f1f7e54eaeb1c28366f\"/></figure><p data-pid=\"10SHIGj1\">似乎柱状图已经绘制不出来了，看了一下更新时间，作者也已经好久没更新了，不过我觉得Sparklines不错，我估计柱状图的效果和它差不多。</p><h2>leven</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/sindresorhus/leven\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/sindresorhus</span><span class=\"invisible\">/leven</span><span class=\"ellipsis\"></span></a><p data-pid=\"zsDi4XnF\"><code>leven</code> 是基于Levenshtein Distance(莱文斯坦距离)算法用来比较两个字符串有多少不同，，乍一看好像没什么用，但是如果你们用过Vue CLI的话应该知道有那么一种情况</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bf8330c7764261369384014a94ec9f28_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2674\" data-rawheight=\"1336\" class=\"origin_image zh-lightbox-thumb\" width=\"2674\" data-original=\"https://pic1.zhimg.com/v2-bf8330c7764261369384014a94ec9f28_r.jpg\" data-original-token=\"v2-19c4e0d8b3c456cc8458d780da776cca\"/></figure><p data-pid=\"pG4HHnEl\">当打错命令的时候会很智能的提示，这个背后就是用了<code>leven</code>。 </p><h2>easy-table</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/eldargab/easy-table\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/eldargab/eas</span><span class=\"invisible\">y-table</span><span class=\"ellipsis\"></span></a><p data-pid=\"C0f0Ug38\"><code>easy-table</code>用来绘制一些数据表格，自己直接打印的话对齐逻辑是个大问题，好在这款工具都帮我们考虑到了。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ce74b79974ac000e9d68607bfd9987b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1684\" data-rawheight=\"1156\" class=\"origin_image zh-lightbox-thumb\" width=\"1684\" data-original=\"https://pic4.zhimg.com/v2-ce74b79974ac000e9d68607bfd9987b3_r.jpg\" data-original-token=\"v2-8e6399798335edc16224588f8fbaf546\"/></figure><h2>prompts</h2><a href=\"https://link.zhihu.com/?target=https%3A//github.com/terkelg/prompts\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-81bcb87423c0a841ea437f69263dc52b_qhd.jpg\" data-image-width=\"1280\" data-image-height=\"640\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - terkelg/prompts: ❯ Lightweight, beautiful and user-friendly interactive prompts</a><p data-pid=\"82b_81ru\"><code>prompts</code>很像<code>inquirer</code>，在<code>create-vite</code>里也适用到了<code>prompts</code></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-30678faa1d1208e26003ef1dbd19b213_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1396\" data-rawheight=\"594\" class=\"origin_image zh-lightbox-thumb\" width=\"1396\" data-original=\"https://pic4.zhimg.com/v2-30678faa1d1208e26003ef1dbd19b213_r.jpg\" data-original-token=\"v2-70b8daac62d7abdbe4b15b5470d1b751\"/></figure><p data-pid=\"olwLeN_M\">用来生成如下的对话</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d86cc19ba8922e7c57d921ba12f6f1e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1684\" data-rawheight=\"1156\" class=\"origin_image zh-lightbox-thumb\" width=\"1684\" data-original=\"https://pic4.zhimg.com/v2-d86cc19ba8922e7c57d921ba12f6f1e7_r.jpg\" data-original-token=\"v2-fff0702bb3287e3698ab7102e11e20d8\"/></figure><p data-pid=\"ZXDE_9du\"><code>prompts</code>的优点是直接通过配置对象属性就能生成复杂的对话，它能支持如下这些对话类型，足够日常使用了</p><ul><li data-pid=\"lSv_-IJP\">text</li><li data-pid=\"LRWD6iDV\">password</li><li data-pid=\"SVSPYDeG\">invisible</li><li data-pid=\"KY3Pm9pF\">number</li><li data-pid=\"ZwRyvgMm\">confirm</li><li data-pid=\"WdwP0XfJ\">list</li><li data-pid=\"CM0fxvD9\">toggle</li><li data-pid=\"PJd1XZbW\">select</li><li data-pid=\"Mjn312r9\">multiselect</li><li data-pid=\"qc18DlYZ\">autocompleteMultiselect</li><li data-pid=\"i-CavHeH\">autocomplete</li><li data-pid=\"cnBB11Vy\">date</li></ul><h2>集成开发工具库</h2><p data-pid=\"oX_Slp9W\">如果不想关注很多开发细节，专注于CLI的业务逻辑开发，那么可以采用CLI的一些集成开发工具库</p><h3>cac</h3><p data-pid=\"UktJvyeq\"><code>Vite</code>就是用的它 </p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/cacjs/cac\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/cacjs/cac</span><span class=\"invisible\"></span></a><h3>oclif</h3><a href=\"https://link.zhihu.com/?target=https%3A//oclif.io/docs/introduction\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Introduction · oclif: The Open CLI Framework</a><h3>Caporal</h3><a href=\"https://link.zhihu.com/?target=https%3A//caporal.io/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Caporal</a><h3>plop</h3><a href=\"https://link.zhihu.com/?target=https%3A//plopjs.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Plop: Consistency Made Simple</a><h3>yargs</h3><a href=\"https://link.zhihu.com/?target=http%3A//yargs.js.org/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-35ad5c31929a0213e3e84823ad9261bc_qhd.jpg\" data-image-width=\"500\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">yargs</a><h2>编写CLI其他注意的地方</h2><h3>判断Node.js的版本</h3><p data-pid=\"5gBpnBoB\"><code>Node.js</code> 的版本判断还是很重要的，毕竟<code>npm</code>的依赖良莠不齐，兼容性是一个很大的问题。</p><p data-pid=\"vXpBcFKA\">一般会在<code>package.json</code>里配置<code>engines</code>属性，但是官方说</p><blockquote data-pid=\"HoTvjr87\"> Unless the user has set the <code>engine-strict</code> config flag, this field is advisory only and will only produce warnings when your package is installed as a dependency.</blockquote><p data-pid=\"W2eDqhF-\">就是说这个只是一个建议，除非设上<code>engine-strict</code>标识，但我好像就没看到过哪个工程设上这个标识，因此如果想要做出一个健壮的CLI，那么在业务逻辑里判断<code>Node.js</code> 的版本很有必要。</p><h3>前端工程化的插件化思想</h3><p data-pid=\"QooMdZ8d\">理论依据自然是开闭原则，我们也不可能把所有的逻辑都放入到CLI中，成熟的框架、库都有自己的一套插件机制，比如<code>webpack</code>、<code>vite</code>、<code>postcss</code>、<code>babel</code>等，像<code>postcss</code>就只提供了AST，真正干活的全在插件里。</p><p data-pid=\"j7-kA0AK\">有了插件机制，就能对CLI灵活扩展，同时也能解耦复用，比如像<code>vite</code>就做到了兼容<code>rollup</code>。 再把眼光放到后端，中间件思想其实也是一种插件，<code>koa</code>里只提供了基本的框架，逻辑都在中间件里了。 </p><p data-pid=\"RALUWgv3\">一句话，应该把软件做成像乐高一样的玩具。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f22d9116a896abec33fe5909175659ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"533\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-f22d9116a896abec33fe5909175659ec_r.jpg\" data-original-token=\"v2-1ec401fde42d8de4e90c0ab85bb7d7de\"/></figure><p></p><p></p><p></p>",
            "voteup_count": 17,
            "column": {
                "id": "morethanfrontend",
                "type": "column",
                "url_token": "morethanfrontend",
                "title": "不止前端",
                "url": "https://zhuanlan.zhihu.com/morethanfrontend",
                "created": 1527576124,
                "updated": 1591348012,
                "description": "",
                "image_url": "https://picx.zhimg.com/v2-8a721043ee0ff832735ff9e4973e2e11_720w.jpg?source=d16d100b"
            },
            "comment_count": 1
        },
        "created": "2022-08-12T20:17:21+08:00"
    },
    {
        "content": {
            "id": 2612136522,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/319305957/answer/2612136522",
            "created_time": 1659716713,
            "updated_time": 1659716713,
            "question": {
                "type": "question",
                "id": 319305957,
                "title": "会多门编程语言的你，最推荐哪3-5门语言？",
                "question_type": "normal",
                "created": 1554729094,
                "updated_time": 1554823269,
                "url": "https://www.zhihu.com/question/319305957",
                "is_deleted": false
            },
            "author": {
                "id": "b7734862be39b570374b4d89e058666a",
                "url_token": "luochen1990",
                "name": "罗宸",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/562f312b18bc2096bf968a46c6360e90_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/562f312b18bc2096bf968a46c6360e90.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/b7734862be39b570374b4d89e058666a",
                "user_type": "people",
                "headline": "诗意的代码献给你 https://github.com/luochen1990",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://picx.zhimg.com/v2-af15b5183ecda0ab90575ab7806574dd_r.png?source=0df5f383",
                        "night_mode_url": "https://pic1.zhimg.com/v2-9123c17253753b776c412a2f56e1c53a_r.png?source=0df5f383"
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 318,
            "comment_count": 31,
            "thanks_count": 45,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"LoeZR82a\"><b>Python3 / JavaScript / Lua 三门选一门。</b></p><p data-pid=\"5lblD7VY\">作为动态类型语言，它们入门上手简单，很适合作为初学者的第一门语言。具体选哪门可以根据你当前的任务需要决定，比如：如果写写脚本做数据处理可以选 Python3，如果写网页（Web）应用可以选 JavaScript，如果是因为想写游戏插件才选编程，那么可以选择 Lua，不知道怎么选就盲选 Python3 （why not js？ 因为 js 的设计有一些历史遗留问题，初学者容易踩坑而不必要地浪费一些时间精力，而 Python 经历了 Python2 到 Python3 的蜕变，类似遗留问题要少很多）。</p><p data-pid=\"AAnHZMl0\">同时呢它们也足够灵活，支持函数作为一等公民，有很高的上限。特别是 Python3 和 TypeScript（可以简单理解为 JavaScript 的进阶版）还提供了静态类型系统，可以无缝升级到 “类型驱动开发”。</p><p data-pid=\"byCQ9dPS\">并且，学过一门动态类型语言之后，学其他这类语言会非常快，例如 ruby，bash，php 等等，都能即用即学（边用边查语法和库函数就行）。</p><p data-pid=\"XfzTI53y\"><b>Haskell / Ocaml 两者选一门。</b></p><p data-pid=\"ng9q9nAV\">首先我要声明一下，这两门语言都很冷门，我做这样的推荐并非从实用（或者功利）的角度出发，而是单纯从学习的角度出发。</p><p data-pid=\"N57Foinw\">为什么？因为你已经学过一门动态类型语言了，如果你（比如，花了两到三年）把你的第一门动态类型语言学得足够好，那么高阶函数之类的应该早就玩过了，map，filter 等等声明式的写法也已经让你非常地高产，你现在应该是对编程这件事处于空前自信的一个阶段。</p><p data-pid=\"-DbOASxL\">但是，你会发现，虽然你总是能很快地把代码撸完，但同时，不可避免地，会发现自己的代码多多少少会有 bug，各种各样的 bug，这个 “bug 不断” 的状况总让你有些惆怅，虽然你知道自己很牛，但好像又不是如自己想象中那般无所不能，当代码达到一定规模，复杂到一定程度的时候，你隐隐约约知道自己可能会掌控不了，但又不知道该如何破局。</p><p data-pid=\"4s4YhrUg\">你现在最缺的是什么？你需要有人告诉你，缺失的那块拼图是什么！</p><p data-pid=\"YaZHGNBT\">现在我告诉你，这块拼图就是系统地进行自顶向下的软件设计的能力。而学习这两门语言，就有可能给你补上这块拼图。它们有严谨的类型系统，有代数数据类型，有 typeclass/trait，first class module，你可以依赖它们对复杂软件进行自顶向下的建模，并且能够信任它们会帮你扫除一些平时难以发现的自我矛盾之处。</p><p data-pid=\"tXLUyVjU\">当然，因为这块拼图是如此的珍贵，获取他们的道路也绝非平坦，你会经历从 “因无知而自信” 到 “因知道而谦卑” 的痛苦过程，你的自我评价会突而一落千丈。当看着别人噼里啪啦堆砌着代码时，你总要停下来想想，这样写是对的么？它停机么？它的某某性质能得到保证么？这里面有哪个核心概念是值得被拎出来仔细思考它的建模方式的？我要怎么把我想确保的性质给它编码到类型里？。。。</p><p data-pid=\"9l0DMHiB\"><b>C / C++ / Rust 三选一。</b></p><p data-pid=\"lX8LPVR8\">这三门都是面向计算机底层的语言。为什么要学这些让人痛苦的东西？</p><p data-pid=\"yxD55eXQ\">因为之前的学习过程里，你已经在高度抽象的层次里待得很久了，你站得越高，就越应该恐高，毕竟在计算机的世界里，魔鬼总是隐藏在细节之中。</p><p data-pid=\"KrPrZPwP\">从这里开始，你将了解到很多计算机实现里的隐秘角落，它们可能琐碎，丑陋，因为脱去了高级语言漂亮的外表，暴露出来的就是一个个晦涩的机器细节。但同时，它们也是高楼大厦的根基。</p><p data-pid=\"FGd0vfrb\">我得承认，学这些语言，并不比学其他语言 更能提高你把控复杂软件和大型项目的能力，但 —— 能想象出你手头摆弄的每一个变量在内存中的布局，能猜到编译器对你写的每一行代码可能会做什么样的优化，能想象流经网卡的每一个字节都经历了怎样一波三折的旅途，能感受到屏幕上的每一个画面中的每一个像素都是CPU，内存和显卡通力合作努力的成果 —— 能在脑内模拟计算机底层的运作过程，这本身就很有意思不是么？</p><p data-pid=\"KcTlyv5W\">自此，你就可以自信得去搭建你的高楼大厦，再也不用恐高了。</p>",
            "excerpt": "Python3 / JavaScript / Lua 三门选一门。作为动态类型语言，它们入门上手简单，很适合作为初学者的第一门语言。具体选哪门可以根据你当前的任务需要决定，比如：如果写写脚本做数据处理可以选 Python3，如果写网页（Web）应用可以选 JavaScript，如果是因为想写游戏插件才选编程，那么可以选择 Lua，不知道怎么选就盲选 Python3 （why not js？ 因为 js 的设计有一些历史遗留问题，初学者容易踩坑而不必要地浪费一些时间精力，…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjKlMjdCSDMsOwPkgIlCgk1MDUwMjAwNjISCjI2MTIxMzY1MjIYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-08-06T00:25:13+08:00"
    },
    {
        "content": {
            "id": 549937594,
            "title": "一句话谈低代码搭建和配置化渲染。",
            "type": "article",
            "excerpt_title": "是我在跟后端和产品解释为什么某些功能不应该用搭建和配置化的时候讲的一段话： coding的能力更全，form的能力有限，那么设计之初就应该把coding作为“用户用我们的工具做什么事”的大前提，把form作为做这些事的过程中的体验优化，而不是“让这件事变成在form上完成的工作”，最后还得回退到coding兜底。如果从“用户通过coding在平台上做什么事”的角度来确定产品的根基，在这个基础上做优化，就不会出现可视化配置限制了本来…",
            "url": "https://zhuanlan.zhihu.com/p/549937594",
            "image_url": "",
            "created": 1659606355,
            "updated": 1659606559,
            "author": {
                "id": "e3c4bac02e4176f64fdac80bac25f81c",
                "url_token": "su-han-ruo",
                "name": "苏晗若",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/5da1fac1d2bd60067650e1815534d068_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/5da1fac1d2bd60067650e1815534d068.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/e3c4bac02e4176f64fdac80bac25f81c",
                "user_type": "people",
                "headline": "程序媛/工人阶级/反父权 一颗想要成为人的矿",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-77f7b64084b4b8ed9ac61b54eabf3e60_r.png",
                        "night_mode_url": "https://pic1.zhimg.com/v2-0ce2d154d697fd7d911f2415405a0496.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"RFCAF6Ra\">是我在跟后端和产品解释为什么某些功能不应该用搭建和配置化的时候讲的一段话：</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"1KiP15wX\">coding的能力更全，form的能力有限，那么设计之初就应该把coding作为“用户用我们的工具做什么事”的大前提，把form作为做这些事的过程中的体验优化，而不是“让这件事变成在form上完成的工作”，最后还得回退到coding兜底。如果从“用户通过coding在平台上做什么事”的角度来确定产品的根基，在这个基础上做优化，就不会出现可视化配置限制了本来应有的能力的结果。</p><p data-pid=\"gKltpGc5\">可视化搭建/配置化渲染，本身是以「牺牲代码的灵活性和表达力」，通过「约束使用场景」，来「隐藏一些不必暴露的代码复杂度」，从而「提供一个学习成本较低的实现业务功能的方案」。换句话说，它的价值在于「学习成本低」，「能力边界明确」，它面向的用户是「不希望写代码」的用户。而低代码之所以低代码而不是无代码，恰恰就是因为它并不能做到无代码，这就意味着它「客观上能力边界是不明确的」或者「配置化和可视化的表达力不足以覆盖需求」。这就导致它的重点应该放在「不破坏coding的能力」的前提下，「优化多工种协作的工作流」，而不是拍脑袋决定一个可视化的工作模式，再往上加coding的扩展能力。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"VbRwLS-G\">emmm好像不知一句话。但这确实是我写在一条评论里的（</p>",
            "voteup_count": 27,
            "comment_count": 5
        },
        "created": "2022-08-04T17:45:55+08:00"
    },
    {
        "content": {
            "id": 2605352218,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/542182159/answer/2605352218",
            "created_time": 1659426173,
            "updated_time": 1670869984,
            "question": {
                "type": "question",
                "id": 542182159,
                "title": "李寻欢的飞刀是用过就扔还是重复再用？那他用完了怎么办？",
                "question_type": "normal",
                "created": 1657250382,
                "updated_time": 1657550792,
                "url": "https://www.zhihu.com/question/542182159",
                "is_deleted": false
            },
            "author": {
                "id": "58b9511e921df7e9017dd8a199647fb0",
                "url_token": "huo-feng-feng-34",
                "name": "霍风风",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-8b0cd3d75b1c7c7c080b3f5017623608_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-8b0cd3d75b1c7c7c080b3f5017623608.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/58b9511e921df7e9017dd8a199647fb0",
                "user_type": "people",
                "headline": "公众号：征文约稿小助手",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19556423",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19556423",
                                "name": "文学",
                                "avatar_url": "https://picx.zhimg.com/v2-5621bb73af30de7549ed3ee385ea423c_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19615372",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19615372",
                                "name": "小说创作",
                                "avatar_url": "https://pic1.zhimg.com/65a33c700_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "文学等 2 个话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "文学等 2 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19556423",
                                    "token": "19556423",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19556423",
                                    "name": "文学",
                                    "avatar_path": "v2-5621bb73af30de7549ed3ee385ea423c",
                                    "avatar_url": "https://picx.zhimg.com/v2-5621bb73af30de7549ed3ee385ea423c_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19615372",
                                    "token": "19615372",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19615372",
                                    "name": "小说创作",
                                    "avatar_path": "65a33c700",
                                    "avatar_url": "https://pic1.zhimg.com/65a33c700_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "文学等 2 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19556423",
                                    "token": "19556423",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19556423",
                                    "name": "文学",
                                    "avatar_path": "v2-5621bb73af30de7549ed3ee385ea423c",
                                    "avatar_url": "https://picx.zhimg.com/v2-5621bb73af30de7549ed3ee385ea423c_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19615372",
                                    "token": "19615372",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19615372",
                                    "name": "小说创作",
                                    "avatar_path": "65a33c700",
                                    "avatar_url": "https://pic1.zhimg.com/65a33c700_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "https://picx.zhimg.com/v2-ddf24b69e1b68549d7a46cd16bb31797_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 2307,
            "comment_count": 483,
            "thanks_count": 194,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"Oe8qkpmH\">一看就是读文不仔细，《小李飞刀》原著中李寻欢曾亲口说过他飞刀的来源：</p><blockquote data-pid=\"GmNTu-oL\">李寻欢沉默了半晌，望着手里的小刀，缓缓道：“<b>我这把小刀只不过是大冶的铁匠，花了三个时辰打好的</b>，但百晓生品评天下兵器，小李飞刀却排名第三！”<br/>青衣人长长叹了口气，道：“你的意思是说，兵器的好坏并没有关系，主要的是要看用兵器的是什么人。”<br/>李寻欢微笑道：“阁下是聪明人。”<br/>——《小李飞刀》第8章</blockquote><p data-pid=\"ifF0ukVI\">以文中基调来看，小李飞刀之所以能排在天下兵器谱前三，并不是因为兵器本身有多珍贵，或者打造方法有多精良，而是因为<b>使用者武功太牛逼</b>。</p><p data-pid=\"cZIYLbsH\"><b>飞刀只是一个普通铁匠花三个时辰打造的，根本没什么特殊之处</b>，所以补充起来很容易。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-257e5d386fa8132b98a0d04aaf801d26_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"435\" data-original-token=\"v2-ddf24b69e1b68549d7a46cd16bb31797\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-ab62bb653010996bdc1c37373c331bce_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"580\" data-original=\"https://pica.zhimg.com/v2-257e5d386fa8132b98a0d04aaf801d26_r.jpg?source=2c26e567\"/></figure><p data-pid=\"lqcAC6Wz\">但是，即使飞刀的锻造手艺很普通，李寻欢也不是用过就扔的。</p><p data-pid=\"k7Vl6rYf\">在李寻欢前往冷香小筑遭遇黑衣人时，原文中有明确描述：</p><blockquote data-pid=\"NEAgOSTN\">李寻欢箭一般退了出去，身子几乎已和地面平行，他的手似乎并没有什么动作，但<b>飞刀已射出去。</b><br/>刀光一闪，如黑夜中的流星！<br/>黑衣人忽然狂吼一声，冲天飞起，凌空转了个身，“飞鸟投林”向梅林后如飞奔逃了出去。<br/>李寻欢脚跟一点地，身子就站了起来，他像是很悠闲地站在那里，居然并没有追赶之意。<br/>但那黑衣人还未冲出梅林，就已倒下！<br/>李寻欢摇着头，叹了口气，缓缓踱过去，雪地上已多了一串鲜血，那黑衣人就倒在血痕的尽头。<br/>他双手捂着自己的咽喉，鲜血还不停地自指缝间泌出，那柄发亮的小刀，已被拔了出来，就抛在他身旁。<br/><b>李寻欢俯身拾起了他的刀</b>，也看到了黑衣人那张已因痛苦而痉挛的脸，他失望地叹息了一声，喃喃道：“你既非梅花盗，何苦要逼我出手呢？”</blockquote><p data-pid=\"YZossPbY\">加粗的两句话，一个是李寻欢飞刀出手的描述，另一个则是回收。</p><p data-pid=\"pgCtw09s\">“<b>李寻欢俯身拾起了他的刀</b>”说明每次出刀之后，他还会去拾回（一般是战斗结束）。不过有的读者跟题主有一样的疑惑，他会不会用完？</p><p data-pid=\"XuqK526o\">一来李寻欢作为天下第一刀，能值得他出刀的基本是顶级武林高手，既然是顶级高手，那么人数肯定就少，所以他的飞刀完全够用。</p><p data-pid=\"PmMLlIwq\">除非遇到大兵团战斗，一对一模式下没有飞刀用完的概念一说。即使是遇到敌人众多的情况，也不会用完，因为普通的小喽啰根本不值得他出刀，他的武功完全可以搞定小兵，留着他的飞刀杀最关键的人。</p><p data-pid=\"lteEcBXK\">二来作为天下第一刀，只要是他参战过的，基本都是获胜的结局。换句话说，不存在慌不择路丢失飞刀的情况。他的敌人都没有资格打扫战场，因为全挂了。</p><p data-pid=\"JpYEZOFn\"><b>李寻欢只要每局都胜利，获胜后所有的飞刀都能捡回来</b>，更不存在用完的情况。</p><p class=\"ztext-empty-paragraph\"><br/></p><hr/><p data-pid=\"05IW7JvE\">喜欢写作的朋友，欢迎关注微信公众号：<b>征文约稿小助手</b>（可直接搜索ID：yitiaoyingyugou），会及时更新<b>写作技巧、投稿信息</b>等，还可领取<b>写作大礼包</b>一份哟~</p>",
            "excerpt": "一看就是读文不仔细，《小李飞刀》原著中李寻欢曾亲口说过他飞刀的来源： 李寻欢沉默了半晌，望着手里的小刀，缓缓道：“我这把小刀只不过是大冶的铁匠，花了三个时辰打好的，但百晓生品评天下兵器，小李飞刀却排名第三！” 青衣人长长叹了口气，道：“你的意思是说，兵器的好坏并没有关系，主要的是要看用兵器的是什么人。” 李寻欢微笑道：“阁下是聪明人。” ——《小李飞刀》第8章以文中基调来看，小李飞刀之所以能排在天下…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 1,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-ddf24b69e1b68549d7a46cd16bb31797_720w.jpg?source=7e7ef6e2",
                        "width": 580,
                        "height": 435,
                        "token": "v2-ddf24b69e1b68549d7a46cd16bb31797",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxiaiqraCSD22LsnkgIlCgk1MDM3ODUyMDMSCjI2MDUzNTIyMTgYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-08-02T15:42:53+08:00"
    },
    {
        "content": {
            "id": 2591181567,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/540701328/answer/2591181567",
            "created_time": 1658711449,
            "updated_time": 1658715019,
            "question": {
                "type": "question",
                "id": 540701328,
                "title": "如何看待近期银行一刀切大量冻结银行卡？",
                "question_type": "normal",
                "created": 1656537611,
                "updated_time": 1656537612,
                "url": "https://www.zhihu.com/question/540701328",
                "is_deleted": false
            },
            "author": {
                "id": "9c62291d19c80d739f7bd60e382f6e1d",
                "url_token": "san-qi-81",
                "name": "三七",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/9afe86536_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/9afe86536.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/9c62291d19c80d739f7bd60e382f6e1d",
                "user_type": "people",
                "headline": "码字的",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 970,
            "comment_count": 264,
            "thanks_count": 78,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"WJcMyi3T\">这么多年来，网购和微信支付宝的使用，让大家几乎没有保留现金的习惯了，一毛钱也存银行里。</p><p data-pid=\"S7LD1WNH\">攻守之势异也——以前是银行求你存钱，现在是你反正要存银行里，不是这家就那家。</p><p data-pid=\"r6SHB-vt\">这才是银行有底气一刀切瞎折腾的最根本原因。</p><p data-pid=\"HzmfYmRy\">反正你钱得在银行系统里，这里折腾完你还得陪着笑脸转到那里去。</p><p data-pid=\"TWLsc89M\">什么反诈行动什么上级什么公安部什么都是次要的，</p><p data-pid=\"J3nulIJS\">你看这么多人被瞎折腾，也没几个人真下决心把钱都取出来以后用现金。</p><p data-pid=\"PRdWO71T\">所以继续折腾呗，无非让你多跑几趟，多半夜十二点记得爬起来卡着限额慢慢转账。</p><p data-pid=\"VPj2ZGeo\">反正你钱总要存在中国银行体系里。</p><p data-pid=\"86mR-IUd\">啥时候瞎折腾才能结束？</p><p data-pid=\"ST6NSjUx\">就算全部诈骗犯都被抓起来枪毙，也不会结束的。</p><p data-pid=\"47S0Q62G\">要结束只有两个可能，</p><p data-pid=\"d2lKVi4M\">一是……不提了，这可能性趋近于零。</p><p data-pid=\"di-i-YKU\">二是啥时候大家被折腾的实在受不了了，宁可把钱都取出来用现金的越来越多，总量达到让老爷们肉疼的数额。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"ZyiibB8B\">另外，从这个事情能看出，坚决不能用所谓的数字人民币。</p><p data-pid=\"DuX4Trdl\">——上一次当是我们没经验，不可能上第二次当！</p><p></p><p></p>",
            "excerpt": "这么多年来，网购和微信支付宝的使用，让大家几乎没有保留现金的习惯了，一毛钱也存银行里。 攻守之势异也——以前是银行求你存钱，现在是你反正要存银行里，不是这家就那家。 这才是银行有底气一刀切瞎折腾的最根本原因。 反正你钱得在银行系统里，这里折腾完你还得陪着笑脸转到那里去。 什么反诈行动什么上级什么公安部什么都是次要的， 你看这么多人被瞎折腾，也没几个人真下决心把钱都取出来以后用现金。 所以继续折腾呗，无…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxj/lcnTCSDGzKcnkgIlCgk1MDEyMDg1NjISCjI1OTExODE1NjcYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-07-25T09:10:49+08:00"
    },
    {
        "content": {
            "id": 542379032,
            "title": "巧妙利用TypeScript模块声明帮助你解决声明拓展",
            "type": "article",
            "excerpt_title": "写在开头网络上大部分 Typescript 教程都在告诉大家如何使用类型体操更好的组织你的代码。 但是针对于声明文件（Declaration Files）的相关内容却是少之又少。 这篇文章中，我会带你着重讲述 TypeScript Declaration Files 的用法让你的 TS 功底更上一层。 TypeScript 模块解析规则在开始之前，我们先来聊聊 TS 文件的加载策略。 掌握加载策略才会让我们实实在在的避免一些看起来毫无头绪的问题。 TS 中的加载策略分为两种方式，…",
            "url": "https://zhuanlan.zhihu.com/p/542379032",
            "image_url": "https://picx.zhimg.com/v2-59b5ee7e55280b341e1378bfe4b049a0_r.jpg?source=172ae18b",
            "created": 1657958096,
            "updated": 1657958096,
            "author": {
                "id": "363a402f0eb026b557815617f3b535e9",
                "url_token": "a-man-man-66",
                "name": "WangHaoyu",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-2abf48d51521badb1d171139fe982810_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-2abf48d51521badb1d171139fe982810.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/363a402f0eb026b557815617f3b535e9",
                "user_type": "people",
                "headline": "Web Frontend Engineer",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic2.zhimg.com/v2-ff7df831f3ed5b05f4b931ce9a1021e5_r.png",
                        "night_mode_url": "https://pic1.zhimg.com/v2-beb231037070c2ea09216d7b8b5732b3.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pica.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "腾讯 前端工程师"
                    }
                ],
                "badge_v2": {
                    "title": "腾讯 前端工程师",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "腾讯 前端工程师",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "腾讯 前端工程师",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<h2><b>写在开头</b></h2><p data-pid=\"7e7-tzmH\">网络上大部分 Typescript 教程都在告诉大家如何使用类型体操更好的组织你的代码。</p><p data-pid=\"3CfB59im\">但是针对于声明文件（Declaration Files）的相关内容却是少之又少。</p><p data-pid=\"9MBo8CiW\">这篇文章中，我会带你着重讲述 TypeScript Declaration Files 的用法让你的 TS 功底更上一层。</p><h2><b>TypeScript 模块解析规则</b></h2><p data-pid=\"tA2sQQ3C\">在开始之前，我们先来聊聊 TS 文件的加载策略。</p><blockquote data-pid=\"4sw_W7SJ\"> 掌握加载策略才会让我们实实在在的避免一些看起来毫无头绪的问题。<br/> </blockquote><p data-pid=\"lh-TY_4Z\">TS 中的加载策略分为两种方式，分别为<b>相对路径</b>和<b>绝对路径</b>两种方式。</p><h2><b>首先我们来看看相对模块的加载方式：</b></h2><p data-pid=\"feQHpnOL\"><b>TypeScript 将 TypeScript 源文件扩展名（<code>.ts</code>、<code>.tsx</code>和<code>.d.ts</code>）覆盖在 Node 的解析逻辑上。同时TypeScript 还将使用<code>package.json</code>named中的一个字段<code>types</code>来镜像目的<code>&#34;main&#34;</code>- 编译器将使用它来查找“主”定义文件以进行查阅。</b></p><p data-pid=\"5fG4qlDg\">比如这样一段代码:</p><div class=\"highlight\"><pre><code class=\"language-text\">// 假设当前执行路径为 /root/src/modulea\n\nimport { b } from &#39;./moduleb&#39;\n</code></pre></div><p data-pid=\"OUfVs_68\">此时，TS 对于 <code>./moduleb</code> 的加载方式其实是和 node 的模块加载机制比较类似：</p><ul><li data-pid=\"_0M-fePy\">首先寻找 <code>/root/src/moduleb.ts</code> 是否存在，如果存在使用该文件。<br/> </li><li data-pid=\"E88uMd1A\">其次寻找 <code>/root/src/moduleb.tsx</code> 是否存在，如果存在使用该文件。<br/> </li><li data-pid=\"DboVgpYh\"><b>其次寻找 <code>/root/src/moduleb.d.ts</code> 是否存在，如果存在使用该文件。</b><br/> </li><li data-pid=\"TDhILjG2\">其次寻找 <code>/root/src/moduleB/package.json</code>，如果 package.json 中指定了一个<code>types</code>属性的话那么会返回该文件。<br/> </li><li data-pid=\"i1kL618i\">如果上述仍然没有找到，之后会查找 <code>/root/src/moduleB/index.ts</code>。<br/> </li><li data-pid=\"qj0U2VMn\">如果上述仍然没有找到，之后会查找 <code>/root/src/moduleB/index.tsx</code>。<br/> </li><li data-pid=\"FCk0RFUj\"><b>如果上述仍然没有找到，之后会查找 <code>/root/src/moduleB/index.d.ts</code>。</b><br/> </li></ul><p data-pid=\"oN_QMLxy\">可以看到 TS 中针对于相对路径查找的规范是和 nodejs 比较相似的，需要注意我在上边已经额外加粗了。</p><p data-pid=\"_yTxwGS_\">Ts 在寻找文件路径时，在某些条件下是会按照目录去查找 <code>.d.ts</code> 的。</p><h2><b>非相对导入</b></h2><p data-pid=\"MZ87M4cU\">在了解了相对路径的加载方式之后，我们来看看关于所谓的非相对导入是 TS 是如何解析的。</p><p data-pid=\"oOJolFxL\">我们可以稍微回想一下平常在 nodejs 中对于非相对导入的模块是如何被 nodejs 解析的。没错，它们的规则大同小异。</p><p data-pid=\"b4HQo_3n\">比如下面这段代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">// 假设当前文件所在路径为 /root/src/modulea\n\nimport { b } from &#39;moduleb&#39;\n</code></pre></div><ul><li data-pid=\"VlGWJqq6\"><code>/root/src/node_modules/moduleB.ts</code></li><li data-pid=\"FGmWmVrx\"><code>/root/src/node_modules/moduleB.tsx</code></li><li data-pid=\"bGICIgbB\"><code>/root/src/node_modules/moduleB.d.ts</code></li><li data-pid=\"avtFZR3q\"><code>/root/src/node_modules/moduleB/package.json</code>（如果它指定了一个<code>types</code>属性）</li><li data-pid=\"Ayeihx9L\"><code>/root/src/node_modules/@types/moduleB.d.ts</code></li><li data-pid=\"NAzufVP9\"><code>/root/src/node_modules/moduleB/index.ts</code></li><li data-pid=\"ZDAiAPUj\"><code>/root/src/node_modules/moduleB/index.tsx</code></li><li data-pid=\"2frdqvXq\"><code>/root/src/node_modules/moduleB/index.d.ts</code></li></ul><p data-pid=\"BrTKg9My\">typescript 针对于非相对导入的 moduleb 会按照以上路径去当前路径的 node_modules 中去查找，如果上述仍然未找到。</p><p data-pid=\"HhUXxUUZ\">此时，TS 仍然会按照 node 的模块解析规则，继续向上进行目录查找，比如又会进入上层目录 <code>/root/node_modules/moduleb.ts ...</code>进行查找，直到查找到顶层 node_modules 也就是最后一个查找的路径为 <code>/node_modules/moduleB/index.d.ts</code> 如果未找到则会抛出异常 <code>can&#39;t find module &#39;moduleb&#39;</code>。</p><blockquote data-pid=\"E-ezKCmc\"> 上述查找规则是基于 tsconfig.json 中指定的 <code>moduleResolution:node</code>，当然还有 <code>classic</code> 不过 <code>classic</code> 规则是 TS 为了兼容老旧版本，现代代码中基本可以忽略这个模块查找规则。<br/> </blockquote><h3><b>解析 <code>*.d.ts</code> 声明</b></h3><p data-pid=\"65iA-wez\">上边我们聊了聊 TS 中对于加载两种不同模块的方式，可是日常开发中，经常有这样一种场景。</p><p data-pid=\"ZHZx2FXG\">比如，在 TS 项目中我们需要引入一些后缀为 png 的图片资源，那么此时 TS 是无法识别此模块的。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6c530e35bd8ed9921558b1825d6f6127_b.jpg\" data-size=\"normal\" data-rawwidth=\"1020\" data-rawheight=\"234\" class=\"origin_image zh-lightbox-thumb\" width=\"1020\" data-original=\"https://pic4.zhimg.com/v2-6c530e35bd8ed9921558b1825d6f6127_r.jpg\" data-original-token=\"v2-daf4a3ea3da59824930ee67696d21418\"/><figcaption>image.png</figcaption></figure><p data-pid=\"ZndbXh_H\">解决方法也非常简单，通常我们会在项目的根目录中也就是和 TsConfig.json 平级的任意目录中添加对应的声明文件 <code>image.d.ts</code>：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2b74283ff324253ede524552129626eb_b.png\" data-size=\"normal\" data-rawwidth=\"2194\" data-rawheight=\"226\" class=\"origin_image zh-lightbox-thumb\" width=\"2194\" data-original=\"https://pic4.zhimg.com/v2-2b74283ff324253ede524552129626eb_r.jpg\" data-original-token=\"v2-2b74283ff324253ede524552129626eb\"/><figcaption>image.png</figcaption></figure><p data-pid=\"xqBUZCyb\">可以看到，通过定义声明文件的方式解决了我们的问题。</p><p data-pid=\"QvNwWyLT\"><b>可是，你有思考过按照上边的 typescript 对于模块的加载方式，它是怎么加载到我们声明的 <code>image.d.ts</code> 的吗？</b></p><p data-pid=\"OYom5YQJ\">这是一个有意思的问题，按照上边我们提到的模块加载机制要么按照相对模块机制查找，要么按照对应的 node 模块解析机制进行查找。</p><p data-pid=\"c32XLcsR\">怎么会查找到定义在项目目录中的 <code>image.d.ts</code> 呢？</p><hr/><p data-pid=\"-zn4AUGv\">本质上我们引入任何模块时，加载机制无非就是我们上边提到的两种加载方式。</p><p data-pid=\"9weOjTFV\"><b>不过，这里有一个细小的点即是 ts 编译器会处理 tsconfig.json 的 <code>file、include、exclude</code> 对应目录下的所有 .d.ts 文件：</b></p><p data-pid=\"CZL8ANA0\">简单来说，ts 编译器首先会根据 tsconfig.json 中的上述三个字段来加载项目内的 <code>d.ts</code> 全局模块声明文件，自然由于 &#39;.png&#39; 文件会命中全局加载的 <code>image.d.ts</code> 中的 声明的 <code>module</code> 所以会找到对应的文件。</p><blockquote data-pid=\"-pK7MJWV\"> include 在未指定 file 配置下默认为 <code>**</code>，表示 tsc 解析的目录为当前 tsconfig.json 所在的项目文件夹。<br/> <br/> 关于 file、include、exclude 三者的区别我就不详细展开了，本质上都是针对于 TSC 编译器处理的范围。后续如果大伙有兴趣，我可以单独开一个 tsconfig.json 的文章去详细解释配置。<br/> </blockquote><h2><b>详解 typescript 声明文件</b></h2><p data-pid=\"GOQZhZDf\">上边我们讲述了 TypeScript 是如何来加载我们的模块的，在了解了上述前置知识后。</p><p data-pid=\"G8Es6V5I\">让我们一起来看看编写一份声明文件必备的知识储备吧！</p><blockquote data-pid=\"j6E6_krj\"> 大多数同学的想法可能是“我又不编写库声明，学这个没什么用处。”<br/> </blockquote><p data-pid=\"y8VekjY7\">其实不是这样的，学会类型声明文件的编写并不仅仅是为了编写库声明。大多数时候，我们在日常业务中对于第三方库需要做一些自定一的扩展扩充。</p><p data-pid=\"t1SphEv7\">大多数时候一些库提供的泛型参数其实并不能很好的满足我们的需求，所以利用 <code>*.d.ts</code> 扩展第三方库在业务中是非常常见的需求。</p><p data-pid=\"rutePZSQ\">废话不多说了～我们正式进入正文。</p><h2><b>什么是声明文件</b></h2><p data-pid=\"m7_F_eUu\">为了照顾一些接触 TS 并不是很多的小伙伴，我们简单聊聊什么是 Typescript 声明文件。</p><p data-pid=\"AL_fhKJH\"><b>通常我们将有关于一些全局变量或者引入的模块对应的类型声明语句存在一个单独的文件，这样的文件就被成为声明文件。</b></p><blockquote data-pid=\"rQba9IKG\"> 注意，声明文件一定要以 <code>[name].d.ts</code> 结尾。<br/> </blockquote><p data-pid=\"t6bGmhk8\">比如我们在项目内定义一个 <code>jquery.d.ts</code> 时:</p><div class=\"highlight\"><pre><code class=\"language-text\">// src/jQuery.d.ts\n\n// 定义全局变量 jQuery，它是一个方法\ndeclare var jQuery: (selector: string) =&gt; any;\n</code></pre></div><p data-pid=\"1f0T56Bu\">之后我们在项目内的 TS 文件中就可以在全局自由的使用声明的 <code>jQuery</code> 了：</p><div class=\"highlight\"><pre><code class=\"language-text\">jQuery(&#39;#root&#39;)\n</code></pre></div><p data-pid=\"Y-NeLQGy\">正常来说，ts 会解析项目中所有的 <code>*.ts</code> 文件，当然也包含以 <code>.d.ts</code> 结尾的文件。所以当我们将 <code>jQuery.d.ts</code> 放到项目中时，其他所有 <code>*.ts</code> 文件就都可以获得 <code>jQuery</code> 的类型定义了。</p><blockquote data-pid=\"i4fJHxrc\"> 当然，上边我们提过到关于 tsc 文件的编译范围。所以如果找不到情况可以自行检查对应的 <code>files</code>、<code>include</code> 和 <code>exclude</code> 配置。<br/> </blockquote><h2><b>全局变量</b></h2><ul><li data-pid=\"DqJqf0j_\"><b><code><a href=\"https://link.zhihu.com/?target=https%3A//ts.xcatliu.com/basics/declaration-files.html%23declare-var\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">declare var</a></code></b> 声明全局变量</li><li data-pid=\"x5qEgh1s\"><b><code><a href=\"https://link.zhihu.com/?target=https%3A//ts.xcatliu.com/basics/declaration-files.html%23declare-function\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">declare function</a></code></b> 声明全局方法</li><li data-pid=\"egxuCNDM\"><b><code><a href=\"https://link.zhihu.com/?target=https%3A//ts.xcatliu.com/basics/declaration-files.html%23declare-class\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">declare class</a></code></b> 声明全局类</li><li data-pid=\"7I_TJJ8H\"><b><code><a href=\"https://link.zhihu.com/?target=https%3A//ts.xcatliu.com/basics/declaration-files.html%23declare-enum\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">declare enum</a></code></b> 声明全局枚举类型</li><li data-pid=\"A7WrHPoA\"><b><code><a href=\"https://link.zhihu.com/?target=https%3A//ts.xcatliu.com/basics/declaration-files.html%23declare-namespace\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">declare namespace</a></code></b> 声明（含有子属性的）全局对象</li><li data-pid=\"J4QaQ9R-\"><b><code><a href=\"&lt;/code&gt;htt&lt;code&gt;ps:/&lt;/code&gt;/ts.xcatliu.com/basics/declaration-files.html#interface-he-type\">interface 和 type</a></code></b> 声明全局类型</li></ul><p data-pid=\"cKdgCmYI\">上述罗列了 6 中全局声明的语句，我们可以通过 <b><code>declare</code> 关键字结合对应的类型，从而在任意 <code>.d.ts</code> 中进行全局类型的声明。</b></p><p data-pid=\"0i0jvzON\">比如我们以 namespace 举例：</p><p data-pid=\"H8W-M0b-\">假设我们的业务代码中存在一个全局的模块对象 MyLib，它拥有一个名为 makeGreeting 的方法以及一个 numberOfGreetings 数字类型属性。</p><p data-pid=\"g8aJJ_Fi\">当我们想在 TS 文件中使用该 global 对象时：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cda779d9c6f76a79cfc47f3491dd5497_b.jpg\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"338\" class=\"origin_image zh-lightbox-thumb\" width=\"902\" data-original=\"https://pic4.zhimg.com/v2-cda779d9c6f76a79cfc47f3491dd5497_r.jpg\" data-original-token=\"v2-0ee33a9de64168d8c51d6ef98a42ee90\"/><figcaption>image.png</figcaption></figure><blockquote data-pid=\"lIPKMPEI\"> TS 会告诉我们找不到 <code>myLib</code>。<br/> </blockquote><p data-pid=\"c4AzW_K8\">原因其实非常简单，typescript 文件中本质上是对于我们的代码进行<b>静态类型检查</b>。当我们使用一个没有类型定义的全局变量时，TS 会明确告知找不到该模块。</p><p data-pid=\"qcEmb5Oh\">当然，我们可以选择在该文件内部对于该模块进行定义并且进行导出，Like this:</p><div class=\"highlight\"><pre><code class=\"language-text\">export namespace myLib {\n  export let makeGreeting: (string: string) =&gt; void\n  export let numberOfGreetings: number\n}\n\nlet result = myLib.makeGreeting(&#34;hello, world&#34;);\nconsole.log(&#34;The computed greeting is:&#34; + result);\nlet count = myLib.numberOfGreetings;\n</code></pre></div><p data-pid=\"fVwjDZ8v\">上述的代码的确在模块文件内部定义了一个 myLib 的命名空间，在该文件中我们的确可以正常的使用 myLib。</p><p data-pid=\"P9dYBmjl\">可是，在别的模块文件中我们如果仍要使用 myLib 的话，也就意味着我们需要手动再次 import 该 <code>namespace</code>。</p><p data-pid=\"c0nmjpGg\">这显然是不合理的，所以 TS 为我们提供了全局的文件声明 <code>.d.ts</code> 来解决这个问题。</p><p data-pid=\"En3ef1LF\"><b>我们可以通过在 ts 的编译范围内声明 <code>[name].d.ts</code> 来定义全局的对象的命名空间。</b> 比如：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-95e9c7befc32fcf9b7bf899c762cc7b1_b.png\" data-size=\"normal\" data-rawwidth=\"2514\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"2514\" data-original=\"https://pic2.zhimg.com/v2-95e9c7befc32fcf9b7bf899c762cc7b1_r.jpg\" data-original-token=\"v2-95e9c7befc32fcf9b7bf899c762cc7b1\"/><figcaption>image.png</figcaption></figure><p data-pid=\"RxUV1jFk\">可以看到上图的右边，此时当我们使用 <code>myLib</code> 时， TS 可以正确的识别到他是 myLib 的命名空间 。</p><blockquote data-pid=\"tj5FrSnu\"> 如果你的 <code>[name].d.ts</code> 不生效，那么仔细检查你的 <code>tsconfig.json -&gt; include</code> 设置～<br/> </blockquote><p data-pid=\"gVoW-413\">虽然说随着 ES6 的普及，ts 文件中的 namespcae 已经逐渐被淘汰掉了。</p><p data-pid=\"kKztTDb2\">但是在类型声明文件中使用 <code>declare namespace xxx</code> 声明类似全局对象仍然是非常实用的方法。</p><h2><b>声明合并</b></h2><p data-pid=\"RUiGVF08\">上边我们讲述了如何在类型声明文件中进行全局变量的声明，接下来其他部分之前我们先来聊聊 TS 中的声明合并。</p><h3><b>接口自动合并</b></h3><div class=\"highlight\"><pre><code class=\"language-text\">interface Props {\n  name: string;\n}\n\ninterface Props {\n  age: 18;\n}\n\nconst me: Props = {\n  name: &#39;wang.haoyu&#39;,\n  age: 18\n}\n</code></pre></div><p data-pid=\"dld8TqsM\">上述的代码一目了然，在多个相同名称的 interface 中<b>同名的 interface 声明会被自动合并</b>。</p><p data-pid=\"7nk8emCl\">但是需要注意的是，无论哪种声明合并必须遵循<b>合并的属性的类型必须是唯一的</b>，比如：</p><div class=\"highlight\"><pre><code class=\"language-text\">interface Props {\n  name: string;\n}\n// 后续属性声明必须属于同一类型。属性“name”的类型必须为“string”，但此处却为类型“18”\ninterface Props {\n  name: 18;\n}\n</code></pre></div><h3><b>declare 合并</b></h3><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4b6fc691ce85fb9f028a1e6756db29f8_b.jpg\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"592\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-4b6fc691ce85fb9f028a1e6756db29f8_r.jpg\" data-original-token=\"v2-7b5bf41363c040695c7290b7829a38c3\"/><figcaption>image.png</figcaption></figure><p data-pid=\"f0LcUKt7\">这里可以看到在右边的声明文件中进行了名为 axios 全局命名空间声明，同时在左边的文件中我们使用了 <code>axios.Props</code> 类型。</p><p data-pid=\"WJSxv2ch\"><b>其实本质上就是相同命名空间内的接口合并，当然我们可以利用 declare 声明合并达到更多的效果。后续我们会详细提到。</b></p><h2><b>Npm 包类型声明</b></h2><p data-pid=\"c7jcWBZa\">接下来我们来看看关于 Npm 包类型的声明文件如何编写。</p><p data-pid=\"67gpkW9X\">上述我们提到过 TS 是如何加载对应 npm 包的声明文件的。</p><p data-pid=\"VacsDZi5\">现在我们假设一种场景下，我们目前使用了 axios 这个库。假设目前这个库并没有对应的类型声明文件，显然当我们在代码中引入这个库时候一定是会报错的。</p><p data-pid=\"DR7yA1X9\">此时，关于 Npm 包类型的声明会很好的帮助我们来解决这个问题：</p><p data-pid=\"sGSnVCEk\">首先我们在上述说到的，当我们在代码中执行</p><div class=\"highlight\"><pre><code class=\"language-text\">import axios from &#39;axios&#39;\n</code></pre></div><p data-pid=\"U4rre5tu\">它会按照路径依次去查找，正常来说它会去 node_modules 下的各个路径区查找对应的模块。那么我们需要将自定义的声明文件书写在 node_modules 中去吗？</p><p data-pid=\"rYtz4nzy\">这显然是不合理的，因为 node_modules 中的目录是非常不稳定的。</p><p data-pid=\"GCCU7str\">此时，我们可以首先在 tsconfig.json 中配置对应的 alias 别名配置，达到引入 axios 时自动帮我们找到对应的 <code>.d.ts</code> 文件声明文件：</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n  &#34;compilerOptions&#34;: {\n    &#34;baseUrl&#34;: &#34;./&#34;,\n    &#34;paths&#34;: {\n      &#34;axios&#34;: [\n        &#34;types/axios.d.ts&#34;\n      ]\n    }\n  }\n}\n</code></pre></div><blockquote data-pid=\"A1X-Jr1D\"> 这里我们配置了寻找的别名。<br/> </blockquote><p data-pid=\"Sr-vdVpw\">之后，我们在项目的根目录（<code>tsconfig.json</code>）平级新建一个 <code>types/axios.d.ts</code>。</p><div class=\"highlight\"><pre><code class=\"language-text\">// axios.d.ts\n// 利用 export 关键字导出 name 变量\nexport const name: string;\n</code></pre></div><p data-pid=\"7mEv9CUd\">此时在项目中的任意文件，我们就可以使用导出的 name 变量：</p><div class=\"highlight\"><pre><code class=\"language-text\">import { name } from &#39;axios&#39;\nconsole.log(name) // string 类型的 name 变量\n</code></pre></div><blockquote data-pid=\"5sgXJ7BE\"> 当然你可以为模块内添加对应各种各样的类型声明。<br/> </blockquote><p data-pid=\"y5dXCvh7\">上述我们就实现了一个简单的模块定义文件，关于 npm 包类型的声明有以下几种语法需要和大家强调下：</p><ul><li data-pid=\"Rpa8DFk1\"><b><code><a href=\"https://link.zhihu.com/?target=https%3A//ts.xcatliu.com/basics/declaration-files.html%23export\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">export</a></code></b> 导出变量</li><li data-pid=\"zdk70DxD\"><b><code><a href=\"https://link.zhihu.com/?target=https%3A//ts.xcatliu.com/basics/declaration-files.html%23export-namespace\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">export namespace</a></code></b> 导出（含有子属性的）对象</li><li data-pid=\"DxVb8y9C\"><b><code><a href=\"https://link.zhihu.com/?target=https%3A//ts.xcatliu.com/basics/declaration-files.html%23export-default\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">export default</a></code></b> ES6 默认导出</li><li data-pid=\"rJsnTphK\"><b><code><a href=\"https://link.zhihu.com/?target=https%3A//ts.xcatliu.com/basics/declaration-files.html%23export-1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">export =</a></code></b> commonjs 导出模块</li></ul><h3><b>export 关键字</b></h3><p data-pid=\"F_SdfUyA\">需要额外留意的是npm 包的声明文件与全局变量的声明文件有很大区别。</p><p data-pid=\"WNzs4I97\"><b>在 npm 包的声明文件中，使用 <code>declare</code> 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 <code>export</code> 导出，然后在使用方 <code>import</code> 导入后，才会应用到这些类型声明。</b></p><p data-pid=\"ODtk7HPY\"><code>export</code> 的语法与普通的 ts 中的语法类似，需要注意的是<code>d.ts</code>的声明文件中禁止定义具体的实现。</p><p data-pid=\"y8_s-FbJ\">比如：</p><div class=\"highlight\"><pre><code class=\"language-text\">// types/axios/index.d.ts\n\n// 导入变量\nexport const name: string;\n// 导出函数\nexport function createInstance(): AxiosInstance;\n// 导出接口 接口导出省略 export\ninterface AxiosInstance {\n  // ...\n  data: any;\n}\n// 导出 Class\nexport class Axios {\n  constructor(baseURL: string);\n}\n// 导出枚举\nexport enum Directions {\n  Up,\n  Down,\n  Left,\n  Right\n}\n</code></pre></div><p data-pid=\"_hL_UXbw\">此时我们在 TS 文件中就可以自由的使用这些导出的变量和类型了：</p><div class=\"highlight\"><pre><code class=\"language-text\">import { name, createInstance, AxiosInstance, Axios, Directions } from &#39;axios&#39;\n\nconsole.log(name) // string\n// 通过 createInstance 返回 AxiosInstance 实例\nconst instance: AxiosInstance = createInstance()\n\nnew Axios(&#39;/&#39;)\n\nconst a = Directions.Up\n</code></pre></div><h3><b>混用 <code>declare</code> 和 <code>export</code></b></h3><p data-pid=\"1TP6VeoF\">上边我们提到过，<b>在 npm 包的声明文件中，使用 <code>declare</code> 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。</b></p><p data-pid=\"9LAAInoT\">同样上边的声明我们可以改成通过 declare + export 声明：</p><div class=\"highlight\"><pre><code class=\"language-text\">// types/axios/index.d.ts\n\n// 变量\ndeclare const name: string;\n// 函数\ndeclare function createInstance(): AxiosInstance;\n// 接口 接口可以省略 export\ninterface AxiosInstance {\n  // ...\n  data: any;\n}\n// Class\ndeclare class Axios {\n  constructor(baseURL: string);\n}\n// 枚举\nenum Directions {\n  Up,\n  Down,\n  Left,\n  Right\n}\n\nexport {\n  name, createInstance, AxiosInstance, Axios, Directions\n}\n</code></pre></div><h3><b><code>export namespace</code></b></h3><p data-pid=\"2jP8-NYh\">与 <code>declare namespace</code> 类似，<code>export namespace</code> 用来导出一个拥有子属性的对象：</p><div class=\"highlight\"><pre><code class=\"language-text\">// types/foo/index.d.ts\n\n// 导出一个 Axios 的命名空间\nexport namespace Axios {\n  const name: string;\n  namespace AxiosInstance {\n    function getUrl(): string;\n  }\n}\n\n// xx.ts\nimport { Axios } from &#39;axios&#39;\n\nAxios.AxiosInstance.getUrl()\n</code></pre></div><h3><b><code>export default</code></b></h3><blockquote data-pid=\"0m72Rgve\"> 在 ES6 模块系统中，使用 <code>export default</code> 可以导出一个默认值，使用方可以用 <code>import foo from &#39;foo&#39;</code> 而不是 <code>import { foo } from &#39;foo&#39;</code> 来导入这个默认值。<br/> </blockquote><p data-pid=\"QqGyATt8\">同样，在类型声明文件中，我们可以通过 <code>export default</code> 用来导出默认值的类型。比如：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-eb596b9cc09b0291b293fe529c6598dd_b.png\" data-size=\"normal\" data-rawwidth=\"2222\" data-rawheight=\"222\" class=\"origin_image zh-lightbox-thumb\" width=\"2222\" data-original=\"https://pic2.zhimg.com/v2-eb596b9cc09b0291b293fe529c6598dd_r.jpg\" data-original-token=\"v2-eb596b9cc09b0291b293fe529c6598dd\"/><figcaption>image.png</figcaption></figure><blockquote data-pid=\"-t6jeJTc\"> 需要额外注意的是只有 <code>function</code>、<code>class</code> 和 <code>interface</code> 可以直接默认导出，其他的变量需要先定义出来，再默认导出。<br/> </blockquote><h3><b><code>export =</code></b></h3><p data-pid=\"MUEUX10O\">当然，我们上述提到的都是关于 ESM 相关的类型声明文件。</p><p data-pid=\"kAxb1qaC\">TS 中的类型声明文件同样为我们提供了使用 <code>export = </code>的 CJS 模块相关语法：</p><div class=\"highlight\"><pre><code class=\"language-text\">// types/axios.d.ts\nexport = axios\ndeclare function axios(): void\n\nimport axios = require(&#39;axios&#39;)\n</code></pre></div><p data-pid=\"D6JNmncG\">可以看到上述的代码，我们通过 <code>export = axios</code> 定义了一个相关的 CJS 模块语法。</p><p data-pid=\"OCix9HO1\"><b>需要额外注意的是在 ts 中若要导入一个使用了<code>export =</code>的模块时，必须使用TypeScript提供的特定语法<code>import module = require(&#34;module&#34;)</code>。</b></p><p data-pid=\"iiUMGzOx\">在日常业务中，不可避免我们会碰到一些相关 commonjs 规范语法的模块，那么当我们需要扩充对应的模块或者为该模块声明定义文件时，就需要使用到上述的 <code>export = </code> 这种语法了。</p><p data-pid=\"pn-7C1Lt\">当然，<code>export =</code> 这种语法不仅仅可以支持 cjs 模块。它也同样是 ts 为了 ADM 提出的模块兼容声明。有兴趣的朋友可以详细查阅<b><a href=\"https://link.zhihu.com/?target=https%3A//www.typescriptlang.org/docs/handbook/modules.html%23export--and-import--require\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">官方文档</a></b>。</p><h2><b>扩展全局变量</b></h2><p data-pid=\"u1bjSOZn\">在类型声明文件中对于全局变量的扩展非常简单，我们仅仅需要利用声明合并的方式即可对于全局变量进行扩展。</p><p data-pid=\"oz8QWtyr\">举个例子，假设我们想为 string 类型的变量扩展一个 hello 的方法。正常扩展后全局调用该方法 TS 是会提示错误的。</p><p data-pid=\"jBi-bNmS\">此时就需要我们通过类型定义文件来进行全局变量的扩展：</p><div class=\"highlight\"><pre><code class=\"language-text\">// types/index.d.ts 利用接口合并，扩展全局的 String 类型\n// 为它添加一个名为 hello 的方法定义\ninterface String {\n  hello: () =&gt; void;\n}\n</code></pre></div><p data-pid=\"mIl8oDTp\">此后，我们就可以直接在全局中自由的调用该 hello 方法了：</p><div class=\"highlight\"><pre><code class=\"language-text\">&#39;a&#39;.hello()\n</code></pre></div><h2><b>在 Npm 包、UMD 中扩展全局变量</b></h2><p data-pid=\"6TOIqHpi\">在声明文件中扩展全局变量利用合并声明的方式可以非常容易的进行扩展。</p><p data-pid=\"eCJQwIEI\">而在 Npm 包、UMD 的声明文件中如果我们想扩展全局变量那应该如何做呢。</p><p data-pid=\"KAGeSP-t\">上边我们说到过，<b>任何声明文件中只要存在 <code>export/import</code> 关键字的话，该声明文件中的 declare 都会变成模块内的声明而非全局声明。</b></p><p data-pid=\"JjW-Tg-5\">比如，我们在自己定义的 axios.d.ts 中：</p><div class=\"highlight\"><pre><code class=\"language-text\">// types/axios.d.ts\n\ndeclare function axios(): string;\n\n// 此时声明的 interface 为模块内部的String声明\ndeclare interface String {\n  hello: () =&gt; void;\n}\n\nexport default axios;\n\n// index.ts\n&#39;a&#39;.hello() // 类型“&#34;a&#34;”上不存在属性“hello”\n</code></pre></div><p data-pid=\"vYyRvSSK\">此时内部声明的 String 接口扩展被认为是模块内部的接口拓展，我们在全局中使用是会提示错误的。</p><p data-pid=\"KPd1Hnxa\">针对于 Npm 包中需要进行全局声明的话，TS 同样为我们提供了 <code>declare global</code> 来解决这个问题：</p><div class=\"highlight\"><pre><code class=\"language-text\">// types/axios.d.ts\n\ndeclare function axios(): string;\n\n// 模块内部通过 declare global 进行全局声明\n// declare global 内部的声明语句相当于在全局进行声明\ndeclare global {\n  interface String {\n    hello: () =&gt; void;\n  }\n}\n\nexport default axios;\n\n// index.ts\n&#39;a&#39;.hello() // correct\n</code></pre></div><h2><b>扩展 Npm 包类型</b></h2><p data-pid=\"9jr4xM8j\">大多数时候我们使用一些现成的第三方库时都已经有对应的类型声明文件了，但有些情况下我们需要对于第三方库中某些属性进行额外的扩展或者修改。</p><p data-pid=\"Rl7UCs0M\">直接去修改 node_modules 中的第三方 TS 类型声明文件显然是不合理的，那么此时就需要我们通过类型声明文件扩展第三方库的声明。</p><p data-pid=\"xqYVH6GQ\">同样 TypeScript 提供给了我们一种 <code>declare module</code> 的语法来进行模块的声明。</p><p data-pid=\"vYH9XhsV\">通常在我们可以利用 <code>declare module</code> 语法在进行新模块的声明的同时，也可以使用它来对于已有第三方库进行类型定义文件的扩展。</p><p data-pid=\"kmiX3gKz\">在进行模块扩展时，需要额外注意<b>如果是需要扩展原有模块的话，需要在类型声明文件中先引用原有模块，再使用 <code>declare module</code> 扩展原有模块</b>。</p><p data-pid=\"u9jzBd5p\">比如，通常我们在项目中使用 <code>axios</code> 库时，希望在请求的 config 中支持传递一些自定义的参数，从而在全局拦截器中进行拿到我们的自定义参数。</p><p data-pid=\"68jZajhy\">如果直接在 TS 文件下进行属性赋值和取值的话，TS 会抛出异常的：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e496637533c74954ce3b9331bc72a7bb_b.jpg\" data-size=\"normal\" data-rawwidth=\"1052\" data-rawheight=\"278\" class=\"origin_image zh-lightbox-thumb\" width=\"1052\" data-original=\"https://pic4.zhimg.com/v2-e496637533c74954ce3b9331bc72a7bb_r.jpg\" data-original-token=\"v2-fd600c6c5d86ceb7fb262380f1cbfff6\"/><figcaption>image.png</figcaption></figure><p data-pid=\"OrMxH56i\">同样，我们可以利用 <code>declare module</code> 来进行第三方 NPM 包的扩展，我们可以看到 axios 请求中第二个参数的类型为 <code>AxiosRequestConfig</code> 类型。 </p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-537163123053122de7f2345e8b00e79a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1592\" data-rawheight=\"246\" class=\"origin_image zh-lightbox-thumb\" width=\"1592\" data-original=\"https://pic3.zhimg.com/v2-537163123053122de7f2345e8b00e79a_r.jpg\" data-original-token=\"v2-537163123053122de7f2345e8b00e79a\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"q01sUxhI\">那么我们仅仅需要对于这个类型进行扩展就 OK 了：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d03922204d8611b24317a6fb08faf50e_b.jpg\" data-size=\"normal\" data-rawwidth=\"798\" data-rawheight=\"402\" class=\"origin_image zh-lightbox-thumb\" width=\"798\" data-original=\"https://pic3.zhimg.com/v2-d03922204d8611b24317a6fb08faf50e_r.jpg\" data-original-token=\"v2-083d993ab8a0b840ac23279c10e7e64a\"/><figcaption>image.png</figcaption></figure><p data-pid=\"GVe8moj-\">此时，我们在回到刚才的代码中可以发现无论我们是取值还是赋值，TS 都可以很好的帮我们进行出类型推断。</p><blockquote data-pid=\"ho4678PQ\"> 当然，这只是一个非常简单的例子。但是这个场景我相信对于大家来说都非常常见，不过模块的扩展本质上大同小异～<br/> </blockquote><h2><b>三斜线指令</b></h2><p data-pid=\"SneEkTzh\">其实三斜线指令在是 TS 在早期版本中为了描述多个模块之间的相互依赖关系产生的语法。</p><p data-pid=\"FVr1DRKg\">目前，随着 ESM 模块语法的推广，官方也不再建议使用三斜线指令来声明模块依赖了。</p><p data-pid=\"4Si_Kl0Y\">但是目前来说三斜线指令的存在仍然有它独特的作用，接下来我们一起来看看。</p><h3><b><code>/// &lt;reference types=&#34;...&#34; /&gt;</code></b></h3><p data-pid=\"OrMr266z\">所谓  <code>/// &lt;reference types=&#34;...&#34; /&gt;</code> 是三斜线指令的一种声明方式，这个指令是用来声明依赖的。</p><p data-pid=\"pI_WI59M\">表示该声明文件依赖了 <code>types=&#39;...&#39;</code> 中对于 <code>...</code> 的依赖，在进行了上述的声明后我们就可以在自己的声明文件中使用<code>types=&#39;...&#39;</code>中声明的变量了。</p><p data-pid=\"W5OTfHm4\">比如：</p><div class=\"highlight\"><pre><code class=\"language-text\">/// &lt;reference types=&#34;jquery&#34; /&gt;\n</code></pre></div><p data-pid=\"u7tcoVmC\">上述代码中，我们在声明文件的开头使用了三斜线指令。那么此时我们就可以在接下来的文件中使用 <code>jquery</code> 声明文件中声明的变量了。</p><p data-pid=\"iJhmECrw\">比如 <code>jquery</code> 中声明了对应的 <code>declare namespace JQuery</code> ，那么我们同样可以在自己的声明文件中使用这个依赖:</p><div class=\"highlight\"><pre><code class=\"language-text\">/// &lt;reference types=&#34;jquery&#34; /&gt;\n\ndeclare function foo(options: JQuery.AjaxSettings): string;\n</code></pre></div><p data-pid=\"-1BBROc7\">通常，我们可以利用三斜线指令的 <code>types</code> 来声明对于全局变量的依赖，从而避免使用<code>import</code>语句将声明文件变为局部模块。</p><p data-pid=\"635cGnC9\">主要特别注意的是，如果使用了三斜线指令引入一个模块时，比如：</p><div class=\"highlight\"><pre><code class=\"language-text\">/// &lt;reference types=&#34;axios&#34; /&gt;\n</code></pre></div><p data-pid=\"ILpwywHi\">因为 Axios 是一个模块，所以我们无法直接在声明文件中使用任何模块内部声明的变量。</p><p data-pid=\"U76vbExx\">之所以上边的用例能通过三斜线指令正常的使用 <code>JQuery</code> 全局变量，是因为在 <code>jquery</code> 的声明文件中声明了全局的 <code>namespcae JQuery</code>。</p><h3><b><code>/// &lt;reference path=&#34;JQueryStatic.d.ts&#34; /&gt;</code></b></h3><p data-pid=\"aUpEZmF5\"><b>当我们的全局变量的声明文件太大时，同样我们可以通过三斜线指令将该声明文件拆分为多个文件。</b></p><p data-pid=\"Rx8u0rak\">然后在一个入口文件中将它们一一引入，来提高代码的可维护性。</p><p data-pid=\"fQgnDd45\">比如 <code>jQuery</code> 的声明文件就是这样：</p><div class=\"highlight\"><pre><code class=\"language-text\">// node_modules/@types/jquery/index.d.ts\n\n/// &lt;reference types=&#34;sizzle&#34; /&gt;\n/// &lt;reference path=&#34;JQueryStatic.d.ts&#34; /&gt;\n/// &lt;reference path=&#34;JQuery.d.ts&#34; /&gt;\n/// &lt;reference path=&#34;misc.d.ts&#34; /&gt;\n/// &lt;reference path=&#34;legacy.d.ts&#34; /&gt;\n\nexport = jQuery;\n</code></pre></div><p data-pid=\"IBgXeqTo\">其中用到了 <code>types</code> 和 <code>path</code> 两种不同的指令。<b>它们的区别是：<code>types</code> 用于声明对另一个库的依赖，而 <code>path</code> 用于声明对另一个文件的依赖。</b></p><blockquote data-pid=\"mROXJzAc\"><b>同时需要额外留意的是，在使用 path 进行文件拆分时每个单独的文件都是一个独立的文件模块系统</b>。<br/> </blockquote><p data-pid=\"DA5GkGko\">比如上述的 JQuery 声明文件中，我们可以明显的看到 <code>export = jQuery</code> 在最终将 <code>JQuery</code> 以 CJS 的形式进行了导出，表示它是一个模块。</p><p data-pid=\"KrGeaR_l\">但是由于 <code>/// &lt;reference path=&#34;misc.d.ts&#34; /&gt;</code> 模块文件中声明了全局的 namespace <code>JQuery</code>。</p><p data-pid=\"mpiU_JS2\">所以我们在代码中才可以正常的使用 <code>JQuery</code> 这个全局变量。</p><p data-pid=\"Km5K9Vcf\">简单来说 <code>jquery</code> 根声明文件是一个模块，而它内部使用的三斜线指令引入的 <code>/// &lt;reference path=&#34;misc.d.ts&#34; /&gt;</code> 并非是一个模块而是声明了一个全局命名空间。</p><p data-pid=\"HIwkYT5x\">所以三斜线指令并不会引入入口是模块文件，而将依赖的模块也变为模块声明。</p><h2><b>结尾</b></h2><p data-pid=\"m3LAzswr\">断断续续这篇文章也写了好久，希望这篇文章可以让大家有所收获。</p><p data-pid=\"5eugu6a2\">对于模块声明文件我个人也是一直在一种摸索的阶段，之前其实没有特意关心这块内容。</p><p data-pid=\"Mgue40Hx\">之后如果有时间，我会详细和大家谈谈这部分内容其实坑点还挺多的。当然，大家对于文章中的内容有什么疑惑或者建议都可以在评论区留言给我。</p>",
            "voteup_count": 141,
            "comment_count": 27
        },
        "created": "2022-07-16T15:54:56+08:00"
    },
    {
        "content": {
            "id": 233219279,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/36340095/answer/233219279",
            "created_time": 1505966909,
            "updated_time": 1505966910,
            "question": {
                "type": "question",
                "id": 36340095,
                "title": "长期使用电脑工作，肩膀脖颈疼的不行。是否有减轻的办法?",
                "question_type": "normal",
                "created": 1444404894,
                "updated_time": 1495008373,
                "url": "https://www.zhihu.com/question/36340095",
                "is_deleted": false
            },
            "author": {
                "id": "13ba78a859eaf6b9a5b27c5c56ee8419",
                "url_token": "ze.ran",
                "name": "ze ran",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-2ef7f1bdfcf4fd26e7c7e715b7e6b8ad_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-2ef7f1bdfcf4fd26e7c7e715b7e6b8ad.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/13ba78a859eaf6b9a5b27c5c56ee8419",
                "user_type": "people",
                "headline": "less is more",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic2.zhimg.com/v2-fb401ca21c06d20536e5aef65d78617d_r.png",
                        "night_mode_url": "https://pic1.zhimg.com/v2-3b268fe17118485b7cbe23b0fcc4cb02.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19554298",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19554298",
                                "name": "编程",
                                "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "知乎十年新知答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "新知答主",
                            "description": "知乎十年新知答主",
                            "url": "https://zhuanlan.zhihu.com/p/344234033",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "reward",
                            "detail_type": "zhihu_10years_answerer",
                            "title": "新知答主",
                            "description": "知乎十年新知答主",
                            "url": "https://zhuanlan.zhihu.com/p/344234033",
                            "sources": [],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "编程话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19554298",
                                    "token": "19554298",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19554298",
                                    "name": "编程",
                                    "avatar_path": "v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                                    "avatar_url": "https://picx.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1374,
            "comment_count": 116,
            "thanks_count": 336,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"4R76ftOT\">工作了5，6年的时候，得了个奇怪的毛病。</p><p data-pid=\"rD-TbDtm\">背后右肩胛骨的位置，好像被贴了一层膜，很难形容的感觉。仿佛皮肤上刷了一层胶水，晾干了，糊在上面，怎么也揭不下来。</p><p data-pid=\"tWnkycNu\">不怎么痛，但让人心烦，总想去摸一摸。</p><p data-pid=\"9IHf8BHb\">又是按摩，又是做操，没有好转，也搞不清楚原因。</p><p data-pid=\"ETnzeA1J\">直到一天，我牺牲了二郎腿式编程，在桌子下装了键盘托盘，肩膀就自己好了。这又写了好几年，也没有犯过。</p><p data-pid=\"z9dirgCz\">几点经验教训，</p><p data-pid=\"9HraheoQ\">1，笔记本电脑反人类，让手，眼，头，颈，肩，臂均紧张。长期使用最好外接键盘显示器。</p><p data-pid=\"lBj91x5I\">2，键盘位置非常重要。任何需要你耸肩，或伸手去够的位置，都不长久。最好大臂自然垂于身体两侧，小臂有支撑，于大臂成90度左右夹角。不行就上键盘托。键盘放桌子上，要抬手去够，就容易得我那毛病。</p><p data-pid=\"hBe8WjrD\">3，少用鼠标。鼠标伤手腕，别把它当手垫，没事就放上面。鼠标需要精准控制，手臂到肩膀都紧张。多用键盘，熟悉快捷键，也可以两手轮流用鼠标，没准能开发大脑。</p><p data-pid=\"FaXG3q2c\">4，宁可躺，也不要伸头。紧张的时候，自然想伸头，越伸头，越紧张，久了就很僵硬。可以坐低点，头靠椅背，腿伸直，离显示器远些，尽量舒展身体。过一会，就可以放松下来，再恢复正常坐姿。</p><p data-pid=\"h4feKvNo\">5，五点靠墙站立。脚后跟，小腿肚，臀尖，肩胛骨，后脑勺靠墙，站10分钟左右，能治伸头驼背的毛病。自以为不伸头的，站了才知道。</p><p data-pid=\"Ra605HD7\">现代生活中，手机占满了空闲时间，留10分钟给自己，站着思考下人生的意义，也是不错的事。</p>",
            "excerpt": "工作了5，6年的时候，得了个奇怪的毛病。 背后右肩胛骨的位置，好像被贴了一层膜，很难形容的感觉。仿佛皮肤上刷了一层胶水，晾干了，糊在上面，怎么也揭不下来。 不怎么痛，但让人心烦，总想去摸一摸。 又是按摩，又是做操，没有好转，也搞不清楚原因。 直到一天，我牺牲了二郎腿式编程，在桌子下装了键盘托盘，肩膀就自己好了。这又写了好几年，也没有犯过。 几点经验教训， 1，笔记本电脑反人类，让手，眼，头，颈，肩，臂均…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxjPyZpvIIDJmwOSAiMKCDcyNDc0MjM4EgkyMzMyMTkyNzkYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2017-09-21T12:08:29+08:00"
    },
    {
        "content": {
            "author": {
                "id": "25608bc03821ad469556f777de36da9b",
                "url_token": "yi-zhi-zhu-ding-lou",
                "name": "一直住顶楼",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-f4b1eef5da4162f4a5b097741f5b791c_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-f4b1eef5da4162f4a5b097741f5b791c.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/25608bc03821ad469556f777de36da9b",
                "user_type": "people",
                "headline": "知乎娃最多的码农，看简介\n小红书huluwa_ny",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-a35d7cf28be4ead527c2a885c6d0e950_r.png?source=0df5f383",
                        "night_mode_url": "https://picx.zhimg.com/v2-17cb94795955fc3bd5fef85afde188f6_r.png?source=0df5f383"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1481918399
            },
            "comment_count": 84,
            "content": [
                {
                    "content": "突然想起来，现在中国所有的潜在基建项目里面最有社会效益的其实不就是把所有烂尾楼都完工吗？<br>为什么还到西部xjb建那些肯定回不来本的东西",
                    "fold_type": "raw",
                    "own_text": "突然想起来，现在中国所有的潜在基建项目里面最有社会效益的其实不就是把所有烂尾楼都完工吗？<br>为什么还到西部xjb建那些肯定回不来本的东西",
                    "text_link_type": "internal",
                    "title": "",
                    "type": "text"
                }
            ],
            "created": 1657762169,
            "excerpt_title": "突然想起来，现在中国所有的潜在基建项目…",
            "id": "1530846172406640640",
            "like_count": 0,
            "reaction_count": 372,
            "type": "pin",
            "updated": 1657762169,
            "url": "https://www.zhihu.com/pin/1530846172406640640?native=0",
            "virtuals": {
                "is_liked": false,
                "is_favorited": false
            }
        },
        "created": "2022-07-14T09:29:29+08:00"
    },
    {
        "content": {
            "id": 2562311891,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/23364651/answer/2562311891",
            "created_time": 1657152267,
            "updated_time": 1657152267,
            "question": {
                "type": "question",
                "id": 23364651,
                "title": "对于国内几大互联网公司的最大股东均为外资，你怎么看？",
                "question_type": "normal",
                "created": 1397151436,
                "updated_time": 1397151436,
                "url": "https://www.zhihu.com/question/23364651",
                "is_deleted": false
            },
            "author": {
                "id": "8bed628a9d3e752070294349bd5f0b12",
                "url_token": "tu-zi-31-55",
                "name": "涂子",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/b2a9d626b_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/b2a9d626b.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/8bed628a9d3e752070294349bd5f0b12",
                "user_type": "people",
                "headline": "苦逼游戏人，资深深井冰",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic3.zhimg.com/v2-ef3238381b25afe235643b14dd0b08ba_r.png",
                        "night_mode_url": "https://pic1.zhimg.com/v2-506fb18a599e2dc691430c2070af30a4.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19553361",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19553361",
                                "name": "游戏开发",
                                "avatar_url": "https://picx.zhimg.com/130887c7689dc9631634a26a5f3df106_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19550994",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550994",
                                "name": "游戏",
                                "avatar_url": "https://picx.zhimg.com/v2-ef5608869436909035792814ff650dab_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19551296",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19551296",
                                "name": "网络游戏",
                                "avatar_url": "https://picx.zhimg.com/v2-d361f64eba185fb5f3cd80077a4a4d8c_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "游戏开发等 3 个话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "游戏开发等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19553361",
                                    "token": "19553361",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19553361",
                                    "name": "游戏开发",
                                    "avatar_path": "130887c7689dc9631634a26a5f3df106",
                                    "avatar_url": "https://picx.zhimg.com/130887c7689dc9631634a26a5f3df106_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19550994",
                                    "token": "19550994",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550994",
                                    "name": "游戏",
                                    "avatar_path": "v2-ef5608869436909035792814ff650dab",
                                    "avatar_url": "https://picx.zhimg.com/v2-ef5608869436909035792814ff650dab_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19551296",
                                    "token": "19551296",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19551296",
                                    "name": "网络游戏",
                                    "avatar_path": "v2-d361f64eba185fb5f3cd80077a4a4d8c",
                                    "avatar_url": "https://picx.zhimg.com/v2-d361f64eba185fb5f3cd80077a4a4d8c_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "游戏开发等 3 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19553361",
                                    "token": "19553361",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19553361",
                                    "name": "游戏开发",
                                    "avatar_path": "130887c7689dc9631634a26a5f3df106",
                                    "avatar_url": "https://picx.zhimg.com/130887c7689dc9631634a26a5f3df106_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19550994",
                                    "token": "19550994",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550994",
                                    "name": "游戏",
                                    "avatar_path": "v2-ef5608869436909035792814ff650dab",
                                    "avatar_url": "https://picx.zhimg.com/v2-ef5608869436909035792814ff650dab_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19551296",
                                    "token": "19551296",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19551296",
                                    "name": "网络游戏",
                                    "avatar_path": "v2-d361f64eba185fb5f3cd80077a4a4d8c",
                                    "avatar_url": "https://picx.zhimg.com/v2-d361f64eba185fb5f3cd80077a4a4d8c_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 58,
            "comment_count": 8,
            "thanks_count": 4,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"zhicDmh-\">有没有一种可能：拿得到大头国有投资的互联网公司，都不屑于把精力放在搞互联网业务上？</p>",
            "excerpt": "有没有一种可能：拿得到大头国有投资的互联网公司，都不屑于把精力放在搞互联网业务上？",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxjTjefFCSDAm12SAiUKCTQ5NTk2MDA1MBIKMjU2MjMxMTg5MRgEIgpJTUFHRV9URVhU",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-07-07T08:04:27+08:00"
    },
    {
        "content": {
            "id": 539899071,
            "title": "我要去哪里？- 写在我的 30 岁",
            "type": "article",
            "excerpt_title": "最近刚过了 30 岁生日，人生已到而立之年。 近几年疫情、房价、裁员、社会环境、家庭，让我越来越焦虑，每天脑袋都停不下来，一直在思考「我是谁？我要去哪里？我在干什么？」。 今天我把最近半年的思考，写到这片文章里面。一是把脑袋里面的思考系统的整理一下，二是想和朋友们做下交流，获得更多的输入。 我是谁？我是一名毕业 7 年的前端开发工程师，日常工作就是写网站。 2014 年大三实习，我进入了杭州一家小公司，一呆就是…",
            "url": "https://zhuanlan.zhihu.com/p/539899071",
            "image_url": "",
            "created": 1657446920,
            "updated": 1658993388,
            "author": {
                "id": "62da970293fc29fdb1444132fdb9a0df",
                "url_token": "fan-jin-long-89",
                "name": "砖家",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-dc61332dd2aa1214e6bf381e5bad3508_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-dc61332dd2aa1214e6bf381e5bad3508.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/62da970293fc29fdb1444132fdb9a0df",
                "user_type": "people",
                "headline": "公众号：前端技术砖家",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1441707006
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"E5ZEI0eb\">最近刚过了 30 岁生日，人生已到而立之年。</p><p data-pid=\"qUICKZvz\">近几年疫情、房价、裁员、社会环境、家庭，让我越来越焦虑，每天脑袋都停不下来，一直在思考「我是谁？我要去哪里？我在干什么？」。</p><p data-pid=\"_odvEzr2\">今天我把最近半年的思考，写到这片文章里面。一是把脑袋里面的思考系统的整理一下，二是想和朋友们做下交流，获得更多的输入。</p><h2><b>我是谁？</b></h2><p data-pid=\"Z7zfzVOI\">我是一名毕业 7 年的前端开发工程师，日常工作就是写网站。</p><p data-pid=\"3C3X3Zi0\">2014 年大三实习，我进入了杭州一家小公司，一呆就是 4 年。在这四年里先做后端开发，后来转为前端开发。</p><p data-pid=\"2e-W76zZ\">2018 年跳槽进入某大厂体验技术部，承担前端开发工作，一呆又是 4 年。</p><p data-pid=\"SD2NO0jH\">所以我就是一名典型的、单调的的程序员。</p><h2><b>我要去哪里？</b></h2><p data-pid=\"wf7G_-69\">在一个地方呆了 4 年之后，难免会进入舒适区，但在现在大环境下，越舒适就会越焦虑，因为裁员离你越来越近。同时今年团队内部大调整，我就一直在思考「我要去哪里」？</p><p data-pid=\"uA64c76J\">程序员不喜欢别人叫自己「资源」，但不可否认的是，我们就是「资源」，我们干的就是「搬砖」的工作。产品经理告诉我们这栋楼要怎么建，我们只需要负责按产品经理的规划，把砖头放到合适的地方就可以了。至于这栋楼外围配套设施怎么样，能不能卖出去，who care？</p><p data-pid=\"fmWWa1tv\">甚至这栋楼刚建一半，你就被调去建另外一栋楼了。多被调整几次，你就会更深刻的认识到，你就是「资源」。能从头到尾建完一栋楼的，真的是难得的幸运儿了。</p><p data-pid=\"wPm6-dm1\"><b>「资源」不是贬义词，他会随着你的工作时长从「褒义」变成「贬义」。</b></p><p data-pid=\"8CXfDbQW\"><b>对于工作没几年的程序员来讲，你要做的就是，积累技能，学习怎么把砖搬好。</b> 这时候如果在一个大的垂直类技能部门（比如大前端部门），大家互相交流技术，并且有机会尝试各种各样的项目开发，对我们的技能提升是非常有益的。这个阶段，资源化是褒义的。</p><p data-pid=\"lwYv5WpL\"><b>随着工作时间越来越长，资源化就变成贬义词了。</b> 因为搬砖的效率不能无限增加，但你的工资是一直在增加的，所以你的性价比（产出/工资）肯定是一直在降低。当你的性价比垫底的时候，你离被 fired 就不远了。在这个阶段，你要有自己的核心竞争力，脱离被资源化。</p><p data-pid=\"w8dCxl45\">我现在就处在两个阶段的交界处。</p><p data-pid=\"Go4TQyNO\">在前端开发领域，我有 4+ 行业的搬砖经验，有各式各样几十个项目的开发经验，有负责过超大型项目前端的经验，并且业务一直搞的都很不错。同时我有一个接近 1W star 的开源项目 ahooks。</p><p data-pid=\"7QXHUQTx\">伴随着这些丰富经验而来的，就是前端技能提升越来越难，如果不求变，性价比就开始走下坡路。</p><p data-pid=\"vWDGTvLb\">所以最近大半年我一直在思考，我要去哪里？</p><p data-pid=\"7KifVZ6n\">我觉得有两条路走：</p><p data-pid=\"kGKD5wfv\">第一条路就是深耕前端领域，成为前端技术专家。造挖掘机，造模具，造工具，帮助大家更快更好的搬砖。比如 #云谦 老师这样的，开发各种各样的前端提效工具，成为前端行业的领袖。</p><p data-pid=\"x3PrsPlw\">另一条路就是跳出前端职能角色，成为某块业务专家。专注某个业务领域，不断拓宽自己对这个领域的认知，成为行业领袖。</p><p data-pid=\"u5pOG2Sa\">经过思考，综合我自己的性格，我最终选择了第二条路。</p><p data-pid=\"oiYtg7Kx\">我认为人的价值就是解决社会问题，我们需要先发现问题，然后做出产品，然后解决问题。在做「资源化」程序员的时候，我们更多的只是负责做出产品，但对前因后果知之甚少。</p><p data-pid=\"m54Rhdwv\">我不想把自己局限在前端程序员的角色中，我想专注在某个业务领域，成为业务专家，能从头看到尾。</p><p data-pid=\"JEighu3c\">对于进入哪个领域，我有两个想法，一个是 devops，一个是区块链。</p><p data-pid=\"GHheCAHi\">devops 是因为我有比较多的这个行业的前端开发经验，上手起来比较得心应手。</p><p data-pid=\"WVykeE_m\">区块链是因为我觉得这是一个比较新的赛道，并且我比较认可区块链，认为区块链可以给社会带来很大价值。</p><p data-pid=\"uKOcqhpR\">最终经过权衡，我选择了区块链行业，转岗到了「蚂蚁链」团队，开启人生的下个赛段。如果不出意外，未来十年二十年，我会深耕在这个领域。</p><h2><b>我在干什么？</b></h2><p data-pid=\"Dj6wTY0u\">当然 30 岁的高寿，我的思考不仅仅有「我要去哪里」，还有各种各样怎么做事情的思考。</p><h3><b>把所有事情织成一张网</b></h3><p data-pid=\"ljUnzyNF\">小明在某个互联网大厂工作，他的工作内容是用 React 开发 PC 端应用，然后他闲暇时间专注在造移动端的前端轮子，生活中他的副业是自媒体工作者。 上面举了个极端的例子，就是说生活工作中的几件大事没有关联性，很容易顾彼失此。</p><p data-pid=\"cLAzl67m\">我越来越意识到，需要让自己关注的重点事情，产生关联，那事情之间会互相促进，做起来会轻松很多。</p><ol><li data-pid=\"3FjVLpf1\">把业务和技术关联起来。技术出自业务，技术促进业务，业务促进技术。</li><li data-pid=\"PnBhfmSD\">把工作和生活关联起来。</li><li data-pid=\"7PvxzW0v\">把短期目标和长期目标关联起来。</li><li data-pid=\"OhH1PjZV\">把自己的事情和朋友的事情关联起来。</li></ol><p data-pid=\"xo97i01N\">当然如果过度追求「关联性」，也会让我们的视野越来越局限。所以保持核心事情大方向不变的情况下，我们同样需要广泛涉猎。</p><p data-pid=\"nCrvu-0N\">你看的各种各样的书，你学的各种各样的知识，你的各种各样的经历，如果量够大，最终都会相互关联起来，织成一张网。</p><p data-pid=\"BALewPsl\">也不用纠结你现阶段应该学什么，看什么，不妨先做起来，<b>你走的每一步都算数。</b></p><h3><b>放弃快娱乐</b></h3><p data-pid=\"b-OQFkqK\">过去这么多年，我陆续删掉了 今日头条、抖音、快手、王者荣耀、英雄联盟 等应用，并且强迫自己不去试玩其它游戏，因为它们太让我上瘾了。</p><p data-pid=\"7R9vsSKq\">抖音一刷刷好几个小时，刷完之后就是无尽的空虚。LOL 一玩玩一天，玩完后悔浪费时间。</p><p data-pid=\"siDyy4kq\">这么多年重装卸载过好多次，但好消息是中间的持续时间越来越长了，现在这几个软件手机上一个都没有。</p><p data-pid=\"dfJ8nWG3\">没有了这些快娱乐应用，省下的时间我用来陪家人，用来看书，用来发呆思考，还是非常充实的。很久没有之前那种空虚感了。</p><p data-pid=\"WHKp-6o2\">放弃快娱乐还有一个好处就是远离负能量，现在的媒体为了流量每天都在拱火，博眼球，经常把人看的很生气。</p><h3><b>提前做好规划</b></h3><p data-pid=\"Q5XUyFqn\">最近一年，我会把自己要做的事情都系统的思考好，然后落成文档。</p><ol><li data-pid=\"U5H0Tlu7\">我会每周一早上把这周要做的事情都整理出来</li><li data-pid=\"WEgxbflk\">我会把要做的大小事情，规划写出来，保证条理清晰，可落地</li><li data-pid=\"X-4NDloZ\">我会把半年的规划提前整理出来</li></ol><p data-pid=\"cSGc_L9N\">目前还缺少的是未来三年五年的规划，这些目标目前在脑袋里面有个大致的方向，但还没有最终确认。</p><h3><b>如何做选择</b></h3><ol><li data-pid=\"-3o8z8fz\">是不是在一张网里面</li><li data-pid=\"VO0ic2Rb\">这件事情最坏的结果我能不能承受</li><li data-pid=\"Rw_Y9Wv5\">和我的长期目标的关联性</li></ol><h3><b>见贤思齐</b></h3><ol><li data-pid=\"0zrO4moE\">多和年龄比自己大的人交流</li><li data-pid=\"i-Egq8Z3\">看到别人的优点，不要给自己太大的压力，不需要强迫复制到自己身上</li></ol><p data-pid=\"V_Bauseg\">很早以前就看到优秀的同事经常看书，经常写文档，写规划，写总结，早起学习，产出各种方法论，产出各种技术轮子。他们的各种优秀的特质，我都没有，并且我觉得要做到他们那样好累。</p><p data-pid=\"b-vh4YO1\">但随着年龄和工作时间的增加，我发现以前认为很难习得的技能，自己好像自然而然的拥有了。</p><p data-pid=\"GRR8yHZX\">所以我觉得：</p><ol><li data-pid=\"77sxKHyR\">先看到优秀的特质，在自己的潜意识里面有这个认知就可以了</li><li data-pid=\"4QOONVDM\">到某个成熟的时机，这个特质会顺其自然的出现在你的身上</li></ol><h3><b>内卷和竞争</b></h3><p data-pid=\"3Xjz9S0o\">最近几年，「内卷」这个词太火了，几乎所有的竞争，都可以被调侃为「内卷」。</p><blockquote data-pid=\"q85zNKBk\"> 哇！你竟然在看书，也太卷了吧。</blockquote><p data-pid=\"4VFd5DLp\">我个人的感觉就是：</p><ol><li data-pid=\"La1yO7mG\">哪有那么多内卷的事情</li><li data-pid=\"cM5WJr0e\">做你觉得有价值的事情，不要太关注别人怎么看</li><li data-pid=\"6EEUQlDE\">鼓励竞争，拥抱竞争</li></ol><blockquote data-pid=\"CLeTkPHE\">内部所谓的内卷和竞争，都是很次要的东西，因为最终我们这个群体的收益和相对优势，是相对于更大的社会群体的。 - 某大佬</blockquote><h3><b>不要让自己太忙</b></h3><p data-pid=\"4qZIs7dF\">某些紧急项目，几乎 007 连轴转，这一类项目忙完后，我会感觉到一些空虚。因为这类项目就是无脑搬砖，身体很劳累，脑袋缺少思考。</p><p data-pid=\"U1R5TlbN\">我目前的作息时间是白天工作时间忙业务，写代码。晚饭过后的时候就是留给自己的，搞搞技术，看看文章，写写文档，思考过去未来，做各种查漏补缺的事情。</p><p data-pid=\"S8yfP5Z_\">我觉得晚上两个小时的思考，是我进步的燃料。</p><h3><b>和不同的人聊天</b></h3><p data-pid=\"knlcEA0p\">个人的视野是非常非常局限的，我感觉我现在的视野就只在自己能看到的一亩三分地。</p><p data-pid=\"QFg9bhP6\">夫妻饭店的夫妇几乎 365 天无休，他们不知道可能开出租车比开店更轻松，挣钱更多。他们更不知道滴滴和优步竞争的时候，随便有辆车，就可以挣很多钱。</p><p data-pid=\"q3DkHj3I\">工地搬砖的工人不知道稍微学习一下，就可以成为装修工人，活轻松，挣的还多。</p><p data-pid=\"Gkn_TDHf\">环卫工人可能不知道隔壁超市在招聘理货员，轻松并且挣钱多。</p><p data-pid=\"n-r_1lkI\">生活中这种案例太多太多了。大家都是靠历史轨迹，或者老人带新人，从而进入某个行业。很少有人能在没人带的情况下，开辟新行业。</p><p data-pid=\"j5NslbJD\">所以我认为，我们需要和各行各业的人多交流，才能发现更多机会，摩擦出更多的火花。但是去哪里能接触到各行各业的人呢？我也不知道。</p><p data-pid=\"Mt_TEcMu\"><b>欢迎各行各业的朋友找我聊天！！！你可以是程序员、律师、金融从业者、法务、会计、厨师等等等等~</b></p><p data-pid=\"3GMFrJNK\"><b>怎么找到我？</b></p><ol><li data-pid=\"3Wf5y0VG\"><b>关注公众号「前端技术砖家」</b></li><li data-pid=\"pKL1G1wH\"><b>找到这篇文章并留言，说明你是谁，想聊啥，然后留下自己的微信</b></li><li data-pid=\"-7AcV5B3\"><b>合适的朋友我会加你，并和你约时间</b></li></ol><p data-pid=\"ENZXIFqE\"><b>聊天形式？</b></p><ol><li data-pid=\"QE2DKilQ\"><b>在线聊</b></li><li data-pid=\"QdlPnX9o\"><b>杭州线下见面</b></li></ol><p data-pid=\"UFTMVir3\"><b>聊什么？</b></p><ol><li data-pid=\"RbAxf7Z8\"><b>随便聊</b></li></ol><h3><b>团伙</b></h3><p data-pid=\"jBL-F2n0\">我想组织一个「团伙」，大家都是各行各业比较优秀的人，定期碰撞思想，绝对非常有趣。</p><p data-pid=\"9GbI7X1c\">乱世中，团伙会更容易活下去。丧尸世界中，大家都在找团队。</p><p data-pid=\"A0XI-cZR\">未来我希望能组织这样一个「团伙」，先从认识更多的人开始吧，<b>不妨约我聊聊？</b></p>",
            "voteup_count": 152,
            "comment_count": 15
        },
        "created": "2022-07-10T17:55:20+08:00"
    },
    {
        "content": {
            "id": 2265983952,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/358076012/answer/2265983952",
            "created_time": 1639186103,
            "updated_time": 1639186404,
            "question": {
                "type": "question",
                "id": 358076012,
                "title": "为什么网上很火的日式三分离卫生间，实际却很少有人做？",
                "question_type": "normal",
                "created": 1574843299,
                "updated_time": 1574843299,
                "url": "https://www.zhihu.com/question/358076012",
                "is_deleted": false
            },
            "author": {
                "id": "3c7b745ef3a77b0f3b0c2e71c51cb970",
                "url_token": "hereistokyo",
                "name": "南木香",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-d4b2eb172a613238d1c66faee95504cc_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-d4b2eb172a613238d1c66faee95504cc.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/3c7b745ef3a77b0f3b0c2e71c51cb970",
                "user_type": "people",
                "headline": "第一手真例实案：日本移民・经营管理签证・房产投资",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1480539625
            },
            "thumbnail": "https://pic1.zhimg.com/v2-83f2ee1e6cef1bb1acaa7e44b1e60d66_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 52,
            "comment_count": 11,
            "thanks_count": 7,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"awwizrYN\">感觉有几位设计师讲的道理“日本房子如何如何”，但实际上对日本房子并不是很熟悉。完全混淆了普通住宅公寓与所有公寓。</p><p data-pid=\"D1Xg_CKJ\">三分离这种设计一般习惯用于普通住宅公寓，而不是所有公寓（小面积出租屋、投资用房、民宿等）。</p><p data-pid=\"6A51klQu\">很多人对日本房子停留在狭小逼仄的印象上，其实主要是受“单身人士在大城市里的独居小公寓”这一设定影响。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-3e1df4cdfae971cba7c89f109db3d2fa_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1024\" data-original-token=\"v2-83f2ee1e6cef1bb1acaa7e44b1e60d66\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-2e2f5c3e26afc01883892d61245ba9e9_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://picx.zhimg.com/v2-3e1df4cdfae971cba7c89f109db3d2fa_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"AYck_aUy\">如果贷款买了房子，虽不能像国内家里动辄180平米，居住面积是可以的。<b>日本普通住宅公寓：一般指家庭居住，符合普通住宅贷款条件的房子。使用面积60～90平米左右的居多，没有阳台等公摊面积。</b></p><p data-pid=\"EtvPFdUF\">三分离出来的各自空间也足够宽敞。比如下图的，属于70多平米的二手房，重新装修过的浴室、洗面间、卫生间。</p><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-e436feb6180b4cb947a06d6d6f331844_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"479\" data-original-token=\"v2-ac4aefa66d50c25a721c66e67e9c7983\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-1115aa052dd3612f07eba5054a755b97_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"638\" data-original=\"https://pica.zhimg.com/v2-e436feb6180b4cb947a06d6d6f331844_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-851d31cff74a7f5b978eaabc39af7aba_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"477\" data-rawheight=\"528\" data-original-token=\"v2-fc11d73e9ef8156e5120b5eee9228002\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-fd916329634d9ff3e9ff4849576b1359_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"477\" data-original=\"https://pica.zhimg.com/v2-851d31cff74a7f5b978eaabc39af7aba_r.jpg?source=2c26e567\"/></figure><figure data-size=\"normal\"><img src=\"https://pica.zhimg.com/50/v2-1274aeff853ef7f13b82dd28d1d8dd85_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"473\" data-rawheight=\"534\" data-original-token=\"v2-283b9f596cb515ee94ffb55a245e61f2\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-00c54b4dbddafbbb2275b235edb00a0f_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"473\" data-original=\"https://picx.zhimg.com/v2-1274aeff853ef7f13b82dd28d1d8dd85_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"HJ67yZNY\">但<b>日本人执着于此，基于他们的民族泡澡习惯，一定要有个浴缸（古时，就真的是一个缸）。</b>没有泡过澡的洗澡，洗得太潦草，只能算是冲了一下。所以，即便是面积不过20平米的单身小公寓，也会搞干湿两分离。洗面与浴室压缩在一处。但没有条件搞三分离，面积小，也用不上。</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-26edf4a91087e956187046c52dc83fe8_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"447\" data-rawheight=\"530\" data-original-token=\"v2-9845d4d0b99e8ed54802ced3281b8a8a\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-913bf929c95c83452c22b48867f8bd7a_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"447\" data-original=\"https://picx.zhimg.com/v2-26edf4a91087e956187046c52dc83fe8_r.jpg?source=2c26e567\"/></figure><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"cS7Ol0ja\"><b>三分离，始终要考虑自己的使用习惯。</b></p><p data-pid=\"bUGKgE3W\">①日本普通住宅公寓这么设计，因为它适用家庭居住。三分离的话，可以同时一个人在洗澡，一个人在刷牙洗脸，一个人在卫生间。</p><p data-pid=\"5JZn5iv-\">国内住宅，大面积的套型，除了客厅过去的卫生间，主卧还附有卫生间。至少在卫生间数量这点上，就削弱了必须三分离的必要性。</p><p data-pid=\"naAqG4nY\">②像我们一家都是中国人，没有天天泡澡的习惯，一年顶多泡十几次，浴室里的浴缸就非常多余。而浴缸这玩意儿，得勤快擦洗，特别容易脏。但因为是在日本买房，所以只能买下这个更适用于日本人生活习惯的浴室。</p><p></p><p></p>",
            "excerpt": "感觉有几位设计师讲的道理“日本房子如何如何”，但实际上对日本房子并不是很熟悉。完全混淆了普通住宅公寓与所有公寓。 三分离这种设计一般习惯用于普通住宅公寓，而不是所有公寓（小面积出租屋、投资用房、民宿等）。 很多人对日本房子停留在狭小逼仄的印象上，其实主要是受“单身人士在大城市里的独居小公寓”这一设定影响。 [图片] 如果贷款买了房子，虽不能像国内家里动辄180平米，居住面积是可以的。 日本普通住宅公寓：一般指家…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 5,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-83f2ee1e6cef1bb1acaa7e44b1e60d66_720w.jpg?source=7e7ef6e2",
                        "width": 1024,
                        "height": 1024,
                        "token": "v2-83f2ee1e6cef1bb1acaa7e44b1e60d66",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-ac4aefa66d50c25a721c66e67e9c7983_720w.jpg?source=7e7ef6e2",
                        "width": 638,
                        "height": 479,
                        "token": "v2-ac4aefa66d50c25a721c66e67e9c7983",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-fc11d73e9ef8156e5120b5eee9228002_720w.jpg?source=7e7ef6e2",
                        "width": 477,
                        "height": 528,
                        "token": "v2-fc11d73e9ef8156e5120b5eee9228002",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxjQ18C4CCCar/oTkgIlCgk0NDIwNzc2ODQSCjIyNjU5ODM5NTIYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2021-12-11T09:28:23+08:00"
    },
    {
        "content": {
            "id": 2566922732,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/510198995/answer/2566922732",
            "created_time": 1657394522,
            "updated_time": 1657880469,
            "question": {
                "type": "question",
                "id": 510198995,
                "title": "鹤岗为什么会财政亏空?",
                "question_type": "normal",
                "created": 1641466120,
                "updated_time": 1663990341,
                "url": "https://www.zhihu.com/question/510198995",
                "is_deleted": false
            },
            "author": {
                "id": "fabf3d1da6b2df6c47ab75eb2ead132e",
                "url_token": "jia-yu-bu-shi-gui-74",
                "name": "甲鱼不是龟",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-4c75024aa87c39a4ff2490a361b6b1a6_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-4c75024aa87c39a4ff2490a361b6b1a6.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/fabf3d1da6b2df6c47ab75eb2ead132e",
                "user_type": "people",
                "headline": "职业作者",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-aa8a1823abfc46f14136f01d55224925.jpg?source=88ceefae",
                        "night_mode_url": "https://pic1.zhimg.com/v2-aa8a1823abfc46f14136f01d55224925.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1512507294
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 154,
            "comment_count": 25,
            "thanks_count": 6,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"aefU7IyH\">古往今来，强中央弱地方的制度弊病而已。</p><p data-pid=\"4R_Xof5D\">想要强中央，必须把人事任命权收归中央，然后外派官员。</p><p data-pid=\"k-fNdGXF\">所有官员都是外派而来，任期几年，于是，几乎没有人做长久规划。</p><p data-pid=\"a5SMH_QJ\">因为他们并不需要承担政策实施失败之后带来的长期后果，任期结束之后，他们大概率会离开这个城市。老百姓找都找不到他们。</p><p data-pid=\"vbVTc0Uz\">一任接着一任，每一任都要政绩，都在花未来钱。</p><p data-pid=\"cvGb2DAh\">一个三线城市欠几百亿，那是因为他们只能借到几百亿。你要能让他借到几千几万亿，他们也会借。不止借，还火速花光。</p><p data-pid=\"TzpKkyPp\">因为你根子上的升迁、调任、追责制度都在指向这个方向。这个不是靠思想教育可以改变的。</p><p class=\"ztext-empty-paragraph\"><br/></p><p data-pid=\"zBwvzRDF\">有没有一种可能：</p><p data-pid=\"jtD9kOXG\">把地方行政权完全交给地方，让他们自己去磋商。</p><p data-pid=\"y2St-H9Y\">但是地方的司法委派继续归于中央。实现地方层面的三权分立？</p>",
            "excerpt": "古往今来，强中央弱地方的制度弊病而已。 想要强中央，必须把人事任命权收归中央，然后外派官员。 所有官员都是外派而来，任期几年，于是，几乎没有人做长久规划。 因为他们并不需要承担政策实施失败之后带来的长期后果，任期结束之后，他们大概率会离开这个城市。老百姓找都找不到他们。 一任接着一任，每一任都要政绩，都在花未来钱。 一个三线城市欠几百亿，那是因为他们只能借到几百亿。你要能让他借到几千几万亿，他们也会…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjsw4DICSDH7YkkkgIlCgk0OTY3OTkwMzMSCjI1NjY5MjI3MzIYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-07-10T03:22:02+08:00"
    },
    {
        "content": {
            "id": 525244896,
            "title": "React Fiber 架构原理：关于 Fiber 树的一切",
            "type": "article",
            "excerpt_title": "这篇尝试通过源码结合图解，还原 React Fiber 树的实现。文中你将看到： Fiber 树在协调过程中的作用Fiber 树的数据结构和遍历方式Diffing 的思路，和它在伴随树构造过程的实现Diffing 结果的标识和收集节点宿主实例的关联方式Part 0 背景Virtual DOM众所周知，React 构造了一层 Virtual DOM。 Virtual DOM 是一种编程概念。在这个概念里， UI 以一种理想化的，或者说“虚拟的”表现形式被保存于内存中，并通过如 ReactDOM 等类…",
            "url": "https://zhuanlan.zhihu.com/p/525244896",
            "image_url": "https://pic1.zhimg.com/v2-67b3a337cb35d27a0c5024641d6db100_r.jpg?source=172ae18b",
            "created": 1654567400,
            "updated": 1657099544,
            "author": {
                "id": "35ddb6e00a4a1a58497adfa659049670",
                "url_token": "henrylulu",
                "name": "几木",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-7b157ace53f108d892c7a0cc97fb9dfd_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-7b157ace53f108d892c7a0cc97fb9dfd.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/35ddb6e00a4a1a58497adfa659049670",
                "user_type": "people",
                "headline": "Web开发者/❤️自驾航拍/❤️猫",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-9977ca26b1b6596c7d73a1b9ed8bfc68_r.png",
                        "night_mode_url": "https://pic3.zhimg.com/v2-2c90886c3355a43854ac16fa7174e051.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://pic1.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "identity",
                        "description": "北京科技大学 软件工程硕士"
                    }
                ],
                "badge_v2": {
                    "title": "北京科技大学 软件工程硕士",
                    "merged_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity",
                            "title": "认证",
                            "description": "北京科技大学 软件工程硕士",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "identity",
                            "detail_type": "identity_people",
                            "title": "已认证的个人",
                            "description": "北京科技大学 软件工程硕士",
                            "url": "https://zhuanlan.zhihu.com/p/96956163",
                            "sources": [],
                            "icon": "https://pica.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-2ddc5cc683982648f6f123616fb4ec09_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"CQNlDdki\">这篇尝试通过源码结合图解，还原 React Fiber 树的实现。文中你将看到：</p><ul><li data-pid=\"xbZHuHxq\">Fiber 树在协调过程中的作用</li><li data-pid=\"JKQUcASD\">Fiber 树的数据结构和遍历方式</li><li data-pid=\"hZhUXwXf\">Diffing 的思路，和它在伴随树构造过程的实现</li><li data-pid=\"Vn9wV3pW\">Diffing 结果的标识和收集</li><li data-pid=\"jSx2aBXA\">节点宿主实例的关联方式</li></ul><h2>Part 0 背景</h2><h3>Virtual DOM</h3><p data-pid=\"e14nRGq3\">众所周知，React 构造了一层 Virtual DOM。</p><blockquote data-pid=\"vnoEK1WJ\">Virtual DOM 是一种编程概念。在这个概念里， UI 以一种理想化的，或者说“虚拟的”表现形式被保存于内存中，并通过如 ReactDOM 等类库使之与“真实的” DOM 同步。这一过程叫做协调。<br/>——<a href=\"https://link.zhihu.com/?target=https%3A//zh-hans.reactjs.org/docs/faq-internals.html%23what-is-react-fiber\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Virtual DOM 及内核 – React</a></blockquote><p data-pid=\"4d8nvgtj\">Virtual DOM 像 DOM 一样，是一棵树。在协调过程中，我们创建、改变的 React 组件，构建出新Virtual DOM 树，通过 Diffing 算法和老树对比，得到差值，再同步给视图要修改哪些部分。</p><h3>Fiber</h3><p data-pid=\"m0hhUqyi\">那 Fiber 又是什么？</p><blockquote data-pid=\"QrsaAyE_\">React Fiber 是 React 核心算法的重新实现。<br/>它的主要特点是渐进式渲染: 能够将渲染工作分割成块，并将其分散到多个帧。<br/>其他关键特性包括在新的更新到来时暂停、中止或重用工作的能力; 为不同类型的更新分配优先级的能力; 以及新的并发方式。<br/>——<a href=\"https://link.zhihu.com/?target=https%3A//github.com/acdlite/react-fiber-architecture\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - acdlite/react-fiber-architecture: A description of React’s new core algorithm, React Fiber</a></blockquote><p data-pid=\"vOcpoWir\">广义的 Fiber，是一种新架构。为了实现这套架构，React 也在 Virtual DOM 上重建了树和节点结构，叫做 fiber 树和 fiber 节点。</p><h2>Part 1 Fiber 树的组织方式</h2><p data-pid=\"z1rIAz7F\">先不管 Fiber 怎么实现的。现在想想，让你表示一棵树，要怎么表示？</p><h3>基于 children 数组的树</h3><p data-pid=\"hTfC1Bjl\">最先想到的用 children 是吧：</p><div class=\"highlight\"><pre><code class=\"language-text\">{\n    &#34;name&#34;: &#34;A&#34;,\n    &#34;children&#34;: [\n        { &#34;name&#34;: &#34;B&#34; },\n        {\n            &#34;name&#34;: &#34;C&#34;,\n            &#34;children&#34;: [\n                { &#34;name&#34;: &#34;E&#34; }\n            ]\n        },\n        { &#34;name&#34;: &#34;D&#34; }\n    ]\n}</code></pre></div><p data-pid=\"BWma554h\">这也是最常见的方式，很多场景比如 DOM 树、antd 的 Tree 组件数据等等，都这么组织。这种结构符合正常思维，读起来清晰舒服，特别适合广度优先遍历。</p><h3>基于链表的树</h3><p data-pid=\"5yzUhH4b\">另一种则是通过节点之间的指针表示他们的关系，形成一棵树。</p><div class=\"highlight\"><pre><code class=\"language-text\">// 对于多个 children，往往是父节点指向第一个子节点 child，再通过子节点的兄弟节点 sibling 指针横着指\n// 也可以加上 return 指父节点\nA = { child: B }\nB = { return: A, sibling: C }\nC = { return: A, sibling: D, child: E }\nD = { return: A }\nE = { return: C }</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ec2033d54f9ad30ee2305d175b24dcd6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"537\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic3.zhimg.com/v2-ec2033d54f9ad30ee2305d175b24dcd6_r.jpg\" data-original-token=\"v2-ec2033d54f9ad30ee2305d175b24dcd6\"/></figure><p data-pid=\"7bhtYm7Z\">虽然损失了一些可读性，这个结构却有很多优势：</p><ul><li data-pid=\"r-AyK9px\">调整节点位置很灵活，只要改改指针</li><li data-pid=\"icXwipfI\">方便进行各种方式的遍历</li><li data-pid=\"wmWxLkYh\">可以随时从某一个节点出发还原整棵树</li></ul><p data-pid=\"YzvuNdgq\">这一切，正符合 Fiber 架构的要求：遍历、分割、暂停……</p><h2>Part 2 Fiber 树的遍历方式</h2><p data-pid=\"LFXzT8AM\">前面说过：「React 构建出新Virtual DOM 树，通过 Diffing 算法和老树对比」。但实际上 Fiber 树是边构建、边遍历、边对比的，这样最大程度减少了遍历次数，也符合「可中断」的设定。</p><p data-pid=\"C3gl3p4H\">咱们暂且只关注遍历方式，先说答案，Fiber 树是深度优先遍历的。Part 1 那棵树的遍历顺序是：ABCED。</p><h3>遍历的实现</h3><p data-pid=\"G7jhNDNF\">通过源码我们看看遍历是如何实现的。从“协调”的入口开始，会删掉一些代码，只关注遍历相关的部分。</p><div class=\"highlight\"><pre><code class=\"language-text\">// packages/react-reconciler/src/ReactFiberScheduler.js\nfunction workLoop() {\n  while (workInProgress !== null) {\n    workInProgress = performUnitOfWork(workInProgress);\n  }\n}\n// packages/react-reconciler/src/ReactFiberScheduler.js\nfunction performUnitOfWork(unitOfWork: Fiber): Fiber | null {\n  let next;\n  next = beginWork(current, unitOfWork, renderExpirationTime);\n  if (next === null) {\n    next = completeUnitOfWork(unitOfWork);\n  }\n  return next;\n}</code></pre></div><p data-pid=\"LcGUhQUz\">遍历需要一个指针指向当前遍历到的节点，workInProgress 就是这个指针，进一步是 performUnitOfWork 的 next 指针，遍历在指针为 null 的时候结束。</p><p data-pid=\"Y9yXojXI\">next 先从 beginWork 获取，如果没有，就从 completeUnitOfWork 获取。这里 beginWork 是“递”，即不停向下找到当前分支最深叶子节点的过程；completeUnitOfWork 是“归”，即结束这个分支，向右或向上的过程。</p><h3>递</h3><p data-pid=\"qYkiz4Ho\">先看 beginWork。</p><div class=\"highlight\"><pre><code class=\"language-text\">// packages/react-reconciler/src/ReactFiberBeginWork.js\nfunction beginWork( current: Fiber | null, workInProgress: Fiber, renderExpirationTime: ExpirationTime,\n): Fiber | null {\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      return updateClassComponent(current, workInProgress, Component, resolvedProps);\n    }\n  }\n}</code></pre></div><p data-pid=\"le2BF_t7\">beginWork 本身对递归没什么实际进展，主要是根据 tag 分发逻辑。我们关注的是 beginWork 把 updateClassComponent 的返回作为下一个遍历节点返回，按深度优先规则，这个节点应该是当前节点的第一个子节点。</p><div class=\"highlight\"><pre><code class=\"language-text\">// packages/react-reconciler/src/ReactFiberBeginWork.js\nfunction updateClassComponent(current: Fiber | null, workInProgress: Fiber, Component: any, nextProps) {\n  const nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate);\n  return nextUnitOfWork;\n}\nfunction finishClassComponent(\n  current: Fiber | null, workInProgress: Fiber, Component: any, shouldUpdate: boolean, hasContext: boolean\n) {\n  return workInProgress.child; \n}</code></pre></div><p data-pid=\"yeRkIMl-\">updateClassComponent 调 finishClassComponent，返回 workInProgress.child，确实是当前节点的第一个子节点。</p><h3>归</h3><p data-pid=\"HDyKK1Ng\">需要注意的是，next 指针不应该重复经过同一个节点。因为如果向下的过程中经过某个节点，在向上的过程中又出现，就会再次进入 beginWork，造成死循环。继续看 completeUnitOfWork 如何解决这个问题。</p><div class=\"highlight\"><pre><code class=\"language-text\">function completeUnitOfWork(unitOfWork: Fiber): Fiber | null {\n  workInProgress = unitOfWork;\n  do {\n    const siblingFiber = workInProgress.sibling;\n    if (siblingFiber !== null) {\n      return siblingFiber;\n    }\n    const returnFiber = workInProgress.return;\n    workInProgress = returnFiber;\n  } while (workInProgress !== null);\n  return null;\n}</code></pre></div><p data-pid=\"_hWNpvxU\">completeUnitOfWork 内部又创建了一层循环，搭配一个向上的新指针 workInProgress（此workInProgress非彼workInProgress），然后循环看当前指针节点，有兄弟节点就返回交还给外层循环，没有就向上到父节点，直到最上面的根节点。</p><h3>一张图总结</h3><p data-pid=\"Kk8FYjFs\">假设我们有如下这样一棵树。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-eabcf03d0c43acfedb92c3933575c8f9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"353\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-eabcf03d0c43acfedb92c3933575c8f9_r.jpg\" data-original-token=\"v2-eabcf03d0c43acfedb92c3933575c8f9\"/></figure><ul><li data-pid=\"uRHlMqmV\">整个遍历由 performUnitOfWork 发起，为深度优先遍历</li><li data-pid=\"oHGPiME4\">从根节点开始，循环调 beginWork 向下爬树（黄色箭头，每个箭头表示一次调用）</li><li data-pid=\"bG1YDeom\">到达叶子节点（beginWork 爬不下去）后，调 completeUnitOfWork 向上爬到下一个未遍历过的节点，也就是第一个出现的祖先兄弟节点（绿色箭头，每个箭头表示一次调用）</li><li data-pid=\"w1AU1PkA\">所以 beginWork 可能连续调用多次，一次最多只爬一步，但 completeUnitOfWork 只可能在 beginWork 之间连续调用一次，一次可以向上爬若干步</li><li data-pid=\"gPlwtC5d\">completeUnitOfWork 内部包下了若干步循环向上的爬树操作（绿色虚线箭头）</li></ul><p data-pid=\"9N9HUkQa\">到这里有个疑问，Fiber 实现深度优先遍历为什么要这么复杂？为什么要区分内外两层循环？</p><h3>服务于功能的遍历过程</h3><p data-pid=\"FuOgYz3n\">Fiber 树是边创建边遍历的，每个节点都经历了「创建、Diffing、收集副作用（要改哪些节点）」的过程。其中，创建、Diffing要自上而下，因为有父才有子；收集副作用要自下而上最终收集到根节点。</p><p data-pid=\"ZBqwpVaA\">现在我们回头看遍历过程。外层循环每一步（也就是 beginWork 每次执行）都是自上而下的，并保证每个节点只走一次；内层循环每一步（在 completeUnitOfWork 里）都是自下而上的。显然，beginWork 负责创建、Diffing，completeUnitOfWork 负责收集副作用。</p><p data-pid=\"Lp6adQwx\">那这些功能具体又是怎么体现的？</p><h2>Part 3 树的构建和 Diffing</h2><p data-pid=\"Pkipe4sN\">首先明确一点，所谓的 Diffing 算法并不是独立存在的，不是说先把树建完再执行 Diffing 算法找出差距，而是将 Diffing 算法体现在构建过程中对老节点的复用策略。</p><h3>背景：两棵树</h3><p data-pid=\"lVDE9HId\">在React中最多会同时存在两棵Fiber树：</p><ul><li data-pid=\"O_sH8AA5\">当前屏幕上显示内容对应的Fiber树称为 current Fiber 树</li><li data-pid=\"GmFlKe9J\">正在构建的Fiber树称为 workInProgress Fiber 树，我们这里讨论的所有遍历都在这棵树上</li></ul><p data-pid=\"RHJZZkoU\">当一次协调发起，首先会开一棵新 workInProgress Fiber 树，然后从根节点开始构建并遍历 workInProgress Fiber 树。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ab587b626f5a0af15dac6fb9a825feeb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"348\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic4.zhimg.com/v2-ab587b626f5a0af15dac6fb9a825feeb_r.jpg\" data-original-token=\"v2-ab587b626f5a0af15dac6fb9a825feeb\"/></figure><p data-pid=\"qahdeqLN\">如果构建到一半被打断，current 树还在。如果构建并提交完成，直接把 current 树丢掉，让 workInProgress Fiber 树成为新的 current 树。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-48ee0248ff53e2e3ce1280f5b9de57f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"301\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-48ee0248ff53e2e3ce1280f5b9de57f1_r.jpg\" data-original-token=\"v2-48ee0248ff53e2e3ce1280f5b9de57f1\"/></figure><p data-pid=\"GEJerO53\">所谓 Diffing 也是在这两棵树之间，如果构建过程中确认新节点对旧节点的复用关系，新旧节点间也会通过 alternate 指针相连。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-422ba239fe44fa9c8745039cc3b6d6b9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"348\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-422ba239fe44fa9c8745039cc3b6d6b9_r.jpg\" data-original-token=\"v2-422ba239fe44fa9c8745039cc3b6d6b9\"/></figure><h3>Diffing 算法思想</h3><p data-pid=\"Cwi9rJ7Z\">正常情况下，完全找到两棵树的差异，是个时间复杂度很高的操作。但 Diffing 算法通过一些假设，权衡了执行开销和完整性。</p><p data-pid=\"IU1ru1SR\"><b>假设一：不同类型的节点元素会有不同的形态</b></p><p data-pid=\"LtitNb_i\">当节点为不同类型的元素时，React 会拆卸原有节点并且建立起新的节点。举个例子，当一个元素从 a 变成 img，从 Article 变成 Comment，都会触发一个完整的重建流程。</p><p data-pid=\"DUPE9--1\">该算法不会尝试匹配不同组件类型的子树。如果你发现你在两种不同类型的组件中切换，但输出非常相似的内容，建议把它们改成同一类型。</p><p data-pid=\"2K6rcAOj\"><b>假设二：节点不会进行跨父节点移动</b></p><p data-pid=\"EsWgRayp\">只会对比两个关联父节点的子节点，多了就加少了就减。没有提供任何方式追踪他们是否被移动到别的地方。</p><p data-pid=\"Na9Su_l1\"><b>假设三：用户会给每个子节点提供一个 key，标记它们“是同一个”</b></p><p data-pid=\"SZEoYQ6o\">当子元素拥有 key 时，React 使用 key 来匹配原有树上的子元素以及最新树上的子元素。在新增 key 之后，使得树的转换效率得以提高。比如两个兄弟节点调换了位置，有 key 的情况下能保证二者都复用仅做移动，但无 key 就会造成两个不必要的卸载重建。</p><h3>深入 Diffing 过程</h3><p data-pid=\"IaqMWgz9\">接下来我们看 Diffing 算法如何体现在具体实现中的。（代码会精简掉很多无关逻辑，只关注 Diffing 过程）</p><div class=\"highlight\"><pre><code class=\"language-text\">function performUnitOfWork(unitOfWork: Fiber): Fiber | null {\n  const current = unitOfWork.alternate;\n  next = beginWork(current, unitOfWork);\n  return next;\n}</code></pre></div><p data-pid=\"xfPEpBh5\">对每个遍历到的新节点 unitOfWork，取出它关联复用的 current 树节点，称为「current」，然后新旧节点一并传给 beginWork。这个关联关系是在前面某轮循环执行 beginWork 构造 unitOfWork 时建立的，取决于当时的 Diffing 判断新旧节点是否复用。所以可能存在 current 为 null 的情况。</p><div class=\"highlight\"><pre><code class=\"language-text\">function beginWork( current: Fiber | null, workInProgress: Fiber): Fiber | null {\n  switch (workInProgress.tag) {\n    case HostComponent: {\n      return updateHostComponent(current, workInProgress);\n    }\n  }\n}</code></pre></div><p data-pid=\"JYwn9M5T\">beginWork 根据当前节点 tag 做分发，这里的 tag 比较丰富，都是从shared/ReactWorkTags.js导入的常量，常见的 HostComponent、FunctionComponent、ClassComponent、Fragment 等都在此列。以 updateHostComponent 为例。</p><div class=\"highlight\"><pre><code class=\"language-text\">function updateHostComponent(current: Fiber | null, workInProgress: Fiber) {\n  reconcileChildren(current, workInProgress, workInProgress.pendingProps.children);\n  return workInProgress.child;\n}\nfunction reconcileChildren(current: Fiber | null, workInProgress: Fiber, nextChildren: any) {\n  if (current === null) {\n    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren);\n  } else {\n    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren);\n  }\n}</code></pre></div><p data-pid=\"bMIYlQOL\">updateHostComponent 从 workInProgress 属性中取出 children，这个 children 不是 fiber 节点，而是组件 render 方法根据 JSX 结构 createElement 创建的 element 数组，这点不要混淆。</p><p data-pid=\"Rykk40ZL\">然后在 reconcileChildren 中构造子节点。可以看到如果 current 节点为 null，也就是当前节点无复用，就直接放弃子节点 Diffing 了。所以<b>父节点可复用，是子节点复用的必要不充分条件</b>。</p><p data-pid=\"hsjzGvd9\"><b>这里也遵循了 Diffing 算法的假设二——节点不会进行跨父节点移动，只对比关联节点的子节点的增减，不管它们有没有被移动到别处或从别处移动来。</b></p><p data-pid=\"PFLw_rFG\">再往下看触发 Diffing 的 reconcileChildFibers。</p><div class=\"highlight\"><pre><code class=\"language-text\">function reconcileChildFibers(returnFiber: Fiber, currentFirstChild: Fiber | null, newChild: any): Fiber | null {\n  const isObject = typeof newChild === &#39;object&#39; &amp;&amp; newChild !== null;\n  if (isObject) {\n    switch (newChild.$$typeof) {\n      case REACT_ELEMENT_TYPE:\n        return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild));\n    }\n  }\n  if (isArray(newChild)) {\n    return reconcileChildrenArray(returnFiber, currentFirstChild, newChild);\n  }\n}</code></pre></div><p data-pid=\"6oz7Kf1Q\">children 可能是单个对象也可能是数组，这里优先走 reconcileSingleElement 处理单个子节点情况，其次走 reconcileChildrenArray 处理多个子节点。说明单多节点是不一样的逻辑。</p><p data-pid=\"HSfMMjaK\"><b>这是一种「先做简单题」的思路。单节点的场景比较多但计算简单，到这里能结束多数场景避免不必要开销；而多节点计算复杂，不要轻易发起。</b></p><p data-pid=\"siMfM-_F\"><b>无论内部逻辑有什么差异，单多节点的协调函数都要做几件事：</b></p><ul><li data-pid=\"e1dUPUIp\"><b>和 current 节点的子节点做 Diffing，创建或复用</b></li><li data-pid=\"FrzNqeyB\"><b>为可复用的新旧子节点建立 alternate 关联</b></li><li data-pid=\"QQQ6d12w\"><b>返回第一个子节点（会一直往外返回给到 next 指针，作为下一步遍历对象）</b></li></ul><p data-pid=\"C8WTGHlK\">这个口径统一了，我们再分开看二者的差异。</p><h3>子节点 Diffing：当 workInProgress 子节点为单节点</h3><p data-pid=\"28I0BtP1\">先想一下，为什么说单节点的场景计算简单？因为我只需要一层循环，把 current 节点的所有子节点挨个拿出来对比，找到一个和单节点匹配的就算 Diffing 完了。看代码：</p><div class=\"highlight\"><pre><code class=\"language-text\">function reconcileSingleElement(returnFiber: Fiber, currentFirstChild: Fiber | null, element: ReactElement): Fiber {\n  const key = element.key;\n  let child = currentFirstChild;\n  while (child !== null) {\n    if (child.key === key) {\n      if (child.elementType === element.type) {\n        deleteRemainingChildren(returnFiber, child.sibling);\n        const existing = useFiber(child, element.props);\n        existing.return = returnFiber;\n        return existing;\n      } else {\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      }\n    } else {\n      deleteChild(returnFiber, child);\n    }\n    child = child.sibling;\n  }\n\n  const created = createFiberFromElement(element, returnFiber.mode);\n  created.return = returnFiber;\n  return created;\n}</code></pre></div><ol><li data-pid=\"UUfxrG8d\">去 current 子节点里找一个和 workInProgress 唯一子节点 key 相同的节点，过程中遍历到的所有 key 不相同的都 deleteChild 删掉</li><li data-pid=\"6e_0wgP8\">找得到且 type 相同，就 useFiber 复用，并把复用节点挂到 workInProgress 下</li><li data-pid=\"gBNtlhxa\">找得到但 type 不同，就 deleteChild 删掉，创建一个新节点并挂在 workInProgress 下。无论2、3哪一种，剩余的 current 子节点都可以 deleteRemainingChildren 批量删掉，因为不会再有 key 相同的了</li><li data-pid=\"ErKZOtIh\">找不到，创建一个新节点并挂在 workInProgress 下</li></ol><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-82e60c367bcd9e4664c4e5e197ca00a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"468\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-82e60c367bcd9e4664c4e5e197ca00a5_r.jpg\" data-original-token=\"v2-82e60c367bcd9e4664c4e5e197ca00a5\"/></figure><p data-pid=\"22oPfaQF\"><b>这里的2、3遵循了 Diffing 思想的假设一——不同类型的节点元素会有不同的形态，所以 type 不同就直接被删掉了。</b></p><h3>useFiber 做了什么</h3><p data-pid=\"OQbj0Ksi\">基于可复用节点和新属性复制一个 workInProgress 节点出来，并将二者通过 alternate 关联。这就是 useFiber 做的事。</p><div class=\"highlight\"><pre><code class=\"language-text\">function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n  const clone = createWorkInProgress(fiber, pendingProps);\n  return clone;\n}\nfunction createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n  workInProgress.alternate = current;\n  current.alternate = workInProgress;\n  return workInProgress;\n}</code></pre></div><p data-pid=\"ANvpZ3kt\">其实 createWorkInProgress 还有很大篇幅的其他属性复制，这里没有列出来。</p><h3>Effect：删掉的含义是什么</h3><p data-pid=\"6jDVGbZu\">删掉一个节点，在 React 中叫做“副作用 Effect”。Effect 的细节会在下一节展开，这里我们暂时只需要知道 Effect 是挂在节点上的一个标记，用来最终执行对 DOM 的删除操作。同样前面也有个 placeSingleChild 函数，其实也是标记了一个新增 DOM 的 Effect。</p><h3>子节点 Diffing：当 workInProgress 子节点为多节点</h3><p data-pid=\"hqJshYjU\">当 workInProgress 子节点是个数组，就会调 reconcileChildrenArray 进行多节点对比，返回第一个子节点。</p><p data-pid=\"3yXkezpH\">由于相对复杂，我们直接拆开函数体。首先定义了一堆指针/索引：</p><div class=\"highlight\"><pre><code class=\"language-text\">let resultingFirstChild: Fiber | null = null;  // 构建后的第一个子节点，也就是 return 回去的节点\nlet previousNewFiber: Fiber | null = null;  // 前一个新节点，用来接 sibling 指针的\nlet oldFiber = currentFirstChild;  // 旧节点遍历指针\nlet lastPlacedIndex = 0;  // 最后的放置位置，这个和节点位置交叉移动方式有关\nlet newIdx = 0;  // 新 children 的遍历 index\nlet nextOldFiber = null;  // 旧节点遍历指针</code></pre></div><p data-pid=\"Za8j9UI8\">有必要提一嘴，因为不论新旧，Fiber 子节点都是 sibling 链表相连的，所以用指针；但我们用来生成新节点的 children 是 element 数组，所以用 index。</p><p data-pid=\"mTXT-LME\">接下来逻辑进入到多节点 Diffing，仍然体现了“先做简单题”的思路。</p><h3>第一轮：先假设子节点从头开始的 key顺序不变</h3><p data-pid=\"H9mZCKe0\">最简单的情况是，“新旧节点的 key 顺序不变，仅仅在尾部增删节点”。那对比过程中至多只有三种操作：</p><ol><li data-pid=\"03tvEazT\">新增尾部若干个新子节点</li><li data-pid=\"7SuUnK3q\">删除尾部若干个旧子节点</li><li data-pid=\"L8CvfdJN\">替换掉 key 相同但 type 不同的节点</li></ol><div class=\"highlight\"><pre><code class=\"language-text\">for (; oldFiber !== null &amp;&amp; newIdx &lt; newChildren.length; newIdx++) {\n  nextOldFiber = oldFiber.sibling;\n  const key = oldFiber !== null ? oldFiber.key : null;\n  let newFiber = null;\n  if (newChild.key === key) {\n    if (current !== null &amp;&amp; current.elementType === element.type) {\n      newFiber = useFiber(oldFiber, newChild.props);\n    } else {\n      newFiber = createFiberFromElement(newChild);\n    }\n  }\n  if (newFiber === null) break;\n  if (oldFiber &amp;&amp; newFiber.alternate === null) {\n    deleteChild(returnFiber, oldFiber);\n  }\n  lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n  if (previousNewFiber === null) {\n    resultingFirstChild = newFiber;\n  } else {\n    previousNewFiber.sibling = newFiber;\n  }\n  previousNewFiber = newFiber;\n  oldFiber = nextOldFiber;\n}</code></pre></div><p data-pid=\"LwxSv96J\">首先，发起循环，从第一个子节点开始逐步构建后续兄弟节点。循环是组件 children 数组 newIdx 发起的，在内部新（newFiber）老（oldFiber）节点指针也跟着跑。这个过程中新节点 siblings 链表也同步建起来。</p><p data-pid=\"cwMN0GEe\">过程中位置同步且 key 相同的节点会进行复用或替换。如果新旧节点 key 相同、type 相同，复用；key 相同、type不同，deleteChild 删掉旧节点。placeChild 中也依赖这个判断，有 alternate 就复用，没有就插入新节点（加一个“Placement”的 Effect）</p><p data-pid=\"_OPsltK_\">循环结束的可能有三种原因：</p><ol><li data-pid=\"uWxzI5_O\">这个循环继续的假设是“新旧节点的 key 顺序不变”，所以一旦不满足这个条件就退出了。代码体现为：“本轮循环不满足 newChild.key === oldFiber.key”—&gt;“newFiber 为 null”—&gt;“break”。</li><li data-pid=\"bkZ334i8\">旧节点跑完了。代码体现为：“oldFiber 为 null” —&gt; “key 为 null” —&gt; “newFiber 为 null”—&gt;“break”。</li><li data-pid=\"Zh-lUJJU\">新节点跑完了。也就是循环正常退出。</li></ol><p data-pid=\"jd56cxm5\">退出后怎么办？</p><p data-pid=\"59u9KCBl\">如果是上面原因 3，就删掉剩余的所有旧节点（可能正好没有剩余），对比结束：</p><div class=\"highlight\"><pre><code class=\"language-text\">if (newIdx === newChildren.length) {\n  deleteRemainingChildren(returnFiber, oldFiber);\n  return resultingFirstChild;\n}</code></pre></div><p data-pid=\"ZuIpK6cZ\">如果是上面原因 2，就继续新增剩余所有新节点，并构造链表，然后对比结束：</p><div class=\"highlight\"><pre><code class=\"language-text\">if (oldFiber === null) {\n  for (; newIdx &lt; newChildren.length; newIdx++) {\n    const newFiber = createChild(returnFiber, newChildren[newIdx]);\n    lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n    previousNewFiber.sibling = newFiber;\n    previousNewFiber = newFiber;\n  }\n  return resultingFirstChild;\n}</code></pre></div><p data-pid=\"Tf8dVjz0\">到此为止，“简单题”就做完了，大多数场景都能用这种相对低开销的方式解决。一张图回顾下：</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0e134a05ded8a55cf8f1baae8a992e63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"390\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic4.zhimg.com/v2-0e134a05ded8a55cf8f1baae8a992e63_r.jpg\" data-original-token=\"v2-0e134a05ded8a55cf8f1baae8a992e63\"/></figure><p data-pid=\"z5iPShtJ\">那中途退出的呢？进入第二轮</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d7dd437820bed9ff20cb3cd0f8de0be9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"143\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-d7dd437820bed9ff20cb3cd0f8de0be9_r.jpg\" data-original-token=\"v2-d7dd437820bed9ff20cb3cd0f8de0be9\"/></figure><h3>第二轮</h3><p data-pid=\"z0EEwKbG\">能进到第二轮有几种情况：</p><ol><li data-pid=\"RMpsVkVZ\">中途出现了增删的节点</li><li data-pid=\"H1OWKC99\">有节点位置发生交换</li></ol><p data-pid=\"9j2EUcA0\">这时，循环的 index 已经不足以映射新旧节点的 key 了，所以首先要建一个 map。</p><div class=\"highlight\"><pre><code class=\"language-text\">const existingChildren = mapRemainingChildren(returnFiber, oldFiber);</code></pre></div><p data-pid=\"ICNMbPyV\">这里 existingChildren 就是一个 key 到旧节点的 map。</p><div class=\"highlight\"><pre><code class=\"language-text\">for (; newIdx &lt; newChildren.length; newIdx++) {\n  const newFiber = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx]);\n  lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n  previousNewFiber.sibling = newFiber;\n  previousNewFiber = newFiber;\n}</code></pre></div><p data-pid=\"Cpt4XZMA\">updateFromMap 会试图到 map 里找一个 key 和 type 都相同的旧节点复用（调 useFiber）并返回，或者创建一个新节点。这很易懂，但下一行 placeChild 就有点意思了，前面也调过，这次打开看看。</p><div class=\"highlight\"><pre><code class=\"language-text\">function placeChild(newFiber: Fiber, lastPlacedIndex: number, newIndex: number): number {\n  newFiber.index = newIndex;\n  const current = newFiber.alternate;\n  if (current !== null) {\n    const oldIndex = current.index;\n    if (oldIndex &lt; lastPlacedIndex) {\n      // This is a move.\n      newFiber.effectTag = Placement;\n      return lastPlacedIndex;\n    } else {\n      // This item can stay in place.\n      return oldIndex;\n    }\n  } else {\n    // This is an insertion.\n    newFiber.effectTag = Placement;\n    return lastPlacedIndex;\n  }\n}</code></pre></div><p data-pid=\"zEhNbs6Z\">首先无论如何，这个函数都会返回最近操作的节点 index。然后注意当有可复用节点（current !== null）时的逻辑：</p><ul><li data-pid=\"032Tqfpa\">如果旧节点位置比最近操作的位置靠左，就标记“Placement”，“移动”到新位置</li><li data-pid=\"mwsOjErB\">如果旧节点位置比最近操作的位置相同或靠右，不需要任何操作</li></ul><p data-pid=\"b05UbK74\">所以当新树对旧树的子节点进行了交叉换位，一定是左边的旧节点挪到右边，而右边的不动。咱们用一个例子再试下下</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-07e8a8b0c34d79e81d42c970d458fd87_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"462\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic4.zhimg.com/v2-07e8a8b0c34d79e81d42c970d458fd87_r.jpg\" data-original-token=\"v2-07e8a8b0c34d79e81d42c970d458fd87\"/></figure><h3>小结</h3><p data-pid=\"FftFV7DF\">这章内容比较多，稍微总结下：</p><ul><li data-pid=\"sZKutj-o\">Fiber 树通过 beginWork 同时进行创建和“向下”遍历</li><li data-pid=\"e4kKzQBQ\">创建过程也是 current（旧）、workInProgress（新）两棵树 Diffing 的过程，决定哪些旧节点需要复用、删除、移动，哪些新节点需要创建</li><li data-pid=\"VOGfpmpn\">只有父节点相互复用，才会触发子节点 Diffing，所以跨父节点的移动是铁定 Diffing 不到的</li><li data-pid=\"ywrcK-xW\">复用的条件是 key 和 type 都相同，所以 key 能提升复用率</li><li data-pid=\"5hzLedQs\">子节点间的 Diffing 是一个“先做简单题”的过程，假设的优先级为：新子节点只有一个 —&gt; 子节点只发生末尾的增删 —&gt; 其他情况</li><li data-pid=\"bIQtGTg-\">对应的，Diffing 策略也分为：单节点 Diffing —&gt; 一轮循环 —&gt; 二轮循环</li><li data-pid=\"SGTydHo-\">Diffing 过程中会把结果（操作）以 Effect 的形式挂到节点上</li></ul><h2>Part 4 EffectList：副作用及其收集</h2><p data-pid=\"pG-6QJjd\">在 Diffing 的过程中，我们已经注意到几次 effectTag 的标记，比如 placeChild 中的newFiber.effectTag = Placement;，deleteChild 中的 childToDelete.effectTag = Deletion;，来标记节点的创建、移动、删除。</p><p data-pid=\"6ZYdV1iY\">React 的所有 effect 类型都在这里 packages/shared/ReactSideEffectTags.js。</p><h3>为什么要向上收集？</h3><p data-pid=\"YYIC0QN0\">给单个节点添加 effectTag 很好理解，等 Diffing 全部结束，我们统一找到有 effectTag 的节点做对应操作就好。比如某个节点标记了 Deletion，并且关联了一个 DOM 节点，就可以卸载这个 DOM 了。</p><p data-pid=\"UJ9HNcjx\">从性能的角度，因为我们可以预见 Diffing 结束后要收集全部节点的 effectTag，那必然再发起一轮遍历，是不划算的，就不如在 Diffing 过程中直接同步完成收集。</p><p data-pid=\"wQC2kLIQ\">还有另外一个场景：某个旧节点标记了 Deletion，但 Diffing 结束后，新树中并没有这个节点，也就不知道要删这个节点。那看起来唯一的办法就是把这个节点以某种形式挂到新节点上，但它自己又没有关联节点，就只能往上挂父节点的关联节点（这个是存在的，因为前面 Diffing 就发生在“已存在复用关系的新旧节点的子节点之间”）。</p><h3>effectList 链表</h3><p data-pid=\"gYUH0M-e\">Diffing 遍历过程是深度优先的，必然存在“子节点 effect 早于父节点得出”，所以在遍历离开节点时，只要不断沿着树向父节点传递，就能让每个节点收集到所有后代节点的 effect，最终传到根节点就完成了整棵树的收集。</p><p data-pid=\"u3LVh3Re\">为了让每个节点都有“保存所有后代节点 effect 的能力”，Fiber 给节点定义一个 effectList，通过链表实现。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1e599a46f43449693fa0b696c8c24657_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"446\" data-rawheight=\"284\" class=\"origin_image zh-lightbox-thumb\" width=\"446\" data-original=\"https://pic4.zhimg.com/v2-1e599a46f43449693fa0b696c8c24657_r.jpg\" data-original-token=\"v2-1e599a46f43449693fa0b696c8c24657\"/></figure><ul><li data-pid=\"czw6iDYE\">BCZ 都是后代节点（新旧都有可能），因为没有什么能比原节点更能全面覆盖节点的信息，比如它关联的 DOM 等等。</li><li data-pid=\"aofJyQIr\">但此结构和树结构没有任何关系，不要混淆，BCZ可能是子节点、关联旧节点的子节点，或者是若干代以下的新旧节点</li><li data-pid=\"fzjTPATL\">整个链表通过 fisrtEffect —&gt; nextEffect —&gt; lastEffect 串起来，链表的好处在于方便合并，比如下面报上来一串，你可以在链表任意位置打断把那一串拼进去</li></ul><h3>收集过程</h3><p data-pid=\"1oKxlCV8\">当某个节点不存在子节点，就要从这个节点离开了，改执行 completeUnitOfWork。遍历那块说过，completeUnitOfWork 有个内层 do while 循环，从当前节点沿着 Fiber 树往上爬。</p><p data-pid=\"bnXSXwuV\">每次循环经过一个节点，都会向上合并 effectList，又分为两部分：合并后代节点的、合并自己的。</p><p data-pid=\"e97ylS6G\"><b>合并后代节点 effectList</b></p><div class=\"highlight\"><pre><code class=\"language-text\">if (returnFiber.firstEffect === null) {\n  returnFiber.firstEffect = workInProgress.firstEffect;\n}\nif (workInProgress.lastEffect !== null) {\n  if (returnFiber.lastEffect !== null) {\n    returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;\n  }\n  returnFiber.lastEffect = workInProgress.lastEffect;\n}</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e26e7f9cb1059c6dc057cca56bddac69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"161\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-e26e7f9cb1059c6dc057cca56bddac69_r.jpg\" data-original-token=\"v2-e26e7f9cb1059c6dc057cca56bddac69\"/></figure><p data-pid=\"ftm9nQLA\"><b>上报自己的 effectTag</b></p><div class=\"highlight\"><pre><code class=\"language-text\">const effectTag = workInProgress.effectTag;\nif (effectTag &gt; PerformedWork) {\n  if (returnFiber.lastEffect !== null) {\n    returnFiber.lastEffect.nextEffect = workInProgress;\n  } else {\n    returnFiber.firstEffect = workInProgress;\n  }\n  returnFiber.lastEffect = workInProgress;\n}</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4f4eaf52b904ec637bcf3b3e9d415d03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"175\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic4.zhimg.com/v2-4f4eaf52b904ec637bcf3b3e9d415d03_r.jpg\" data-original-token=\"v2-4f4eaf52b904ec637bcf3b3e9d415d03\"/></figure><h3>删除旧节点的 effect 怎么上报的？</h3><p data-pid=\"96bylDIn\">前面的逻辑没提，其实答案在删除节点时调用的 deleteChild 上。</p><div class=\"highlight\"><pre><code class=\"language-text\">function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n  const last = returnFiber.lastEffect;\n  if (last !== null) {\n    last.nextEffect = childToDelete;\n    returnFiber.lastEffect = childToDelete;\n  } else {\n    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n  }\n  childToDelete.nextEffect = null;\n  childToDelete.effectTag = Deletion;\n}</code></pre></div><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1643438531664db4c2450e9b668012c6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"137\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic3.zhimg.com/v2-1643438531664db4c2450e9b668012c6_r.jpg\" data-original-token=\"v2-1643438531664db4c2450e9b668012c6\"/></figure><h2>Part 5 stateNode：Host 实例的关联和更新</h2><p data-pid=\"iIenf9Ri\">到目前为止，Fiber 树上的一系列动作还都没 DOM 什么事。但前面有提到，带有副作用的节点可能关联一个 DOM，并根据 effectTag 操作这个 DOM。</p><p data-pid=\"Encdh1Vj\">在 React 中，我们自己实现的组件是不直接关联到 DOM 的，但 JSX 中引用的诸如 div、span 这种原生标签由宿主实现，称为 HostComponent。（宿主指的是UI层，比如 react-dom、react-native，他们提供API对接 react 本身的框架能力，并负责具体渲染）。</p><p data-pid=\"nC6WaHtI\">在这类 fiber 节点上，有一个 stateNode 属性，关联具体的宿主实例，比如 react-dom 下的原生 DOM 对象，它们是通过 ReactFiberHostConfig 连接到宿主环境的诸如 document.createElement 这样的 API 返回的。如果需要的话，react 会在节点 effect 收集前完成对 stateNode 的创建、更新，以及对应 effect 的标记。</p><p class=\"ztext-empty-paragraph\"><br/></p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-15ea7d092a8d02c6e2f7579988bc38c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"347\" class=\"origin_image zh-lightbox-thumb\" width=\"570\" data-original=\"https://pic2.zhimg.com/v2-15ea7d092a8d02c6e2f7579988bc38c9_r.jpg\" data-original-token=\"v2-15ea7d092a8d02c6e2f7579988bc38c9\"/></figure><h3>completeWork </h3><p data-pid=\"y4ln9qZC\">现在回到 completeUnitOfWork。</p><div class=\"highlight\"><pre><code class=\"language-text\">function completeUnitOfWork(unitOfWork: Fiber): Fiber | null {\n  workInProgress = unitOfWork;\n  do {\n    completeWork(current, workInProgress);\n    // 省略：收集 effect 的逻辑（Part 4）\n  } while (workInProgress !== null);\n}</code></pre></div><p data-pid=\"-_UfU1hX\">在它的内部循环里，可以看到对每个节点，都会在收集 effect 之前调用 completeWork。</p><div class=\"highlight\"><pre><code class=\"language-text\">function completeWork(current: Fiber | null, workInProgress: Fiber): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n  switch (workInProgress.tag) {\n    case FunctionComponent:\n      break;\n    // ... 很多直接 break 的类型\n    case HostComponent: {\n      if (current !== null &amp;&amp; workInProgress.stateNode != null) {\n        // 更新分支\n        updateHostComponent(current, workInProgress, type, newProps, rootContainerInstance);\n      } else {\n        // 创建分支...\n      }\n      break;\n    }\n  }\n}</code></pre></div><p data-pid=\"2mVXxT9J\">进到 completeWork 后，我们看到大部分组件都直接 break 了，只有少部分涉及 Host 的会做一些操作，比如 HostComponent、HostRoot、HostText、HostPortal 等等。以最典型的 HostComponent 为例，更新/创建 Host 实例 —&gt; 打 effectTag，这个流程又分更新和创建分支。</p><p data-pid=\"79fGvhEF\">看分支前，我们先认识一个 markUpdate 方法。只有一行代码，就是给节点打上 Update tag，这也是在 effect 收集前执行的原因 —— 保证 Update tag 能被收集到。</p><div class=\"highlight\"><pre><code class=\"language-text\">function markUpdate(workInProgress: Fiber) {\n  workInProgress.effectTag |= Update;\n}</code></pre></div><h3>更新 Host 实例</h3><p data-pid=\"1P2C6u0J\">如果 workInProgress.stateNode 存在，说明有绑定旧实例，updateHostComponent。updateHostComponent 会根据宿主配置（是否支持修改、持久化）有几种不同的实现，其中 DOM 下因为支持修改，实现如下：</p><div class=\"highlight\"><pre><code class=\"language-text\">updateHostComponent = function(current: Fiber,workInProgress: Fiber,type: Type,newProps: Props,rootContainerInstance: Container) {\n  const instance: Instance = workInProgress.stateNode;\n  const currentHostContext = getHostContext();\n  const updatePayload = prepareUpdate(instance,type,oldProps,newProps,rootContainerInstance,currentHostContext);\n  workInProgress.updateQueue = (updatePayload: any);\n  if (updatePayload) {\n    markUpdate(workInProgress);\n  }\n};</code></pre></div><ol><li data-pid=\"IXTw0mb8\">prepareUpdate（由宿主配置提供）：获取更新现有实例要修改的属性</li><li data-pid=\"TSqktKzN\">markUpdate：标记 Update effectTag</li></ol><h3>创建 Host 实例</h3><p data-pid=\"ECXVI-WV\">如果 workInProgress.stateNode 不存在，说明没有旧实例，要创建新实例。</p><div class=\"highlight\"><pre><code class=\"language-text\">let instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);\nappendAllChildren(instance, workInProgress, false, false);\nif (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) markUpdate(workInProgress);\nworkInProgress.stateNode = instance;</code></pre></div><ol><li data-pid=\"k28KdYmU\">createInstance（由宿主配置提供）：创建新 DOM 对象</li><li data-pid=\"--iP2W-B\">appendAllChildren：遍历子节点，逐个调 appendInitialChild（由宿主配置提供）把子节点的 DOM 节点挂到当前 DOM 节点下。<b>这也是从下往上执行的一个重要原因 —— DOM 树也需要先构建子节点再插入父节点。</b></li><li data-pid=\"qkPYk0L9\">markUpdate：标记 Update effectTag</li><li data-pid=\"m9okkq4k\">workInProgress.stateNode = instance：挂载 stateNode</li></ol><h2>Part Z 总结</h2><p data-pid=\"AooQC1oL\">本文从协调过程出发，讨论 Fiber 树在构建过程中表现出的遍历方式、Diffing 理念、副作用收集方式。</p><ul><li data-pid=\"_66QdUGQ\">Fiber 树由链表构成，节点间通过 return（父节点）、child（第一个子节点）、sibling（下一个兄弟节点）相连。</li><li data-pid=\"NL3Ya5no\">当前视图对应的 Fiber 树称为 current 树，每次协调发起，都会构建新的 workInProgress 树，并在结束时替换 current 树。</li><li data-pid=\"Y9xpgl1E\">Fiber 树的遍历方式是深度优先遍历，向下的过程由 beginWork 发起，向上的过程由 completeUnitOfWork 发起。beginWork 每次只向下一步，completeUnitOfWork 则每次向上若干步（由其内部若干个一步循环达成）。</li><li data-pid=\"Obxp_5nd\">Fiber 树是边构建边遍历的，构建在 beginWork 向下过程中发起。</li><li data-pid=\"bXQCBcsM\">Fiber 树的 Diffing 策略体现在构建过程中：父节点已复用、key 和 type 相同是节点复用的基本条件；子节点 Diffing 从易向难，单节点 Diffing —&gt; 多节点末尾增删（一轮循环） —&gt; 多节点其他情况（二轮循环）。</li><li data-pid=\"BLyo0MSM\">Diffing 的结果，诸如节点的删除、新增、移动，称为 effect，以 effectTag 的形式挂在节点上。</li><li data-pid=\"WSne1OVZ\">completeUnitOfWork 的内部循环会自底向上收集 effect，不断把有 effectTag 的子节点和自身向上合并到父节点的 effectList 中，直至根节点。effectList 是个链表。</li><li data-pid=\"EPLZgHLp\">宿主相关组件节点会把宿主实例挂到 stateNode 上，间接调用宿主方法对其完成创建、更新，由此也会产生 effectTag。</li></ul><h3>React Fiber 原理系列</h3><ol><li data-pid=\"u41L73Jf\"><a href=\"https://zhuanlan.zhihu.com/p/525244896\" class=\"internal\">React Fiber 架构原理：关于 Fiber 树的一切</a></li><li data-pid=\"9AtWY2YM\"><a href=\"https://zhuanlan.zhihu.com/p/538378360\" class=\"internal\">React Fiber 架构原理：自底向上盘一盘 Scheduler</a></li></ol>",
            "voteup_count": 106,
            "column": {
                "id": "c_1244632299826229248",
                "type": "column",
                "url_token": "c_1244632299826229248",
                "title": "几木的代码工厂",
                "url": "https://zhuanlan.zhihu.com/c_1244632299826229248",
                "created": 1589523464,
                "updated": 1593921229,
                "description": "",
                "image_url": "https://picx.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 11
        },
        "created": "2022-06-07T10:03:20+08:00"
    },
    {
        "content": {
            "id": 101321696,
            "title": "神级遍历——morris",
            "type": "article",
            "excerpt_title": "morris遍历介绍morris遍历是二叉树遍历算法的超强进阶算法，跟递归、非递归（栈实现）的空间复杂度，morris遍历可以将非递归遍历中的空间复杂度降为O(1)。从而实现时间复杂度为O(N)，而空间复杂度为O(1)的精妙算法。 morris遍历利用的是树的叶节点左右孩子为空（树的大量空闲指针），实现空间开销的极限缩减。morris遍历的实现原则 记作当前节点为cur。如果cur无左孩子，cur向右移动（cur=cur.right）如果cur有左孩子，找到cur左…",
            "url": "https://zhuanlan.zhihu.com/p/101321696",
            "image_url": "https://pica.zhimg.com/v2-2f8feb9e79c12366a137dda1b7f42d9d_r.jpg?source=172ae18b",
            "created": 1578313417,
            "updated": 1608085105,
            "author": {
                "id": "17919b7e939cad2f3801290d6af2e54b",
                "url_token": "god-jiang",
                "name": "江神",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-82721348b1551462ac64ac756a563517_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-82721348b1551462ac64ac756a563517.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/17919b7e939cad2f3801290d6af2e54b",
                "user_type": "people",
                "headline": "公众号：牛熊无悔，每天分享干货内容",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-b23daf0d116b06bc63a160f75617da3e.png?source=6a64a727",
                        "night_mode_url": "https://pic1.zhimg.com/v2-b23daf0d116b06bc63a160f75617da3e.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://pica.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1568965580
            },
            "comment_permission": "all",
            "content": "<h2>morris遍历介绍</h2><blockquote data-pid=\"Q2A3rocJ\">morris遍历是二叉树遍历算法的超强进阶算法，跟递归、非递归（栈实现）的空间复杂度，morris遍历可以将非递归遍历中的空间复杂度降为O(1)。从而实现时间复杂度为O(N)，而空间复杂度为O(1)的精妙算法。<br/>morris遍历利用的是树的叶节点左右孩子为空（树的大量空闲指针），实现空间开销的极限缩减。</blockquote><h2>morris遍历的实现原则</h2><p data-pid=\"VlvhAWBa\"><b>记作当前节点为cur。</b></p><ol><li data-pid=\"jrPA1feW\">如果cur无左孩子，cur向右移动（cur=cur.right）</li><li data-pid=\"LhynwNqF\">如果cur有左孩子，找到cur左子树上最右的节点，记为mostright</li><ol><li data-pid=\"04sL8HM8\">如果mostright的right指针指向空，让其指向cur，cur向左移动（cur=cur.left）</li><li data-pid=\"HZmmf406\">如果mostright的right指针指向cur，让其指向空，cur向右移动（cur=cur.right）</li></ol></ol><p data-pid=\"uK29NhHl\">实现以上的原则，即实现了morris遍历。</p><h2>morris遍历的实质</h2><blockquote data-pid=\"Ue5LEMcB\">建立一种机制，对<b>于没有左子树的节点只到达一次，对于有左子树的节点会到达两次</b></blockquote><h2>morris遍历的实例</h2><blockquote data-pid=\"d8JynoaZ\">一个树若按层遍历的结构为{1,2,3,4,5,6,7}，即该树为满二叉树，头结点值为1，左右孩子为2,3，叶节点为4,5,6,7</blockquote><p data-pid=\"wjUyke7c\"><b>一开始图示：</b></p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f0dd0d96eb60aaa987122a09129b192c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"661\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb\" width=\"661\" data-original=\"https://pic1.zhimg.com/v2-f0dd0d96eb60aaa987122a09129b192c_r.jpg\" data-original-token=\"v2-af0a01d4c9b2ddbc105cc748201e7a55\"/></figure><p data-pid=\"GjU07n75\">我们按照morris遍历来遍历该树。</p><p data-pid=\"RWf1aJJ6\">1）首先cur来到头结点1，按照morris原则的第二条第一点，它存在左孩子，cur左子树上最右的节点为5，它的right指针指向空，所以让其指向1，cur向左移动到2。</p><p data-pid=\"-5ZbZdhf\">2）2有左孩子，且它左子树最右的节点4指向空，按照morris原则的第二条第一点,让4的right指针指向2，cur向左移动到4</p><p data-pid=\"1FvjO88E\">3）4不存在左孩子，按照morris原则的第一条，cur向右移动，在第二步中，4的right指针已经指向了2，所以cur会回到2</p><p data-pid=\"vaMn6BIE\">4）重新回到2，有左孩子，它左子树最右的节点为4，但是在第二步中，4的right指针已经指向了2，不为空。所以按照morris原则的第二条第二点，2向右移动到5，同时4的right指针重新指向空</p><p data-pid=\"dpqBr16L\">5）5不存在左孩子，按照morris原则的第一条，cur向右移动，在第一步中，5的right指针已经指向了1，所以cur会回到1</p><p data-pid=\"TBOSdz_N\">6）cur回到1，回到头结点，左子树遍历完成，1有左孩子，左子树上最右的节点为5，它的right指针指向1，按照morris原则的第二条第二点，1向右移动到3，同时5的right指针重新指回空</p><p data-pid=\"OpYggPWL\">……</p><p data-pid=\"BnAiUy2c\">当到达最后一个节点7时，按照流程下来，此时7无左右孩子，遍历结束。</p><p data-pid=\"Ap1Amugp\"><b>ps：建议用一张纸一步一步按照上面的讲解来画，你会更加明白整个morris遍历的。</b></p><h2>morris代码实现（前序、中序、后序遍历）</h2><p data-pid=\"00Lfw4-L\">前序遍历：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">morrisPre</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n        <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">Node</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"n\">Node</span> <span class=\"n\">mostRight</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">cur</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n        <span class=\"c1\">// cur表示当前节点，mostRight表示cur的左孩子的最右节点\n</span><span class=\"c1\"></span>        <span class=\"n\">mostRight</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">mostRight</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"c1\">// cur有左孩子，找到cur左子树最右节点\n</span><span class=\"c1\"></span>            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span><span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"n\">cur</span><span class=\"o\">){</span>\n                <span class=\"n\">mostRight</span> <span class=\"o\">=</span> <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"c1\">// mostRight的右孩子指向空，让其指向cur，cur向左移动\n</span><span class=\"c1\"></span>            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n                <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">;</span>\n                <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">+</span><span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n                <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                <span class=\"k\">continue</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"c1\">// mostRight的右孩子指向cur，让其指向空，cur向右移动\n</span><span class=\"c1\"></span>                <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">+</span> <span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"JeH4ZrqZ\">中序遍历：</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">morrisIn</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n        <span class=\"k\">return</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">Node</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n    <span class=\"n\">Node</span> <span class=\"n\">mostRight</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n    <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">cur</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n        <span class=\"n\">mostRight</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">mostRight</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span><span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"n\">cur</span><span class=\"o\">){</span>\n                <span class=\"n\">mostRight</span> <span class=\"o\">=</span> <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n                <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">;</span>\n                <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                <span class=\"k\">continue</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">+</span><span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n        <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n<span class=\"o\">}</span></code></pre></div><p data-pid=\"ov4J-QW-\">后续遍历（复杂一点）</p><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">morrisPos</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">head</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n       <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">head</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n           <span class=\"k\">return</span><span class=\"o\">;</span>\n       <span class=\"o\">}</span>\n       <span class=\"n\">Node</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">head</span><span class=\"o\">;</span>\n       <span class=\"n\">Node</span> <span class=\"n\">mostRight</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n       <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">cur</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n           <span class=\"n\">mostRight</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n           <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">mostRight</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n               <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span><span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">!=</span> <span class=\"n\">cur</span><span class=\"o\">){</span>\n                   <span class=\"n\">mostRight</span> <span class=\"o\">=</span> <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n               <span class=\"o\">}</span>\n               <span class=\"k\">if</span><span class=\"o\">(</span><span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n                   <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">;</span>\n                   <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">;</span>\n                   <span class=\"k\">continue</span><span class=\"o\">;</span>\n               <span class=\"o\">}</span><span class=\"k\">else</span> <span class=\"o\">{</span>\n                   <span class=\"n\">mostRight</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n                   <span class=\"n\">printEdge</span><span class=\"o\">(</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">left</span><span class=\"o\">);</span>\n               <span class=\"o\">}</span>\n           <span class=\"o\">}</span>\n           <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n       <span class=\"o\">}</span>\n       <span class=\"n\">printEdge</span><span class=\"o\">(</span><span class=\"n\">head</span><span class=\"o\">);</span>\n       <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">();</span>\n   <span class=\"o\">}</span>\n   <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">printEdge</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">){</span>\n       <span class=\"n\">Node</span> <span class=\"n\">tail</span> <span class=\"o\">=</span><span class=\"n\">reverseEdge</span><span class=\"o\">(</span><span class=\"n\">node</span><span class=\"o\">);</span>\n       <span class=\"n\">Node</span> <span class=\"n\">cur</span> <span class=\"o\">=</span> <span class=\"n\">tail</span><span class=\"o\">;</span>\n       <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">cur</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">){</span>\n           <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">value</span><span class=\"o\">+</span><span class=\"s\">&#34; &#34;</span><span class=\"o\">);</span>\n           <span class=\"n\">cur</span> <span class=\"o\">=</span><span class=\"n\">cur</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n       <span class=\"o\">}</span>\n       <span class=\"n\">reverseEdge</span><span class=\"o\">(</span><span class=\"n\">tail</span><span class=\"o\">);</span>\n   <span class=\"o\">}</span>\n   <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"n\">Node</span> <span class=\"nf\">reverseEdge</span><span class=\"o\">(</span><span class=\"n\">Node</span> <span class=\"n\">node</span><span class=\"o\">){</span>\n       <span class=\"n\">Node</span> <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n       <span class=\"n\">Node</span> <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n       <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">node</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">){</span>\n           <span class=\"n\">next</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span><span class=\"o\">;</span>\n           <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"na\">right</span> <span class=\"o\">=</span> <span class=\"n\">pre</span><span class=\"o\">;</span>\n           <span class=\"n\">pre</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">;</span>\n           <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">next</span><span class=\"o\">;</span>\n       <span class=\"o\">}</span>\n       <span class=\"k\">return</span> <span class=\"n\">pre</span><span class=\"o\">;</span>\n   <span class=\"o\">}</span></code></pre></div><blockquote data-pid=\"FNYF2aFs\"> 以上就是我今天所要分享的morris遍历，神级算法，时间复杂度为O(N)，空间复杂度为O(1)。因为递归遍历二叉树会产生一个O(h)的递归栈的空间复杂度；要是用非递归使用栈来实现也是要产生一个O(h)的空间复杂度。所以morris遍历在二叉树遍历算是神级一般的算法了。</blockquote><p data-pid=\"Q8e1yZUz\">ps<b>：觉得博主写得不错的点个赞吧，现在收藏量已经是点赞量的四倍了   ，确实有点尴尬ヾ(´A｀)ノﾟ，点赞加关注，谢谢大家的支持了，我会继续努力的</b></p>",
            "voteup_count": 1196,
            "column": {
                "id": "c_1085849275375751168",
                "type": "column",
                "url_token": "c_1085849275375751168",
                "title": "程序员成长之路",
                "url": "https://zhuanlan.zhihu.com/c_1085849275375751168",
                "created": 1551666641,
                "updated": 1599162491,
                "description": "",
                "image_url": "https://pic1.zhimg.com/v2-6460ce6a06b371f5731d3a5db69ab78b_720w.jpg?source=d16d100b"
            },
            "comment_count": 117
        },
        "created": "2020-01-06T20:23:37+08:00"
    },
    {
        "content": {
            "id": 133344957,
            "title": "typescript 声明文件加载机制以及在不同场景下的正确使用方式",
            "type": "article",
            "excerpt_title": ".d.ts 文件是 typescript 的声明文件，主要用来给编辑器做代码提示用，具体的书写位置和方式根据你的具体需求而定。 （嫌弃太长可以直接跳到使用方式的 1.1 和 2.3）很多初学者（比如我）刚开始接触 ts 时，一直分不清 .ts 和 .d.ts 的区别，不知道 .d.ts 存在的意义是什么。刚开始跟着各种教程搭建好了 ts 开发环境，写好了 hello world 时，发现就算没有写 .d.ts 文件，编辑器（这里以及之后的编辑器均指宇宙第一编辑器 vscode…",
            "url": "https://zhuanlan.zhihu.com/p/133344957",
            "image_url": "https://picx.zhimg.com/v2-5242e8a9df59c0972e50f90e8527ba1a_r.jpg?source=172ae18b",
            "created": 1587233835,
            "updated": 1587233835,
            "author": {
                "id": "642e0f54a9ea2d294c7fc0bd663a69cf",
                "url_token": "xu-yu-qi-40",
                "name": "Arch",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-4f1c0be577912ea389aed0ef0d2b4afa_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-4f1c0be577912ea389aed0ef0d2b4afa.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/642e0f54a9ea2d294c7fc0bd663a69cf",
                "user_type": "people",
                "headline": "住在霓虹的城市 握着飞向天空的钥匙",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1438178588
            },
            "comment_permission": "all",
            "content": "<h2>.d.ts 文件是 typescript 的声明文件，主要用来给编辑器做代码提示用，具体的书写位置和方式根据你的具体需求而定。</h2><p data-pid=\"SSNlyKCg\"><b>（嫌弃太长可以直接跳到使用方式的 1.1 和 2.3）</b></p><p data-pid=\"0i9yDOAA\">很多初学者（比如我）刚开始接触 ts 时，一直分不清 .ts 和 .d.ts 的区别，不知道 .d.ts 存在的意义是什么。刚开始跟着各种教程搭建好了 ts 开发环境，写好了 hello world 时，发现就算没有写 .d.ts 文件，编辑器（这里以及之后的编辑器均指宇宙第一编辑器 vscode ）也可以获得代码提示，甚至就算写的不是 ts 而是 js，只要 import 的依赖关系明确，对于一些简单的函数依然能获得最基本的入参、返回值的形参提示。从而就想知道 .d.ts 文件存在的意义是什么。</p><p data-pid=\"Ey8hBf3Z\">其实这个问题稍微思考一下就能知道。假设我们用 ts 开发了一个 npm 库，经过编译打包之后发布到了 npm 上，其他用户下载了我们这个库，下载到他本地的一般是一个 dist/index.js ，package.json 里的 main 指向这个 dist/index.js 文件。这时候不管这个用户开发使用的是 ts 还是 js，当他 import 我们这个库的时候都无法获得代码提示。</p><p data-pid=\"EvNuxwKh\"><b>.d.ts 文件主要是 for 第三方库，让第三方库的使用者可以获得良好的代码和接口提示</b>。本文主要介绍 .d.ts 文件的加载机制以及在<b>纯 js</b>开发环境中如何使用 .d.ts 声明文件，获得代码提示和接口声明。</p><h2>加载机制</h2><h3>一些定义：</h3><ul><li data-pid=\"KZvJtyVv\">三斜线指令</li><ul><li data-pid=\"_EtxkAwW\">定义： <code>/// &lt;reference path=&#34;xxx.d.ts&#34;/&gt;</code> 或者 <code>/// &lt;reference types=&#34;xxx&#34;/&gt;</code></li><li data-pid=\"wCcN0x4r\">特点：</li><ul><li data-pid=\"2u6GMGQb\">在 .ts 中已经不再使用，但是在 .d.ts 中还是有一定用处</li><li data-pid=\"s0rZs77O\">只能出现在文件的最开头，并且前面只能有注释或者别的三斜线指令</li><li data-pid=\"djj3o9v7\">有点类似 C++ 的 #include，但tsc 不会把 xxx 的代码插入替换到三斜线指令的位置<br/></li></ul></ul><li data-pid=\"H5EtW6Z6\">声明文件：</li><ul><li data-pid=\"kTL_xFND\">定义：.d.ts 后缀的文件</li><li data-pid=\"eQO1ov7g\">特点：</li><ul><li data-pid=\"OSjRefm8\">里面不允许有任何函数的实现</li><li data-pid=\"LpzCHaZk\">顶层作用域里只能出现 <code>declare</code> <code>import</code> <code>export</code> <code>interface</code> <code>三斜线指令</code><br/> </li></ul></ul><li data-pid=\"UybEq6_H\">全局类声明文件：</li><ul><li data-pid=\"rTulRqe0\">定义：如果一个声明文件的<b>顶层作用域</b>中没有 <code>import</code> &amp;&amp; <code>export</code>，那么这个声明文件就是一个全局类声明文件</li><li data-pid=\"OE9BgJwn\">特点：<b>如果一个全局类声明文件在 ts 处理范围内，</b> 那么全局类声明文件中的 declare 会在全局生效<br/></li></ul><li data-pid=\"_Um9T-xP\">模块类声明文件：</li><ul><li data-pid=\"11fmVwIO\">定义：如果一个声明文件的<b>顶层作用域</b>中有 <code>import</code> || <code>export</code>，那么这个声明文件就是一个模块类声明文件</li><li data-pid=\"PlnitOCJ\">特点：里面的 declare 不会在全局生效，需要按模块的方式导出来才能生效</li></ul></ul><h3>一些行为：</h3><ul><li data-pid=\"ia2T0l-5\">ts 编译器会包含下面的所有 .d.ts 文件：</li><ul><li data-pid=\"NFgQvuoz\">tsconfig.json 的 <code>file （并集） include （差集） exclude</code></li><li data-pid=\"u-debGEH\">对于 node_modules/@types 下的每个 npm 包，ts 会按照 node 解析包的那一套流程（如果有 package.json并且里面有 main 字段，将 main 字段的文件作为入口文件。如果上面流程失败，将 index.d.ts 作为入口文件。否则抛出错误）。这个入口文件里面的三斜线指令、import 所引入的其他文件，会按照<b>其他文件自己的规则生效</b> </li></ul></ul><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// node_modules/@types/my/index.d.ts\n</span><span class=\"c1\"></span>\n<span class=\"c1\">/// &lt;reference path=&#34;a.d.ts&#34;/&gt;\n</span><span class=\"c1\"></span><span class=\"kr\">import</span> <span class=\"s2\">&#34;./b&#34;</span><span class=\"p\">;</span> \n<span class=\"kr\">import</span> <span class=\"nx\">c</span> <span class=\"nx\">from</span> <span class=\"s2\">&#34;./c&#34;</span><span class=\"p\">;</span>  \n<span class=\"nx\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">index</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> \n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">index</span><span class=\"p\">;</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// node_modules/@types/my/a.d.ts\n</span><span class=\"c1\"></span>\n<span class=\"nx\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// node_modules/@types/my/b.d.ts\n</span><span class=\"c1\"></span>\n<span class=\"nx\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">b</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// node_modules/@types/my/c.d.ts\n</span><span class=\"c1\"></span>\n<span class=\"nx\">declare</span> <span class=\"kr\">const</span> <span class=\"nx\">c</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"nx\">c</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"7cNw1u-6\">上面的代码的效果为:</p><ul><ul><li data-pid=\"GEPreR49\">全局：a、b</li><li data-pid=\"pVJLTVgK\">非全局： index、c</li></ul></ul><p data-pid=\"h2yN0pyv\">index 文件中，由于含有 import export，所以为模块类声明文件，里面使用 declare 声明的 index 为非全局，在被使用时只有 <code>import index from &#39;my&#39;;</code>时才能拿到 index。而引入的 a、b 文件，这两个文件虽然是被 index 这个模块类声明文件引入的，但是这两个文件自己本身是全局类声明文件（既没有 import 也没有 export），所以这两个文件里面 declare 的变量都可以在全局访问到。而引入的 c 文件里面含有 export，所以为模块文件，里面的 c 无法在全局被访问。</p><p data-pid=\"ZVdAZeQR\"><b>FAQ | Tips | 注意事项：</b></p><p data-pid=\"En7mrEOG\">1. 既然 a、b 文件为全局类声明文件，那么为什么还要在 index 中引入？<br/><br/>因为一般情况下 tsconfig.json 的 exclude 会加入 node_modules，所以理论上 node_modules 里面的所有文件都不会被 ts 编译。而 node_modules/@types 比较特别，里面的每个包会被作为一个模块，这个模块只会有一个入口文件（比如默认的 index.d.ts）。这个入口文件中没有引入的，都不会被 ts 处理。所以上面的代码在 index 文件中去掉【import &#34;./b&#34;;】 之后，b 文件中的【declare const b = 1;】不会被 ts 看到（a 同理）。<br/></p><p data-pid=\"SFvK1M8b\">2. import 和 /// &lt;reference /&gt; 的区别是什么？<br/><br/>主要还是历史遗留问题，三斜线指令出现的时候 ES6 还没出来。三斜线指令不会将一个全局文件变成模块文件，而 import 会。如果你需要一个在一个全局文件 b 里用另一个文件 c 里的变量，就可以用三斜线指令，因为用 import 会把 b 变成一个模块文件。<br/></p><p data-pid=\"6MuY-Re7\">3. 我想在一个模块文件里导出全局变量怎么办？ <br/><br/>这种情况只能导出一个 namespace：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">export</span> <span class=\"kr\">const</span> <span class=\"nx\">d</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>     \n<span class=\"kr\">export</span> <span class=\"nx\">as</span> <span class=\"nx\">namespace</span> <span class=\"nx\">whateverthisis</span><span class=\"p\">;</span> <span class=\"c1\">// 全局 namespace 名，whateverthisis.d 就可以访问到\n</span></code></pre></div><p data-pid=\"crqCLd0B\">（export as namespace 只能在模块文件里面使用）<br/></p><p data-pid=\"nm63PMrl\">4. vscode 的 ts 代码提示的缓存机制<br/><br/>vscode 的 ts 代码提示会缓存 node_modules/@types 下的每个 package 的入口文件地址（package.json 的 main 字段）。如果手动去改变了某个包的 main 字段，改成了另一个文件，那么在重启 ts server（vs code自带的一个东西），修改是不会生效的，入口文件依旧是以前的入口文件（但是去修改入口文件里的内容是可以生效的)<br/></p><p data-pid=\"K1JYYMWD\">5. declare module A 和 declare module &#39;a&#39; 的区别<br/><br/>前者已经被废弃，使用 declare namespace A代替；后者用于扩展一个已有的模块 a。全局文件下的 declare module &#39;xx&#39; 会在全局环境生成一个名为 xx 的模块，并且可以在里面定义这个 xx 模块应该有的导出，一般用来添加或补充 node_modules 中的模块的声明文件。同名的 declare module 里面的导出会合并。</p><h2>使用方式</h2><p data-pid=\"rG_0S1yl\">常用的是下面的 <b>1.1</b> 、<b>2.3</b></p><h3>1. 添加全局的代码提示（直接输入变量即可获得代码提示）</h3><h3>1.1 添加自定义全局变量</h3><h3>场景：全局注入变量，比如小程序的 Page</h3><p data-pid=\"K372Cc57\"><b>正确操作</b>：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">//global.d.ts （简化版）\n</span><span class=\"c1\"></span>\n<span class=\"kr\">interface</span> <span class=\"nx\">Opt</span><span class=\"o\">&lt;</span><span class=\"nx\">D</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">data</span><span class=\"o\">:</span> <span class=\"nx\">D</span><span class=\"p\">,</span> \n<span class=\"p\">}</span>  \n\n<span class=\"nx\">declare</span> <span class=\"kd\">function</span> <span class=\"nx\">Page</span><span class=\"o\">&lt;</span><span class=\"nx\">D</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nx\">opt</span><span class=\"o\">:</span><span class=\"nx\">Opt</span><span class=\"o\">&lt;</span><span class=\"nx\">D</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"k\">void</span><span class=\"p\">;</span>\n</code></pre></div><p data-pid=\"-1rNdPOv\">1.2 添加第三方库的全局代码提示</p><h3>场景：添加 jquery、lodash 等全局变量</h3><p data-pid=\"UuM6U3gP\">在简单 web 页面的场景下，经常是直接新建一个 index.html，在里面用 script 标签引入 jquery lodash 的外部 CDN。然后新建一个 index.js，在 index.html 中用 script 标签引入 index.js，这样在 index.js 里是可以直接使用 $ _ 这两个变量的，但是输入 $ _ 时无法获得代码提示。 (image)</p><p data-pid=\"5NAdybfz\">如果获得了代码提示，大概率是 ts 的缓存目录生效了：~/Library/Caches/typescript/3.8 里面可能有曾经下载过的 npm 包。不过一个正常的 ts 项目一般根目录会有 tsconfig.json ，里面的 include 里可以规定需要 ts 编译的目录，这个字段填写好了之后 ts 就不会去缓存目录里找了，除非你把缓存目录也写进去。</p><p data-pid=\"CxUtfZ_-\"><b>正确操作</b>： <code>npm i @types/jquery @types/lodash -D</code></p><p data-pid=\"wI1ayaLd\">这样会得到 node_modules/@types/jquery 和 node_modules/@types/lodash 两个目录。ts 会检查 node_modules/@types 下面的所有 .d.ts 文件，所以编辑器就获得了 <code>jQuery $ _</code> 三个全局变量的代码提示。</p><h3>2. 添加局部的模块代码提示</h3><h3>2.1 扩展挂载到全局的模块的代码提示</h3><p data-pid=\"zdpBagqG\"><b>场景1：给 Array.prototype 加一个方法</b></p><p data-pid=\"rrG2IHvU\">虽然这种行为不被推荐，但是某些情况下你可能的确需要这么做。比如现在给 Array.prototype 加了一个 getSum 方法，获取数组中所有元素的和：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// somewhere_else.js\n</span><span class=\"c1\"></span>\n<span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"nx\">prototype</span><span class=\"p\">.</span><span class=\"nx\">getSum</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">(){</span>    \n  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">reduce</span><span class=\"p\">((</span><span class=\"nx\">result</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">result</span> <span class=\"o\">+</span> <span class=\"nx\">value</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">);</span> \n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"oxVpstIm\"><b>正确操作</b>：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// global.d.ts\n</span><span class=\"c1\"></span>\n<span class=\"kr\">interface</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>   \n  <span class=\"nx\">getSum</span><span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"nx\">number</span> <span class=\"o\">?</span> <span class=\"nx\">number</span> <span class=\"o\">:</span> <span class=\"k\">void</span><span class=\"p\">;</span> \n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"m9xhFCkl\"><b>场景2：给 jQuery 加一个静态方法 $.getHelloWorld</b></p><p data-pid=\"j3e8y5VS\">通过简单分析（opt+click）可以知道，暴露在全局的 jQuery 和 $ 本身是两个全局的 const 常量，类型是 JQueryStatic，所以只需要给这个 JQueryStatic 接口增加 getHelloWorld 方法就可以了。</p><p data-pid=\"HgXFIY37\"><b>正确操作</b>：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// global.d.ts\n</span><span class=\"c1\"></span>\n<span class=\"kr\">interface</span> <span class=\"nx\">JQueryStatic</span> <span class=\"p\">{</span>   \n  <span class=\"nx\">getHelloWorld</span><span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span> \n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"EqAssEGa\"><b>场景3：给 lodash 加一个静态方法 _.getHelloWorld</b></p><p data-pid=\"d2gn7DPk\">通过简单分析（opt+click）可以知道，暴露在全局的 _ 本身是一个 const 变量，类型为 _.LoDashStatic，但是这个 _.LoDashStatic 并没有被暴露到全局，所以需要使用 <code>declare module</code> 的语法来 override lodash 这个模块</p><p data-pid=\"RyM55h_c\"><b>正确操作</b>：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// module.d.ts （和 global.d.ts 分开，否则会使 global.d.ts 中的 declare 失去全局性）\n</span><span class=\"c1\"></span>\n<span class=\"kr\">import</span> <span class=\"nx\">_</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;lodash&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// 注意这个 import 必须写在 declare module 外部 \n</span><span class=\"c1\"></span>\n<span class=\"nx\">declare</span> <span class=\"nx\">module</span> <span class=\"s1\">&#39;lodash&#39;</span> <span class=\"p\">{</span>\n  <span class=\"kr\">interface</span> <span class=\"nx\">LoDashStatic</span> <span class=\"p\">{</span>\n    <span class=\"nx\">getHelloWorld</span><span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span>   \n  <span class=\"p\">}</span>  \n<span class=\"p\">}</span>\n</code></pre></div><h3>2.2 扩展非全局模块，但自带声明文件的模块（esm、commonjs）</h3><p data-pid=\"dbrBAOMH\"><b>场景：node 的 fs 增加一个 getHelloWorld 方法</b></p><p data-pid=\"EDI2czPI\">先通过<code>npm i @types/node -D</code>安装 node 的声明文件</p><p data-pid=\"mHezE6rP\"><b>正确操作</b>：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// global.d.ts\n</span><span class=\"c1\"></span>\n<span class=\"nx\">declare</span> <span class=\"nx\">module</span> <span class=\"s1\">&#39;fs&#39;</span> <span class=\"p\">{</span>   \n  <span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">getHelloWorld</span><span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"nx\">string</span><span class=\"p\">;</span> \n<span class=\"p\">}</span>\n</code></pre></div><h3>2.3 扩展非全局模块，并且不自带声明文件的模块</h3><p data-pid=\"Ib3DCs-_\"><b>场景1：你从 npm 上面下载了一个 ex-module 模块，但是这个作者很懒，没有提供声明文件，@types 社区也没有人提供，你想自己给 ex-module 写声明文件，便于后续开发</b></p><p data-pid=\"IJHmMD20\">假设 ex-module 长这样:</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// node_modules/ex-module/index.js\n</span><span class=\"c1\"></span>\n<span class=\"kr\">import</span> <span class=\"nx\">_</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;lodash&#39;</span><span class=\"p\">;</span>  \n\n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span> <span class=\"p\">}</span> \n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">minus</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">-</span> <span class=\"nx\">b</span><span class=\"p\">;</span> <span class=\"p\">}</span> \n<span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">getLodash</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">_</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"SLVGlky4\"><b>正确操作</b>：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// global.d.ts\n</span><span class=\"c1\"></span>\n<span class=\"nx\">declare</span> <span class=\"nx\">module</span> <span class=\"s1\">&#39;ex-module&#39;</span> <span class=\"p\">{</span>   \n  <span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">LoDashStatic</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;lodash&#39;</span><span class=\"p\">;</span> <span class=\"c1\">// 注意这个 import 必须写在 declare module 内部 \n</span><span class=\"c1\"></span>  <span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">;</span>   \n  <span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">minus</span><span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">;</span>   \n  <span class=\"kr\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">getLodash</span><span class=\"p\">()</span><span class=\"o\">:</span> <span class=\"nx\">LoDashStatic</span><span class=\"p\">;</span> \n<span class=\"p\">}</span>\n</code></pre></div><p class=\"ztext-empty-paragraph\"><br/></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// index.js\n</span><span class=\"c1\"></span>\n<span class=\"kr\">import</span> <span class=\"nx\">getLodash</span><span class=\"p\">,{</span> <span class=\"nx\">add</span><span class=\"p\">,</span> <span class=\"nx\">minus</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;ex-module&#39;</span><span class=\"p\">;</span>\n\n<span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">130</span><span class=\"p\">);</span>\n</code></pre></div><p data-pid=\"uBx9s3Pf\"><br/>坑点：</p><ul><li data-pid=\"vDUFnBJ1\">由于 js + ts 模块化过于混乱，各自的实现也有冲突，建议全部严格按照 ES6 的方式来写</li><li data-pid=\"4HN8FJSQ\">比如上面的 global.ts 中，如果删掉 export default 宇航，在 index.js 中 <code>import ex from &#39;ex-module&#39;</code>，输入 ex 时候， vscode 会提示 ex.add 是一个函数，但实际上 ex 是 undefined</li></ul><p data-pid=\"6wOzm9Vx\"><b>场景2：你用 js 给自己写了一个 util 库，里面有各种各样的工具函数，想给他们加上声明文件</b></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// util/math.js\n</span><span class=\"c1\"></span>\n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>  \n  <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">+</span> <span class=\"nx\">b</span><span class=\"p\">;</span> \n<span class=\"p\">}</span>  \n\n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">minus</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>   \n  <span class=\"k\">return</span> <span class=\"nx\">a</span> <span class=\"o\">-</span> <span class=\"nx\">b</span><span class=\"p\">;</span> \n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"z13p5Krb\"><b>正确操作</b>：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// util/math.d.ts\n</span><span class=\"c1\"></span>\n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">;</span> \n<span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">minus</span><span class=\"p\">(</span><span class=\"nx\">a</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">,</span> <span class=\"nx\">b</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">number</span><span class=\"p\">;</span>\n</code></pre></div><h3>总结： ts 由于各种复杂的历史遗留问题，模块方面比较混乱，坑也很多，还是建议统一用 ES6 模块</h3>",
            "voteup_count": 49,
            "comment_count": 4
        },
        "created": "2020-04-19T02:17:15+08:00"
    },
    {
        "content": {
            "id": 257359743,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/67846139/answer/257359743",
            "created_time": 1510209796,
            "updated_time": 1510209926,
            "question": {
                "type": "question",
                "id": 67846139,
                "title": "如果你是一个Golang面试官，你会问哪些问题？",
                "question_type": "normal",
                "created": 1510151644,
                "updated_time": 1510184069,
                "url": "https://www.zhihu.com/question/67846139",
                "is_deleted": false
            },
            "author": {
                "id": "0ff2cdabf81790c498a53e31e2c43219",
                "url_token": "hellokaton",
                "name": "HelloKaton",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-863da60cef7633716ef630cdb905ded0_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-863da60cef7633716ef630cdb905ded0.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/0ff2cdabf81790c498a53e31e2c43219",
                "user_type": "people",
                "headline": "眼里不容沙，笑里不藏刀。萌即正义~",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 1116,
            "comment_count": 37,
            "thanks_count": 307,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"QE6bcAWT\">这篇文章翻译自一位外国友人的关于面试后端程序员的文章，我比较喜爱这篇文章。一是因为它极大的拓宽了我的视角，另一方面是其中的一些问题非常具有启发性。不仅对于面试者，对于面试官来说也是个不错的参考。于是迫不及待的翻译了一下，给各位看官做个参考。<br/><br/>原文参见 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/arialdomartini\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">@arialdomartini</a>的: <a href=\"https://link.zhihu.com/?target=https%3A//github.com/arialdomartini/Back-End-Developer-Interview-Questions\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Back-End Developer Interview Questions</a></p><p data-pid=\"zo4dThyF\">以下是原文翻译。</p><ol><li data-pid=\"0B1oafTN\">通用问题</li><li data-pid=\"xn3noAYK\">开放式问题</li><li data-pid=\"6-Bp8tK6\">设计模式相关问题</li><li data-pid=\"oOWmGZ43\">代码设计相关问题</li><li data-pid=\"dl9LJk9H\">语言相关问题</li><li data-pid=\"j6IyGp9h\">Web相关问题</li><li data-pid=\"L7_ju8p_\">数据库相关问题</li><li data-pid=\"-fjbaDUW\">非关系型数据库相关问题</li><li data-pid=\"nfm9iaHd\">代码版本管理相关问题</li><li data-pid=\"ShGwQXKk\">并发问题</li><li data-pid=\"39UXCXbf\">分布式系统相关问题</li><li data-pid=\"Ip0aOnpu\">软件生命周期和团队管理相关问题</li><li data-pid=\"YoMmKKeA\">逻辑和算法相关问题</li><li data-pid=\"q1a5Oblf\">软件架构相关问题</li><li data-pid=\"jynQKerw\">面向服务架构(SOA)和微服务(Microservice)相关问题</li><li data-pid=\"BvDBEvLs\">安全相关问题</li><li data-pid=\"2wZjw6sZ\">比尔盖茨式问题</li><li data-pid=\"MHikSf14\">代码示例问题</li></ol><p data-pid=\"_tVQfaB1\"><b>通用问题:</b></p><ul><li data-pid=\"m2DAtyLN\">语言设计中空引用(<a href=\"https://link.zhihu.com/?target=http%3A//programmers.stackexchange.com/questions/12777/are-null-references-really-a-bad-thing\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">null reference</a>)的存在有什么问题？假设你想要将空引用的概念从你的首选语言中移除，可能导致什么结果？</li><li data-pid=\"yNnVOO6x\">为什么函数式编程重要？什么时候适用函数式语言？</li><li data-pid=\"oMf84I6n\">设计(design)、架构(architecture)、功能(functionality)和美学(aesthetic)之间有什么区别？讨论一下。</li><li data-pid=\"mqfXfb6P\">微软、谷歌、欧朋(opera)和火狐这类公司是如何从他们的浏览器中获利的？</li><li data-pid=\"sjsS18nv\">为什么打开TCP套接字有很大的开销？</li><li data-pid=\"AAZZ3imj\">封装的重要性体现在哪儿？</li><li data-pid=\"h-7EFKvP\">什么是实时系统？它与普通系统有什么区别？</li><li data-pid=\"6PWfTwIX\">实时语言(real-time language)和堆内存分配(heap memory allocation)之间的关系是什么？</li><li data-pid=\"TmFnp4pI\">不变性(Immutability)是指: (变量的)值只能在创建的时候被设置一次，之后就不能被改变。为什么不变性对写更加安全的代码有帮助？</li><li data-pid=\"gqdbeU8p\">可变值(mutable values)和不可变值(immutable values)有哪些优缺点？</li><li data-pid=\"hxv1SP1v\">什么是O/R阻抗失衡(Object-Relational impedence mismatch)？</li><li data-pid=\"PCxu-BMq\">如果你需要使用缓存，你使用哪些原则来确定缓存的大小？</li><li data-pid=\"zv11iDYG\">TCP和HTTP有什么区别？</li><li data-pid=\"sRNvLp7R\">在客户端渲染(client-side rendering)和服务端渲染(server-side rendering)之间，你是如何权衡的？</li><li data-pid=\"69CfI1ZM\">如何在一个不可靠的协议之上构建一个可靠的通信协议？</li></ul><p data-pid=\"CH8WeX-a\"><b>开放式问题:</b></p><ul><li data-pid=\"1JAtUo6G\">为什么人们会抵制变化？</li><li data-pid=\"zMrGWAYN\">如何向你的祖母解释什么是线程？</li><li data-pid=\"aSvpAbVk\">作为一个软件工程师，你想要既要有创新力，又要产出具有可预测性。采用什么策略才能使这两个目标可以共存呢？</li><li data-pid=\"6iAcAlRI\">什么是好的代码？</li><li data-pid=\"Nju-L7Hw\">解释什么是流(Streaming)和如何实现一个流？</li><li data-pid=\"Q14O-1BQ\">假设你的公司给你一周的时间，用来改善你和同事的生活: 你将如何使用这一周？</li><li data-pid=\"cCIv9dJl\">本周你学了什么？</li><li data-pid=\"t3LNZ1tA\">所有的设计中都会有美学元素(aesthetic element)的存在。问题是，你认为美学元素是你的朋友还是敌人？</li><li data-pid=\"HDRTBmSg\">列出最近你读过的5本书。</li><li data-pid=\"5-xc8v4B\">假设目前有个大型公司（非常有钱），他们的开发流程是瀑布式流程（Waterfall），如果需要你在他们公司引入持续交付（<a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Continuous_delivery\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Continue Devivery</a>），你会怎么做？</li><li data-pid=\"J0QEQ7t5\">我们来谈谈&#34;<i>重复造轮子</i>&#34;,&#34;<i>非我发明症</i>&#34;, &#34;<i>吃自己做出来的狗粮</i>&#34;的这些做法吧。</li></ul><p data-pid=\"EsWQD15Q\">(注: 重复造轮子: Reinventing the wheel; 非我发明症:Not Invented Here Syndrome; 吃自己做出来的狗粮: Eating Your Own Dog Food)</p><ul><li data-pid=\"wdJ2BXb6\">在你当前的工作流中，什么事情是你计划下一步需要自动化的？</li><li data-pid=\"xQ_SL2rQ\">为什么写软件是困难的？是什么使软件的维护变得困难？</li><li data-pid=\"zThnJ-Al\">你更喜欢在全新项目（Green Field Project）上工作还是在已有项目(Brown Field Project)基础上工作？为什么？</li><li data-pid=\"-rBUlgTC\"><a href=\"https://link.zhihu.com/?target=https%3A//github.com/alex/what-happens-when\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">当你在浏览器地址栏输入google.com回车之后都发生了什么?</a></li><li data-pid=\"q88zInx1\">当操作系统CPU处于空闲的时候，它可能在处理哪些事情？</li><li data-pid=\"S5yfg8T4\">如何向一个5岁的孩子解释什么是Unicode/数据库事务？</li><li data-pid=\"Eyk8mdIk\">如何维护单体架构(monolithic architecture)？</li><li data-pid=\"8q2a6iXt\">一个&#34;专业的开发者&#34;意味着什么？</li><li data-pid=\"pt5mOLyW\">软件开发是艺术、是技艺还是工程？你的观点是什么？</li><li data-pid=\"LzjQOCMT\">&#34;喜欢这个的人也喜欢...&#34;，如何在一个电子商务商店里实现这种功能？</li><li data-pid=\"4uv2-kUU\">为什么在创新上，企业会比创业公司慢些？</li><li data-pid=\"sE_fo4jn\">为什么说，你不应该尝试应用自己发明或者设计的密码学？</li></ul><p data-pid=\"tHbxge02\"><b>设计模式相关问题:</b></p><ul><li data-pid=\"dE1iXgbz\">请用一个例子表明，全局对象是邪恶的存在。</li><li data-pid=\"WTk9eeSO\">假设你工作的系统不支持事务性，你会如何从头开始实现它？</li><li data-pid=\"v_7UnPMM\">什么是好莱坞原则（Hollywood Principles）？</li><li data-pid=\"Da9OkKmu\">关于迪米特法则(最少知识原则): 写一段代码违反它, 然后修复它。</li></ul><p data-pid=\"UpWY8zLB\">（注: 迪米特法则：the Law of Demeter, 最少知识原则： the Principle of Least Knowledge）</p><ul><li data-pid=\"3LWN0jvi\">Active-Record模式有什么限制和缺陷？</li><li data-pid=\"B-ZX1UCT\">Data-Mapper模式和Active-Record模式有什么区别？</li><li data-pid=\"yojRHobq\">空对象模式(Null Object Pattern)的目的是什么？</li><li data-pid=\"ANN_YC0d\">为什么组合(Composition)比继承(Inheritance)更好？</li><li data-pid=\"16kZcLLO\">什么是反腐败层(Anti-corruption Layer)?</li><li data-pid=\"UyVlAy1J\">你可以写一个线程安全的单例(Singleton)类吗？</li><li data-pid=\"f6rIw_kD\">数据抽象(Data Abstraction)能力是指能改变实现而不影响客户端的这种能力。请构造一个一个例子，违反这个特性，并且尝试修复它。</li><li data-pid=\"Lx1mAiba\">你是如何处理依赖关系地狱(Dependency Hell)的？</li><li data-pid=\"PUZ0Vt-T\">为什么说goto语句是恶魔般的存在？</li><li data-pid=\"d_FKMft3\">健壮性是进行软件设计时的一个通用原则，它建议 <i>“发送时要保守，接收时要开放”</i>。这也经常被写成，“做一个有耐心的读者，做一个谨慎的作者”。你能解释一些这背后的逻辑吗？</li></ul><p data-pid=\"ND5TnULE\">译者注： &#34;发送时要保守，接收时要开发&#34;的原文是： &#34;Be conservative in what you send, be liberal in what you accept&#34;，有点类似于“严于律己，宽于待人”的意味。</p><p data-pid=\"N1ZP-cqx\"><b>代码设计相关问题:</b></p><ul><li data-pid=\"_KjWMb2b\">你在进行软件设计时会考虑软件测试吗？软件测试是如何影响软件设计的？</li><li data-pid=\"Ch60QrIs\">内聚和耦合的区别是什么？</li><li data-pid=\"7h7mt5Cz\">重构在哪些场景下有用？</li><li data-pid=\"u0ON9Xxs\">代码中的注释有用吗？</li><li data-pid=\"P-QNsEW0\">设计和架构有什么区别？</li><li data-pid=\"hYA_pb3_\">为什么在测试驱动开发(TDD)中是先写测试，再写代码？</li><li data-pid=\"pH0CUFPk\">C++支持多继承，Java允许类实现多个接口。这些特性对正交性有什么影响？使用多继承和使用多接口有区别吗？[这个问题来自Andrew .Hunt 和 David Thomas写的《程序员修炼之道》]</li><li data-pid=\"zJWAetFd\">在存储过程（Stored Procedures）中写业务逻辑有什么优缺点？</li></ul><p data-pid=\"kHpU0rpf\"><b>语言相关问题:</b></p><ul><li data-pid=\"8otVRxqJ\">告诉我你的首选语言的三个最坏的缺陷。</li><li data-pid=\"cLaBF5tw\">为什么现在函数式编程这么越来越受关注？</li><li data-pid=\"4rwRT0sH\">闭包是什么？它有什么用途？闭包和类有什么共同点？</li><li data-pid=\"J3ZlZH9U\">泛型有什么用途？</li><li data-pid=\"SGCrOumP\">什么是高阶函数？有什么用途？用你的首选语言写个例子出来。</li><li data-pid=\"_ScTGZSX\">讨论一下，如何写一个循环，然后把它转换成递归函数，要避免易变性。</li><li data-pid=\"7FlCfQh5\">有些语言将函数视为第一公民，这是什么意思？</li><li data-pid=\"kfquTu7c\">用一个例子说明匿名函数是有用的。</li><li data-pid=\"FWWxPuK2\">什么是动态方法调度(Dynamic Method Dispatch)？</li><li data-pid=\"cuOezp5i\">名字空间(Namespace)有什么用？有什么可以替代它的吗？</li><li data-pid=\"5yFTN8oo\">谈谈Java和C#之间的互操作性(Interoperability) (任选其他两门语言都行)</li><li data-pid=\"zAqtmsNX\">为什么很多软件工程师不喜欢Java？</li><li data-pid=\"Kug2sq0x\">你认为好的语言好在哪里？差的语言差在哪里？</li><li data-pid=\"j-cJzDyO\">写两个函数，一个是&#34;引用透明的(Referentially Transparent)&#34;，另一个是&#34;引用不透明的(Referentially Opaque)&#34;。讨论之。</li><li data-pid=\"IrEYXBMY\">什么是栈？什么是堆？</li><li data-pid=\"UyVyeb6V\">为什么一个语言中，&#34;函数是第一公民&#34;是很重要的？</li><li data-pid=\"0Y-RhePb\">模式匹配(Pattern Matching)和Switch语句(Switch clauses)的区别在哪儿？</li><li data-pid=\"SjNTBTrt\">为什么有些语言设计上没有异常机制？这有什么优缺点？</li><li data-pid=\"XzwrWQKi\">如果<code>Cat</code>是一个<code>Animal</code>, 那么<code>TaskCare&lt;Cat&gt;</code>是一个<code>TakeCare&lt;Animal&gt;</code>吗？</li></ul><p data-pid=\"2tBddrsx\"><b>web相关问题:</b></p><ul><li data-pid=\"jov6m3v6\">为什么&#34;第一方cookie(first-party cookie)&#34;和&#34;第三方cookie(third-party cookie)&#34;被如此不同的对待？</li></ul><p data-pid=\"gtfPORCE\"><b>数据库相关问题:</b></p><ul><li data-pid=\"VO6YWfRs\">如果要你将一个项目从MySQL迁移至PostgreSQL中，你会如何迁移？</li><li data-pid=\"yvUxwzlB\">为什么<code>SELECT * FROM table WHERE field = null</code>不能匹配空的字段？</li><li data-pid=\"EkcLVYCx\">什么是ACID(原子性，一致性，隔离性，持久性)原则？</li><li data-pid=\"Xju7Ycmi\">你是如何进行数据库模式(Database schema)迁移的？</li><li data-pid=\"TuG0ie-k\">延迟加载(lazy loading)是如何实现的？什么场景下有用？他有什么缺陷？</li><li data-pid=\"Veb6dZ8x\">什么是N+1问题？</li><li data-pid=\"qrgc4LlV\">如何找出应用中开销最大的查询？</li></ul><p data-pid=\"2i8EUaNh\"><b>非关系型数据库相关问题:</b></p><ul><li data-pid=\"bzv4IkiD\">什么是最终一致性(Eventual Consistency)？</li><li data-pid=\"XrcrXNZk\">关于CAP理论，举一些CP、AP、CA系统的例子。</li><li data-pid=\"iXwvoAEi\">NoSQL是如何解决可伸缩性的挑战的？</li><li data-pid=\"OrQBU8Q2\">什么情况下你会使用类似于MongoDB的文档数据库而不是关系型数据库（如Mysql或者PostgreSQL）？</li></ul><p data-pid=\"n1N-Iy-D\"><b>代码版本管理相关问题:</b></p><ul><li data-pid=\"QcfUmY5z\">为什么在Mercurial或者git中(管理)分支比SVN容易？</li><li data-pid=\"qN2FVeJ9\">分散式版本控制系统（比如git），相比集中式版本控制系统（如svn）有哪些优势和劣势？</li></ul><p data-pid=\"RkVW_zDk\">(注:集中式版本控制系统: Centralized Version Control Systems；分散式版本控制系统: Distributed Version Control Systems)</p><ul><li data-pid=\"7oxEMNk0\">能描述一下什么是GitHubFlow和GitFlow工作流吗？</li><li data-pid=\"g_OA0inJ\">什么是rebase？</li><li data-pid=\"MuPRd-b0\">为什么合并操作(merge)在Mercurial和git中比在SVN和CVS中容易？</li></ul><p data-pid=\"kIUe772G\"><b>并发问题:</b></p><ul><li data-pid=\"jMeI94fp\">为什么我们需要并发呢？解释一下。</li><li data-pid=\"VWGu0FVJ\">为什么测试多线程/并发代码这么困难？</li><li data-pid=\"_R3dQwL8\">什么是竞争条件（Race Condition）？用任何一个语言写一个例子。</li><li data-pid=\"C8KCFA3V\">什么是死锁？用代码解释一下。</li><li data-pid=\"cBWRMhZS\">什么是饿死？</li><li data-pid=\"FXxtG_o4\">什么是Wait-Free算法？</li></ul><p data-pid=\"FHKcx5tn\"><b>分布式系统相关问题:</b></p><ul><li data-pid=\"rLTXaLZ7\">怎么测试一个分布式系统？</li><li data-pid=\"UhwAhIne\">什么场景下你会在两个系统中采用异步通信机制？</li><li data-pid=\"wlkZkYKr\">远程过程调用的通用缺点是什么？</li><li data-pid=\"CWIrhuEt\">如果你为了可扩展性和鲁棒性而构建一个分布式的系统，分别在封闭安全的网络环境情况下，和地理上的位置不同但是网络环境不是封闭和安全的情况下，你会考虑什么不同的事情？</li><li data-pid=\"MsE2MWoG\">在Web应用中如何管理容错性？在桌面端呢？</li><li data-pid=\"Wqty6wY5\">在分布式系统中，如何处理故障？</li><li data-pid=\"r8zXwI5M\">让我们来谈谈网络分裂(network partitions)后有的几种恢复的手段吧。</li><li data-pid=\"UrfU_TOf\">你认为分布式计算中有哪些谬论？</li><li data-pid=\"j7Z0YP7Y\">你在什么时候会使用Request/Response模式，什么时候使用Publish/Subscribe模式？</li></ul><p data-pid=\"idh1dtp6\"><b>软件生命周期和团队管理相关问题:</b></p><ul><li data-pid=\"ab7nwBQF\">什么是敏捷（Agility）？</li><li data-pid=\"PtwWXjhj\">你是如何处理遗留代码（Legacy Code）的？</li><li data-pid=\"0OwSZqg6\">假设我是你们公司的CEO，请向我解释什么是看板，并且说服我在它上面投资。</li><li data-pid=\"koTCVLex\">敏捷（Agility）和瀑布（Waterfall）之间的最大区别是什么？</li><li data-pid=\"hlCzpxet\">作为团队管理者，你对会议太多这个问题是如何处理的？</li><li data-pid=\"vhAlfLd-\">你会如何处理延期很长时间了的项目？</li><li data-pid=\"VVun-o24\">&#34;<i>个体与交互重于过程和工具</i>&#34;和&#34;<i>客户协作重于合同谈判</i>&#34;占了敏捷宣言（Agile Manifesto）的一半，谈论一下这两个观念。</li><li data-pid=\"QYe1J0md\">如果你是你们公司的CTO，你会采取什么样的决策？</li><li data-pid=\"DoxGZNAu\">你觉得项目经理有用吗？</li><li data-pid=\"F-u039mJ\">如果要你组织一个弹性工作制的开发团队（即没有强制工作时间的要求），并且假期制度是&#34;按需休假&#34;，你会如何做？</li><li data-pid=\"JFfUoXEs\">你会如何管理一个人员流动非常高的团队？如何在不加薪的条件下说服团队成员不要离开？</li><li data-pid=\"Ofmkz4Im\">除了代码之外，你最关注你的同事的哪3项素质？</li><li data-pid=\"3UsMstB-\">关于代码，你最希望非技术人员能知道的的三件事是什么？</li></ul><p data-pid=\"rjA_IGRB\"><b>逻辑和算法相关问题:</b></p><ul><li data-pid=\"HbRmzqP4\">只用LIFO栈如何构造一个FIFO队列？只用FIFO队列如何构造一个LIFO栈？</li><li data-pid=\"SasRBXS2\">写一段有栈溢出的代码。</li><li data-pid=\"m-X0mgpK\">写一个尾递归版本的阶乘函数。</li><li data-pid=\"ytE0wQNM\">使用任何一个语言，写一个REPL，功能是echo你输入的字符串。然后将它演化成一个逆波兰表达式的计算器。</li><li data-pid=\"uWaAn8b2\">如果需要你设计一个文件系统磁盘碎片整理程序，你会如何设计？</li><li data-pid=\"eMMD2E1I\">写一个生成随机迷宫的程序。</li><li data-pid=\"DmvN4MEI\">写一段有内存泄漏的示例代码。</li><li data-pid=\"U7BW9xZm\">随机生成一个的数字序列，里面每个数字都不同。</li><li data-pid=\"NDkMWUDi\">写一个简单的垃圾回收系统。</li><li data-pid=\"PAdOuNDB\">使用任何一门语言，写一个基本的消息代理。</li><li data-pid=\"i1J1YVv4\">写一个基础的web服务器，然后画一张线路图，展示你将来还想要实现的功能。</li><li data-pid=\"ymSBUC_s\">如何对一个10GB的文件进行排序？如果是10TB的数据，你会采用什么方法？</li><li data-pid=\"9V6fuPkL\">请实现<code>rnd()</code>函数</li></ul><p data-pid=\"Sfk6FgTe\"><b>软件架构相关问题:</b></p><ul><li data-pid=\"UjDjKY5z\">什么情况下缓存是没用的，甚至是危险的？</li><li data-pid=\"Zosrnk00\">为什么事件驱动的架构能提高可扩展性(scalability)？</li><li data-pid=\"uYjupU4O\">什么样的代码是可读性强的代码？</li><li data-pid=\"qMzFuxWK\">紧急设计(Emergent Design)和演化架构(Evolutionary Architecture)之间的区别是什么？</li><li data-pid=\"q4Dupea0\">横向扩展(scale out) vs 纵向扩展(scale up): 有什么区别？分别在什么场景下使用？</li><li data-pid=\"-oI5Zqcn\">分布式系统中如何处理&#34;故障切换(failover)&#34;和&#34;用户会话(user session)&#34;？</li><li data-pid=\"Wt-wznZT\">什么是CQRS(Command Query Responsibility Segregation)?他和最早的Command-Query Separation原则有什么区别？</li><li data-pid=\"bkRf1s9X\">什么是三层架构？</li><li data-pid=\"zXXZhSxy\">如何设计一个可扩展性高的系统？</li><li data-pid=\"EDs3ll-1\">处理C10k问题的策略有哪些？</li><li data-pid=\"Knetg9C1\">如果让你来设计一个去中心化的P2P系统，你会如何设计？</li><li data-pid=\"wS86519E\">为什么CGI的扩展性不好？</li><li data-pid=\"yQKWBMas\">在设计系统时，你如何防止供应商依赖(<a href=\"https://link.zhihu.com/?target=https%3A//sourcemaking.com/antipatterns/vendor-lock-in\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Vendor Lock-in</a>)？</li><li data-pid=\"ValJNXVu\">在可扩展性上，发布/订阅(Publish-Subscribe)模式有什么缺点？</li><li data-pid=\"JFQaUzQ1\">80年代以后，CPU有哪些变化？这些变化，对编程产生了什么影响？</li><li data-pid=\"NB-0wAn4\">性能生命周期(performace lifecycle)中，你认为哪个部分是需要考虑进去的？ 如何管理？</li><li data-pid=\"_vCBiQar\">除了恶意攻击造成的拒绝服务现象以外，哪些设计或者架构上的问题会导致拒绝服务？</li><li data-pid=\"XIzT2Ohz\">性能和可扩展性之间有什么关系？</li><li data-pid=\"1PSnr_mc\">什么时候紧耦合是OK的？</li><li data-pid=\"3pvXgdpM\">一个系统要有什么特征才能适配云计算环境(Cloud Ready)？</li><li data-pid=\"CFDbgKGs\">Does unity of design imply an aristocracy of architects?</li></ul><p data-pid=\"EwmUxVTp\"><b>面向服务架构(SOA)和微服务(Microservice)相关问题:</b></p><ul><li data-pid=\"HuCbuJUg\">在SOA中，为什么长期存活的事务(Long-lived transation)不被看好，而Saga却被看好？</li><li data-pid=\"Uam3IX_d\">SOA和MicroService之间有什么区别？</li><li data-pid=\"kgVtRRjV\">我们来谈谈Web服务的版本管理、版本兼容性、重大变更管理这些事情吧.</li><li data-pid=\"4qKnWFYZ\">在saga中事务和补偿操作(compensation operation)之间的区别是什么？在SOA中呢？</li><li data-pid=\"-A1iCfJS\">微服务不能做得太&#34;微&#34;，你认为什么时候微服务太&#34;微&#34;了？</li><li data-pid=\"21F7yv4i\">MicroService架构的优劣是什么？</li></ul><p data-pid=\"ZBkHCz_r\"><b>安全相关问题:</b></p><ul><li data-pid=\"hJGbVTvL\">什么是双因素认证(Two Factor Authentication)？在一个已有的Web应用中，你如何实现这种机制？</li></ul><p data-pid=\"-jFG80lE\"><b>比尔盖茨式问题:</b></p><ul><li data-pid=\"iLBGYGHB\">如果你把一面镜子放在扫描仪上，会发生什么？</li><li data-pid=\"SRI6r1A_\">假设有一个和你完全一样的克隆人，而他是你的上司，你愿意和他工作吗？</li><li data-pid=\"_uBDbr3O\">现在请你面试一下我。</li><li data-pid=\"Te-KEks_\">为什么Quora上的回答会比Yahoo Answer上的回答好？</li><li data-pid=\"rxEsJbi-\">对手是现代语言，你的任务是要为Cobol辩护，你会如何进行？</li><li data-pid=\"jPdzGUUs\">10年后的你是什么样子？</li><li data-pid=\"jBLImj7A\">假设你是我老板，我被解雇了。你会如何通知我？</li><li data-pid=\"TKav6sWI\">我想要重构一个系统，而你想要从头重写。我们来争论一下该怎么弄吧。然后我们反转角色，再争论一下。</li><li data-pid=\"0hJggkn6\">老板要你对公司撒谎，你的反应是什么？</li><li data-pid=\"bzyXPVKI\">如果你可以穿越到以前，你会给年轻时候的你什么建议？</li></ul><p data-pid=\"KKNp8UTd\"><b>代码示例问题:</b></p><ul><li data-pid=\"82WH0Mjd\">这段Javascript函数的输出是什么？</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">function</span> <span class=\"nf\">hookupevents</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">3</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"n\">document</span><span class=\"o\">.</span><span class=\"na\">getElementById</span><span class=\"o\">(</span><span class=\"s\">&#34;button&#34;</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n      <span class=\"o\">.</span><span class=\"na\">addEventListener</span><span class=\"o\">(</span><span class=\"s\">&#34;click&#34;</span><span class=\"o\">,</span> <span class=\"n\">function</span><span class=\"o\">()</span> <span class=\"o\">{</span> \n        <span class=\"n\">alert</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span> \n      <span class=\"o\">});</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li data-pid=\"VNPp2jRj\">关于类型擦除(Type Erasure)，这段Java代码的输出是什么？为什么？</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">li</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Integer</span><span class=\"o\">&gt;();</span>\n<span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Float</span><span class=\"o\">&gt;</span> <span class=\"n\">lf</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">Float</span><span class=\"o\">&gt;();</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">li</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"n\">lf</span><span class=\"o\">.</span><span class=\"na\">getClass</span><span class=\"o\">())</span> <span class=\"c1\">// evaluates to true\n</span><span class=\"c1\"></span>  <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">&#34;Equal&#34;</span><span class=\"o\">);</span></code></pre></div><ul><li data-pid=\"b3nhQ6Ff\">你能指出哪儿有内存泄漏吗？</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Stack</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"n\">Object</span><span class=\"o\">[]</span> <span class=\"n\">elements</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">0</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">DEFAULT_INITIAL_CAPACITY</span> <span class=\"o\">=</span> <span class=\"n\">16</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Stack</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">elements</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">Object</span><span class=\"o\">[</span><span class=\"n\">DEFAULT_INITIAL_CAPACITY</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">push</span><span class=\"o\">(</span><span class=\"n\">Object</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">ensureCapacity</span><span class=\"o\">();</span>\n        <span class=\"n\">elements</span><span class=\"o\">[</span><span class=\"n\">size</span><span class=\"o\">++]</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">Object</span> <span class=\"nf\">pop</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">size</span> <span class=\"o\">==</span> <span class=\"n\">0</span><span class=\"o\">)</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"n\">EmptyStackException</span><span class=\"o\">();</span>\n        <span class=\"k\">return</span> <span class=\"n\">elements</span><span class=\"o\">[--</span><span class=\"n\">size</span><span class=\"o\">];</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n</span><span class=\"cm\">     * Ensure space for at least one more element, roughly\n</span><span class=\"cm\">     * doubling the capacity each time the array needs to grow.\n</span><span class=\"cm\">     */</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">ensureCapacity</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">.</span><span class=\"na\">length</span> <span class=\"o\">==</span> <span class=\"n\">size</span><span class=\"o\">)</span>\n            <span class=\"n\">elements</span> <span class=\"o\">=</span> <span class=\"n\">Arrays</span><span class=\"o\">.</span><span class=\"na\">copyOf</span><span class=\"o\">(</span><span class=\"n\">elements</span><span class=\"o\">,</span> <span class=\"n\">2</span> <span class=\"o\">*</span> <span class=\"n\">size</span> <span class=\"o\">+</span> <span class=\"n\">1</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li data-pid=\"rcNXpAO2\"><code>if</code>语句，或者更加通用点，条件表达式通常是过程式编程/命令式编程的形式。你能去掉这段代码中的<code>switch</code>语句，用面向对象的方式来修改这段代码吗？</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Formatter</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"n\">Service</span> <span class=\"n\">service</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Formatter</span><span class=\"o\">(</span><span class=\"n\">Service</span> <span class=\"n\">service</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">service</span> <span class=\"o\">=</span> <span class=\"n\">service</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">doTheJob</span><span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">theInput</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">String</span> <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"na\">askForPermission</span><span class=\"o\">();</span>\n        <span class=\"k\">switch</span> <span class=\"o\">(</span><span class=\"n\">response</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">case</span> <span class=\"s\">&#34;FAIL&#34;</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;error&#34;</span><span class=\"o\">;</span>\n        <span class=\"k\">case</span> <span class=\"s\">&#34;OK&#34;</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">String</span><span class=\"o\">.</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"s\">&#34;%s%s&#34;</span><span class=\"o\">,</span> <span class=\"n\">theInput</span><span class=\"o\">,</span> <span class=\"n\">theInput</span><span class=\"o\">);</span>\n        <span class=\"k\">default</span><span class=\"o\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li data-pid=\"qscvUlD9\">你能去掉这里的<code>if</code>语句，将它改成更加面向对象吗？</li></ul><div class=\"highlight\"><pre><code class=\"language-java\"><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">TheService</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">FileHandler</span> <span class=\"n\">fileHandler</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"n\">FooRepository</span> <span class=\"n\">fooRepository</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">TheService</span><span class=\"o\">(</span><span class=\"n\">FileHandler</span> <span class=\"n\">fileHandler</span><span class=\"o\">,</span> <span class=\"n\">FooRepository</span> <span class=\"n\">fooRepository</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">fileHandler</span> <span class=\"o\">=</span> <span class=\"n\">fileHandler</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">fooRepository</span> <span class=\"o\">=</span> <span class=\"n\">fooRepository</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"n\">String</span> <span class=\"nf\">Execute</span><span class=\"o\">(</span><span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">file</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">rewrittenUrl</span> <span class=\"o\">=</span> <span class=\"n\">fileHandler</span><span class=\"o\">.</span><span class=\"na\">getXmlFileFromFileName</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">);</span>\n        <span class=\"kd\">final</span> <span class=\"n\">String</span> <span class=\"n\">executionId</span> <span class=\"o\">=</span> <span class=\"n\">fileHandler</span><span class=\"o\">.</span><span class=\"na\">getExecutionIdFromFileName</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">executionId</span> <span class=\"o\">==</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">)</span> <span class=\"o\">||</span> <span class=\"o\">(</span><span class=\"n\">rewrittenUrl</span> <span class=\"o\">==</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">Foo</span> <span class=\"n\">knownFoo</span> <span class=\"o\">=</span> <span class=\"n\">fooRepository</span><span class=\"o\">.</span><span class=\"na\">getFooByXmlFileName</span><span class=\"o\">(</span><span class=\"n\">rewrittenUrl</span><span class=\"o\">);</span>\n\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">knownFoo</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">&#34;&#34;</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">knownFoo</span><span class=\"o\">.</span><span class=\"na\">DoThat</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span></code></pre></div><ul><li data-pid=\"Gc_nZVOI\">如何重构这段代码？</li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"nx\">HRESULT</span> <span class=\"nx\">error</span> <span class=\"o\">=</span> <span class=\"nx\">S_OK</span><span class=\"p\">;</span>\n\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">SUCCEEDED</span><span class=\"p\">(</span><span class=\"nx\">Operation1</span><span class=\"p\">()))</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">SUCCEEDED</span><span class=\"p\">(</span><span class=\"nx\">Operation2</span><span class=\"p\">()))</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">SUCCEEDED</span><span class=\"p\">(</span><span class=\"nx\">Operation3</span><span class=\"p\">()))</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">SUCCEEDED</span><span class=\"p\">(</span><span class=\"nx\">Operation4</span><span class=\"p\">()))</span>\n                <span class=\"p\">{</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">else</span>\n                <span class=\"p\">{</span>\n                    <span class=\"nx\">error</span> <span class=\"o\">=</span> <span class=\"nx\">OPERATION4FAILED</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">else</span>\n            <span class=\"p\">{</span>\n                <span class=\"nx\">error</span> <span class=\"o\">=</span> <span class=\"nx\">OPERATION3FAILED</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">else</span>\n        <span class=\"p\">{</span>\n            <span class=\"nx\">error</span> <span class=\"o\">=</span> <span class=\"nx\">OPERATION2FAILED</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span>\n    <span class=\"p\">{</span>\n        <span class=\"nx\">error</span> <span class=\"o\">=</span> <span class=\"nx\">OPERATION1FAILED</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">error</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
            "excerpt": "这篇文章翻译自一位外国友人的关于面试后端程序员的文章，我比较喜爱这篇文章。一是因为它极大的拓宽了我的视角，另一方面是其中的一些问题非常具有启发性。不仅对于面试者，对于面试官来说也是个不错的参考。于是迫不及待的翻译了一下，给各位看官做个参考。 原文参见 @arialdomartini 的: Back-End Developer Interview Questions 以下是原文翻译。 通用问题开放式问题设计模式相关问题代码设计相关问题语言相关问题Web相关问题…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxj//tt6IO6IngmSAiMKCDc2ODYxODQyEgkyNTczNTk3NDMYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2017-11-09T14:43:16+08:00"
    },
    {
        "content": {
            "id": 2499023227,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/531276239/answer/2499023227",
            "created_time": 1653360347,
            "updated_time": 1653813578,
            "question": {
                "type": "question",
                "id": 531276239,
                "title": "楚国那么大为啥还要在战国采取守势？",
                "question_type": "normal",
                "created": 1651629486,
                "updated_time": 1651629486,
                "url": "https://www.zhihu.com/question/531276239",
                "is_deleted": false
            },
            "author": {
                "id": "85977a0b360976bf9c093b9a4104af4c",
                "url_token": "wang-lao-yu-88",
                "name": "王靖海",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-e22f77cf4dcec9a94ab652a5b5fef996_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-e22f77cf4dcec9a94ab652a5b5fef996.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/85977a0b360976bf9c093b9a4104af4c",
                "user_type": "people",
                "headline": "公众号【周秦日月】，有些实在不好发的内容在公众号发",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1
            },
            "thumbnail": "https://pic1.zhimg.com/v2-ccedca71cb3ce0b52149219102a8e101_720w.jpg?source=7e7ef6e2",
            "is_collapsed": false,
            "is_copyable": false,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 822,
            "comment_count": 42,
            "thanks_count": 200,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "disallowed",
            "content": "<p data-pid=\"Vqw_xbHb\"><b>太长不看版：</b></p><p data-pid=\"Hxl0Xmyk\">在春秋末期至战国时期，楚廷逐渐转向了一种“机会主义”倾向。</p><p data-pid=\"SNmJv88h\">这种“机会主义”起先表现在军事上，既长期保持按兵不动，等待局势有利之时伺机而动。</p><p data-pid=\"hC6OlwWv\">这一动向在楚昭王至楚悼王四朝当中尤其明显，肃、宣、威三朝也基本延续了这一特点，至楚怀王一朝则明显聒噪一些，后至楚顷襄王一朝再度恢复，到了楚考烈王一朝，楚廷对这一方略的运用达到了顶峰，不过在楚考烈王死后彻底陷入了沉寂。</p><p data-pid=\"7mujRJNo\">当然，军事上的“机会主义”或许影响了楚廷在政治上的态度：</p><p data-pid=\"JCVuktur\">在春秋末期至战国时期，楚廷的政治氛围确实存在着浓厚的机会主义氛围——不过，这种氛围也可能是受到三晋的影响。</p><p data-pid=\"1AhR4jsv\">总之，无论是军事上的“机会主义”还是政治上的机会主义，都使得楚廷在大部分时期显得颇为沉默，因此很容易给一些朋友带来一种楚国在春秋末期至战国时期整体处于“守势”的误解。</p><p data-pid=\"RXdaPO9s\">另外也需要说明：</p><p data-pid=\"rSD89jDi\"><b>上述倾向很大程度上与楚国在西周时期、春秋时期的惯性存在着一定程度的联系</b>，如果人气还行的话，可以在之后对西周、春秋两个阶段进行补充。</p><p data-pid=\"QcjSTsHP\">以下内容则主要对楚昭王至楚幽王时期进行梳理。</p><p data-pid=\"KFbTnCkJ\">·</p><h2>昭、惠两朝在吴师入郢后的调整与扩张</h2><p data-pid=\"gdD7gCk4\">公元前506年11月，楚昭王10年，吴王阖闾率吴、蔡、唐联军于伯举击败楚军主力，而后长驱直入攻取楚郢都，史称“柏举之战”或“吴师入郢”。</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-ccedca71cb3ce0b52149219102a8e101_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1124\" data-rawheight=\"700\" data-original-token=\"v2-ccedca71cb3ce0b52149219102a8e101\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-e350e419ad3619b5cb1eb163ef2b91c8_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1124\" data-original=\"https://pica.zhimg.com/v2-ccedca71cb3ce0b52149219102a8e101_r.jpg?source=2c26e567\"/></figure><p data-pid=\"ua_bIBBM\">图为柏举之战交战双方的大致动向。</p><p data-pid=\"4ygQWEtE\">从图中可以直观地看到，楚地的纵深广阔，吴军虽能通过运动战摧毁楚国境内的重点军事目标，但对于占领楚国全境则无能为力。</p><p data-pid=\"aF7T1QBX\">其后，由于吴军长期未能捉捕到楚王本人，更兼遭到了秦、越的攻击和内部的动乱，最终被迫撤军退出了处境。</p><p data-pid=\"hTv6AXBN\">柏举之战自此结束。</p><p data-pid=\"Beu9VnG7\">就笔者个人来看，柏举之战所表现的重要信息有三：</p><p data-pid=\"Ol6nLcKf\">一是楚国在体量上与一般春秋大国的绝对差距；</p><p data-pid=\"UrySGFK5\">二是楚国在战略纵深上的绝对优势；</p><p data-pid=\"1UqWP_9_\">三是楚国在外交资源上的相对优势。</p><p data-pid=\"RXegH9cZ\">也正因如此，吴廷在柏举之战以后几乎完全放弃了兼并楚地的兴趣，转而兼并越国及收服中原列国——此举的诉求大抵有二，一者清除后方的安全隐患，二者增强自身实力以缩减与楚国体量上的差距。</p><p data-pid=\"ihyAFNnR\">在柏举之战以后，楚廷内部趁机进行了一系列调整与变革，之后进入了10年左右的恢复期和对越国的扶持计划。</p><p data-pid=\"XavVdwSw\">公元前496年，楚昭王20年，吴、越交战，楚军遂攻取顿国，其目的应在挤压吴国在今河南省东南部的势力。</p><p data-pid=\"mgneHKtT\">公元前495年，楚昭王21年，或与吴王阖闾与上一年逝世有关，楚军又攻取了胡国，进一步拓展自身在今河南省中南部的势力。</p><p data-pid=\"bCFU1Jtv\">公元前494年，楚昭王22年，楚廷联合陈、许及随（楚封君）攻蔡，至使蔡人迁入吴国。</p><p data-pid=\"vaK78cTb\">公元前491年，楚昭王25年，楚廷开始展开了一次大规模军事行动，于夏季攻击了夷虎国（今安徽省寿县一带），攻击了梁、霍两国（今河南省临汝县一带），又以“吴将泝江入郢”为掩饰对今河南省西南部、陕西省东南部的一系列地区进行了攻击，意在打通秦楚联盟之间的通道。</p><p data-pid=\"TzKP-I8V\">面对楚人的大肆征伐，晋廷虽然意识到楚廷一旦得手后会给晋国造成巨大的威胁，但鉴于自身处于严重的内耗状态而采取了绥靖政策，甚至主动诱捕一些相关君长交予楚人以讨好楚廷。</p><p data-pid=\"4M7ZmS2G\">图为公元前496年-前491年楚军扩张的粗略范围：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-901b5df5524a88a4b39f76f3230bc430_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"716\" data-original-token=\"v2-901b5df5524a88a4b39f76f3230bc430\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-96a36e1f33f8b3cb7d4a5f5fb78f745d_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"960\" data-original=\"https://pica.zhimg.com/v2-901b5df5524a88a4b39f76f3230bc430_r.jpg?source=2c26e567\"/></figure><p data-pid=\"dn57Seoi\">如图所示：</p><p data-pid=\"Nmi1aCrk\">右红圈为夷虎国的大致位置；</p><p data-pid=\"llrim3c3\">中红圈为顿、胡、蔡等国的大致位置；</p><p data-pid=\"CTTZCeCy\">左红圈为阴地、上洛一带的大致范围，即武关一带的谷道及周边地区。</p><p data-pid=\"FoJnhgvn\">注意，以上标注较为粗略，仅为表现大致范围，断不可认为楚人已占据上述红圈的全境。</p><p data-pid=\"HacXwq0i\">楚廷的强势反弹和晋廷的绥靖态度显然刺激了吴国的统治者。在吴王夫差继位以后，吴廷把主要精力放在了压制越国之上，在自以为压制住越国以后，又把主要精力放在了争夺中原的控制权上——但很快又遭到了越国的反扑。</p><p data-pid=\"U1k8Wfjw\">与此同时，楚廷大抵发生了白公胜之乱，不过算是顺利地度过了这段危机。</p><p data-pid=\"EytIL-Yd\">公元前473年，楚惠王16年，吴、越之间持续的兼并战争终于到达了终点——越人摧毁了吴国，吴王夫差自缢。</p><p data-pid=\"6VqXY9qX\">有关楚廷在越灭吴战争期间的动向失载。不过，从越灭吴以后急不可待地向楚、宋、鲁三国割让旧吴地的举动来来，越国在当时应当遇到不小的压力——这种压力可能来自于自身在战争中的损失，也可能来自于他国的军事威胁，更有可能两者兼有——其后，越廷向琅琊迁徙，把主要精力放在了与齐国的争夺。</p><p data-pid=\"cgIpp5H-\">其后，楚国对原属于淮河、泗水流域大肆兼并，在之后的30年间吞并了蔡、杞等国。其间，楚廷还曾计划对宋国进行兼并，所幸在墨翟的调和下才终止了军事行动，但从同时期的军事行动来看宋廷应当还是向楚廷表示了服从。</p><p data-pid=\"hNXsMU-j\">截止到公元前431年，即楚惠王逝世后的第二年，魏文侯12年，楚国在南中国已全面压制住了越国，并控制了宋、鲁在内的泗上列国，还吞并了齐国南部至关重要的莒国。</p><p data-pid=\"wC7dWYb4\">下图为惠、简两朝交界时期楚国的大致疆域：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-e12ac46eaafd0bef094d30da937b29d1_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"826\" data-original-token=\"v2-e12ac46eaafd0bef094d30da937b29d1\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-e29600f334c0a78f1af85fd02be32eda_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-e12ac46eaafd0bef094d30da937b29d1_r.jpg?source=2c26e567\"/></figure><p data-pid=\"kWVwb6BU\">如图所示：</p><p data-pid=\"O3HGR43X\">白圈为被楚国吞并的杞、莒的大致位置；</p><p data-pid=\"CCgwmWA_\">白箭头为楚军的大致攻势，箭头并非楚军的实际行动路线，但宋、鲁在其中必然采取一种默许乃至屈从的态度；</p><p data-pid=\"48sqLVgA\">黄圈为越都琅琊的大致位置，越国已被楚人压制在沿海一带。</p><p data-pid=\"CzDWoCj3\">在昭、惠两朝时间，楚国的动向主要有以下3个特点：</p><p data-pid=\"J8FeAMrV\">其一，楚廷对主动挑起战争的兴趣变得十分有限，更多是在在吴、晋、齐、越等国发动战事之时才对他国发起兼并；</p><p data-pid=\"8Eup-ag9\">其二，楚廷对盟国的作用更为看重，比如长期扶持越国，再比如疏通与秦国的通道，还会在一些关键时间点巩固与秦国的盟约；</p><p data-pid=\"Ok7wxxGh\">其三，由于晋六卿到四卿再在三卿的持续火并和齐廷的动荡，秦、楚联盟在当时一家独大，楚国几乎控制了原晋国霸权范围内除郑国以外的全部诸侯国，秦国则攻取了晋国在河西的大荔并陆续吞并了河西全境。</p><p data-pid=\"wc97epFh\">另需要补充一点：</p><p data-pid=\"yOcYQR0i\">楚国可能是在这段时期或之后的某段时期占领了郑国东部的大梁、榆关等重镇。</p><p data-pid=\"fnAUEHPI\">整体来看，楚国在这一段时期的强势扩张与自身的因素有关，也与外界的因素有关。</p><p data-pid=\"57KW3EGb\">自身因素在于：</p><p data-pid=\"q0r39f_a\">楚廷似乎意识到了自身的地理位置偏僻，存在着信息的滞后性，又地广人稀导致军事动员成本较高，因此采取了平时以防守姿态为主、待时局有变时再大肆出击的策略——当然，这种策略也可能来自于之前被晋、吴骚扰战术来回来去折腾的教训；</p><p data-pid=\"ieO8ln89\">外界因素在于：</p><p data-pid=\"msGl4g60\">晋廷和齐廷的内部火并进入白热化阶段，吴、越两国则在兼并中一方被灭、一方失血过多，最终导致了楚国及其盟国秦国在当时的绝对优势。</p><p data-pid=\"7KBikn75\">不过，彼时的兴盛也存在有一些隐患。比如，秦廷在秦厉共公逝世后陷入了秦伯与庶长集团之间的长期火并，当时的秦国虽然也是有着较强的实力，但内部的不稳定因素终归无法会影响其在关键时刻的作用。</p><p data-pid=\"VvDSJzqm\">·</p><h2>简、声、悼、肃四朝的波动与变革</h2><p data-pid=\"mx11Hg6J\">公元前425年，楚简王7年，宋国发生内乱，宋公请楚廷介入，于是楚军在黄池、雍丘一带驻防。</p><p data-pid=\"88SI3CI8\">大抵是楚军的动作给晋人带来了严重的危机意识，也恰巧韩康子、赵襄子在同年逝世给魏文侯整个三卿以重要契机，晋廷再度实现了相对的统一，三卿联合率军击败了楚人北进的步伐。</p><p data-pid=\"Rim6YCqe\">公元前424年，楚简王8年，楚军对晋国的宜阳、赤岸发起攻击，结果又一次被晋三卿联合击退。</p><p data-pid=\"DonanY90\">这是楚国在昭、惠两朝以后北进的首次重大失利。</p><p data-pid=\"L2RhlzE7\">不过，晋人在之后倒也没有对楚国进行进一步的征伐。在公元前419年-前408年的10年间，晋（魏）人把重点精力放在了夺取河西旧地，最终在魏将吴起的攻略下恢复了河西郡。其后，魏家又把吴起调往中山以配合乐羊的行动，最终于公元前406年消灭了中山国。</p><p data-pid=\"H2v395dw\">在公元前413年，也就是楚简王19年，秦、楚、齐三国曾对晋人进行过一次联合攻击，秦军在郑被魏军击败，齐军攻到了魏的黄城、阳狐，楚军攻到了上洛，不过这场战争对晋人的整体走向并无影响。</p><p data-pid=\"1TQKfXjh\">截止到楚声王一朝，三晋在魏文侯的铁腕下得以发力，致使秦、楚联盟开始受挫。</p><p data-pid=\"fT3R48TN\">有关简、声两朝楚国在北中国军事行动的失利，大抵原因有三：</p><p data-pid=\"q_hPoRLe\">一为晋卿的内耗态势在魏文侯中期得以相对缓解，如此一来，晋廷在临近瓦解以前居然出现了一段短暂的稳定期，由此出现了“晋国”回光返照式的复强；</p><p data-pid=\"J0gjiiZy\">二为楚国的盟国秦国及潜在盟国齐国的内部动荡一直未能得以平息，实力在很大程度上受到了影响——但绝不可将其视为弱国，切勿搞二极管；</p><p data-pid=\"odYV3Dyw\">三为楚廷的内部原因。</p><p data-pid=\"KRiurq1R\">有关楚廷的内部原因需要展开说明：</p><p data-pid=\"SQ1E7ri8\">在春秋中期，楚廷内部形成了一种公子政治，即朝中重要职位由楚公子轮换担任——此举应与吸取若敖氏教训及防止蒍氏坐大有关——以此形成了楚国在春秋时期的相对高度集权。</p><p data-pid=\"yWNKxOI2\">笔者常看到一些年轻的朋友有这样一种想法，认为“使用外姓重臣是集权，使用公室重臣是分权”，再或者单纯把“集权”视作一种具体的制度——这无疑是一种浪漫化的幻想。</p><p data-pid=\"wUhriToq\">事实上，<b>君主集权固然与人事、制度乃至经济发展有一定关系，但究其根本还在于朝中各方是否形成了足够的牵制力、制约力和由此产生的政治运作空间</b>——正因如此，楚国在形成公子政治的同时又形成了一种“楚执政众而乖”的局势，从而实现了楚廷在“礼乐征伐自大夫出”的大背景下依旧能始终保持着王权的相对稳固。</p><p data-pid=\"KUR4NVSS\">相信大部分朋友看到这里就会发现：</p><p data-pid=\"DrPWCDbd\">无论是秦廷在战国中期以来实施的多相制，还是后世王朝对一些重要职位进行反复拆分，都是楚国这一政治经验的延续。</p><p data-pid=\"z3Hcoq8V\">当然，“楚执政众而乖”终究是一柄双刃剑，它一方面能带来王权的相对巩固，一方面也会带来没必要的内耗——在柏举之战中，吴军之所以得手就是利用了楚廷重臣之间的相互掣肘和抵牾。</p><p data-pid=\"xB68Wp1Q\">在楚昭王复楚之后，楚廷内部进行了一系列变革，目前已知的内容来看主要是以人事变动为主，但从楚廷之后的情况来看至少还存在两个调整：</p><p data-pid=\"uZuNOfIN\">一个是重用楚昭王诸子，以至于昭氏这个相对年轻的氏能在战国中期和屈、景两个古老的氏平起平坐；</p><p data-pid=\"QwvxbzZj\">一个是加强封君，比如之前提到的“随国”，楚悼王一朝的“封君太众”应与之有关。</p><p data-pid=\"uEJHnOPp\">就封君制也需要做一点点补充：</p><p data-pid=\"EwHMxWE0\"><b>在战国时期，列国使用的均是郡县制与封君制并行的混合制度，其中的封君制并非郡县制的对立面，而是郡县制的补充点，即分封中央重臣到地方以牵制地方长官</b>——至于所谓的“秦国是郡县制，六国（或楚国）是分封制”系网络段子。</p><p data-pid=\"gJLf0iig\">上述政策在昭、惠两朝或许还好，但到了简、声两朝肯定就会积累出一系列问题。</p><p data-pid=\"fvWRyhZz\">而解决的唯一手段也只有进一步的变革。</p><p data-pid=\"M_OivLXx\">公元前402年，楚声王6年，楚王被弑，楚悼王即位。</p><p data-pid=\"-VDlqvEj\">公元前401年，楚悼王元年，秦国或许意识到了三晋可能会趁楚廷的权力交接时期有所动作，于这一年对魏国进行了一次凶狠的进攻，一直攻到了阳狐——进攻路线大抵是绕过桃林塞，突击某一山口进入汾河谷地内部。</p><p data-pid=\"Iul9sLbg\">顺便讲个笑话，“秦国在商鞅变法以前弱得要被亡国了”。</p><p data-pid=\"HGoXP9RP\">公元前400年，楚悼王2年，三晋再度伐楚，一直攻到了桑丘，被迫于次年将榆关送给了郑国，不过之后似乎又收了回来。</p><p data-pid=\"64hIMfrE\">也就在楚国兵败中原后的这段时间，魏国的虢山发生了严重的地震，韩廷也出现了内乱，魏文侯又在不久后逝世，三晋的强势期得以终止。</p><p data-pid=\"EzqjUjLl\">公元前395年，楚悼王7年，秦国开始利用魏廷的权力交接期而展开了一系列行动，攻击了后方的緜诸。</p><p data-pid=\"gTZEH_jv\">公元前393年，楚悼王9年，魏军对大约在河西一带与秦军展开了交战，在注（汪）击败了秦军。同年，楚军对韩国发起了进攻，攻取了负黍。</p><p data-pid=\"l2BOklGI\">公元前392年，楚悼王10年，三晋对楚国发起了反击，攻取了楚国在北中国的重镇大梁、榆关，楚国经此一败几乎完全退出了北中国。</p><p data-pid=\"EP4U5Ooq\">面对三晋的凌厉攻势，楚廷被迫耗费了大量财物给秦国以巩固秦、楚联盟。</p><p data-pid=\"qfz2I_lT\">同年，秦军攻击了韩国的宜阳，攻取了周边的六个邑。</p><p data-pid=\"dkeLXsTc\">公元前391年，楚悼王11年，秦国转向对魏国发起进攻，攻取了武城，又于公元前390年在陕置县，再于公元前389年派遣大军攻击阴晋——其目的旨在东西夹击打通三门峡。</p><p data-pid=\"DaF_FNoJ\">就《吴子》的记载来看：</p><p data-pid=\"4FPo3WCW\">魏廷在阴晋一带主要部署了河西郡的主力部队，并调遣了其他地区的机动部队，最终击退了秦军。</p><p data-pid=\"ag9QkPSI\">同年，魏武侯与齐、楚、卫相会，并配合运作了田太公至周室求为诸侯一事，想来与西线的压力有关。</p><p data-pid=\"UR1YdvHr\">也就在这段时期，魏国重臣吴起投楚。</p><p data-pid=\"JWL_Rgk8\">图为楚悼王前期楚、秦与三晋的大致攻势：</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-5b800c9e507d65edb7ac2880dbff793f_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1156\" data-rawheight=\"890\" data-original-token=\"v2-5b800c9e507d65edb7ac2880dbff793f\" data-default-watermark-src=\"https://pic1.zhimg.com/50/v2-1341c371529ba9ee005b491be7c69209_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1156\" data-original=\"https://pica.zhimg.com/v2-5b800c9e507d65edb7ac2880dbff793f_r.jpg?source=2c26e567\"/></figure><p data-pid=\"eB8aC0_v\">如图所示：</p><p data-pid=\"p_eiNLMX\">白圈为三晋对楚大梁、榆关一带的攻势；</p><p data-pid=\"eSodqvm9\">红圈依次为武城和阴晋、陕邑、宜阳的大致位置；</p><p data-pid=\"F3eUWMYh\">汪邑的具体位置有两种说法，均处在河西郡与秦境的交界处。</p><p data-pid=\"xvPEUiG_\">从图中可以直观地看到，魏国在魏文侯一朝虽夺回了河西郡，但并未能太有效地解决秦国带来的安全隐患，西线仍处于被动局面。</p><p data-pid=\"Dv6iFRSq\">截止到吴起变法以前，我们要注意一个重要信息：</p><p data-pid=\"ntRDDX8V\"><b>楚国之所以在大梁、榆关之败以后未遭到进一步的打击，很大程度来自于秦国在秦惠公一朝时牵制住了三晋</b>——由于传统史观多低估秦国在商鞅变法以前的表现，导致了这一信息常被人忽视。</p><p data-pid=\"5HWLI6Q3\">公元前389年，楚悼王13年，楚廷正视任命吴起为令尹，开展了一系列剧烈的变革。</p><p data-pid=\"9tNnlyvj\">公元前387年，楚悼王15年，秦国又攻取了蜀国的南郑，不过之后秦惠公逝世，南郡又被蜀国夺了回来。</p><p data-pid=\"uS96GqkB\">秦惠公死后，秦伯的继位者为尚为新生儿的秦出子，秦廷内部再度陷入了动荡。</p><p data-pid=\"me3KPBtB\">公元前385年，楚悼王17年，秦庶长在政治斗争中杀死了年幼的秦出子及其母，也大抵清洗了其背后的外戚势力，而后从魏国迎回了秦灵公之太子秦献公为秦伯。</p><p data-pid=\"qdlQV7Hb\">其后，秦献公以“且欲东伐，复穆公之故地”为名把秦都从雍迁到了临近魏境的栎阳——这显然是一种政治语言——随后终止了秦惠公一朝以来对魏国的长期征伐。</p><p data-pid=\"xarsZimE\">至此，楚国失去了对抗三晋最为坚定的传统盟国。</p><p data-pid=\"22VLWRuW\">然后，在公元前383年，楚悼王19年，三晋为楚人送上了大礼。</p><p data-pid=\"5pIOodDr\">是年，魏、赵双方因卫国而发生火并，并且持续了三年。</p><p data-pid=\"VhanLHoy\">公元前381年，楚悼王21年，楚军终于出兵救赵——在此之前，楚军已经在吴起的率领下吞并了洞庭、苍梧、陈国、蔡国，还攻击过秦国的某个地方——在吴起的率领下，楚人迅速打穿了魏国的东部领土，死死地卡住了州和梁门以切断魏国东西的通道，楚军将士再一次饮马黄河。</p><p data-pid=\"3LP8ttDq\">然而，楚悼王却在此时憾然离世，吴起只得班师回朝，最终被政敌射死在楚王的葬礼上。</p><p data-pid=\"GdhEE7B3\">其后，新即位的楚肃王车裂了吴起的尸体，又以损坏王尸为由对吴起的政敌进行了一场庞大而血腥的政治清洗，约有70个有“家”的“贵人”及其亲属被诛杀——也就是有封邑的宗室或外戚。</p><p data-pid=\"i1rqC8nd\">有关吴起变法，由于仅推进了8年，所以变革效果当然不会太过深入，此外一些变法内容还有还可能因为政敌的反扑而撤销。</p><p data-pid=\"6b_SMVs0\">但是，我们依旧要注意两点：</p><p data-pid=\"0LnWOnM7\">一个是吴起变法的一些内容在之后确实得以延续，比如将宗室外戚向偏远地方分封，再比如爵位的调整等，这些变革内容在之后的文献及考古中均得到了验证；</p><p data-pid=\"odM5MnW3\">另一个楚国在吴起变法之前本身就有较高的变革基础——杨宽先生就在《战国史》的“七强并立形势的形成”一节中指出，“楚国在楚悼王时任用吴起变法，虽然没有取得很大效果，但它原本是个强国”——所以我们断不能因为吴起变法的效果相对有限，就认定楚国在变革上有多落后。</p><p data-pid=\"8a6C5tLt\">同时，我们也要注意到吴起变法为什么会失败。</p><p data-pid=\"o-4jlZ3j\">单纯归咎于楚悼王的偶然离世和旧既得利益集团的反扑显然是不合理的，毕竟楚肃王在即位后血腥清理了70家封君，客观上是存在进一步变革的机会的。</p><p data-pid=\"ogN_lpSG\">就吴起变法的失败，应注意5个客观因素：</p><p data-pid=\"4l0r3kmN\">其一，楚国的疆域广阔，地域之间有山峦、河道分隔，这导致了楚廷向地方发布政令的耗损成本较高，落实空间更大，尤其在剧烈变革之中会根伟明显——后世大王朝对剧烈变革多持谨慎态度，正是基于这一客观因素；</p><p data-pid=\"mmE2Si3g\">其二，楚廷在春秋中期长期实施的公子政治虽在一定程度上压制了世族的力量，但楚国上层的旧既得利益依旧要比魏家、赵家、韩家、田家的家臣势力及秦国无封地的庶长势力更为强大，变革阻力也就更为艰巨；</p><p data-pid=\"hWoCpnoX\">其三，由于地理因素、经济环境和政治惯性使然，楚廷在人事方面更倾向于使用本土士人——这与秦廷主要使用外籍士人，三晋本土士人和外籍士人并用有很大差别——所以变革上也会受到较大的阻力；</p><p data-pid=\"5l-z2hTS\">其四，随着铁质工具的普及，南中国的农业潜力逐渐凸显，这使得楚廷只需要通过一定程度的变革使自身能够适应铁器的生产环境，然后通过维持一个稳定的生产环境就能取得较为理想的变革成果，所以楚廷在变革动力上必然不会太过积极；</p><p data-pid=\"HAAVRLJ8\">其五，通常而言，变革较早的一方很容易背上一些历史包袱，而后来的变革者则会依靠后发优势达到更进一步的变革效果，对比之下又会显得变革较早的一方相对落后——这一点在秦、楚变革的对比中尤其明显。</p><p data-pid=\"PK5tDTes\">在上述因素的作用下，楚廷虽能通过在政治强人的天才和铁腕下进行一定时间内的剧烈变革，但这终究是一种特殊现象，而非正常现象。</p><p data-pid=\"VTpljbqf\">另外，也要特别指出一点：</p><p data-pid=\"wukdNTQc\">楚国虽然在剧烈变革上存在一些制约因素，但并不等于楚国的制度长期停滞在楚悼王一朝或楚声王一朝——所谓“改革没有完成时，只有进行时”，人类社会“变”是常态，“不变”才是异态，没有剧烈变革并不等于就没有变革——目前也没有任何材料能够支持楚国的制度较之其他诸侯国落后的观点，至于“楚国在战国时期是分封制”之说系某小说剧情衍生的段子。</p><p data-pid=\"7Pe_N0XD\">在楚肃王一朝，楚廷一直没有太大的动作，至于究竟在做什么失载。</p><p data-pid=\"Yqr8eJ3B\">有关这段时期楚廷的动作，虽然我们并不能武断地认定一定在进行着某些工作，但可以确定肯定要面对吴起变法所引发的一些连锁反应。</p><p data-pid=\"CJpuJrKR\">具体连锁反应主要包括三个方面：</p><p data-pid=\"VBMuKx7F\">一是对旧利益集团的处理问题，吴起变法终归执行了8年，其中一些变革还是不可逆的，不可避免地会造成一批利益受损的旧利益集团，至于哪些人需要被清洗，哪些人需要被转化为新利益集团，哪些人则需要被压制，都是楚廷必须要面对的问题；</p><p data-pid=\"tdjM6qxG\">二是对新利益集团的利益分配问题，变革所造就的新利益集团并非铁板一块，内部不乏权力争斗和利益纠葛，矛盾也并不是十分容易调和——在传统史观中，新利益集团的内部斗争常被忽视，不过在之后逐渐被重视起来，比如秦廷在秦惠文王即位之时政治斗争逐渐被定性为以新利益集团的内部斗争为主而非以旧利益集团反扑为主；</p><p data-pid=\"l7LdvcfZ\">三是朝廷颁布的变革政策在执行到基层的过程中总会出现一系列问题，这一问题在地缘广阔的政权尤其为甚，在剧烈变革中则更甚，最终形成了一系列不可预期的问题。</p><p data-pid=\"7GharaK0\">就以上问题，楚廷可能已开始解决，也可能在敷衍、拖延，但总之在楚肃王一朝并非完全爆发出来。</p><p data-pid=\"syDMU4Sx\">·</p><h2>宣威之世与楚怀王一朝的躁动</h2><p data-pid=\"smRJ8PIz\">在宣、威两朝时，楚国在北中国的大规模军事行动主要有两次。</p><p data-pid=\"zeriEWF3\">第一次是发生在公元前353年，楚宣王17年。</p><p data-pid=\"o1P9Ee8N\">是年，魏、赵、齐发生混战，卫、宋等国被牵连，战火一度烧遍赵邯郸、魏襄陵、卫境内、齐境内。</p><p data-pid=\"wThwjizJ\">在接到赵国的求救后，楚廷内部进行了一场朝廷辩论，最终决定发兵救赵——不过只是先少出兵摆摆样子，增强赵人的抵抗意志和魏人的攻赵信心，最终在赵、魏火并后坐收渔翁之利。</p><p data-pid=\"urvOiWtU\">其后，楚将景舍率军进入魏境南部，昭奚恤携大军驻扎于楚境北部，等待时局的动向。</p><p data-pid=\"I9WU176J\">也大约在这段时间，齐将田忌、孙膑在桂陵击败了魏将庞涓，而后齐军全面围攻襄陵，但被后续的魏、韩联军击败。</p><p data-pid=\"HE7j6c_O\">此时，楚将景舍出面为魏、齐调停，昭奚恤以重兵威慑，最终促使了魏、齐媾和，楚国也顺势夺取了今徐州宿县一带的睢、濊之地。</p><p data-pid=\"S4enJqDj\">下图为齐、魏桂陵之战系列战役的大致形势：</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-368a2cd4a2d29912bba64d474cc1dd99_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1066\" data-rawheight=\"890\" data-original-token=\"v2-368a2cd4a2d29912bba64d474cc1dd99\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-889775ef53e6df47d0cb09c14577c60f_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1066\" data-original=\"https://pic1.zhimg.com/v2-368a2cd4a2d29912bba64d474cc1dd99_r.jpg?source=2c26e567\"/></figure><p data-pid=\"JDyA1qa1\">如图所示：</p><p data-pid=\"xSXwkKYq\">上箭头为魏军主力之一，主要攻击上黄圈所示的邯郸一带；</p><p data-pid=\"1GpULsyZ\">右箭头为魏军的另一支主力，由庞涓率领，主要在卫国一带活动，而后因齐国的介入而攻击齐腹地，大约在右黄圈一带击败了齐城大夫、高唐大夫，再后因齐军攻击大梁而回师，行军至桂陵一带时遇伏战败；</p><p data-pid=\"w0u1AY6n\">红箭头为齐军的大致攻势，先攻击襄陵以作干扰，再佯攻大梁作进一步干扰，以达到对魏军统帅“怒其意”的效果，并在桂陵一带击败魏军的主力之一，而后全面攻击襄陵；</p><p data-pid=\"LJJwb7Ec\">红圈为襄陵的大致位置，银雀山《孙膑兵法·擒庞涓》一文中作“平陵”；</p><p data-pid=\"FvqTWNKL\">下黄箭头为魏、赵媾和后韩、魏联军对齐的反攻情况。</p><p data-pid=\"lwhf6k0m\">从桂陵之战的形势可以直观地发现：</p><p data-pid=\"zS1rU3T8\">楚军在北中国的行动已经表现出明显且强烈的“机会主义”，非到打成一团糟的时候绝不出手，而且就算出手也要争取以最小的代价和风险追求利益最大化。</p><p data-pid=\"fxdpQYOe\">另外还要注意：</p><p data-pid=\"J-0BfPoz\"><b>楚廷对盟国和潜在盟国基本是一个无所谓的态度，在支援赵国上就显得磨磨蹭蹭，到公元前352年-前351年魏军对秦国反攻时干脆毫无动作。</b></p><p data-pid=\"XUytOyVC\">其后，楚国在商於一带的领土被秦大良造公孙鞅夺取，而楚廷对此也无甚反应，盖与秦、楚联盟的价值下滑，楚廷又对攻击秦地并无兴趣有关。</p><p data-pid=\"i0QNh0ow\">楚军在北中国的第二次大规模军事行动是在公元前333年，楚威王7年。</p><p data-pid=\"Me_r2Gnh\">上一年，齐、魏两君在徐州相会，双方互相承认彼此的王号。</p><p data-pid=\"CMRhREvV\">与此同时，魏国重臣惠施、公孙衍在楚国进行了某些权谋运作，使得楚廷出兵攻打齐国。</p><p data-pid=\"xIZ-uH_q\">至于楚廷在当时为何要越过泗上列国征伐齐国，大抵原因有二：</p><p data-pid=\"tM9W5nPb\">一是意识到齐国很有可能借魏国屈服一事而进一步控制泗上列国；</p><p data-pid=\"JfsehBr4\">二是在权谋运作中得知魏廷对救齐毫无兴趣，其他诸侯国也没有支援齐国的兴趣。</p><p data-pid=\"sNgWzjjS\">果然，在楚军在徐州击败齐军之后，齐盟国魏国作壁上观，燕、赵落井下石，以鲁国为代表的周边小国甚至都产生了围攻齐国的兴趣，齐威王在徐州刚刚建立起的威名被瞬间击碎。</p><p data-pid=\"g7LKUbQ3\">下图为齐楚徐州之战的大致形势：</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-a2f5b5a5e6e5c561e06f8d20b7465eae_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1042\" data-rawheight=\"886\" data-original-token=\"v2-a2f5b5a5e6e5c561e06f8d20b7465eae\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-e93b811034c8be9c166a649b159f4055_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"1042\" data-original=\"https://pic1.zhimg.com/v2-a2f5b5a5e6e5c561e06f8d20b7465eae_r.jpg?source=2c26e567\"/></figure><p data-pid=\"vEpxZafg\">如图所示：</p><p data-pid=\"WK8hJley\">黄圈为徐州，即薛邑，从图中可直观地看到其对控制泗上列国有重要价值；</p><p data-pid=\"8_aKkkj3\">黄箭头为楚、赵、燕对齐的围攻之势，其中燕、赵的具体攻击位置不明，此处仅做粗略示意。</p><p data-pid=\"2QRTCGdM\">不过，楚军在徐州得手之后并未在北中国进行进一步的动作，盖与当时的特殊局势有关——在魏国达到国势顶峰时就遭到了列国围攻，齐国在达到顶峰时又遭到了列国的围攻——考虑到此时楚廷已有了浓厚的机会主义倾向，此时收手也就成了一件再正常不过的事情。</p><p data-pid=\"mx3ZsPO3\">除此之外，楚军在宣、威两朝的主要活动在南中国地区，攻取了西蔡、黔中及越国的相当一部分领土。</p><p data-pid=\"GPbgPyAZ\">有关宣、威两朝要特别注意到四个特点：</p><p data-pid=\"jUnTnCBu\">其一，楚廷对北中国的态度已明显出现了典型的“战国化”特点，具体表现为不依赖固定盟国，不主动挑起战争，依赖外交和权谋手段伺机而动，在时局有变时以军事打击为辅、以军事威慑为主浑水摸鱼；</p><p data-pid=\"cfmJ3kht\">其二，楚廷对南中国的兼并明显兴趣更大，包括西部、西南部、东部、南部各个方向；</p><p data-pid=\"i98C1P50\">其三，楚廷的公子政治完全结束，屈、景、昭三个楚公室的远支基本充斥了楚廷上层，并且在军事上活动频繁——盖与楚军功爵制逐渐完善，三氏因军功上位有关；</p><p data-pid=\"fYglDkJk\">其四，外籍士人在楚廷有少量活动，如江乙、田忌，但并未对屈、景、昭三氏的地位造成冲击。</p><p data-pid=\"FPYl18Hl\">顺便讲个笑话，“只有秦国有军功爵制，其他诸侯国没有上升渠道”。</p><p data-pid=\"oGzJC7iT\">在这里有必要对屈、景、昭三氏进行一点解释：</p><p data-pid=\"-5wtWNqv\">屈氏、景氏、昭氏在当时已繁衍了近一个半个世纪至五个世纪，其人口规模想必是非常庞大的，其结果就是支系被大量充入当地士人当中，成为楚地士人的重要组成部分——所以在楚廷占比较大属于一件再正常不过的事情，这一点和齐诸田及魏、韩、赵三氏士人在北中国有大量活动无甚区别。</p><p data-pid=\"f7FBWyJu\">另外也要注意：</p><p data-pid=\"sXirC6pF\">没有任何证据可以证明，屈、景、昭三氏在当时形成了类似于晋卿、鲁卿、郑卿一类的组织明确的“世族”，某些读物将其视为三个组织架构明确的世族并不可取。</p><p data-pid=\"5QwY36dw\">就屈、景、昭三氏在楚廷的占比而言，我们<b>一方面要认清对人才的流动和选拔并不利，另一方面也要认清由于其人口基数使然也确实能够产出一批优秀的人才，再一方面还要注意到屈、景、昭三氏作为楚国的本土士人确要比朝秦暮楚的外籍士人更为踏实一些。</b></p><p data-pid=\"Cp46NfwR\">以上内容并不是要说屈、景、昭三氏充斥楚廷上层的局面有不好或多好，而是想和大家思考这一问题：</p><p data-pid=\"6M0cKsMP\">楚廷的官僚系统主要以屈、景、昭三氏为代表的本土士人组成，那么其政治走向究竟是政治惯性为主导还是以时局环境为主导？</p><p data-pid=\"N9fOC4HS\">在楚威王末期至楚怀王初期，以魏国为发动机的纵横活动已逐渐兴盛起来。</p><p data-pid=\"sIssQuCv\">公元前325年，楚怀王4年，秦、韩、魏三国相王，连横的雏形初现。</p><p data-pid=\"_YO03Pud\">公元前323年，楚怀王6年，秦相张仪与齐、楚相会，似乎有组建秦、楚、齐联盟，破坏齐、魏联盟的意思。</p><p data-pid=\"oLqBpjM1\">同年，魏廷借机运作魏、韩、赵、燕、中山五国相王，合纵的雏形初现。</p><p data-pid=\"MenyLrxs\">其后，晋人在连横和合纵之间反复横跳，大抵以合纵的姿态使秦廷认清魏国的外交价值，再利用连横向东兼并扩张，以此不断地补充西线的损失。</p><p data-pid=\"f9KhM3yW\">楚廷在纵横领域的介入是在公元前323年，在魏国运作五国相王之时，楚廷突然令昭阳率兵攻魏，攻取了魏国南部重镇襄陵及周边的八作城邑。</p><p data-pid=\"hMUKMvXZ\">楚人的突然搅局显然超出了晋人的意料。</p><p data-pid=\"V3j5hNRG\">在之后，张仪频繁在秦、魏两国之间活动，公孙衍则把楚国作为重要拉拢对象以实现合纵大计。</p><p data-pid=\"bFKlgPi8\">最终，在公元前318年，楚怀王11年，纵方对秦发起战争，楚、齐、燕名义上纵方纵方，魏、赵、韩实际出兵，将秦军压回了函谷关。</p><p data-pid=\"lXsjcvvH\">不过，三晋在之后的进攻受挫，只得退回成皋一带。魏、赵此时产生了对韩荥阳进行掠夺以补充军资的意向——考虑到荥阳的地理位置，这一计划明显不是掠夺这么简单——随后被楚王调停制止。</p><p data-pid=\"dS4K7p2Q\">公元前317年，楚怀王12年，秦国利用三晋的内讧而发起反击，秦将樗里疾与修鱼大败三晋联军，第一次合纵以失败而告终。</p><p data-pid=\"Az_fRqMW\">次年，由于东方发生了一系列纠葛，再加上巴、蜀两国爆发战争，秦廷趁此时机攻取了蜀国和巴国，楚国在地理上处于劣势地位。</p><p data-pid=\"Jkoe6Ph2\">截止到这里我们会发现：</p><p data-pid=\"5IXJiqco\"><b>当天下列国均产生类似于机会主义的投机倾向之时，楚国在大环境并不占任何优势。</b></p><p data-pid=\"9RLMcUor\">至于造成这一现象的原因主要有三点：</p><p data-pid=\"X1kcD57S\">一是楚廷所在地的郢都地理位置较为偏僻，使得信息存在严重的滞后性，不利于瞬息万变的纵横活动；</p><p data-pid=\"s5eA8nqc\">二是楚廷的主体由本土士人组成，所以不能像秦廷一样可以利用外籍士人的资源相对容易地获取他国信息及他国朝堂上的操作空间；</p><p data-pid=\"jnZ0-V-a\">三是楚国地广人稀，军事动员的速度较慢，且成本较高，不利于纵横时期快速多变的军事需求。</p><p data-pid=\"d7oaxM-O\">可以说，在纵与横的游戏间，楚国的臃肿和笨拙显得是那么的格格不入。</p><p data-pid=\"OI0nLlTi\">但楚怀王似乎并不这么认为。</p><p data-pid=\"OE8zdUI9\">估计大部分朋友看《楚世家》时都会觉得楚怀王这个人特别喜欢惹是生非，如果看了《辑证》更会加深这一观点。</p><p data-pid=\"q6cRBTIZ\">至于为何有这样的表现，或许是楚王本人认为自己可以像魏王一样在纵与横的游戏中翻云覆雨。</p><p data-pid=\"_hBb_s3n\">在楚怀王一朝中，楚廷频繁介入中原事务，又常常挑起战争，即使在丹阳蓝田之战的巨大消耗过后还要继续折腾。楚廷的肆意胡来终于酿成了怀王后期对秦、齐、韩、魏的一系列惨败，而楚怀王在此时仍发兵灭越，如此穷兵黩武终于引发了庄蹻之乱。</p><p data-pid=\"sHhGiWOB\">最后，楚王本人在一次屈辱的赴秦谈判时被秦人扣押。为防止秦人借楚王之名进行勒索，楚廷对外诈成怀王已死，向齐国迎回了楚顷襄王。</p><p data-pid=\"uy_NgEFK\">楚怀王一朝的躁动终于得以结束。</p><p data-pid=\"eMQAOMo8\">有关楚怀王一朝要特别注意三个现象：</p><p data-pid=\"ZtkSStlF\">第一个是楚廷内部逐渐分为亲秦和亲齐两派，但对纵横枢纽的韩、魏并无太大兴趣；</p><p data-pid=\"ruujOaDt\">第二个是在秦武王死后，列国均借秦廷的动荡期尝试控制秦廷，比如韩以樗里疾、魏以甘茂、赵以楼缓、齐以田文介入秦廷事务，不过楚廷似乎无意支持魏冉一派——尽管这一系原本有亲楚倾向；</p><p data-pid=\"vtKyY3es\">第三个是楚怀王一朝进行过一次相对剧烈的变革活动，又以失败而告终。</p><p data-pid=\"o-T5Og2P\">客观来看，<b>楚怀王一朝的表现并非是对宣、威两朝“机会主义”的破坏，而是机会主义发展到一定程度的结果。</b>在怀王一朝频繁又笨拙的投机过后，楚廷基本失去了介入北中国的兴趣和内部进行剧烈变革的动力，战略上转向完全依赖于时机、内政上转向完全依赖于修修补补的小幅度变革的被动状态。</p><p data-pid=\"WKBI1QGq\">·</p><h2>“楚庄王”的亡羊补牢与楚考烈王的扶魏抗秦</h2><p data-pid=\"2-1omUFA\">公元前299年，秦相魏冉在击败了政敌田文以后，运作了诈取楚怀王一事。</p><p data-pid=\"MbZbSjPi\">为此，楚廷另立新王，从齐国迎回楚顷襄王。</p><p data-pid=\"gOx60vLx\">在此之后，齐廷以楚顷襄王回国之前曾许诺过割地为由对楚发兵。楚廷一方面组织抵抗，一方面向秦国求救。齐廷在听闻秦国发兵后撤军。</p><p data-pid=\"mWmATWQG\">彼时，秦、楚之间形成了一种微妙的关系——秦廷就算攥着楚怀王这颗棋子好像也干不了什么，但私有又足以恶心此事最大的受益者楚顷襄王。</p><p data-pid=\"FX4bTb0G\">大抵是这一手太招人恨，秦相魏冉很快又被政敌赶下了台，楼缓取而代之，秦廷在其后整体实施亲赵政策，秦、赵、宋联盟得以构建。</p><p data-pid=\"2w_9VHdB\">而楚国在从此以后则陷入了彻底的沉默。</p><p data-pid=\"gcNbInzU\">楚国在当时的沉默大概率是在收拾楚怀王一朝留下的烂摊子。楚顷襄王即位时还很年轻，楚廷内部重臣之间的关系也颇为复杂，所以在此时自然要减少政令以达到休养生息的效果——注意，变革活动会在短时间内带来“劳民”的负面效果，并非任何时机都可进行——由此形成了楚廷在楚顷襄王前期“不作为”的表象。</p><p data-pid=\"dnSqSu7r\">这种沉默一直持续到五国伐齐已决出胜负以后。</p><p data-pid=\"CsJuaJ14\">在燕、赵、魏、秦大肆攻略齐地之时，楚廷突然派昭齿率领一支万余人的军队收复了原被宋国夺走的淮北地区，并进入莒都控制了流亡中的齐廷。</p><p data-pid=\"LMqhIAes\">下图为五国伐齐后列国兼并齐地的大致形势：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-c5f3cf028c05f30cc5d3aba36159ccb3_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"721\" data-original-token=\"v2-c5f3cf028c05f30cc5d3aba36159ccb3\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-8df1c34c696567eeca9a7703a940eedf_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pica.zhimg.com/v2-c5f3cf028c05f30cc5d3aba36159ccb3_r.jpg?source=2c26e567\"/></figure><p data-pid=\"k2nXfyB7\">如图所示：</p><p data-pid=\"R7y63sq3\">红圈为燕、赵、魏、秦兼并的大致范围，燕取齐本土，赵取济水一带，魏取宋地，秦取陶邑；</p><p data-pid=\"Pg7nCX5T\">白圈为齐国仅剩的即墨和莒（一说另有聊城）；</p><p data-pid=\"fVzfUFsJ\">黄箭头为昭齿的大致行军路线，黄圈为原被宋国夺取的淮北地区。</p><p data-pid=\"2Za4ZEto\">不过，昭齿后来与齐廷发生了分歧，残忍地处死了齐闵王，接下来又被莒地士人杀死——杀死楚将的责任则被莒人推到年仅14周岁的王孙贾头上。</p><p data-pid=\"pUOOCLuJ\">楚廷的第一轮动作就此结束。</p><p data-pid=\"J1LwCmNT\">第一强国倾覆后留出的空缺，引起了列国新一轮的火并。</p><p data-pid=\"YS9LuueR\">在击破齐国后，秦廷立即对魏发兵，旨在控制中原枢纽。燕、赵、韩则相继发兵救魏，遏制秦国的扩张。</p><p data-pid=\"WspwpBib\">此时，楚廷忽然开始了动作，借一名射手之口宣布了一项要压制秦国、降服中原、吞并齐地的宏伟计划——这显然是一种虚张声势，似乎是想敲打魏、赵、燕接下来的站队。</p><p data-pid=\"PDVFEryg\">下图为神射手阐述的“战略规划”：</p><figure data-size=\"normal\"><img src=\"https://picx.zhimg.com/50/v2-fd8354d89e4ee302db2d86e5ba212fda_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"526\" data-original-token=\"v2-fd8354d89e4ee302db2d86e5ba212fda\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-a6ac51515fe046eb28f8215be54e8dec_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://picx.zhimg.com/v2-fd8354d89e4ee302db2d86e5ba212fda_r.jpg?source=2c26e567\"/></figure><p data-pid=\"1xfynC85\">如图所示：</p><p data-pid=\"dQ7BBUI2\">黄箭头为第一阶段，主要诉求在攻取魏都大梁；</p><p data-pid=\"AMe9Jc6y\">灰箭头为第二阶段，主要诉求在于占领齐地，并收服以鲁国为代表的泗上列国；</p><p data-pid=\"LF9SLF5N\">紫箭头为第三阶段，主要诉求在于封锁秦国东出路径，从而坐实对东方的攻略；</p><p data-pid=\"h0y0lAai\">这一战略的主要假想敌为秦国，似乎是在敲打赵、韩、魏、齐（残余）、鲁等国的站队。</p><p data-pid=\"83NkMgAo\">公元前280年，楚顷襄王19年，秦廷决定先发制人，发兵攻击楚国的黔中一带。</p><p data-pid=\"mY9hPkWM\">而后，楚廷也发兵反攻，在夺回黔中后又像秦国的巴郡一带移动。</p><p data-pid=\"6A-dKDW-\">公元前279年，楚顷襄王20年秦将白起率精锐部队深入楚国的江汉地区，于次年一举攻取了鄢城和郢都，楚廷被迫逃亡到了东北境的郢陈。</p><p data-pid=\"SiDZblO6\">图为鄢郢之战及其前后系列战役的大致形势：</p><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/50/v2-fdaf86349e56f7bbd0cf3fe45da0ce70_720w.jpg?source=2c26e567\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"506\" data-original-token=\"v2-fdaf86349e56f7bbd0cf3fe45da0ce70\" data-default-watermark-src=\"https://picx.zhimg.com/50/v2-e637c2aef7063ccc55253c2c9a89e8e8_720w.jpg?source=2c26e567\" class=\"origin_image zh-lightbox-thumb\" width=\"799\" data-original=\"https://pic1.zhimg.com/v2-fdaf86349e56f7bbd0cf3fe45da0ce70_r.jpg?source=2c26e567\"/></figure><p data-pid=\"UFW44fkN\">如图所示：</p><p data-pid=\"NK_vzhYr\">白圈为东迁后的楚都郢陈；</p><p data-pid=\"gzpBM5-3\">红圈为白起部的攻略范围，即江汉一带；</p><p data-pid=\"tShzgja7\">紫圈为楚军先后攻击的范围，包括泗上、黔中、滇地等；</p><p data-pid=\"mSXKJmmf\">司马错前期在黔中的行动未被标注。</p><p data-pid=\"hCoKSJqU\">大约在这段时期，魏廷似乎有意为双方调停（或襄陵时为楚邑），秦、楚在襄陵相会，但从后面的形势看来没谈出个所以然来。</p><p data-pid=\"tRQmZUqP\">公元前277年，楚顷襄王22年，秦蜀守张若又攻取了黔中一带。</p><p data-pid=\"rbv9FLH7\">与此同时，楚国则突然收复了泗上列国，得到兵力十余万，并于次年绕过江汉攻取黔中一带的15座城邑，秦国自巴郡到南郡的通道被切断。</p><p data-pid=\"ezF8WBM7\">在围绕黔中、鄢郢、巴东一带的拉锯战过后，楚廷发生了巨大的转变，重点有三：</p><p data-pid=\"yWzB1m_W\">一是楚都的位置北迁，在地理上俨然成为了一个中原诸侯国；</p><p data-pid=\"shVK6K8Z\">二是屈、景、昭三氏的政治格局似乎被打破，景氏在之后还较为活跃，但屈氏、昭氏的活动变得比较罕见；</p><p data-pid=\"bH13pl_2\">三是由庄辛进行了一系列调整，也就是所谓的“亡羊补牢”，不排除其中可能有一些小幅度变革活动。</p><p data-pid=\"bkS_7ugA\">约在楚顷襄王末期，楚国逐渐恢复了实力，虞卿甚至夸张地称之为“楚亦强大矣，天下无敌”。楚顷襄王又谥“楚庄王”，盖与东迁后的历精更始有关。</p><p data-pid=\"ATKq5tce\">其后，楚国在楚考烈王及黄歇的治理下复强。</p><p data-pid=\"PAqf5aSi\">有关楚顷襄王一朝的大变动要特别注意一点：</p><p data-pid=\"ywULbK2V\"><b>即使秦军能够攻取江汉全境，但面对楚国的漫长纵深依旧无能为力。</b></p><p data-pid=\"U9YJzwdB\">白起在攻取郢都以后，其兵峰一度达到了大巴山一带，但对迁至郢陈的楚廷依旧无能为力——想来，楚人在当时也意识到了这一点，所以在襄陵与秦人相会时并未满足对方的要求，之后还对黔中一带进行了反攻。</p><p data-pid=\"dbFSXQLT\">这一信息应为之后的楚考烈王一朝造成了深远的影响，包括正面的，也包括负面的。</p><p data-pid=\"05UqkwVa\">公元前263年，楚顷襄王逝世，时在秦国做人质的楚考烈王逃回过继位，并向秦国割让夏州以示屈服。</p><p data-pid=\"pT8UaGbh\">秦廷对楚人的蔑视变得愈加强烈。</p><p data-pid=\"_7KILk45\">楚廷的示弱给了秦人一个积极的信号。在之后的数年间，秦国对韩、赵两国进行单方面的持续征伐，在长平一度歼灭了赵军主力，并对赵都邯郸展开了持续的围攻。</p><p data-pid=\"sE5jlMJn\">与此同时，楚人则在泗上一带进一步用兵，攻取了鲁国的薛。</p><p data-pid=\"kumyNxQO\">公元前257年，魏将魏无忌突然夺取了荡阴一带魏军的指挥权，率军攻击包围邯郸的秦军。</p><p data-pid=\"7Q3zTyHn\">此时，楚廷也出兵救赵，并与魏军深入河东郡，于汾城击败了秦军。</p><blockquote data-pid=\"tZhA4_Qa\">晋、楚流死（我）河（汾）两万人。</blockquote><p data-pid=\"kOeZdUmD\">其后，魏、楚联军退回邯郸，楚将景阳受到了赵孝成王的款待，与荀子在朝堂上议论兵事。</p><p data-pid=\"OT_t5193\">再之后，魏、楚联盟瓜分了泗上列国，魏国吞并了陶、卫，楚国吞并了鲁国，之前还占领了齐国的莒。</p><p data-pid=\"UYBmBVan\">约在秦昭襄王逝世的时间节点，魏、楚基本将齐长城以南的土地瓜分殆尽，魏国获得了齐平陆、历下，楚国获得了齐南阳地区。</p><p data-pid=\"UNihqWK7\">魏、楚联盟为大梁方面和郢陈方面均带来了大量的富庶领土进账。</p><p data-pid=\"F0j3obhG\">至此，魏国进入了“兵四布于天下，威行于冠带之国”的回光返照期，楚国则与秦国形成了“横成则秦帝，纵合则楚王”之势。</p><p data-pid=\"M1xXxvO0\">公元前247年，秦军再度攻击上党及河内，被以魏国为首的五国联军击败，一直败退回函谷关。</p><p data-pid=\"epMn_Z_Z\">就在合纵胜利之时，魏军突然攻击韩都新郑旁边的管城（今河南省郑州市管城区）——公开的理由是为了防止大梁被秦军水攻——还在淇水一带（或荥阳）一带击败了韩军。</p><p data-pid=\"xt9IN44G\">站在楚人的视角上，晋人到底想干什么显而易见。</p><p data-pid=\"qk7hrk-i\">其后，魏、楚联盟破裂，楚军对魏国发起了两到三次进攻，但均被击败。而楚廷也在前后的一段时间内把国都从郢陈迁到了巨阳，又迁到了寿春，意在与魏国拉开距离。</p><p data-pid=\"NJHubZ-S\">公元前243年，魏安僖王与信陵君逝世，魏国海市蜃楼般的霸权烟消云散。</p><p data-pid=\"c_9KB_1U\">其后，秦军大肆伐魏，至东郡。而赵、楚组织合纵进行反击，一支军队攻到了蕞，一支军队攻到了函谷关。</p><p data-pid=\"k-P4PUxW\">公元前238年，楚考烈王逝世。</p><p data-pid=\"QkealMqO\">此时，楚国的疆域大致可分为三部分：</p><p data-pid=\"FiImstHw\">一为西南部领土，主要为黔中（巴东）一带，云梦泽以南至苍梧一带，江西一带等，也就是南楚（不含南郡）；</p><p data-pid=\"Se-xqg_Y\">二为东南部领土，主要为长三角地区及淮河下游的沿海地区，也就是东楚；</p><p data-pid=\"Te8hlE6y\">三为东北部领土，主要为淮河上游一带，河南东南部、安徽北部及山东南部地区，也就是西楚。</p><p data-pid=\"LiLfMyfS\">这一地缘结构对后世影响深远，汉代所封之楚既位于中原东南部，而非传统的两湖地区。</p><p data-pid=\"jHyzeDSe\">有关楚考烈王一朝要特别注意一点：</p><p data-pid=\"3wxtAVX4\"><b>在楚廷已经迁往人口稠密的中原东南部地区，信息滞后性和动员成本的问题已经得到了相对的解决，但楚人依旧在主动运作方面十分懒惰，更多还是采取被动等待的姿态。</b></p><p data-pid=\"XVSRA99g\">这样特点应该直接造成了楚廷在楚相和外戚火并以后楚幽王一朝的不作为。</p><p data-pid=\"0uVAIkLn\">而此时的秦廷业已在晋人的阴谋诡计中突然开窍，以助赵攻燕、助魏攻楚的策略摧毁了纵横的最后一点纽带，并用间谍网向列国的朝堂间渗透。</p><p data-pid=\"1gNGU9vT\">帝国苍穹保，</p><p data-pid=\"GE5zwvfU\">天高高，</p><p data-pid=\"dAdzt-Dn\">海滔滔。</p><p data-pid=\"Ee-DaE6Q\">（全文完）</p>",
            "excerpt": "太长不看版：在春秋末期至战国时期，楚廷逐渐转向了一种“机会主义”倾向。 这种“机会主义”起先表现在军事上，既长期保持按兵不动，等待局势有利之时伺机而动。 这一动向在楚昭王至楚悼王四朝当中尤其明显，肃、宣、威三朝也基本延续了这一特点，至楚怀王一朝则明显聒噪一些，后至楚顷襄王一朝再度恢复，到了楚考烈王一朝，楚廷对这一方略的运用达到了顶峰，不过在楚考烈王死后彻底陷入了沉寂。 当然，军事上的“机会主义”或…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 9,
                "type": "",
                "thumbnails": [
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-ccedca71cb3ce0b52149219102a8e101_720w.jpg?source=7e7ef6e2",
                        "width": 1124,
                        "height": 700,
                        "token": "v2-ccedca71cb3ce0b52149219102a8e101",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://pic1.zhimg.com/v2-901b5df5524a88a4b39f76f3230bc430_720w.jpg?source=7e7ef6e2",
                        "width": 960,
                        "height": 716,
                        "token": "v2-901b5df5524a88a4b39f76f3230bc430",
                        "data_id": 0,
                        "type": "image"
                    },
                    {
                        "type_": 0,
                        "url": "https://picx.zhimg.com/v2-e12ac46eaafd0bef094d30da937b29d1_720w.jpg?source=7e7ef6e2",
                        "width": 1280,
                        "height": 826,
                        "token": "v2-e12ac46eaafd0bef094d30da937b29d1",
                        "data_id": 0,
                        "type": "image"
                    }
                ]
            },
            "attached_info": "ogEPCAQQAxj7otCnCSC546cmkgIlCgk0ODQ0NTEzODASCjI0OTkwMjMyMjcYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-05-24T10:45:47+08:00"
    },
    {
        "content": {
            "id": 515590234,
            "title": "[from js to rust 系列][对比-01][优秀博文]JavaScript 开发者的Rust 教程：从 0 到 80%[译文]",
            "type": "article",
            "excerpt_title": "作者：Michael Salim 原文链接： Rust from 0 to 80% for JavaScript Developers 总索引 [文章: [from js to rust 系列]总索引] 如果你是一名 JavaScript 开发者，这里是一个话题列表，可以帮助你快速理解 Rust 。有非常多关于 Rust 从零开始的教程。但是如果你已经知道一些 JS 的知识，为什么不比较下它们和 rust 的差异呢？这些是我希望在你开始学习 Rust 前，要知道的一些差异。 免责声明！ 我离非常熟悉 Rust 还有不少的距离。这些…",
            "url": "https://zhuanlan.zhihu.com/p/515590234",
            "image_url": "https://picx.zhimg.com/v2-5962c7aa62223b1e651837660b7a065f_r.jpg?source=172ae18b",
            "created": 1652841543,
            "updated": 1653623513,
            "author": {
                "id": "1a7c1b85c1c44fbe8bc121eb88e23a4f",
                "url_token": "hugo.spring",
                "name": "Hugo",
                "use_default_avatar": false,
                "avatar_url": "https://pic1.zhimg.com/v2-63bf00bbc2c815a63d2ab68728f4ca8c_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-63bf00bbc2c815a63d2ab68728f4ca8c.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/1a7c1b85c1c44fbe8bc121eb88e23a4f",
                "user_type": "people",
                "headline": "关注 TypeScript 、C#、Go、Rust",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic3.zhimg.com/v2-4fa161a01a3aa7e3d76aaf2ff93b37a4.png?source=6a64a727",
                        "night_mode_url": "https://pic1.zhimg.com/v2-4fa161a01a3aa7e3d76aaf2ff93b37a4.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1494571211
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"gKtn0sDU\">作者：Michael Salim</p><p data-pid=\"eDaIlT4N\">原文链接：<a href=\"https://link.zhihu.com/?target=https%3A//michaelsalim.co.uk/blog/rust-from-0-to-80-for-js-dev/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Rust from 0 to 80% for JavaScript Developers</a></p><h2>总索引</h2><a href=\"https://zhuanlan.zhihu.com/p/520718843\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-899833ae73d434846677501618731e30_qhd.jpg\" data-image-width=\"1088\" data-image-height=\"780\" class=\"internal\">Hugo：[from js to rust 系列]总索引</a><p data-pid=\"jFLm9nqN\">如果你是一名 JavaScript 开发者，这里是一个话题列表，可以帮助你快速理解 <a href=\"https://link.zhihu.com/?target=https%3A//www.rust-lang.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Rust</a>。有非常多关于 Rust 从零开始的教程。但是如果你已经知道一些 JS 的知识，为什么不比较下它们和 rust 的差异呢？</p><p data-pid=\"0xWcQ3Wk\">这些是我希望在你开始学习 Rust 前，要知道的一些差异。</p><p data-pid=\"cKnvW1Ly\">免责声明！</p><p data-pid=\"nszKH-_7\">我离非常熟悉 Rust 还有不少的距离。这些只是在我有限的知识里解释这些概念，仅此而已。如果你想要知道细节，你还是应该去阅读 Rust 的文档。学习<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/title-page.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">rust 去阅读一些 rust 的</a>书也是很好的开始。我的目标是，列出来对于你（还有未来的我）可以忽略的常识性编程概念，可以专注在作为 JavaScript 开发者已经了解的知识与 rust 的差异。</p><h2>类型</h2><p data-pid=\"L2q665zJ\">Rust 是一个类型语言，更像 TypeScript。如果你已经了解 TypeScript，相信你去学 rust 会有更好的体验。</p><p data-pid=\"jVFoWaNd\">有很多语法，rust 和 TS 是一样的，例如 <b>variable_name: Type。</b></p><h2>snake_case</h2><p data-pid=\"9pbTKRwH\">习惯它吧。</p><h2>这些符号是什么？</h2><h3>问号（?）</h3><p data-pid=\"0RshQ6hC\">你会在很多函数调用后面看到 ? ：my_function()?</p><p data-pid=\"_FDwsaWo\">这个可不是可选链。这个是处理可以错误的函数<a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/a/42921174/3101690\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">的错误处理语法糖</a>（译者：magic 翻译为语法糖）。当处理异步函数时，会大量用到这个语法。后面也会详细讲相关的内容。</p><p data-pid=\"WPsO8uoq\">（译者注：rust 大量吸收了函数式编程的精华，内置了非常强大的容器系统，每个函数都返回一个可能成功或者失败的容器。不需要明白任何函数式编程的内容，只要习惯这种写法就好了。成本是，每个函数都要自己处理好成功做什么，失败做什么。 rust 的错误处理机制非常好，但是需要每个开发自己实现自己的错误处理机制，这一点在初学时可以先忽略，有个出名的 anyhow 包，用起来就好了。）</p><h3>函数后面的感叹号（!）</h3><p data-pid=\"Ney2YwJN\">例如：println!(&#34;{:?}&#34;, my_variable);</p><p data-pid=\"BdYYk9CF\">这个符号说<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/ch19-06-macros.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">明 println 是一个宏</a>。JS 没有这样的语法。宏时用代码在编译时生成代码的技术。你可以认为是一系列的语法糖。使用这些宏就好了。</p><h3>&amp; 符号</h3><p data-pid=\"2JIJ8UTj\">例如：&amp;your_variable</p><p data-pid=\"Wxgn5teV\">这个符号获得了这个变量的引用。如果你用过 C 或者 go，应该见过这个符号。</p><h2>语法</h2><ol><li data-pid=\"dlRam55m\">分号 ; 在每个代码行最后，必须写，这一点和 JS 不一样。</li><li data-pid=\"t9-O29OU\">例外：如果有一行没有写分号，是 return 的<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/std/keyword.return.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">语法糖</a>。</li><li data-pid=\"zT4rKc76\">函数声明的语法和 JS/TS 不太一样。习惯就好了</li></ol><div class=\"highlight\"><pre><code class=\"language-rust\"><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">num</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\">\n</span><span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"c1\">// 见第二点\n</span><span class=\"c1\"></span><span class=\"w\">  </span><span class=\"c1\">// 或者\n</span><span class=\"c1\"></span><span class=\"w\">  </span><span class=\"c1\">// return 3;\n</span><span class=\"c1\"></span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div><p data-pid=\"eXVkS4FW\">4. <a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/reference/attributes.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">装饰器语</a>法也不一样。被称为 Attributes。</p><h2>这些关键字是什么？</h2><h3>struct</h3><p data-pid=\"RfFyz6Az\">这个相当于一个 JSON 对象。（当然这么说是为了更符合 JavaScript 的感觉，更细节请参阅官方文档。但是初期这么理解没什么问题。）</p><div class=\"highlight\"><pre><code class=\"language-text\">// TypeScript\ntype Person = {\n  firstName: string;\n  lastName: string;\n};\n\n// Rust\nstruct Person {\n    first_name: String,\n    last_name: String,\n}</code></pre></div><h3>trait</h3><p data-pid=\"9M0mUw9X\">可以理解为 <a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/ch10-02-traits.html%3Fhighlight%3Dtrait%23traits-as-parameters\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">interface</a>。（译者注，TypeScript 的 interface 和 trait 非常像，而且因为 TypeScript 的interface 本身支持鸭子类型，实际上可以比 trait 的限制更小，也就是说，实际上两者可以设计为有相当一样的编程范式，当然前提是如果你愿意。）</p><h3>impl</h3><p data-pid=\"WDZJQs9K\">trait 的<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/ch10-02-traits.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">实现</a>。和 JS 里比较相近的概念是 class（译者：里的 implement）。 这个语法是 trait 和 类型的桥梁。我还没用过。</p><h3>enum</h3><p data-pid=\"finJ9JlS\">和 Ty<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/ch06-01-defining-an-enum.html%3Fhighlight%3Denum%23enum-values\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">peScript 的 enum 类</a>似。但是你可以往里面存数据。在异步代码里是一个非常重要的概念，非常强大。</p><h2>Console.log</h2><p data-pid=\"aw0azA9A\">很遗憾，比 JS 的复杂很多。更像其他语<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/std/fmt/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">言的 print</a>f。</p><div class=\"highlight\"><pre><code class=\"language-text\">println!(&#34;{:?}&#34;, my_variable);</code></pre></div><h2>库/依赖</h2><p data-pid=\"MXA5ze1-\">使用 Cargo.toml， 而不是 package.json。你需要<a href=\"https://link.zhihu.com/?target=https%3A//github.com/rust-lang/cargo/issues/4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">手动增加依</a>赖，而不是使用像 yarn add 这样的命令。</p><p data-pid=\"LiFHW0l4\"><a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/cargo/reference/specifying-dependencies.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文档</a>。</p><p data-pid=\"e4upr958\">例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">[dependencies]\nchrono = &#34;0.4&#34;\negg-mode = &#34;0.16.0&#34;</code></pre></div><h2>Importing（外部依赖）</h2><p data-pid=\"Zjf2BocK\">Rust 有<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/ch07-02-defining-modules-to-control-scope-and-privacy.html%3Fhighlight%3Dmodule%23defining-modules-to-control-scope-and-privacy\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">模块系统</a>。（译者注：JS有一个一样好的就好了。）和 JS 的区别非常大。</p><p data-pid=\"nakn76MK\">更像名字空间。下面是一个引入依赖的例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">use rocket::serde::{json::Json, Deserialize, Serialize};</code></pre></div><p data-pid=\"kVHesSug\">use 相当于 js 的 import。</p><p data-pid=\"rt1wYOzn\">rocket 是包的名字。</p><p data-pid=\"AiNJ4iOs\">:: 获取模块的符号。</p><p data-pid=\"xm8dpjyH\">serde 模块的名字</p><p data-pid=\"jq4abft0\">{json::Json, Deserialize, Serialize} 引入模块内具体的东西。</p><p data-pid=\"3dVZJlTe\">一些更多的语法：</p><div class=\"highlight\"><pre><code class=\"language-text\">use chrono::prelude::*;\n\nuse rusqlite::Result; </code></pre></div><h2>Importing 本地文件</h2><p data-pid=\"WmYx8Cdg\">最好的解释文档：<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/rust-by-example/mod/split.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">File hierarchy - Rust By Example</a> </p><p data-pid=\"fwq868N0\">使用 mod 去告诉编译器你想引入的文件夹或者文件。</p><p data-pid=\"LOhUScH0\">然后使用 use 去引入你想引入的内容。也有不写 mod 的方法，需要使用 crate 前缀。（译者注：crate 相当于我们一般在 tsconfig 或者 vite 里设置的 @ 的快捷链接，相当于从根目录开始寻址。）</p><div class=\"highlight\"><pre><code class=\"language-text\">use crate::your_file_or_module;</code></pre></div><p data-pid=\"Nwryvtsp\">注意：<a href=\"https://link.zhihu.com/?target=http%3A//mod.rs/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">mod.rs</a> 是一个特殊的文件名相当于 index.js</p><p data-pid=\"w2e2FEeH\">更多的例子请看上面的链接。（译者注：rust 这一块非常复杂，因为类的 public private 等访问限制也是在这一层做的，和 js 不一样，rust 可以在一个文件内有多个模块。当这些规则混在一起时，有非常多的可能性。但是一般来说，形成自己的习惯只是时间的问题。初学 rust 会觉得它没有 oop 的设计，但是实际上它不是没有，而是把 oop 的设计四散到例如模块管理，trait 实现、装饰器、宏等地方。rust 的表现力非常强，如果你喜欢语言的表现力，rust 绝对会让你爱不释手。而且 rust 的代码比 c++ 好读太多了。）</p><h2>Const 与 let</h2><p data-pid=\"RsR887Vr\">（译者注：与 js 完全不一样，这一点要谨记在心）</p><p data-pid=\"LLP8xNZ3\">在 JavaScript 里使用 const 去声明一个不可变变量。（对于复杂类型，表示地址不可变）</p><p data-pid=\"M4WRvJE_\">在 Rust 里，这一点实际是由 let 实现的。并且不可变是默认的情况。如果你想要可变，你需要加上 <a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/ch03-01-variables-and-mutability.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">mut</a> 关键字。const 是为了给实际常量（表示你不可以从其他变量计算获得这个值）使用的。</p><div class=\"highlight\"><pre><code class=\"language-text\">let immutable_variable = ...;\nlet mut mutable_variable = ...;\nconst MY_CONSTANT = &#34;CONSTANT&#34;;</code></pre></div><h2>库文档</h2><p data-pid=\"u_QlXCRG\">如果你在 github 上找不到这个链接，你可以在 <a href=\"https://link.zhihu.com/?target=http%3A//crates.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">crates.io</a> 的对应页面找：</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1a4bb6ff400d29664c7621a3ea8785e5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"348\" data-rawheight=\"73\" class=\"content_image\" width=\"348\" data-original-token=\"v2-022bcff9d8c3ff10143fb43234db1b82\"/></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1e334cdd43c1e0c7cf86477cbe9eec26_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"323\" data-rawheight=\"429\" class=\"content_image\" width=\"323\" data-original-token=\"v2-db1faf54783cf5399e46ec8792354570\"/></figure><h2>异步</h2><p data-pid=\"NLC3lOk9\">到目前为止，rust 最让我迷惑的两个概念是 futures 和 ownership。如果你想要了解这些概念，我建议你找专门的文档好好学习他们。这里我们先谈 future。</p><p data-pid=\"QdnqtFJ1\">Future 和 Promise 有点像。但是不像 JS，Rust 有一个对于 promise/future 的结果类型 Result。这个类型可以接收错误的范型（我希望 JS 也有这个类型，译者注：我也希望）。你也可以在不使用 future 的时候用 Result。</p><h3>执行（或者消费）future</h3><p data-pid=\"TQHpErqQ\">原生的库因为太裸了，并不能直接使用，你需要使用外部的库（有点像 JS 的 bluebird）。你需要一个执行器去执行 future。我推荐 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/tokio-rs/tokio\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/tokio-rs/tok</span><span class=\"invisible\">io</span><span class=\"ellipsis\"></span></a> ，请详细阅读它的文档。</p><h3>.await 去 await 一个函数</h3><p data-pid=\"yRmAAawp\">async_function().await; 这是一个有趣的语法，不是么？你不需要像 JS 一样加括号。</p><h3>处理 Result</h3><p data-pid=\"hjDtAqAT\">这是非常<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">重要的一个概念</a>。Rust 是一个安全的语言，意味着你要处理所有的事情（译者注：很多人认为 rust 是一个安全的语言是 rust 帮你处理了安全，这种理解是不对的，还是开发者处理的，rust 暴漏了更多问题给开发者，在编写时要去处理。）。是的，不像 JS，所有的错误问题（译者注：和 TypeScript 有类似的地方，但是比 TypeScript 要更严格，尤其是内存方面。特别希望 TypeScript 也能出一个生命周期的机制，处理变量深浅拷贝的问题太让人郁闷了）。</p><p data-pid=\"s8zteN8G\">Result 枚举类型有两个属性，一个是 Ok，一个是 Err。如果 future 成功了，返回 Ok，否则返回 Err。</p><p data-pid=\"aFDkxzHD\">一个例子：</p><div class=\"highlight\"><pre><code class=\"language-text\">let f = File::open(&#34;hello.txt&#34;);\n\nlet mut f = match f {\n    Ok(file) =&gt; file,\n    Err(e) =&gt; return Err(e),\n};</code></pre></div><p data-pid=\"ugAKePSq\">上面这个例子用了 Rust 异常<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/ch18-03-pattern-syntax.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">强大的模式识别</a>（译者注：太强大了，以至于所有的语言几乎都在 2022年开始抄这个特性）。</p><p data-pid=\"-DnMxqFL\">这么写太麻烦了，有两种通用的办法简化它：</p><ol><li data-pid=\"piXJjAjC\">使用 .unwrap()</li></ol><p data-pid=\"iLac7_76\">例子：let my_value = async_function().await.unwrap();</p><p data-pid=\"3ntv1uWI\">这个写<a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/a/36362163/3101690\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">法会在成功时获得</a>值，失败时 panic。</p><p data-pid=\"XjYXOjM4\">使用这个写法，你最好确定一定不会有问题。</p><p data-pid=\"WuJFG08w\">2. 使用 ? 语法</p><p data-pid=\"IG15zLrB\">这个会把 error 传递下去。所以你的函数也要传递 error（一般通过 Result 或者 Option）</p><p data-pid=\"N9nAGEet\">更多的例子请<a href=\"https://link.zhihu.com/?target=https%3A//stackoverflow.com/a/42921174/3101690\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">参考</a>。</p><h2>Ownership 和 References</h2><p data-pid=\"GN6Xpzo0\">你听说过 rust，应该听说过 borrow checker 吧？我在这不会说太多。这是这里最难的部分，因为这是 rust 独有的东西。如果你以前从来没有处理过 references，这一块对你会非常难。</p><p data-pid=\"1r6NnpFG\">但是，感谢 rust 的文档：简单说，好好读<a href=\"https://link.zhihu.com/?target=https%3A//doc.rust-lang.org/book/ch04-01-what-is-ownership.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">4.1，4.2，4.3</a>。（译者注：这一块一开始不明白是无所谓的，这一块必须通过时间，和写的代码多了去理解，光看是没意义的。）</p><h2>嗯，就这些！</h2><p data-pid=\"PVld5kgX\">这个列表比我想象的还要短。希望对你的 rust 之旅有帮助。</p><p></p><p></p>",
            "voteup_count": 73,
            "column": {
                "id": "c_1509847453524766720",
                "type": "column",
                "url_token": "c_1509847453524766720",
                "title": "from js to rust",
                "url": "https://zhuanlan.zhihu.com/c_1509847453524766720",
                "created": 1652755684,
                "updated": 1652755684,
                "description": "",
                "image_url": "https://pica.zhimg.com/4b70deef7_720w.jpg?source=d16d100b"
            },
            "comment_count": 8
        },
        "created": "2022-05-18T10:39:03+08:00"
    },
    {
        "content": {
            "id": 492863793,
            "title": "2022年，消失的金三银四",
            "type": "article",
            "excerpt_title": "[图片] ✎ 写在前面我平日有个习惯，虽然不看机会，也会定期更新简历。 这样有一个好处就是，当你更新了简历，就会有猎头找上门，问我看不看机会。我可以凭借收到猎头电话的频率，大致判断我这个岗位在就业市场的受欢迎程度。 最让我感到担心的是，今年的市场行情，还不如疫情刚刚来的2020年。 去年互联网行业包括在线教育、买菜、视频、游戏等领域的裁员潮，让很多职场人重新回到了求职状态，想要看机会。而今年的应届毕业生更是达到…",
            "url": "https://zhuanlan.zhihu.com/p/492863793",
            "image_url": "https://pic1.zhimg.com/v2-b9e61daf82af72c9b36aa3e5b74d36a7_r.jpg?source=172ae18b",
            "created": 1649043405,
            "updated": 1658122039,
            "author": {
                "id": "46434180b257f06a2616522729e5a79c",
                "url_token": "sean-yenan",
                "name": "Sean Ye",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-0d8fae9c0958d4b83478dfc7f9fc383f_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pica.zhimg.com/v2-0d8fae9c0958d4b83478dfc7f9fc383f.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/46434180b257f06a2616522729e5a79c",
                "user_type": "people",
                "headline": "公众号：瞎说职场",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic1.zhimg.com/v2-9d6bf92a514bdd492483df0aa390067b.png",
                        "night_mode_url": "https://picx.zhimg.com/v2-9b321c50a1718d276d9f02f011caf61f.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "https://picx.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19555189",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19555189",
                                "name": "人力资源（HR）",
                                "avatar_url": "https://picx.zhimg.com/v2-55d5d586064836cfe95fe3393deae1e6_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19557876",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19557876",
                                "name": "职场",
                                "avatar_url": "https://pica.zhimg.com/v2-15c9885c2487fb2333d49b0005fa6ae6_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19559052",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19559052",
                                "name": "足球",
                                "avatar_url": "https://pic1.zhimg.com/v2-bb0a7868f74c3c712efaecc9e12d772b_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19560641",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19560641",
                                "name": "职业规划",
                                "avatar_url": "https://pic1.zhimg.com/v2-98ba63611671c9911d17432016c70a4e_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19561726",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19561726",
                                "name": "离职",
                                "avatar_url": "https://pic1.zhimg.com/v2-b6372380b82f2178325669f9a7422f42_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19562832",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19562832",
                                "name": "篮球",
                                "avatar_url": "https://pic1.zhimg.com/v2-711d969a226f736dbefba213642fa75b_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19551771",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19551771",
                                "name": "求职",
                                "avatar_url": "https://pic1.zhimg.com/v2-4deda38a635e6416916ffd83b857c60c_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19572953",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19572953",
                                "name": "职场新人",
                                "avatar_url": "https://pica.zhimg.com/f25303335_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "2022 年度新知答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "年度新知答主",
                            "description": "2022 年度新知答主",
                            "url": "https://www.zhihu.com/question/510340037",
                            "sources": [],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "reward",
                            "detail_type": "zhihu_yearly_answerer",
                            "title": "年度新知答主",
                            "description": "2022 年度新知答主",
                            "url": "https://www.zhihu.com/question/510340037",
                            "sources": [
                                {
                                    "id": "2022",
                                    "token": "",
                                    "type": "year",
                                    "url": "",
                                    "name": "",
                                    "avatar_path": "",
                                    "avatar_url": "",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "人力资源（HR）等 8 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19555189",
                                    "token": "19555189",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19555189",
                                    "name": "人力资源（HR）",
                                    "avatar_path": "v2-55d5d586064836cfe95fe3393deae1e6",
                                    "avatar_url": "https://picx.zhimg.com/v2-55d5d586064836cfe95fe3393deae1e6_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19557876",
                                    "token": "19557876",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19557876",
                                    "name": "职场",
                                    "avatar_path": "v2-15c9885c2487fb2333d49b0005fa6ae6",
                                    "avatar_url": "https://pica.zhimg.com/v2-15c9885c2487fb2333d49b0005fa6ae6_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19559052",
                                    "token": "19559052",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19559052",
                                    "name": "足球",
                                    "avatar_path": "v2-bb0a7868f74c3c712efaecc9e12d772b",
                                    "avatar_url": "https://pic1.zhimg.com/v2-bb0a7868f74c3c712efaecc9e12d772b_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19560641",
                                    "token": "19560641",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19560641",
                                    "name": "职业规划",
                                    "avatar_path": "v2-98ba63611671c9911d17432016c70a4e.jpg",
                                    "avatar_url": "https://pic1.zhimg.com/v2-98ba63611671c9911d17432016c70a4e_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19561726",
                                    "token": "19561726",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19561726",
                                    "name": "离职",
                                    "avatar_path": "v2-b6372380b82f2178325669f9a7422f42",
                                    "avatar_url": "https://pic1.zhimg.com/v2-b6372380b82f2178325669f9a7422f42_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19562832",
                                    "token": "19562832",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19562832",
                                    "name": "篮球",
                                    "avatar_path": "v2-711d969a226f736dbefba213642fa75b",
                                    "avatar_url": "https://pic1.zhimg.com/v2-711d969a226f736dbefba213642fa75b_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19551771",
                                    "token": "19551771",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19551771",
                                    "name": "求职",
                                    "avatar_path": "v2-4deda38a635e6416916ffd83b857c60c",
                                    "avatar_url": "https://pic1.zhimg.com/v2-4deda38a635e6416916ffd83b857c60c_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19572953",
                                    "token": "19572953",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19572953",
                                    "name": "职场新人",
                                    "avatar_path": "f25303335",
                                    "avatar_url": "https://pica.zhimg.com/f25303335_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        },
                        {
                            "type": "reward",
                            "detail_type": "super_activity",
                            "title": "社区成就",
                            "description": "2023 好物 100 提案人",
                            "url": "",
                            "sources": [
                                {
                                    "id": "24",
                                    "token": "",
                                    "type": "content_potential_category",
                                    "url": "",
                                    "name": "职场",
                                    "avatar_path": "",
                                    "avatar_url": "",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<p></p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-42729c5b61d8616077b12f1e1f5de0c3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"899\" data-rawheight=\"312\" class=\"origin_image zh-lightbox-thumb\" width=\"899\" data-original=\"https://pic4.zhimg.com/v2-42729c5b61d8616077b12f1e1f5de0c3_r.jpg\" data-original-token=\"v2-50d0bbdce99470893e04885faa697d6e\"/></figure><h2><b>✎</b> <b>写在前面</b></h2><p data-pid=\"hhCfB3Af\">我平日有个习惯，虽然不看机会，也会定期更新简历。</p><p data-pid=\"pHq1UkM1\">这样有一个好处就是，当你更新了简历，就会有猎头找上门，问我看不看机会。我可以凭借收到猎头电话的频率，大致判断我这个岗位在就业市场的受欢迎程度。</p><p data-pid=\"7N7qTgtk\">最让我感到担心的是，今年的市场行情，还不如疫情刚刚来的2020年。</p><p data-pid=\"VSd800et\">去年互联网行业包括在线教育、买菜、视频、游戏等领域的裁员潮，让很多职场人重新回到了求职状态，想要看机会。而今年的应届毕业生更是达到史上最多的1076万。</p><p data-pid=\"55w0J-HL\">这么多求职者，本来就不是金三银四能充分消化的。</p><p data-pid=\"swdhaAyi\">更麻烦的是，很多企业不但没有扩大招聘规模，甚至还有一些企业不招人，把 HC 冻结了，部分受到经济冲击的民企在裁员，即便是稳如国企，如今为了应届生的就业稳定，开始放弃社招，只招应届生。</p><p data-pid=\"rQfq5pFB\">王兴说过一句：2019年可能会是过去十年最差的一年,却是未来十年里最好的一年。</p><p data-pid=\"rQfq5pFB\">这句话没想到实现得如此之快，2020年疫情来了，2021年政策转向，加上中美关系的持续恶化；2022年，可以算是集齐了所有负面因素：</p><ul><li data-pid=\"4-sxm2jN\"><b>国际环境：</b>国际局势恶化，之前只是嘴仗和制裁，这次，俄乌直接掐起来了。乌克兰的粮仓，俄罗斯的石油，大宗商品成本上扬在所难免。</li><li data-pid=\"8x2Jv85l\"><b>行业环境：</b>政策持续，部分行业恶化释放出的人力，没有其他行业可以消化；</li><li data-pid=\"aoVFl6nE\"><b>生活环境：</b>疫情反复，深圳封过城，上海说是没封城，其实也是封了，我个人已经在小区里封了2个多礼拜。</li></ul><p data-pid=\"rQfq5pFB\">大环境不好，小环境也不好，就算自己情况好一点，求职面试还不见得方便。今年的金三银四，大概率要芭比Q了。</p><p data-pid=\"TJQP-A0j\">有意思的是，对于想要招人的企业来说，今年招人也特别难，因为职场人对于跳槽都抱有非常保守的态度。</p><p data-pid=\"rQfq5pFB\">除非你有一份稳定的副业收入，否则今年，我们的职业发展策略要更加谨慎。</p><hr/><h2><b>1、阴魂不散的疫情</b></h2><p data-pid=\"pIBRubdQ\">2020年，武汉最危急的时候，上海还是做得不错的。</p><p data-pid=\"pIBRubdQ\">作为上海人，我们并没有体会到封城，封街道，封小区的体验。</p><p data-pid=\"pIBRubdQ\">但这一次真的是拉胯，不仅是防疫上，细节管理上，都让上海市民都很失望。</p><p data-pid=\"pIBRubdQ\">我的小区，封了两周了，周边的店铺基本都不营业了。</p><p data-pid=\"pIBRubdQ\">对我们互联网行业的上班族来说，2周也不算长，在家办公很快就过去了。</p><p data-pid=\"pIBRubdQ\">但是对于卖菜、卖水果的这种生意人来说，影响还不小，我家门口的水果摊老板都抱怨了，疫情开始扩大的时候，市场被封了，不得不换地方进货，结果自己店里每天只有2个小时有水果卖。现在更是直接停业了。</p><p data-pid=\"pIBRubdQ\">但房租可不会停啊。</p><p data-pid=\"pIBRubdQ\">年初疫情还没来的时候，我问过一个理发店老板，疫情对他生意的影响。</p><p data-pid=\"pIBRubdQ\">我以为是没啥影响，毕竟整个2021，上海还是相对安全的，上海的精准防疫也一度被各地称颂。</p><p data-pid=\"pIBRubdQ\">结果，他告诉我，他店的年收入比疫情前，足足少了30%，但是房租并没有一分减免。</p><p data-pid=\"pIBRubdQ\">再举一个例子，封我小区之前的一天，我正好打车，问了滴滴专车司机的体验，他说平时一天赚600-800。现在一半都没有。</p><p data-pid=\"pIBRubdQ\">但是，他还算运气好的，毕竟车是自己的，成本就是油钱。</p><p data-pid=\"pIBRubdQ\">他有一个也开专车的朋友，这几天都在哭，因为一天出去跑了10多个小时，只赚到几十块。</p><p data-pid=\"pIBRubdQ\">更惨的是，车是租的，一个月8400，相当于每天起床就是280的债务。他挣到的钱，连油钱都不够。</p><p data-pid=\"BSP7Weg3\">香港中文大学教授宋铮团队，用中国过去近两年城际卡车流量的月度变化，来衡量封城对当地及周边经济的影响。他的模型显示：</p><blockquote data-pid=\"xijMST6M\">如果封城两周，造成的经济损失，为该城市当月GDP的32%左右，为该城市全年GDP的2.7%左右。封城取消后经济一般能迅速恢复到原有水平，但并没有反弹。<br/>如果封城一个月，经济损失大致为该城市全年GDP的4.5%。</blockquote><p data-pid=\"pIBRubdQ\">《大空头》有一句话让人记忆犹新：</p><p data-pid=\"pIBRubdQ\"><b>失业率上升1%，就会有4万人丧命。</b></p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c8948a8023f6ff1bbacb447af94f58a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"864\" data-original=\"https://pic3.zhimg.com/v2-c8948a8023f6ff1bbacb447af94f58a6_r.jpg\" data-original-token=\"v2-bd7206c2636f52e5b6825920f61a5837\"/></figure><h2><b>2、恶劣的国际局势</b></h2><p data-pid=\"WX-zYfrI\">对于很多国人来说，很久没看过这么大阵仗的战争了，看个热闹。</p><p data-pid=\"X3qqPvsT\">但对于企业和企业背后的资本来说，战争永远是负面信息。</p><p data-pid=\"f6KQHKfJ\">而对于职场来说，<b>没有投资，就意味着没有机会</b>。</p><p data-pid=\"uHNaEjib\">尤其对于很多致力于在中国投资扩大，持续服务中国市场的外企来说，今年会是比较纠结的一年。</p><p data-pid=\"pCeII-t4\">俄乌战争，是第一个坏消息；打成持久战，是第二个坏消息</p><p data-pid=\"PzikJI7S\">如果真的是闪电战，对资本来说也是可以接受的，因为既成定局，算是负面消息的靴子落地了。</p><p data-pid=\"NpYjzHnJ\">更没想到，战争前看似小丑形象的乌克兰总统泽林斯基打了一场漂亮的社交媒体战争（这段有机会，单独和大家唠唠，为啥打工人都需要社交媒体来打造形象）。</p><p data-pid=\"bAs874ww\">然后这位演员出身的总统，开始了他在社交媒体上的演出，时不时一身戎装，对内鼓励军队，对外要求欧美政府制裁俄罗斯，今天制裁普京，明天要求制裁俄罗斯金融业……</p><p data-pid=\"HubV00Cg\">结果，欧美网友的情绪被社交媒体调动起来了，反过来施压政府，欧美政府不得不不断加大制裁力度，以及对乌克兰的援助力度。</p><p data-pid=\"WYSgaVKk\">如今，说得出来名字的外企，基本都离开俄罗斯了……</p><p data-pid=\"HNayYeNn\">资本是天然的避险倾向，如果贵国有风险，无论是经济风险、政治风险还是军事风向，资本都是要三思而后行的。</p><p data-pid=\"gIibNOPH\">这些年在中国这样的案例也不少见。</p><p data-pid=\"CmyE67ak\">我之前写过一个回答，企业外企文化温和，福利靠谱，但也有隐忧：</p><a href=\"https://www.zhihu.com/question/299766610/answer/1811628658\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-bf6c1f43ebe500f09ae8f0f83ebdcec5_l.jpg\" data-image-width=\"1242\" data-image-height=\"1445\" class=\"internal\">在外企工作爽吗？</a><p data-pid=\"sNVTLxL5\">之前很多外企一直保持墙外一种说法，墙内一种说法，也活得挺好。</p><p data-pid=\"1e-kM3GD\">因为当时的中国市场是搁置争议，求同存异；而今时不同往日，如今的网络气氛更偏向于：你不公开支持我，那你就是我的敌人。</p><p data-pid=\"-gPDNrMm\">注意，这种网络气氛不仅在中文互联网世界可见，国外互联网也是这德性，有一个名词叫做「取消文化」，为了政治正确，可以封杀哈利波特的作者JK罗琳，没邀请她参加哈利波特20周年的剧集。</p><p data-pid=\"47dW_y9j\">如今「我从商，我不表态，我两头讨好」的骑墙派，已经越来越难有生存空间了。</p><p data-pid=\"dsUbaTxg\">这就是外企的尴尬之处。All in China，抢占全球最大的市场，曾经是很多外企的公司战略，但如今，随着全球化逐渐被反全球化取代……</p><p data-pid=\"QzF4fHaj\">同样的道理也发生在中国企业国际化的路上，华为作为代表受到了种种意料之外的麻烦，字节的 Tik tok一度被掐着要卖，当时的场景和如今英超的切尔西非常相似。</p><p data-pid=\"_LCEAV1z\">作为中国人，我们是幸运的，感谢强大的祖国，我们可以免于战争和疫情的威胁。但即便如此，战争和疫情会影响经济，而经济会影响我们的职业发展机会。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5b4e2a6e322aae66562355b62d937293_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"939\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-5b4e2a6e322aae66562355b62d937293_r.jpg\" data-original-token=\"v2-ad023747aa9603eafeba869008373640\"/></figure><h2><b>3、纠结的市场环境</b></h2><p data-pid=\"krVgTd0p\">距离上一个破局科技——移动互联网——已经过去10多年了。互联网企业，通过降维打击，把线下能薅的业务，基本都薅了一遍。</p><p data-pid=\"pIBRubdQ\">蛋糕没法做大了。但来分蛋糕的人越来越多。</p><p data-pid=\"pIBRubdQ\">不仅如此，为了未来中国有足够的人才，鼓励生育，变成了这两年的重要话题。</p><p data-pid=\"pIBRubdQ\">那些对生育、共同富裕带来负面影响的行业，也理所应当滴遭到了调控。</p><ul><li data-pid=\"pIBRubdQ\">房地产：核心的结婚成本+养娃成本；</li><li data-pid=\"iRAIViLK\">在线教育：鼓励鸡娃，提高养娃成本；</li><li data-pid=\"OXaMHisO\">游戏：据说是不能让孩子打太多游戏；</li><li data-pid=\"EsbwZOm9\">外卖：开始讨论如何给外卖员安排社保……</li></ul><p data-pid=\"8vgBgz0I\">之前作为吸引人才的主力公司，互联网大厂在这一波政策流里也是饱受铁拳。反垄断，避免大厂无序扩张，是好事，但随之而来的，必然是大厂岗位的减少。加上美帝给中概股上眼药，如今的互联网大厂家里家外，被混合双打。</p><p data-pid=\"pIBRubdQ\">这些大厂，过往金三银四，招个几万人是常态。</p><p data-pid=\"pIBRubdQ\">就算是疫情爆发的 2020 年，在居家办公的金三银四里，我也见证了很多同事和朋友们，通过远程面试拿到了岗位，成功跳槽 BAT、字节、快手、美团等大厂。某种意义上来说，疫情还加速了他们的跳槽进度，因为在家办公，远程面试，实在是太方便了。</p><p data-pid=\"pIBRubdQ\">而今年怕是没这样的机会了，年前年后，BAT 都先后有裁员消息，甚至上了热搜。</p><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7fce51609dca3e5612ba3aebe6a4ef65_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"642\" data-rawheight=\"226\" class=\"origin_image zh-lightbox-thumb\" width=\"642\" data-original=\"https://pic2.zhimg.com/v2-7fce51609dca3e5612ba3aebe6a4ef65_r.jpg\" data-original-token=\"v2-8f43fcacdc2bcf88096309a492c46eb2\"/></figure><p data-pid=\"E37Ehi-n\">如今，肯定是指望不上他们了。</p><p data-pid=\"pIBRubdQ\">如今还算比较火热的行业，芯片行业算一个，毕竟不能被人卡脖子；新能源汽车算一个。</p><p data-pid=\"pIBRubdQ\">移动互联网是基于智能手机起来的，下一个智能设备，大家基本看好的都是智能汽车。当然，进入门槛也不低。</p><p data-pid=\"pIBRubdQ\">先恭喜汽车行业的朋友们，抓紧时间转型吧。</p><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b5ad63b23ccfce33179eb3b5c22ff553_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-b5ad63b23ccfce33179eb3b5c22ff553_r.jpg\" data-original-token=\"v2-a82b784b8e66b64babb83d821718a602\"/></figure><p data-pid=\"n0l9s_xc\">对于普通打工人来说，我把 2008 年积累的一点经验分享给大家，供参考吧：</p><h2><b>1、控制现金流</b></h2><p data-pid=\"q_mnH5fg\">在这个年份里，不要做大额投资，尤其是避免高额贷款。</p><p data-pid=\"7BIYgZO5\">手里要有足够的现金，这笔现金能够帮你熬过潜在的风险，无论是重疾，还是2个月的空窗期。</p><p data-pid=\"yOko0jwC\">打工人的容错率是极低的，环境不好时，不要拼命给自己上杠杆。</p><h2><b>2、别裸辞</b></h2><p data-pid=\"D8IZO-Rg\">再好的年份里，我也不推荐裸辞。理由写过：</p><a href=\"https://zhuanlan.zhihu.com/p/34254933\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-372d3b62f8865b68b7567ed3ae5d18d4_qhd.jpg\" data-image-width=\"1352\" data-image-height=\"661\" class=\"internal\">Sean Ye：那些裸辞的职场人，后来找到工作了吗？</a><p data-pid=\"iOw1rlLM\">在奇葩说的一次辩论里，支持裸辞的詹青云提到了裸辞的种种好处。</p><p data-pid=\"Tc4dYB4H\">但是有一点她并没有提到，这些好处基于一个大原则，你有足够的<b>容错率</b>——要么非常优秀，企业都跪着你；要么不差钱，裸辞也不会影响生活质量。</p><p data-pid=\"L8kZeA2Z\">而今年，我们可能并没有那么好的容错率。</p><h2><b>3、掌握远程面试技能</b></h2><p data-pid=\"54Ur8F8n\">远程面试，和面对面面试，是两种完全不同的环境。</p><p data-pid=\"ehk-VkYX\">如今，越来越多的企业开始拥抱远程面试，很多一面都是通过远程面试实现的。在这种情况下，如何通过远程面试，吸引面试官的注意力，是非常重要的。</p><p data-pid=\"zAsvaunp\">我曾经分享过一篇远程面试需要注意的事项，再次分享给大家：</p><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMjM5MDQ1NjM2Mw%3D%3D%26amp%3Bmid%3D2448241307%26amp%3Bidx%3D1%26amp%3Bsn%3D9c310db92fa1fdbeb91ce6fbd9480603%26amp%3Bchksm%3Db25d1ddf852a94c97a61e8e03d08f4bf68135a45a6adf34518f4be29e70d9023a7f7ffaa0ac1%26token%3D701819397%26lang%3Dzh_CN%23rd\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-4952481c67260b9b6dad65bfe4b47cbd_qhd.jpg\" data-image-width=\"900\" data-image-height=\"382\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">远程面试，赢下 offer？</a><h2><br/><b>4、不要逃避</b></h2><p data-pid=\"1LnBWNkf\">害怕变化，害怕挑战，是我们人类的本性。但能克服这种情绪才尤为可贵。</p><p data-pid=\"5LitBS7s\">很多小伙伴来问：</p><ul><li data-pid=\"uVV2_XLj\">经济形势不好，辞职去读MBA如何？</li><li data-pid=\"kvJZyQTh\">毕业不好找工作，再去考研如何？</li></ul><p data-pid=\"lF0tCrpV\">我的回答是：如果读书本身是在你职业规划中的，没问题；如果你为了躲寒冬去读书，这就很成问题。</p><p data-pid=\"jnL2G-tl\">因为你选择在困难的时候给自己加杠杆了，如今读 MBA 也不便宜——脱产两年，加上学费，可能就是几十万的巨款了。</p><p data-pid=\"Tdm0JF2s\">但如今，越来越少的企业，愿意为MBA/研究生的学历买单，尤其是脱产读书的学历买单。除非你有科研成果。</p><p data-pid=\"KwC-xd_o\">如果说，职业发展，真到了需要通过读书来破局的状态，那自然没问题。但如果是为了逃避困难时局而脱产读书，往往会在再次重返职场时，遭遇更大的阻力。</p><p data-pid=\"FOw7upS8\">当然，你家里有矿，非要给教育事业添砖加瓦，那也算了。最怕就是本身储蓄有限，家庭条件也凑合的小伙伴，为了读书倾其所有。</p><p data-pid=\"6nyDoKPO\">然后一心指望读完书出关后，寒冬已过，offer随我挑，这就很天真了。</p><h2><b>5、继续做好职业规划</b></h2><p data-pid=\"4qNe69RM\">大环境不好，不要跳槽，这话对吗？</p><p data-pid=\"NG0qsnPS\">有点道理。毕竟跳槽有风险。</p><p data-pid=\"SH9_BvF3\">可能刚跳槽，业务线被砍了，反而丢了工作。也可能遇上企业裁人，先从没有过试用期的新人开始。</p><p data-pid=\"QFfZUoh5\">但这句话并不是普世真理。</p><p data-pid=\"rtxmsae5\">如果你在上家公司待了 5-6 年，陷入职业发展的瓶颈。按照你的职业规划，是时候跳槽了，那大环境不应该成为阻挡你的理由。</p><h3><b>1）职业发展，没有安全可言</b></h3><p data-pid=\"1Wh7GNpU\">几十万年前，我们的祖先从树上下来，开始在草原上觅食，可以说是巨大的风险。但也是因为甘于冒风险，让我们的祖先在更开阔的草原上存活了下来，最终演化出了我们。</p><p data-pid=\"s7bwc0mg\">今天，我们知道这个风险，值得冒。</p><p data-pid=\"TxPTLTmj\">很多人把风险作为一个负面词汇，但实际上，有「危」的地方，也有「机」。</p><p data-pid=\"f5kRAhlH\">风险不是敌人。它是我们生活中永恒的一部分。</p><p data-pid=\"jGIY6h8O\">所谓职业发展的每一步，就在冒风险，无论是升职还是跳槽。</p><p data-pid=\"9corWiwT\">没风险的职业发展机会，往往竞争者很多，大家都不愿意冒风险；没风险的职业发展机会，往往不可能是帮你实现职场破局的黄金机会。</p><h2><b>2）学会评估风险</b></h2><p data-pid=\"HEU1iZci\">LinkedIn创始人Reid Hoffman在他的书中《the startup of you》里这样描述过风险的特点：</p><p data-pid=\"LEd0f_YU\">首先，我们习惯于夸大风险，这是深藏在我们基因里的。远古时期，看到狮子就躲起来的智人往往活了下来，而看到狮子觉得问题不大，不一定比我跑得快的智人应该都绝种了。</p><p data-pid=\"fpeIGK65\">做职业方向决策时，风险当然需要考虑，如果这个职业选择会导致你永远事业，伤害身心健康的话，那绝对不能去尝试。</p><p data-pid=\"Mb4Xey6T\">但如果你已经规划好自己的财务支出，即使短期失业也不会影响生活，而跳槽后最糟糕的状况，也不过是休息两个月，降薪找工作。</p><p data-pid=\"RGod39De\">如果这个机会足够好，这个风险我愿意承受。</p><h3><b>3）追求零风险，往往是最大风险</b></h3><p data-pid=\"CaJX6Per\">看过这么一个故事：</p><p data-pid=\"xoVmuPYl\">美国西部有大片森林，森林火灾频频发生，美国林务局之前采取的应对方案是，不能冒任何风险，有火就得第一时间扑灭。</p><p data-pid=\"Jie6y0Ep\">但就算这样，美国还是遭遇了史上最严重的火灾。</p><p data-pid=\"sdkVj4RA\">为什么？</p><p data-pid=\"74FQkLX6\">树木一直在枯死，多年没有山火，所以枯木一直囤着没烧掉，最后在一次巨型火灾时全部派上用处，烈焰滔天，无从施救。</p><p data-pid=\"A98-UQU0\">后来科学家建议，发生火灾时，应该让森林大火适度燃烧，在每次小火灾中不断消耗掉枯木，避免积累过多枯木造成不可收拾的大火。</p><p data-pid=\"u-8lJzdh\">风险也是如此。</p><p data-pid=\"aG7gFsze\"><b>越是想要逃离风险的人，往往越缺乏应对风险的能力</b>。一旦风险真的发生，对他而言就是灾难。</p><p data-pid=\"k22Rpq9x\">我看过一个视频，一群被裁掉的收费站工作人员，围堵领导要说法。其中一个大姐说：</p><blockquote data-pid=\"RDRUuZi4\">我今年36了，我的青春都献给收费站了，我现在啥也不会，也没人喜欢我们，我也学不了什么东西了。</blockquote><p data-pid=\"JeGi-Ef-\">当初以为是一份终身的铁饭碗，而在事后才发现，失去了这份工作后，完全无法立足于社会。</p><p data-pid=\"8fD054px\">如今，哪里有100%毫无风险的工作。</p><p data-pid=\"a0HJGHCZ\">适当的接受一些小火灾（风险），要比一次性被地狱大火烧光，来得合算很多。</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7249b3fbbac00586f0b8ef7798977f6a_b.jpg\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"696\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic3.zhimg.com/v2-7249b3fbbac00586f0b8ef7798977f6a_r.jpg\" data-original-token=\"v2-3e1f1f2551c448cff0aacbe47b7d5657\"/><figcaption>相比逃避风险，有选择地承担风险，提升了你的竞争力</figcaption></figure><p data-pid=\"M2IkYlkY\">首发于公众号：瞎说职场</p><p data-pid=\"_eQaq4Eh\">我的知乎作品：</p><a href=\"https://www.zhihu.com/market/paid_column/1238429757546946560/section/1242223338501976064\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-5ee38da2229cf2649dfd64679dff9b95_qhd.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/market/paid_c</span><span class=\"invisible\">olumn/1238429757546946560/section/1242223338501976064</span><span class=\"ellipsis\"></span></a><a href=\"https://www.zhihu.com/market/paid_column/1238429757546946560/section/1242223338501976064\" class=\"internal\">知乎盐选 | 如何写出一份优秀的个人简历？</a><a href=\"https://www.zhihu.com/market/paid_column/1238429757546946560/section/1242223338501976064\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-5ee38da2229cf2649dfd64679dff9b95_qhd.jpg\" data-image-width=\"750\" data-image-height=\"422\" class=\"internal\">知乎盐选 | 如何写出一份优秀的个人简历？</a><a href=\"https://www.zhihu.com/lives/908708952055877632\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-0d8fae9c0958d4b83478dfc7f9fc383f_l.jpg\" data-image-width=\"1462\" data-image-height=\"1462\" class=\"internal\">掌握这十招面试技巧 成为面试达人</a><a href=\"https://www.zhihu.com/lives/775299149561081856\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-0d8fae9c0958d4b83478dfc7f9fc383f_l.jpg\" data-image-width=\"1462\" data-image-height=\"1462\" class=\"internal\">听说你想进入咨询行业？</a><p></p>",
            "voteup_count": 492,
            "column": {
                "id": "ilovemyjob",
                "type": "column",
                "url_token": "ilovemyjob",
                "title": "瞎说职场",
                "url": "https://zhuanlan.zhihu.com/ilovemyjob",
                "created": 1469602797,
                "updated": 1599132220,
                "description": "",
                "image_url": "https://pic1.zhimg.com/016a0645e7484d24e7ab9a9aec69c48a_720w.jpg?source=d16d100b"
            },
            "comment_count": 34
        },
        "created": "2022-04-04T11:36:45+08:00"
    },
    {
        "content": {
            "id": 492985966,
            "title": "TypeScript 类型技巧 - 使用 Tuple Union 声明函数重载",
            "type": "article",
            "excerpt_title": "《TypeScript 类型技巧》系列精悍短文目标读者是有 TypeScript 基础的同学，每篇总结一个 TypeScript 类型技巧，欢迎相关文章投稿（请参照编排）。问题TypeScript 中为函数添加多个签名后，依然需要添加相应的代码来判断并从不同的签名参数列表中获取对应的参数。过去常见的写法： function refEventEmitter(event?: string): void; function refEventEmitter(event: string, callback: () =&gt; void): void; function refEventEmi…",
            "url": "https://zhuanlan.zhihu.com/p/492985966",
            "image_url": "",
            "created": 1649069156,
            "updated": 1649136363,
            "author": {
                "id": "6592d2c5a3dddd32d607475fe8493b6c",
                "url_token": "vilicvane",
                "name": "老万",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-7499a1e318a605148f4d4e896a2b0296_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-7499a1e318a605148f4d4e896a2b0296.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/6592d2c5a3dddd32d607475fe8493b6c",
                "user_type": "people",
                "headline": "资深业余前端工程师。",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": true,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "https://pic1.zhimg.com/v2-4812630bc27d642f7cafcd6cdeca3d7a.jpg?source=88ceefae",
                        "night_mode_url": "https://picx.zhimg.com/v2-c9686ff064ea3579730756ac6c289978.jpg?source=88ceefae"
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19550901",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19550901",
                                "name": "前端开发",
                                "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "前端开发话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "前端开发话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19550901",
                                    "token": "19550901",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19550901",
                                    "name": "前端开发",
                                    "avatar_path": "v2-08a492521e064cd904204487e8b1d899",
                                    "avatar_url": "https://picx.zhimg.com/v2-08a492521e064cd904204487e8b1d899_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pica.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "comment_permission": "all",
            "content": "<blockquote data-pid=\"9ek1voH_\">《TypeScript 类型技巧》系列<b>精悍短文</b>目标读者是有 TypeScript 基础的同学，每篇总结一个 TypeScript 类型技巧，欢迎相关文章投稿（请参照编排）。</blockquote><h2>问题</h2><p data-pid=\"_grOkJeZ\">TypeScript 中为函数添加多个签名后，依然需要添加相应的代码来判断并从不同的签名参数列表中获取对应的参数。过去常见的写法：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kd\">function</span> <span class=\"nx\">refEventEmitter</span><span class=\"p\">(</span><span class=\"nx\">event?</span>: <span class=\"kt\">string</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">refEventEmitter</span><span class=\"p\">(</span><span class=\"nx\">event</span>: <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">refEventEmitter</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">refEventEmitter</span><span class=\"p\">(</span>\n  <span class=\"nx\">eventOrCallback?</span>: <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">),</span>\n  <span class=\"nx\">callback</span><span class=\"o\">?:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">event</span>: <span class=\"kt\">string</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">eventOrCallback</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;function&#39;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">callback</span> <span class=\"o\">=</span> <span class=\"nx\">eventOrCallback</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">event</span> <span class=\"o\">=</span> <span class=\"nx\">eventOrCallback</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"JoDvmrUC\">这个过程因为将原有参数列表直接按序号拍平，参数之间的类型关联需要人肉确保正确。</p><h2>技巧</h2><p data-pid=\"FTa4yXjr\">这时我们可以通过使用 tuple union 的参数类型，来无脑处理各种函数重载情况：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kd\">function</span> <span class=\"nx\">refEventEmitter</span><span class=\"p\">(</span><span class=\"nx\">event?</span>: <span class=\"kt\">string</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">refEventEmitter</span><span class=\"p\">(</span><span class=\"nx\">event</span>: <span class=\"kt\">string</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">refEventEmitter</span><span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n<span class=\"kd\">function</span> <span class=\"nx\">refEventEmitter</span><span class=\"p\">(</span>\n  <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"o\">:</span>\n    <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"nx\">event?</span>: <span class=\"kt\">string</span><span class=\"p\">]</span>\n    <span class=\"o\">|</span> <span class=\"p\">[</span>\n        <span class=\"nx\">event</span>: <span class=\"kt\">string</span><span class=\"p\">,</span>\n        <span class=\"nx\">callback</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">unknown</span><span class=\"p\">,</span>\n      <span class=\"p\">]</span>\n    <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"nx\">callback</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">unknown</span><span class=\"p\">]</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"p\">[</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">]</span> <span class=\"o\">=</span>\n    <span class=\"nx\">args</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">2</span>\n      <span class=\"o\">?</span> <span class=\"nx\">args</span>\n      : <span class=\"kt\">typeof</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;function&#39;</span>\n      <span class=\"o\">?</span> <span class=\"p\">[</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n      <span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"kc\">undefined</span><span class=\"p\">];</span>\n\n  <span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"E8eViriC\">实际上，此时上方的签名列表也不再需要了：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kd\">function</span> <span class=\"nx\">refEventEmitter</span><span class=\"p\">(</span>\n  <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"o\">:</span>\n    <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"nx\">event?</span>: <span class=\"kt\">string</span><span class=\"p\">]</span>\n    <span class=\"o\">|</span> <span class=\"p\">[</span>\n        <span class=\"nx\">event</span>: <span class=\"kt\">string</span><span class=\"p\">,</span>\n        <span class=\"nx\">callback</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">unknown</span><span class=\"p\">,</span>\n      <span class=\"p\">]</span>\n    <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"nx\">callback</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">unknown</span><span class=\"p\">]</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"p\">[</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">]</span> <span class=\"o\">=</span>\n    <span class=\"nx\">args</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">2</span>\n      <span class=\"o\">?</span> <span class=\"nx\">args</span>\n      : <span class=\"kt\">typeof</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;function&#39;</span>\n      <span class=\"o\">?</span> <span class=\"p\">[</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n      <span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"kc\">undefined</span><span class=\"p\">];</span>\n\n  <span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><blockquote data-pid=\"6B2JGVDb\">这篇其实拖了有点久，在写的时候发现 TypeScript 已经内置了 &#34;Convert overload list to single signature&#34; 的重构选项，可以一键将重载列表变为参数 tuple union。</blockquote><p data-pid=\"Xc6rER3-\">不过到这里其实还存在问题，TypeScript 中 typeof 条件判断不能对整个对象进行收窄，只能收窄被 typeof 到的某个元素、属性。上面的例子中，<b>如果需要的不只是 <code>args[0]</code> 就会出现问题</b>。</p><p data-pid=\"1YEKVIQD\">此时我们可以引入一个工具函数 <code>isTypeOfProperty(object, key, type)</code>：</p><a href=\"https://link.zhihu.com/?target=https%3A//www.npmjs.com/package/is-typeof-property\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-338e4905a2684ca96e08c7780fc68412_qhd.jpg\" data-image-width=\"1200\" data-image-height=\"630\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">is-typeof-property</a><p data-pid=\"tnMo2dXS\">此时实现就变成了：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kd\">function</span> <span class=\"nx\">refEventEmitter</span><span class=\"p\">(</span>\n  <span class=\"p\">...</span><span class=\"nx\">args</span><span class=\"o\">:</span>\n    <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"nx\">event?</span>: <span class=\"kt\">string</span><span class=\"p\">]</span>\n    <span class=\"o\">|</span> <span class=\"p\">[</span>\n        <span class=\"nx\">event</span>: <span class=\"kt\">string</span><span class=\"p\">,</span>\n        <span class=\"nx\">callback</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">unknown</span><span class=\"p\">,</span>\n      <span class=\"p\">]</span>\n    <span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"nx\">callback</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"kt\">unknown</span><span class=\"p\">]</span>\n<span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"p\">[</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">]</span> <span class=\"o\">=</span>\n    <span class=\"nx\">args</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">2</span>\n      <span class=\"o\">?</span> <span class=\"nx\">args</span>\n      : <span class=\"kt\">isTypeOfProperty</span><span class=\"p\">(</span><span class=\"nx\">args</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">&#39;function&#39;</span><span class=\"p\">)</span>\n      <span class=\"o\">?</span> <span class=\"p\">[</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n      <span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"kc\">undefined</span><span class=\"p\">];</span>\n\n  <span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><blockquote data-pid=\"xPcNDDgq\">以上代码取材自 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/vilic/plug2proxy\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">plug2proxy</a>，一个服务器专用的逆向连接代理小工具。</blockquote><p data-pid=\"9YQePSpW\">祝大家举一反三！</p>",
            "voteup_count": 27,
            "column": {
                "id": "typescript",
                "type": "column",
                "url_token": "typescript",
                "title": "JavaScript in TypeScript",
                "url": "https://zhuanlan.zhihu.com/typescript",
                "created": 1459502882,
                "updated": 1599127796,
                "description": "作为 JavaScript 的超集, TypeScript 本身是一门语言. 但对于使用者而言, TypeScript 更像是 JavaScript 的工具. 写好 TypeScript 离不开扎实的 JavaScript 基础, 而有了扎实的 JavaScript 基础, TypeScript 一定会让你感觉如虎添翼!\n\n欢迎投稿相关文章!",
                "image_url": "https://pic1.zhimg.com/9d395fa9f41f5503ba9d69b04e15fd61_720w.jpg?source=d16d100b"
            },
            "comment_count": 4
        },
        "created": "2022-04-04T18:45:56+08:00"
    },
    {
        "content": {
            "id": 2412368678,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/457388962/answer/2412368678",
            "created_time": 1648512946,
            "updated_time": 1648512946,
            "question": {
                "type": "question",
                "id": 457388962,
                "title": "你们都是怎么自学 golang 的？",
                "question_type": "normal",
                "created": 1619843888,
                "updated_time": 1666172135,
                "url": "https://www.zhihu.com/question/457388962",
                "is_deleted": false
            },
            "author": {
                "id": "1a7c1b85c1c44fbe8bc121eb88e23a4f",
                "url_token": "hugo.spring",
                "name": "Hugo",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-63bf00bbc2c815a63d2ab68728f4ca8c_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-63bf00bbc2c815a63d2ab68728f4ca8c.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/1a7c1b85c1c44fbe8bc121eb88e23a4f",
                "user_type": "people",
                "headline": "关注 TypeScript 、C#、Go、Rust",
                "gender": -1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "https://pic3.zhimg.com/v2-4fa161a01a3aa7e3d76aaf2ff93b37a4.png?source=6a64a727",
                        "night_mode_url": "https://pic1.zhimg.com/v2-4fa161a01a3aa7e3d76aaf2ff93b37a4.png?source=6a64a727"
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1494571211
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 230,
            "comment_count": 11,
            "thanks_count": 48,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"pLzV-XSc\">2022 年了，有一些 go 语言的快车道，为啥不去走走呢？</p><p data-pid=\"mnIzYoCG\">1、官网教程来一遍，基本语法有个概念，关键是 go module 和 go workspace。实际上，go 语言的特点决定了，你可以很快明白这些概念的内容。不建议学中文的教材，直接 go 官网搞起。你不需要明白那些词的中文含义</p><p data-pid=\"pSsf0hIv\">2、go 有了范型，也就代表着，1.18 以后会有很多和之前不一样的东西出现。一样的东西，很多人搞了很多年，而且是很多人在搞，这类知识和技术，不用着急。但是范型不一样，他就是个老司机，如果他没有搞过范型，他想习惯那种思维，也不是一件容易的事儿。</p><p data-pid=\"FlToAfXz\">3、找一个偏算法的范型库，订阅 github change。这里冰天雪地推荐：</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/samber/lo\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/samber/lo</span><span class=\"invisible\"></span></a><p data-pid=\"IZt-nn3F\">这个库号称 go 语言的 lodash，是用范型改写的函数式工具库。</p><p data-pid=\"upeWlXIi\">4、用这个库去写一些你想写的东西，或者改写别人的教程。学别人的教程意义是有限的，但是改写别人的教程，是价值很高的。尤其是用范型改，因为你是新手，反而有可能比老手要更好理解范型。用范型实现的代码和用非范型实现的代码会有非常大的区别，我甚至不建议你学太多老的教材。</p><p data-pid=\"ZJ1kijuq\">5、lo 这个库基本包含了所有 go 常见的问题。而且因为 lo 还处于相当原型的阶段，代码非常简单。你甚至会发现参与进去也很简单。</p><p data-pid=\"q4vp1M5Z\">6、用 go workspace ，把 lo 的代码拉取到一个 go workspace 里，业务代码也放在这个 workspace里，然后边写，边研究 lo 的代码。</p><p data-pid=\"fhqwnjOT\">你收获了一个函数式的工具库，绝大部分问题，你发现都能用这种方式粗暴的解决。待你对函数式编程有了更深的理解，你就可以把这些代码改的更优雅。</p><p data-pid=\"an78kon9\">lo 库正在快速迭代，至少现在还很简单，但是谁知道后面会变成啥呢，变成庞然大物只是时间的问题。现在 lo 库的 issue 简直是学习的宝库，有人想加功能，作者不同意，有人支持，有人反对。</p><p data-pid=\"lHHdcI1-\">github 才是你自学 golang 最好的地方，1.18 也是最好开始 go 旅程的版本。有了 workspace 和 范型，好多事情简单了好多。</p>",
            "excerpt": "2022 年了，有一些 go 语言的快车道，为啥不去走走呢？ 1、官网教程来一遍，基本语法有个概念，关键是 go module 和 go workspace。实际上，go 语言的特点决定了，你可以很快明白这些概念的内容。不建议学中文的教材，直接 go 官网搞起。你不需要明白那些词的中文含义 2、go 有了范型，也就代表着，1.18 以后会有很多和之前不一样的东西出现。一样的东西，很多人搞了很多年，而且是很多人在搞，这类知识和技术，不用着急。但是范…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAximpqf+CCCzvb0ekgIlCgk0Njg2OTQxMDESCjI0MTIzNjg2NzgYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2022-03-29T08:15:46+08:00"
    },
    {
        "content": {
            "id": 121580538,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/50556311/answer/121580538",
            "created_time": 1473651473,
            "updated_time": 1610258114,
            "question": {
                "type": "question",
                "id": 50556311,
                "title": "有哪些讲编程范式的好书或好文？",
                "question_type": "normal",
                "created": 1473598415,
                "updated_time": 1473599029,
                "url": "https://www.zhihu.com/question/50556311",
                "is_deleted": false
            },
            "author": {
                "id": "86adac2bde2cc16b5548fdf42deb0410",
                "url_token": "chojyuzim",
                "name": "祖与占",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-002139cfd04cae5d607407120e3bd2ef_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-002139cfd04cae5d607407120e3bd2ef.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/86adac2bde2cc16b5548fdf42deb0410",
                "user_type": "people",
                "headline": "心智被击穿的CRUD程序员",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge": [
                    {
                        "type": "best_answerer",
                        "description": "优秀答主",
                        "topics": [
                            {
                                "id": "19585411",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19585411",
                                "name": "函数式编程",
                                "avatar_url": "https://picx.zhimg.com/44e47e6d7_720w.jpg?source=32738c0c"
                            },
                            {
                                "id": "19552826",
                                "type": "topic",
                                "url": "https://www.zhihu.com/topic/19552826",
                                "name": "编程语言",
                                "avatar_url": "https://pic1.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c"
                            }
                        ]
                    }
                ],
                "badge_v2": {
                    "title": "函数式编程等 2 个话题下的优秀答主",
                    "merged_badges": [
                        {
                            "type": "best",
                            "detail_type": "best",
                            "title": "优秀答主",
                            "description": "函数式编程等 2 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19585411",
                                    "token": "19585411",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19585411",
                                    "name": "函数式编程",
                                    "avatar_path": "44e47e6d7",
                                    "avatar_url": "https://picx.zhimg.com/44e47e6d7_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552826",
                                    "token": "19552826",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552826",
                                    "name": "编程语言",
                                    "avatar_path": "v2-14ae19e0df2e9517722a4832fc682743",
                                    "avatar_url": "https://pic1.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "",
                            "night_icon": ""
                        }
                    ],
                    "detail_badges": [
                        {
                            "type": "best",
                            "detail_type": "best_answerer",
                            "title": "优秀答主",
                            "description": "函数式编程等 2 个话题下的优秀答主",
                            "url": "https://www.zhihu.com/question/48509984",
                            "sources": [
                                {
                                    "id": "19585411",
                                    "token": "19585411",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19585411",
                                    "name": "函数式编程",
                                    "avatar_path": "44e47e6d7",
                                    "avatar_url": "https://picx.zhimg.com/44e47e6d7_720w.jpg?source=32738c0c",
                                    "description": ""
                                },
                                {
                                    "id": "19552826",
                                    "token": "19552826",
                                    "type": "topic",
                                    "url": "https://www.zhihu.com/topic/19552826",
                                    "name": "编程语言",
                                    "avatar_path": "v2-14ae19e0df2e9517722a4832fc682743",
                                    "avatar_url": "https://pic1.zhimg.com/v2-14ae19e0df2e9517722a4832fc682743_720w.jpg?source=32738c0c",
                                    "description": ""
                                }
                            ],
                            "icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                            "night_icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                        }
                    ],
                    "icon": "https://pic1.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c",
                    "night_icon": "https://picx.zhimg.com/v2-4a07bc69c4bb04444721f35b32125c75_l.png?source=32738c0c"
                },
                "actived_at": 1
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 261,
            "comment_count": 9,
            "thanks_count": 48,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"jr3r9IDp\">谢邀</p><p data-pid=\"Yw_Em88J\">没有完整看过冒号课堂的书, 只看过郑辉在博客上连载的前半部分<sup data-text=\"《冒号课堂》目录\" data-url=\"https://blog.zhenghui.org/2009/08/21/contents-of-colonclass/\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>.</p><p data-pid=\"Zc__XgER\">当年看冒号课堂的时候也有点云里雾里, 当时主要觉得写代码的经验不够, 现在觉得那只是间接原因, 直接原因是对编程语言理解不够深, 写代码多了就会碰到语言的各个方面(坑), 还有怎么利用语言抽象的问题(问题域).</p><p data-pid=\"0imobAf_\">现在我不喜欢分范式来讨论问题, 范式只是一个很粗略的分类, 所以问&#34;有哪些讲编程范式的好书或好文&#34;的话我会更推荐些编程语言相关的内容:</p><ul><li data-pid=\"2GaOL2ph\"><a href=\"https://link.zhihu.com/?target=http%3A//courses.cs.washington.edu/courses/cse341/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CSE341: Programming Languages</a> 华盛顿大学的编程语言入门课, Coursera 里的一门课(Grossman), 用 SML, Ruby, Racket 覆盖了不少语言范式(FP, OOP, MP), SML 可以让自己看到有类型推导的泛型(相比于 Java)是种怎样的感受, 还有闭包什么听着挺&#34;高深&#34;的概念也会实现一遍, 附带一些 FP 跟 OOP 的对比(OOP vs. Functional Decomposition), 教授也很有趣</li><li data-pid=\"9fV53tud\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/2709130/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">A Little Java, A Few Patterns</a> 一本挺老的书, Matthias Felleisen 和 Daniel  Friedman 两个大神一起写的(当时 Java 连泛型都没有被吐槽了), 里面提及了几个设计模式, 最重要的是里面对visitor pattern 的讲解(里面有整个 pattern 的演化过程), 可以重温下上面提及的 OOP vs. Functional Decomposition</li></ul><p data-pid=\"MDnGFzOg\">对于普通程序员来说完全理解上面的两个内容对于 <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Multiple_dispatch\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Multiple dispatch</a>, <a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Expression_problem\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Expression problem</a> 的理解到这里也够了(估计能减少不少 hardcode 的 boilerplate 以及写代码的时候会注意拓展性), 至于并发这种算是大坑一时间不好填, AOP 这种我推荐看下 Python 的 Decorator 跟 Haskell 的 Monad 比Java 神叨叨的一套好理解多了, 至于 Logic Programing 我感觉实现下类型推导的价值比学这个的价值大一点. 设计模式的话看下 Peter Norvig 的 <a href=\"https://link.zhihu.com/?target=http%3A//norvig.com/design-patterns/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Design Patterns in Dynamic Languages</a></p><p data-pid=\"KihTn11o\">至于大部头的话可以看下 Michael L. Scott 的 <a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26424018/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Programming Language Pragmatics</a>, 我在<a href=\"https://www.zhihu.com/question/31883401/answer/53753651\" class=\"internal\">程序设计语言理论（PLT）领域里有哪些经典的教材？</a>里提及过.</p><p data-pid=\"gkQTa7WP\">这一下子就学了 SML, Ruby, Racket, Java, Python, Haskell 6种语言(内容也不算 dense, 学生的话大概就是一个学期加一个假期可以搞定), 可以跟某某人战个痛了, 也不用看那些讲 FP 言必称 closure, lambda, map, filter, reduce, 讲 OOP 就说 everything is object, 封装多态的口水文章.</p><p data-pid=\"u6d9XzdL\">以上都是20世纪已经有的姿势.</p><hr/><p data-pid=\"gzraFAdP\"><br/>看到有人推荐CTM, 以前有人推荐这本书是&#34;新世纪的SICP&#34;(对, SICP也是上世纪的书了). 对于一般人来说没有课上的话推这种大部头很痛苦的, CTM是几个教授写出来用来做教材的上课也是挑些章节出来讲所以会有学习的边界, 估计推荐的人自己多数都没有看完. 至于SICP的话有那种sense, 但是没有具体的概念, 看过上面的东西回头来看里面作者的议论会更有意思(前三章)</p><p data-pid=\"kASaiGlb\">评论里面 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/2d8f51b6523e01a8529606f466d98198\" data-hash=\"2d8f51b6523e01a8529606f466d98198\" data-hovercard=\"p$b$2d8f51b6523e01a8529606f466d98198\">@邵成</a> 对Logic Programming的建议:</p><blockquote data-pid=\"t-b_-nrH\">Logic Programming的话写写miniKanren解释器，然后其他的一些Constrained Programming接触一下，比如Datalog（和新出的datafun），以及SMT</blockquote>",
            "excerpt": "谢邀 没有完整看过冒号课堂的书, 只看过郑辉在博客上连载的前半部分 [1].当年看冒号课堂的时候也有点云里雾里, 当时主要觉得写代码的经验不够, 现在觉得那只是间接原因, 直接原因是对编程语言理解不够深, 写代码多了就会碰到语言的各个方面(坑), 还有怎么利用语言抽象的问题(问题域). 现在我不喜欢分范式来讨论问题, 范式只是一个很粗略的分类, 所以问&#34;有哪些讲编程范式的好书或好文&#34;的话我会更推荐些编程语言相关的内容: CSE341…",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEOCAQQAxj61/w5IPqd9wWSAiMKCDQ0MTI0MDIwEgkxMjE1ODA1MzgYBCIKSU1BR0VfVEVYVA==",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2016-09-12T11:37:53+08:00"
    },
    {
        "content": {
            "id": 146097763,
            "title": "深入理解 Vue3 Reactivity API",
            "type": "article",
            "excerpt_title": "一些基础内容，可作为文档参考。不行了，实在写不下去了，到后来每输入一个字符我都要等将近20秒。。。卡的要死。。。 TOC： effect() 和 reactive()shallowReactive()readonly()shallowReadonly()isReactive()isReadonly()isProxy()markRaw()哪些数据是可以被代理的markRaw() 函数用于让数据不可被代理toRaw()ReactiveFlags调度执行 effect - schedulerwatchEffect()异步副作用和 invalidate停止一个副作用(effect)wa…",
            "url": "https://zhuanlan.zhihu.com/p/146097763",
            "image_url": "https://picx.zhimg.com/v2-08d116a3be66c3bfa875927d37a0487f_r.jpg?source=172ae18b",
            "created": 1591354231,
            "updated": 1591459960,
            "author": {
                "id": "ea8dda39ca522d6b0a8d2b335c3381ae",
                "url_token": "hcysunyang",
                "name": "主打的就是一个淦",
                "use_default_avatar": false,
                "avatar_url": "https://pica.zhimg.com/v2-71e45a4da89cd3bb80aa9b96f4cccb01_l.jpg?source=0df5f383",
                "avatar_url_template": "https://pic1.zhimg.com/v2-71e45a4da89cd3bb80aa9b96f4cccb01.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/ea8dda39ca522d6b0a8d2b335c3381ae",
                "user_type": "people",
                "headline": "资深喷子，挑战48小时对线喷",
                "gender": 1,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1439730710
            },
            "comment_permission": "all",
            "content": "<p data-pid=\"DVipOczW\">一些基础内容，可作为文档参考。不行了，实在写不下去了，到后来每输入一个字符我都要等将近20秒。。。。。卡的要死。。。。。。</p><p data-pid=\"2TXK4sVC\">TOC：</p><ul><li data-pid=\"kgwOMDW7\"><b>effect() 和 reactive()</b></li><li data-pid=\"c-9Kvha3\"><b>shallowReactive()</b></li><li data-pid=\"Cl_XDzkA\"><b>readonly()</b></li><li data-pid=\"OJNHFvTG\"><b>shallowReadonly()</b></li><li data-pid=\"1pntQkUt\"><b>isReactive()</b></li><li data-pid=\"86zH_onf\"><b>isReadonly()</b></li><li data-pid=\"k_fioCpQ\"><b>isProxy()</b></li><li data-pid=\"RCLgdXE0\"><b>markRaw()</b></li><ul><li data-pid=\"Lf_ExoOK\"><b>哪些数据是可以被代理的</b></li><li data-pid=\"b6uqS38p\"><b>markRaw() 函数用于让数据不可被代理</b></li></ul><li data-pid=\"OOrsM2If\"><b>toRaw()</b></li><li data-pid=\"MuaYRcJD\"><b>ReactiveFlags</b></li><li data-pid=\"nSSo4gU3\"><b>调度执行 effect - scheduler</b></li><li data-pid=\"7ZKRGxA0\"><b>watchEffect()</b></li><li data-pid=\"zSJuKUtM\"><b>异步副作用和 invalidate</b></li><li data-pid=\"uL8rjWJf\"><b>停止一个副作用(effect)</b></li><li data-pid=\"iHSikCnd\"><b>watchEffect() 与 effect() 的区别</b></li><li data-pid=\"zAmxuPlF\"><b>track() 与 trigger()</b></li><li data-pid=\"oGs2NuJ3\"><b>ref()</b></li><li data-pid=\"F5vQqAct\"><b>isRef()</b></li><li data-pid=\"CWQKfyh_\"><b>toRef()</b></li><li data-pid=\"TyIEDem3\"><b>toRefs()</b></li><li data-pid=\"KloVeP4I\"><b>自动脱 ref</b></li><li data-pid=\"0Ngpde0d\"><b>customRef()</b></li><li data-pid=\"XptzILf0\"><b>shallowRef()</b></li><li data-pid=\"b3DLng8Q\"><b>triggerRef()</b></li><li data-pid=\"yp9PvgD4\"><b>unref()</b></li><li data-pid=\"cile3oOf\"><b>Lazy 的 effect()</b></li><li data-pid=\"yNy50Dgp\"><b>computed()</b></li><li data-pid=\"JF98FmX2\"><b>effect 的其他选项 onTrack 和 onTrigger</b></li></ul><hr/><h2>effect() 和 reactive()</h2><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">effect</span><span class=\"p\">,</span> <span class=\"nx\">reactive</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n<span class=\"c1\">// 使用 reactive() 函数定义响应式数据\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">text</span><span class=\"o\">:</span> <span class=\"s1\">&#39;hello&#39;</span> <span class=\"p\">})</span>\n<span class=\"c1\">// 使用 effect() 函数定义副作用函数\n</span><span class=\"c1\"></span><span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n     <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">innerText</span> <span class=\"o\">=</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">text</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// 一秒后修改响应式数据，这会触发副作用函数重新执行\n</span><span class=\"c1\"></span><span class=\"nx\">setTimeout</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">text</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; world&#39;</span>\n<span class=\"p\">},</span> <span class=\"mi\">1000</span><span class=\"p\">)</span>\n</code></pre></div><ul><li data-pid=\"HIiPzzZT\"><code>reactive()</code> 函数接收一个对象作为参数，并返回一个代理对象。</li><li data-pid=\"ea_G6dOZ\"><code>effect()</code> 函数用于定义副作用，它的参数就是副作用函数，这个函数可能会产生副作用，例如上面代码中的 <b>document.body.innerText = obj.text</b>。在副作用函数内的响应式数据会与副作用函数之间建立联系，即所谓的依赖收集，当响应式数据变化之后，会导致副作用函数重新执行。</li></ul><h2>shallowReactive()</h2><p data-pid=\"HtalFt-R\">定义浅响应数据：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">effect</span><span class=\"p\">,</span> <span class=\"nx\">shallowReactive</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n<span class=\"c1\">// 使用 shallowReactive() 函数定义浅响应式数据\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">shallowReactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span> <span class=\"p\">})</span>\n\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">bar</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>  <span class=\"c1\">// 无效\n</span><span class=\"c1\"></span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"p\">}</span>  <span class=\"c1\">// 有效\n</span></code></pre></div><h2>readonly()</h2><p data-pid=\"EST8veZs\">有些数据，我们要求对用户是只读的，此时可以使用 <code>readonly()</code> 函数，它的用法如下：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">readonly</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n<span class=\"c1\">// 使用 reactive() 函数定义响应式数据\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">readonly</span><span class=\"p\">({</span> <span class=\"nx\">text</span><span class=\"o\">:</span> <span class=\"s1\">&#39;hello&#39;</span> <span class=\"p\">})</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">text</span> <span class=\"o\">+=</span> <span class=\"s1\">&#39; world&#39;</span> <span class=\"c1\">// Set operation on key &#34;text&#34; failed: target is readonly. \n</span></code></pre></div><h2>shallowReadonly()</h2><p data-pid=\"1MdERBqe\">类似于浅响应，shallowReadonly() 定义浅只读数据，这意味着，深层次的对象值是可以被修改的，在 <code>Vue</code> 内部 <code>props</code> 就是使用 <code>shallowReadonly()</code> 函数来定义的，用法如下：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">effect</span><span class=\"p\">,</span> <span class=\"nx\">shallowReadonly</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n<span class=\"c1\">// 使用 shallowReadonly() 函数定义浅只读数据\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">shallowReadonly</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span> <span class=\"p\">})</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"p\">}</span>  <span class=\"c1\">// Warn\n</span><span class=\"c1\"></span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">bar</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"c1\">// OK\n</span></code></pre></div><h2>isReactive()</h2><p data-pid=\"l3Q_EmdW\">判断数据对象是否是 reactive：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">isReactive</span><span class=\"p\">,</span> <span class=\"nx\">reactive</span><span class=\"p\">,</span> <span class=\"nx\">readonly</span><span class=\"p\">,</span> <span class=\"nx\">shallowReactive</span><span class=\"p\">,</span> <span class=\"nx\">shallowReadonly</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">reactiveProxy</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span> <span class=\"p\">})</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReactive</span><span class=\"p\">(</span><span class=\"nx\">reactiveProxy</span><span class=\"p\">))</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReactive</span><span class=\"p\">(</span><span class=\"nx\">reactiveProxy</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">))</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span>\n<span class=\"kr\">const</span> <span class=\"nx\">shallowReactiveProxy</span> <span class=\"o\">=</span> <span class=\"nx\">shallowReactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"p\">{</span> <span class=\"nx\">bar</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span> <span class=\"p\">})</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReactive</span><span class=\"p\">(</span><span class=\"nx\">shallowReactiveProxy</span><span class=\"p\">))</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReactive</span><span class=\"p\">(</span><span class=\"nx\">shallowReactiveProxy</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">))</span> <span class=\"c1\">// false\n</span><span class=\"c1\"></span>\n<span class=\"kr\">const</span> <span class=\"nx\">readonlyProxy</span> <span class=\"o\">=</span> <span class=\"nx\">readonly</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReactive</span><span class=\"p\">(</span><span class=\"nx\">readonlyProxy</span><span class=\"p\">))</span> <span class=\"c1\">// false\n</span><span class=\"c1\"></span>\n<span class=\"kr\">const</span> <span class=\"nx\">shallowReadonlyProxy</span> <span class=\"o\">=</span> <span class=\"nx\">shallowReadonly</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReactive</span><span class=\"p\">(</span><span class=\"nx\">shallowReadonlyProxy</span><span class=\"p\">))</span> <span class=\"c1\">// false\n</span></code></pre></div><h2><b>isReadonly()</b></h2><p data-pid=\"hSEpSOjJ\">用于判断数据是否是 readonly：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">isReadonly</span><span class=\"p\">,</span> <span class=\"nx\">reactive</span><span class=\"p\">,</span> <span class=\"nx\">readonly</span><span class=\"p\">,</span> <span class=\"nx\">shallowReactive</span><span class=\"p\">,</span> <span class=\"nx\">shallowReadonly</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReadonly</span><span class=\"p\">(</span><span class=\"nx\">readonly</span><span class=\"p\">({})))</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReadonly</span><span class=\"p\">(</span><span class=\"nx\">shallowReadonly</span><span class=\"p\">({})))</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReadonly</span><span class=\"p\">(</span><span class=\"nx\">reactive</span><span class=\"p\">({})))</span> <span class=\"c1\">// false\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReadonly</span><span class=\"p\">(</span><span class=\"nx\">shallowReactive</span><span class=\"p\">({})))</span> <span class=\"c1\">// false\n</span></code></pre></div><h2><b>isProxy()</b></h2><p data-pid=\"9w1tLOVT\">用于判断对象是否是代理对象（reactive 或 readonly）：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">isProxy</span><span class=\"p\">,</span> <span class=\"nx\">reactive</span><span class=\"p\">,</span> <span class=\"nx\">readonly</span><span class=\"p\">,</span> <span class=\"nx\">shallowReactive</span><span class=\"p\">,</span> <span class=\"nx\">shallowReadonly</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isProxy</span><span class=\"p\">(</span><span class=\"nx\">readonly</span><span class=\"p\">({})))</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isProxy</span><span class=\"p\">(</span><span class=\"nx\">shallowReadonly</span><span class=\"p\">({})))</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isProxy</span><span class=\"p\">(</span><span class=\"nx\">reactive</span><span class=\"p\">({})))</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isProxy</span><span class=\"p\">(</span><span class=\"nx\">shallowReactive</span><span class=\"p\">({})))</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span>\n<span class=\"kr\">const</span> <span class=\"nx\">shallowReactiveProxy</span> <span class=\"o\">=</span> <span class=\"nx\">shallowReactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"p\">{}</span> <span class=\"p\">})</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isProxy</span><span class=\"p\">(</span><span class=\"nx\">shallowReactiveProxy</span><span class=\"p\">))</span>  <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isProxy</span><span class=\"p\">(</span><span class=\"nx\">shallowReactiveProxy</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">))</span>  <span class=\"c1\">// false\n</span><span class=\"c1\"></span>\n<span class=\"kr\">const</span> <span class=\"nx\">shallowReadonlyProxy</span> <span class=\"o\">=</span> <span class=\"nx\">shallowReadonly</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"p\">{}</span> <span class=\"p\">})</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isProxy</span><span class=\"p\">(</span><span class=\"nx\">shallowReadonlyProxy</span><span class=\"p\">))</span>  <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isProxy</span><span class=\"p\">(</span><span class=\"nx\">shallowReadonlyProxy</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">))</span>  <span class=\"c1\">// false\n</span></code></pre></div><h2>markRaw()</h2><ul><li data-pid=\"HBsQUIil\"><b>哪些数据是可以被代理的：</b></li><ul><li data-pid=\"BJ9MX_hE\">Object 、Array、Map、Set、WeakMap、WeakSet</li><li data-pid=\"n2pGz2XB\">非 <code>Object.isFrozen</code>：</li></ul></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n<span class=\"nb\">Object</span><span class=\"p\">.</span><span class=\"nx\">freeze</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span>\n\n<span class=\"c1\">// Object.isFrozen(obj) ==&gt; true\n</span><span class=\"c1\">// proxyObj === obj\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">proxyObj</span> <span class=\"o\">=</span> <span class=\"nx\">reactiev</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span>\n</code></pre></div><ul><ul><li data-pid=\"QMJeXWay\">非 VNode，Vue3 的 VNode 对象带有 <code>__v_skip: true</code> 标识，用于跳过代理（实际上，只要带有 <code>__v_skip</code> 属性并且值为 <code>true</code> 的对象，都不会是被代理），例如：</li></ul></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// obj 是原始数据对象\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span>\n  <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n  <span class=\"nx\">__v_skip</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">})</span>\n</code></pre></div><ul><li data-pid=\"CCbPIgSk\"><b>markRaw() 函数用于让数据不可被代理：</b></li></ul><p data-pid=\"1OTTEe2a\">实际上 <code>markRaw</code> 函数所做的事情，就是在数据对象上定义 <code>__v_skip</code> 属性，从而跳过代理：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">markRaw</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n<span class=\"nx\">markRaw</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"c1\">// { foo: 1, __v_skip: true }\n</span></code></pre></div><h2>toRaw()</h2><p data-pid=\"aESSFYrR\">接收代理对象作为参数，并获取原始对象：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">toRaw</span><span class=\"p\">,</span> <span class=\"nx\">reactive</span><span class=\"p\">,</span> <span class=\"nx\">readonly</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">obj1</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"kr\">const</span> <span class=\"nx\">reactiveProxy</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">)</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">toRaw</span><span class=\"p\">(</span><span class=\"nx\">reactiveProxy</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"p\">)</span>  <span class=\"c1\">// true\n</span><span class=\"c1\"></span>\n<span class=\"kr\">const</span> <span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"kr\">const</span> <span class=\"nx\">readonlyProxy</span> <span class=\"o\">=</span> <span class=\"nx\">readonly</span><span class=\"p\">(</span><span class=\"nx\">obj2</span><span class=\"p\">)</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">toRaw</span><span class=\"p\">(</span><span class=\"nx\">readonlyProxy</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">obj2</span><span class=\"p\">)</span>  <span class=\"c1\">// true\n</span></code></pre></div><p data-pid=\"hKjplLQy\">如果参数是非代理对象，则直接该值：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">toRaw</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">obj1</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">toRaw</span><span class=\"p\">(</span><span class=\"nx\">obj1</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"nx\">obj1</span><span class=\"p\">)</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">toRaw</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\">// true\n</span><span class=\"c1\"></span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">toRaw</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)</span> <span class=\"c1\">// true\n</span></code></pre></div><h2>ReactiveFlags</h2><p data-pid=\"HEo14inR\"><code>ReactiveFlags</code> 是一个枚举值：</p><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cbd4f89cc20793ae3c91523122ec10e2_b.jpg\" data-rawwidth=\"1326\" data-rawheight=\"474\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1326\" data-original=\"https://pic3.zhimg.com/v2-cbd4f89cc20793ae3c91523122ec10e2_r.jpg\" data-original-token=\"v2-ee93b14bea64fdf88aac433f41388758\"/></figure><p data-pid=\"faWO-MhJ\">它的定义如下：</p><div class=\"highlight\"><pre><code class=\"language-ts\"><span class=\"kr\">export</span> <span class=\"kr\">const</span> <span class=\"kr\">enum</span> <span class=\"nx\">ReactiveFlags</span> <span class=\"p\">{</span>\n  <span class=\"nx\">skip</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;__v_skip&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">isReactive</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;__v_isReactive&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">isReadonly</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;__v_isReadonly&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">raw</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;__v_raw&#39;</span><span class=\"p\">,</span>\n  <span class=\"nx\">reactive</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;__v_reactive&#39;</span><span class=\"p\">,</span>\n  <span class=\"kr\">readonly</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;__v_readonly&#39;</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"o3v1t6BO\">它有什么用呢？举个例子，我们要定义一个不可被代理的对象：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">ReactiveFlags</span><span class=\"p\">,</span> <span class=\"nx\">reactive</span><span class=\"p\">,</span> <span class=\"nx\">isReactive</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"p\">[</span><span class=\"nx\">ReactiveFlags</span><span class=\"p\">.</span><span class=\"nx\">skip</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"kc\">true</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">proxyObj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span>\n\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">isReactive</span><span class=\"p\">(</span><span class=\"nx\">proxyObj</span><span class=\"p\">))</span> <span class=\"c1\">// false\n</span></code></pre></div><p data-pid=\"yv2oj5H-\">实际上 <code>markRaw()</code> 函数就是使用类似的方式实现的。所以我们不必像如上代码那么做，但是在一些高级场景或许会用到这些值。</p><p data-pid=\"q77c60tQ\">下面简单介绍一下 <code>ReactiveFlags</code> 中各个值得作用：</p><ul><li data-pid=\"ssOkmqF7\">代理对象会通过 <code>ReactiveFlags.raw</code> 引用原始对象</li><li data-pid=\"aTCunEhW\">原始对象会通过 <code>ReactiveFlags.reactive</code> 或 <code>ReactiveFlags.readonly</code> 引用代理对象</li><li data-pid=\"k83dOsGE\">代理对象根据它是 <code>reactive</code> 或 <code>readonly</code> 的， 将 <code>ReactiveFlags.isReactive</code> 或 <code>ReactiveFlags.isReadonly</code> 属性值设置为 <code>true</code>。</li></ul><h2>调度执行 effect - scheduler</h2><p data-pid=\"IAhZRnz1\">来看下面的例子：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">count</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"o\">++</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"o\">++</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"o\">++</span>\n</code></pre></div><p data-pid=\"uEaSUuQW\">定义响应式对象 <code>obj</code>，并在 <code>effect</code> 内读取它的值，这样 <code>effect</code> 与数据之间就会建立“联系”，接着我们连续三次修改 <code>obj.count</code> 的值，会发现 <code>console.log</code> 语句共打印四次（包括首次执行）。</p><p data-pid=\"qsrnkVJx\">想像一下，假如我们只需要把数据的最终的状态应用到副作用中，而不是每次变化都重新执行一次副作用函数，这将对性能有所提升。实际上我们可以为 <code>effect</code> 传递第二个参数作为选项，可以指定“调度器”。所谓调度器就是用来指定如何运行副作用函数的：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">count</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"p\">)</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// 指定调度器为 queueJob\n</span><span class=\"c1\"></span>  <span class=\"nx\">scheduler</span><span class=\"o\">:</span> <span class=\"nx\">queueJob</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// 调度器实现\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">queue</span><span class=\"o\">:</span> <span class=\"nb\">Function</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"kd\">let</span> <span class=\"nx\">isFlushing</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n<span class=\"kd\">function</span> <span class=\"nx\">queueJob</span><span class=\"p\">(</span><span class=\"nx\">job</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">includes</span><span class=\"p\">(</span><span class=\"nx\">job</span><span class=\"p\">))</span> <span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">job</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">isFlushing</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">isFlushing</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"nb\">Promise</span><span class=\"p\">.</span><span class=\"nx\">resolve</span><span class=\"p\">().</span><span class=\"nx\">then</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"kd\">let</span> <span class=\"nx\">fn</span>\n      <span class=\"k\">while</span><span class=\"p\">(</span><span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">queue</span><span class=\"p\">.</span><span class=\"nx\">shift</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"nx\">fn</span><span class=\"p\">()</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">})</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"o\">++</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"o\">++</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">count</span><span class=\"o\">++</span>\n</code></pre></div><p data-pid=\"88KzycPF\">我们指定 <code>effect</code> 的调度器为 <code>queueJob</code>，<code>job</code> 实际上就是副作用函数，我们将副作用函数缓冲到 <code>queue</code> 队列中，并在 <code>microtask</code> 中刷新队列，由于队列不会重复缓冲相同的 <code>job</code>，因此最终只会执行一次副作用函数。</p><p data-pid=\"C0rLx2b-\">这实际上就是 <code>watchEffect()</code> 函数的实现思路。</p><h2>watchEffect()</h2><p data-pid=\"ybhToUUJ\"><code>watchEffect()</code> 函数并不在 <code>@vue/reactivity</code> 中提供，而是在 <code>@vue/runtime-core</code> 中提供，与 <code>watch()</code> 函数一起对外暴露。</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n<span class=\"nx\">watchEffect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"o\">++</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"o\">++</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"o\">++</span>\n</code></pre></div><p data-pid=\"4iZNTKql\">这与我们上面刚刚实现的自定义调度器的 <code>effect</code> 的效果实际上是一样的。</p><h2>异步副作用 和 invalidate</h2><p data-pid=\"EKimv0r6\">异步副作用是很常见的，例如请求 API 接口：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">watchEffect</span><span class=\"p\">(</span><span class=\"nx\">async</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div><p data-pid=\"o4EdYsBo\">当 <code>obj.foo</code> 变化后，意味着将会再次发送请求，那么之前的请求怎么办呢？是否应该将之前的请求标记为 <code>invalidate</code>？</p><p data-pid=\"M-XqZBfF\">实际上，副作用函数接收一个函数作为参数：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">watchEffect</span><span class=\"p\">(</span><span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">onInvalidate</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n</code></pre></div><p data-pid=\"2ptx30LM\">我们可以调用它来注册一个回调函数，这个回调函数会在副作用无效时执行：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">watchEffect</span><span class=\"p\">(</span><span class=\"nx\">async</span> <span class=\"p\">(</span><span class=\"nx\">onInvalidate</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">let</span> <span class=\"nx\">validate</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"nx\">onInvalidate</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n        <span class=\"nx\">validate</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"p\">})</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">await</span> <span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">validate</span><span class=\"p\">){</span>\n        <span class=\"cm\">/* 正常使用 data */</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"cm\">/* 说明当前副作用已经无效了，抛弃即可 */</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div><p data-pid=\"uM8SVDOh\">如果不抛弃无效的副作用，那么就会产生<b>竟态问题</b>。实际上，我们很容易就能通过封装 effect() 函数支持注册“无效回调”的功能：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">effect</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">watchEffect</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">onInvalidate</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">cleanup</span><span class=\"o\">:</span> <span class=\"nb\">Function</span>\n  <span class=\"kd\">function</span> <span class=\"nx\">onInvalidate</span><span class=\"p\">(</span><span class=\"nx\">fn</span><span class=\"o\">:</span> <span class=\"nb\">Function</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">cleanup</span> <span class=\"o\">=</span> <span class=\"nx\">fn</span>\n  <span class=\"p\">}</span>\n  <span class=\"c1\">// 封装一下 effect\n</span><span class=\"c1\"></span>  <span class=\"c1\">// 在执行副作用函数之前，先使上一次无作用无效\n</span><span class=\"c1\"></span>  <span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">cleanup</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">cleanup</span><span class=\"p\">()</span>\n    <span class=\"nx\">fn</span><span class=\"p\">(</span><span class=\"nx\">onInvalidate</span><span class=\"p\">)</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"MuphqMTJ\">如果我们再加上调用器，那实际上就非常接近 <code>watchEffect</code> 的真实实现了。</p><p data-pid=\"vcjCvtLG\">什么时候需要 invalidate 掉一个副作用函数呢？</p><ul><li data-pid=\"dfAi_ebY\">在组件中定义的 effect，需要在组件卸载时将其 invalidate</li><li data-pid=\"EP4VuN2l\">在数据变化导致 effect 重新执行时，需要 invalidate 掉上一次的 effect 执行</li><li data-pid=\"SPGG7YT6\">用户手动 stop 一个 effect 时</li></ul><h2>停止一个副作用(effect)</h2><p data-pid=\"S2iaZmyO\"><code>@vue/reactivity</code> 提供了 <code>stop</code> 函数用来停止一个副作用：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">import</span> <span class=\"p\">{</span> <span class=\"nx\">stop</span><span class=\"p\">,</span> <span class=\"nx\">reactive</span><span class=\"p\">,</span> <span class=\"nx\">effect</span> <span class=\"p\">}</span> <span class=\"nx\">from</span> <span class=\"s1\">&#39;@vue/reactivity&#39;</span>\n<span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n<span class=\"c1\">// 停止一个副作用\n</span><span class=\"c1\"></span><span class=\"nx\">stop</span><span class=\"p\">(</span><span class=\"nx\">runner</span><span class=\"p\">)</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"o\">++</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"o\">++</span>\n</code></pre></div><p data-pid=\"06_M6j3J\"><code>effect()</code> 函数会返回一个值，这个值其实就是 <code>effect</code> 本身，我们通常命名它为 <code>runner</code>。</p><p data-pid=\"ytA0dJvr\">把这个 <code>runner</code> 传递给 <code>stop()</code> 函数，就可以停止掉这个 <code>effect</code>。后续对数据的变更不会触发副作用函数的重新执行。</p><h2>watchEffect() 与 effect() 的区别</h2><p data-pid=\"-BD-R4-z\"><code>effect()</code> 函数来自于 <code>@vue/reactivity</code> ，而 <code>watchEffect()</code> 函数来自于 <code>@vue/runtime-core</code>。它们的区别在于：<code>effect()</code> 是非常底层的实现，<code>watchEffect()</code> 是基于 <code>effect()</code> 的封装，<code>watchEffect()</code> 会维护与组件实例以及组件状态(是否被卸载等)的关系，如果一个组件被卸载，那么 <code>watchEffect()</code> 也将被 <code>stop</code>，但 <code>effect()</code> 则不会。举个例子：</p><ul><li data-pid=\"NYNhmw8k\"><b>watchEffect()：</b></li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">Comp</span> <span class=\"o\">=</span> <span class=\"nx\">defineComponent</span><span class=\"p\">({</span>\n  <span class=\"nx\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">watchEffect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"s1\">&#39;&#39;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// 挂载组件\n</span><span class=\"c1\"></span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">h</span><span class=\"p\">(</span><span class=\"nx\">Comp</span><span class=\"p\">),</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#app&#39;</span><span class=\"p\">)</span><span class=\"o\">!</span><span class=\"p\">)</span>\n<span class=\"c1\">// 卸载组件\n</span><span class=\"c1\"></span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#app&#39;</span><span class=\"p\">)</span><span class=\"o\">!</span><span class=\"p\">)</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"o\">++</span> <span class=\"c1\">// 副作用函数不会重新执行\n</span></code></pre></div><p data-pid=\"QpVgUH6-\">我们先挂载了组件，接着又卸载了组件，最后修改 <code>obj.foo</code> 的值，并不会导致 <code>watchEffect</code> 的副作用函数重新执行。</p><ul><li data-pid=\"Qb2vriMW\"><b>effect()</b></li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">Comp</span> <span class=\"o\">=</span> <span class=\"nx\">defineComponent</span><span class=\"p\">({</span>\n  <span class=\"nx\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"s1\">&#39;&#39;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// 渲染组件\n</span><span class=\"c1\"></span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">h</span><span class=\"p\">(</span><span class=\"nx\">Comp</span><span class=\"p\">),</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#app&#39;</span><span class=\"p\">)</span><span class=\"o\">!</span><span class=\"p\">)</span>\n<span class=\"c1\">// 卸载组件\n</span><span class=\"c1\"></span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#app&#39;</span><span class=\"p\">)</span><span class=\"o\">!</span><span class=\"p\">)</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"o\">++</span>\n</code></pre></div><p data-pid=\"QklQeFEk\">但 <code>effect()</code> 的副作用函数仍然会被执行，但我们可以借助 <code>onUnmounted</code> API 解决这个问题：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">Comp</span> <span class=\"o\">=</span> <span class=\"nx\">defineComponent</span><span class=\"p\">({</span>\n  <span class=\"nx\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n    <span class=\"c1\">// 组件卸载时，stop 掉 effect\n</span><span class=\"c1\"></span>    <span class=\"nx\">onUnmounted</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">stop</span><span class=\"p\">(</span><span class=\"nx\">runner</span><span class=\"p\">))</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"s1\">&#39;&#39;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// 渲染组件\n</span><span class=\"c1\"></span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"nx\">h</span><span class=\"p\">(</span><span class=\"nx\">Comp</span><span class=\"p\">),</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#app&#39;</span><span class=\"p\">)</span><span class=\"o\">!</span><span class=\"p\">)</span>\n<span class=\"c1\">// 卸载组件\n</span><span class=\"c1\"></span><span class=\"nx\">render</span><span class=\"p\">(</span><span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;#app&#39;</span><span class=\"p\">)</span><span class=\"o\">!</span><span class=\"p\">)</span>\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"o\">++</span>\n</code></pre></div><p data-pid=\"R7Ss3hq3\">当然，在普通开发中不推荐直接用 <code>effect()</code> 啦，使用 <code>watchEffect()</code> 就好了。</p><h2>track() 与 trigger()</h2><p data-pid=\"b4o6-2UF\"><code>track()</code> 和 <code>trigger()</code> 是依赖收集的核心，<code>track()</code> 用来跟踪收集依赖(收集 <code>effect</code>)，<code>trigger()</code> 用来触发响应(执行 <code>effect</code>)，它们需要配合 <code>effect()</code> 函数使用：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">}</span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>\n  <span class=\"nx\">track</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">TrackOpTypes</span><span class=\"p\">.</span><span class=\"nx\">GET</span><span class=\"p\">,</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">TriggerOpTypes</span><span class=\"p\">.</span><span class=\"nx\">SET</span><span class=\"p\">,</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n</code></pre></div><p data-pid=\"-n-r7ZEq\">如上代码所示，<code>obj</code> 是一个普通的对象，注意它并非是响应式对象。接着使用 <code>effect()</code> 函数定义了一个副作用函数，读取并打印 <code>obj.foo</code> 的值，由于 <code>obj</code> 是一个普通对象，因此它并没有收集依赖的能力，为了收集到依赖，我们需要手动调用 <code>track()</code> 函数，<code>track()</code> 函数接收三个参数：</p><ul><li data-pid=\"I9yuwq62\">target：要跟踪的目标对象，这里就是 <code>obj</code> </li><li data-pid=\"4C9YyFId\">跟踪操作的类型：<code>obj.foo</code> 是读取对象的值，因此是 <code>&#39;get&#39;</code> </li><li data-pid=\"aK_cb66o\">key：要跟踪目标对象的 <code>key</code>，我们读取的是 <code>foo</code>，因此 <code>key</code> 是 <code>foo</code>  </li></ul><p data-pid=\"WvNhuAoF\">这样，我们本质上是手动建立一种数据结构：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"c1\">// 伪代码\n</span><span class=\"c1\"></span><span class=\"nx\">map</span> <span class=\"o\">:</span> <span class=\"p\">{</span>\n    <span class=\"p\">[</span><span class=\"nx\">target</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"p\">{</span>\n        <span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span><span class=\"o\">:</span> <span class=\"p\">[</span><span class=\"nx\">effect1</span><span class=\"p\">,</span> <span class=\"nx\">effect2</span><span class=\"p\">....]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"nmdu_Kwd\">简单的理解，<code>effect</code> 与对象和具体操作的 <code>key</code>，是以这种映射关系建立关联的：</p><p data-pid=\"avw0KJa4\"><code>[target]</code>----&gt;<code>key1</code>----&gt;<code>[effect1, effect2...]</code> </p><p data-pid=\"29RVauxH\"><code>[target]</code>----&gt;<code>key2</code>----&gt;<code>[effect1, effect3...]</code> </p><p data-pid=\"817doXVA\"><code>[target2]</code>----&gt;<code>key1</code>----&gt;<code>[effect5, effect6...]</code> </p><p data-pid=\"jzOKBMHw\">既然 <code>effect</code> 与目标对象 <code>target</code> 已经建立了联系，那么当然就可以想办法通过 <code>target</code> ----&gt; <code>key</code> 进而取到 <code>effect</code> ，然后执行它们，而这就是 <code>trigger()</code> 函数做的事情，所以在调用 <code>trigger</code> 函数时我们要指定目标对象和相应的<code>key</code>值：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">TriggerOpTypes</span><span class=\"p\">.</span><span class=\"nx\">SET</span><span class=\"p\">,</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span>\n</code></pre></div><p data-pid=\"zpW1i0bD\">这大概就是依赖收集的原理，但是这个过程是可以自动完成的，而不需要开发者手动调用 <code>track()</code> 和 <code>trigger()</code> 函数，想要自定完成依赖收集，那么就需要拦截诸如：设置、读取等对值得操作方法才行。至于实现方式，无论是 <code>Object.defineProperty</code> 还是 <code>Proxy</code> 那就是具体的技术形式了。</p><h2>ref()</h2><p data-pid=\"2YPCaFKr\"><code>reactive()</code> 函数可以代理一个对象，但不能代理基本类型值，例如字符串、数字、<code>boolean</code> 等，这是 <code>js</code> 语言的限制，因此我们需要使用 <code>ref()</code> 函数来间接对基本类型值进行处理：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refVal</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">refVal</span><span class=\"p\">.</span><span class=\"nx\">value</span>  <span class=\"c1\">// 0\n</span></code></pre></div><p data-pid=\"t9rM8OoH\"><code>ref</code> 是响应式的：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refVal</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n   <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">refVal</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">refVal</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>  <span class=\"c1\">// 触发响应\n</span></code></pre></div><p data-pid=\"mWYRV9Rm\">已经了解了 <code>track()</code> 和 <code>trigger()</code> 函数的你，仔细思考一下，实现 <code>ref()</code> 函数是不是非常简单呢：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">myRef</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"o\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">let</span> <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">val</span>\n\n  <span class=\"kr\">const</span> <span class=\"nx\">r</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">isRef</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"c1\">// 随便加个标识以示区分\n</span><span class=\"c1\"></span>    <span class=\"nx\">get</span> <span class=\"nx\">value</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// 收集依赖\n</span><span class=\"c1\"></span>      <span class=\"nx\">track</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">,</span> <span class=\"nx\">TrackOpTypes</span><span class=\"p\">.</span><span class=\"nx\">GET</span><span class=\"p\">,</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">)</span>\n      <span class=\"k\">return</span> <span class=\"nx\">value</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">set</span> <span class=\"nx\">value</span><span class=\"p\">(</span><span class=\"nx\">newVal</span><span class=\"o\">:</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">newVal</span> <span class=\"o\">!==</span> <span class=\"nx\">value</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"nx\">newVal</span>\n        <span class=\"c1\">// 触发响应\n</span><span class=\"c1\"></span>        <span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">,</span> <span class=\"nx\">TriggerOpTypes</span><span class=\"p\">.</span><span class=\"nx\">SET</span><span class=\"p\">,</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">)</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"nx\">r</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"FUaIZUe2\">现在去试试我们的 <code>myRef()</code> 函数吧：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refVal</span> <span class=\"o\">=</span> <span class=\"nx\">myRef</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">refVal</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">refVal</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</code></pre></div><p data-pid=\"DZJ1FISZ\">一切 OK。</p><h2>isRef()</h2><p data-pid=\"FRKTetqE\">我们在实现 <code>myRef()</code> 函数时，可以看到为 <code>ref</code> 对象添加了一个标识 <b><code>isRef: true</code></b>。因此我们可以封装一个函数 <code>isRef()</code> 函数来判断一个值是不是 <code>ref</code>：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">isRef</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nx\">val</span><span class=\"p\">.</span><span class=\"nx\">isRef</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"NpD7kdwC\">实际上在 <code>Vue</code>3 中使用的标识是 <code>__v_isRef</code>，这无关紧要嘛。</p><h2>toRef()</h2><p data-pid=\"gzLtMPsz\">丢失响应，式 reactivity api 的一个问题：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span> <span class=\"c1\">// obj 是响应式数据\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"p\">}</span>\n\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj2</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span> <span class=\"c1\">// 这里读取 obj2.foo\n</span><span class=\"c1\"></span><span class=\"p\">})</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>  <span class=\"c1\">// 设置 obj.foo 显然无效\n</span></code></pre></div><p data-pid=\"WNnX0dFp\">为了解决这个问题，我们可以使用 <code>toRef()</code> 函数：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n<span class=\"kr\">const</span> <span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"nx\">toRef</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">)</span> <span class=\"p\">}</span> <span class=\"c1\">// 修改了这里\n</span><span class=\"c1\"></span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj2</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span>  <span class=\"c1\">// 由于 obj2.foo 现在是一个 ref，因此要访问 .value\n</span><span class=\"c1\"></span><span class=\"p\">})</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"c1\">// 有效\n</span></code></pre></div><p data-pid=\"zk1FMRAt\"><code>toRef()</code> 函数用来把一个响应式对象的的某个 <code>key</code> 值转换成 <code>ref</code>，它的实现本身很简单：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">toRef</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"nx\">isRef</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n        <span class=\"nx\">get</span> <span class=\"nx\">value</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n        <span class=\"nx\">set</span> <span class=\"nx\">value</span><span class=\"p\">(</span><span class=\"nx\">newVal</span><span class=\"p\">){</span>\n            <span class=\"nx\">target</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">newVal</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"byJC_ZDW\">可以看到 <code>toRef()</code> 函数比 <code>ref()</code> 函数要简单的多，这是因为 <code>target</code> 本身就是响应的，因此无需手动 <code>track()</code> 和 <code>trigger()</code>。</p><h2>toRefs()</h2><p data-pid=\"-1Oheebo\"><code>toRef()</code> 的一个问题是定义起来极其麻烦，一次只能转换一个 <code>key</code>，因此我们可以封装一个函数，直接把一个响应式对象的所有<code>key</code>都转成 <code>ref</code>，这就是 <code>toRefs()</code></p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kd\">function</span> <span class=\"nx\">toRefs</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">){</span>\n    <span class=\"kr\">const</span> <span class=\"nx\">ret</span><span class=\"o\">:</span> <span class=\"nx\">any</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kr\">const</span> <span class=\"nx\">key</span> <span class=\"k\">in</span> <span class=\"nx\">target</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">ret</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">toRef</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">ret</span>\n<span class=\"p\">}</span> \n</code></pre></div><p data-pid=\"9sqgckRy\">这样我们就可以修改前例的代码为：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n<span class=\"c1\">// const obj2 = { foo: toRef(obj, &#39;foo&#39;) }\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">toRefs</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">}</span> <span class=\"c1\">// 代替上面注释这句代码\n</span><span class=\"c1\"></span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj2</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span>  <span class=\"c1\">// 由于 obj2.foo 现在是一个 ref，因此要访问 .value\n</span><span class=\"c1\"></span><span class=\"p\">})</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"c1\">// 有效\n</span></code></pre></div><h2>自动脱 ref</h2><p data-pid=\"G-F-9cAH\">但是我们发现，问题虽然解决了，但是带来了新的问题，即我们需要通过 <code>.value</code> 访问值才行，这就带来了另外一个问题：我们怎么知道一个值是不是 <code>ref</code>，需不需要通过 <code>.value</code> 来访问呢？因为上面的例子可能会给读者带来疑惑，我们为什么把问题弄得这么复杂？为什么弄了 <code>obj</code> 和 <code>obj2</code> 这两个变量，只用 <code>obj</code> 不就没问题了嘛？这是因为在 <code>Vue</code> 中，我们要暴露数据到渲染环境，怎么暴露呢？</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">Comp</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nx\">setup</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">obj</span> <span class=\"p\">}</span>\n     <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"FbG1xOME\">这就会导致丢失响应，因此我们需要 <code>toRef()</code> 还是和 <code>toRefs()</code> 函数。然而这带来了新的问题， 我们在 <code>setup</code> 中暴露出去的数据，是要在渲染环境中使用的：</p><div class=\"highlight\"><pre><code class=\"language-html\"><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>{{ obj.foo }}<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span></code></pre></div><p data-pid=\"Fw_SmXAi\">这里我们应该用 <code>obj.foo</code> 还是 <code>obj.foo.value</code> 呢？这时就需要你明确知道在 <code>setup</code> 中暴露出去的值，哪些是 <code>ref</code> 哪些不是 <code>ref</code>。因此为了减轻心智负担，干脆，在渲染环境都不需要 <code>.value</code> 去取值，即使是 <code>ref</code> 也不需要，这就极大的减少的心智负担，这就是自动脱 `Ref` 功能。而实现自动<code>脱 ref</code>也很简单，回看一下刚才的代码：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n<span class=\"c1\">// const obj2 = { foo: toRef(obj, &#39;foo&#39;) }\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">...</span><span class=\"nx\">toRefs</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">}</span> <span class=\"c1\">// 代替上面注释这句代码\n</span><span class=\"c1\"></span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj2</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">)</span>  <span class=\"c1\">// 由于 obj2.foo 现在是一个 ref，因此要访问 .value\n</span><span class=\"c1\"></span><span class=\"p\">})</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"c1\">// 有效\n</span></code></pre></div><p data-pid=\"UsExvH6r\">为了自动摆脱 <code>ref</code>，我们可以：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n<span class=\"c1\">// const obj2 = { foo: toRef(obj, &#39;foo&#39;) }\n</span><span class=\"c1\"></span><span class=\"kr\">const</span> <span class=\"nx\">obj2</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"p\">...</span><span class=\"nx\">toRefs</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">)</span> <span class=\"p\">})</span>  <span class=\"c1\">// 让 obj2 也是 reactive\n</span><span class=\"c1\"></span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">obj2</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>  <span class=\"c1\">// 即使 obj2.foo 是 ref，我们也不需要 .value 来取值\n</span><span class=\"c1\"></span><span class=\"p\">})</span>\n\n<span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"c1\">// 有效\n</span></code></pre></div><p data-pid=\"Kt21uzgG\">我们只需要让 <code>obj2</code> 也是 <code>reactive</code> 的即可，这样，即使 <code>obj2.foo</code> 是 <code>ref</code>，我们也不需要通过 <code>.value</code> 取值，其实现也很简单，当我们在对象上读取属性时，如果发现其值是 <code>ref</code>，那么直接返回 <code>.value</code> 就可以了：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">receiver</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span>    <span class=\"kr\">const</span> <span class=\"nx\">res</span> <span class=\"o\">=</span> <span class=\"nx\">Reflect</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">receiver</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">isRef</span><span class=\"p\">(</span><span class=\"nx\">res</span><span class=\"p\">))</span> <span class=\"k\">return</span> <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nx\">value</span>\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"eBI8mrTD\">但对于由 <code>ref</code> 组成的数组，在渲染环境仍然需要 <code>.value</code> 访问。</p><h2>customRef()</h2><p data-pid=\"pKYy5nH0\"><code>customRef()</code> 实际上就是手动 <code>track</code> 和 <code>trigger</code> 的典型例子，参考上文中的 <code>“track() 和 trigger()”</code>一节。它的源码也极其简单，大家可以自行查看。</p><h2>shallowRef()</h2><p data-pid=\"LHH8YpY-\">通常我们使用 <code>ref()</code> 函数时，目的是为了引用原始类型值，例如：<code>ref(false)</code>。但我们仍然可以引用非基本类型值，例如一个对象：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refObj</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n</code></pre></div><p data-pid=\"4U-M33W5\">此时，<code>refObj.value</code> 是一个对象，这个对象依然是响应的，例如如下代码会触发响应：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">refObj</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n</code></pre></div><p data-pid=\"4H96EAoU\"><code>shallowRef()</code> 顾名思义，它只代理 <code>ref</code> 对象本身，也就是说只有 <code>.value</code> 是被代理的，而 <code>.value</code> 所引用的对象并没有被代理：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refObj</span> <span class=\"o\">=</span> <span class=\"nx\">shallowRef</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n\n<span class=\"nx\">refObj</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"c1\">// 无效\n</span></code></pre></div><h2>triggerRef()</h2><p data-pid=\"1zuYfA0K\">我们上面讲过了 <code>ref()</code> 函数的实现，在 <code>trigger</code> 一个 <code>ref</code> 的时候，它的操作类型都是 <code>SET</code>，并且操作的 <code>key</code> 都是 <code>value</code>：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">r</span><span class=\"p\">,</span> <span class=\"nx\">TriggerOpTypes</span><span class=\"p\">.</span><span class=\"nx\">SET</span><span class=\"p\">,</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">)</span>\n</code></pre></div><p data-pid=\"3teZxCuY\">这里唯一不同的就是 <code>r</code>，也就是 <code>ref</code> 本身。换句话说，如果一个 <code>ref</code> 被 <code>track</code> 了，那么我们可以手动调用 <code>trigger</code> 函数任意去触发响应：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refVal</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">refVal</span><span class=\"p\">.</span><span class=\"nx\">value</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\">// 任意次的 trigger\n</span><span class=\"c1\"></span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">refVal</span><span class=\"p\">,</span> <span class=\"nx\">TriggerOpTypes</span><span class=\"p\">.</span><span class=\"nx\">SET</span><span class=\"p\">,</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">)</span>\n<span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">refVal</span><span class=\"p\">,</span> <span class=\"nx\">TriggerOpTypes</span><span class=\"p\">.</span><span class=\"nx\">SET</span><span class=\"p\">,</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">)</span>\n<span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">refVal</span><span class=\"p\">,</span> <span class=\"nx\">TriggerOpTypes</span><span class=\"p\">.</span><span class=\"nx\">SET</span><span class=\"p\">,</span> <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">)</span>\n</code></pre></div><p data-pid=\"H8snhLVy\">而 <code>triggerRef()</code> 函数实际上就是封装了这一操作：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">triggerRef</span><span class=\"p\">(</span><span class=\"nx\">ref</span><span class=\"o\">:</span> <span class=\"nx\">Ref</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">trigger</span><span class=\"p\">(</span>\n    <span class=\"nx\">ref</span><span class=\"p\">,</span>\n    <span class=\"nx\">TriggerOpTypes</span><span class=\"p\">.</span><span class=\"nx\">SET</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;value&#39;</span><span class=\"p\">,</span>\n    <span class=\"nx\">__DEV__</span> <span class=\"o\">?</span> <span class=\"p\">{</span> <span class=\"nx\">newValue</span><span class=\"o\">:</span> <span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"p\">}</span> <span class=\"o\">:</span> <span class=\"k\">void</span> <span class=\"mi\">0</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"0h0ZOAr0\">那它有什么用呢？上面我们讲过了，<code>shallowRef()</code> 函数不会代理 <code>.value</code> 所引用的对象，因此我们修改对象值的时候不会触发响应，这时我们可以通过 <code>triggerRef()</code> 函数强制触发响应：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refVal</span> <span class=\"o\">=</span> <span class=\"nx\">shallowRef</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"p\">})</span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">refVal</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">refVal</span><span class=\"p\">.</span><span class=\"nx\">value</span><span class=\"p\">.</span><span class=\"nx\">foo</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"c1\">// 无效\n</span><span class=\"c1\"></span><span class=\"nx\">triggerRef</span><span class=\"p\">(</span><span class=\"nx\">refVal</span><span class=\"p\">)</span>  <span class=\"c1\">// 强制 trigger\n</span></code></pre></div><h2>unref()</h2><p data-pid=\"lFLQsjXf\"><code>unref()</code> 函数很简单：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">export</span> <span class=\"kd\">function</span> <span class=\"nx\">unref</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nx\">ref</span><span class=\"o\">:</span> <span class=\"nx\">T</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"nx\">T</span> <span class=\"kr\">extends</span> <span class=\"nx\">Ref</span><span class=\"o\">&lt;</span><span class=\"nx\">infer</span> <span class=\"nx\">V</span><span class=\"o\">&gt;</span> <span class=\"o\">?</span> <span class=\"nx\">V</span> <span class=\"o\">:</span> <span class=\"nx\">T</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">isRef</span><span class=\"p\">(</span><span class=\"nx\">ref</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"p\">(</span><span class=\"nx\">ref</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"nx\">as</span> <span class=\"nx\">any</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"nx\">ref</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"F6B4VjuG\">给它一个值，如果这个值是 <code>ref</code> 就返回 <code>.value</code>，否则原样返回。</p><h2>Lazy 的 effect()</h2><p data-pid=\"afsZ7yN8\"><code>effect()</code> 用来运行副作用函数，默认是立即执行的，但它可以是 <code>lazy</code> 的，这时我们可以手动执行它： </p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"nx\">effect</span><span class=\"p\">(</span>\n    <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;xxx&#39;</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n    <span class=\"p\">{</span> <span class=\"nx\">lazy</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">}</span>  <span class=\"c1\">// 指定 lazy\n</span><span class=\"c1\"></span><span class=\"p\">)</span>\n\n<span class=\"nx\">runner</span><span class=\"p\">()</span> <span class=\"c1\">// 手动执行副作用函数\n</span></code></pre></div><p data-pid=\"uQM-Up1i\">它有什么用呢？实际上 <code>computed()</code> 就是一个 <code>lazy</code> 的 <code>effect</code>。</p><h2>computed()</h2><p data-pid=\"q64tRN_X\">我们先来看看 <code>computed()</code> 怎么用：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refCount</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"kr\">const</span> <span class=\"nx\">refDoubleCount</span> <span class=\"o\">=</span> <span class=\"nx\">computed</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">refCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div><p data-pid=\"CHzPHGtr\">当我们通过 <code>refDoubleCount.value</code> 取值时，如果 <code>refCount</code> 的值没变，那么表达式 <code>refCount.value * 2</code> 只会计算一次。这也是 <code>computed()</code> 优于 <code>methods</code> 的地方。</p><p data-pid=\"_FT6T0cK\">上面说了 <code>computed</code> 就是一个 <code>lazy</code> 的 <code>effect</code>，接下来我们证明这个说法。</p><p data-pid=\"jQmP3wlY\">我们可以把问题简化一下，首先我们有一 <code>refCount</code> 和 <code>doubleCount</code>，其中 <code>doubleCount</code> 是根据 <code>refCount.value * 2</code> 计算得来的，如下：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refCount</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kd\">let</span> <span class=\"nx\">doubleCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getDoubleCount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">doubleCount</span> <span class=\"o\">=</span> <span class=\"nx\">refCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"nx\">doubleCount</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"lKvjquUI\">这样，我们就可以通过执行 <code>getDoubleCount()</code> 函数来取值，这段代码实际上我们可以改写一下，例如：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refCount</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kd\">let</span> <span class=\"nx\">doubleCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"kr\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">doubleCount</span> <span class=\"o\">=</span> <span class=\"nx\">refCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">lazy</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getDoubleCount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">runner</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"nx\">doubleCount</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"jY6GR0rY\">我们定义了一个 <code>lazy</code> 的 <code>effect</code>，然后在 <code>getDoubleCount()</code> 函数中手动执行 <code>runner()</code> 来计算值。不过无论怎么改，都存在一个问题：即使 <code>refCount</code> 的值没变，表达式 <code>refCount.value * 2</code> 都会执行计算。</p><p data-pid=\"ETYRGEzD\">实际上，我们可以通过一个标志变量 <code>dirty</code> 来避免这个问题：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refCount</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kd\">let</span> <span class=\"nx\">doubleCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">let</span> <span class=\"nx\">dirty</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"c1\">// 定义标志变量，默认为 true\n</span><span class=\"c1\"></span>\n<span class=\"kr\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">doubleCount</span> <span class=\"o\">=</span> <span class=\"nx\">refCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">lazy</span><span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">getDoubleCount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dirty</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">runner</span><span class=\"p\">()</span>  <span class=\"c1\">// 只有 dirty 的时候才执行计算\n</span><span class=\"c1\"></span>        <span class=\"nx\">dirty</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"c1\">// 设置为 false\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">doubleCount</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"nWLdOULh\">如上代码所示，我们增加了 <code>dirty</code> 变量，默认为 <code>true</code>，代表脏值，需要计算，所以只有 <code>dirty</code> 为 <code>true</code> 的时候才执行 <code>runner()</code>，紧接着将 <code>dirty</code> 设置为 <code>false</code>，这样就避免了冗余的计算量。</p><p data-pid=\"oC4SyZ0I\">但问题是，现在我们修改 <code>refCount</code> 的值，并在此执行 <code>getDoubleCount()</code> 函数，得到的仍然是上一次的值，这是不正确的，因为 <code>refCount</code> 已经变化了，这是因为 <code>dirty</code> 一直是 <code>false</code> 的缘故，因此问题的解决办法也很简单，当 <code>refCount</code> 值变化之后，我们将 <code>dirty</code> 再次设置为 <code>true</code> 就可以了：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refCount</span> <span class=\"o\">=</span> <span class=\"nx\">ref</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"kd\">let</span> <span class=\"nx\">doubleCount</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"kd\">let</span> <span class=\"nx\">dirty</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"c1\">// 定义标志变量，默认为 true\n</span><span class=\"c1\"></span>\n<span class=\"kr\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">doubleCount</span> <span class=\"o\">=</span> <span class=\"nx\">refCount</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"nx\">lazy</span><span class=\"o\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nx\">scheduler</span><span class=\"o\">:</span> <span class=\"p\">()</span> <span class=\"p\">=&gt;</span> <span class=\"nx\">dirty</span> <span class=\"o\">=</span> <span class=\"kc\">true</span> <span class=\"p\">})</span>  <span class=\"c1\">// 将 dirty 设置为 true\n</span><span class=\"c1\"></span>\n<span class=\"kd\">function</span> <span class=\"nx\">getDoubleCount</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dirty</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">runner</span><span class=\"p\">()</span>  <span class=\"c1\">// 只有 dirty 的时候才执行计算\n</span><span class=\"c1\"></span>        <span class=\"nx\">dirty</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"c1\">// 设置为 false\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">doubleCount</span>\n<span class=\"p\">}</span>\n</code></pre></div><p data-pid=\"NKEu7EqU\">如上代码所示，当 <code>refCount</code> 变化之后，我们知道副作用函数会进行调度执行，因此我们提供调度器，在调度器中仅仅将 <code>dirty</code> 设置为 <code>true</code> 即可。</p><p data-pid=\"vQRUj2d2\">那其实我们可以把 <code>getDoubleCount</code> 函数封装为一个 <code>getter</code>：</p><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">refDoubleCount</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">get</span> <span class=\"nx\">value</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span><span class=\"p\">(</span><span class=\"nx\">dirty</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">runner</span><span class=\"p\">()</span>  <span class=\"c1\">// 只有 dirty 的时候才执行计算\n</span><span class=\"c1\"></span>        <span class=\"nx\">dirty</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"c1\">// 设置为 false\n</span><span class=\"c1\"></span>    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"nx\">doubleCount</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">refDoubleCount</span><span class=\"p\">.</span><span class=\"nx\">value</span>\n</code></pre></div><p data-pid=\"wlPP7Lna\">这其实机上计算属性的思路了。</p><h2>effect() 的其他选项</h2><ul><li data-pid=\"rowHfV3y\"><b>onTrack()</b></li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">obj</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">({</span> <span class=\"nx\">foo</span><span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"p\">})</span>\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n  <span class=\"nx\">onTrack</span><span class=\"p\">({</span> <span class=\"nx\">effect</span><span class=\"p\">,</span> <span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">key</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n</code></pre></div><p data-pid=\"Yp2tIT9-\">参数介绍：</p><ul><li data-pid=\"jXjSLjo_\">effect：track 谁？</li><li data-pid=\"zO_jN0nx\">target：谁 track 的？</li><li data-pid=\"FQBS3qID\">type：因为啥 track？</li><li data-pid=\"jh6NpAze\">key：哪个 key track 的？</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li data-pid=\"carZJrzA\"><b>onTrigger()</b></li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">map</span> <span class=\"o\">=</span> <span class=\"nx\">reactive</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Map</span><span class=\"p\">())</span>\n<span class=\"nx\">map</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">let</span> <span class=\"nx\">item</span> <span class=\"k\">of</span> <span class=\"nx\">map</span><span class=\"p\">){}</span>\n<span class=\"p\">},</span> <span class=\"p\">{</span>\n  <span class=\"nx\">onTrigger</span><span class=\"p\">({</span> <span class=\"nx\">effect</span><span class=\"p\">,</span> <span class=\"nx\">target</span><span class=\"p\">,</span> <span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">newValue</span><span class=\"p\">,</span> <span class=\"nx\">oldValue</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n     <span class=\"c1\">// ...\n</span><span class=\"c1\"></span>  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">map</span><span class=\"p\">.</span><span class=\"nx\">set</span><span class=\"p\">(</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</code></pre></div><ul><li data-pid=\"CtkO4-Jn\">effect：trigger 谁？</li><li data-pid=\"KTAl9hZS\">target：谁 trigger 的？</li><li data-pid=\"8K_droY1\">type：因为啥 trigger</li><li data-pid=\"FyfaUea8\">key：哪个 key trigger 的？可能是 undefined，例如：map.clear() 的时候。</li><li data-pid=\"Y9Z4HWem\">newValue 和 oldValue：新旧值</li></ul><p class=\"ztext-empty-paragraph\"><br/></p><ul><li data-pid=\"iBf7rWcO\"><b>onStop()</b></li></ul><div class=\"highlight\"><pre><code class=\"language-js\"><span class=\"kr\">const</span> <span class=\"nx\">runner</span> <span class=\"o\">=</span> <span class=\"nx\">effect</span><span class=\"p\">(()</span> <span class=\"p\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// ...\n</span><span class=\"c1\"></span><span class=\"p\">},</span> <span class=\"p\">{</span>\n  <span class=\"nx\">onStop</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;stop...&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">})</span>\n\n<span class=\"nx\">stop</span><span class=\"p\">(</span><span class=\"nx\">runner</span><span class=\"p\">)</span>\n</code></pre></div>",
            "voteup_count": 647,
            "column": {
                "id": "yanhaijing",
                "type": "column",
                "url_token": "yanhaijing",
                "title": "颜海镜的博客",
                "url": "https://zhuanlan.zhihu.com/yanhaijing",
                "created": 1451539842,
                "updated": 1599126495,
                "description": "专注Web前端，移动端，Node等原创知识分享",
                "image_url": "https://pic1.zhimg.com/6e7b8948bc90e63b29cc0ac01d323aa0_720w.jpg?source=d16d100b"
            },
            "comment_count": 39
        },
        "created": "2020-06-05T18:50:31+08:00"
    },
    {
        "content": {
            "id": 987676374,
            "type": "answer",
            "answer_type": "NORMAL",
            "url": "https://www.zhihu.com/question/368084766/answer/987676374",
            "created_time": 1580151127,
            "updated_time": 1580151127,
            "question": {
                "type": "question",
                "id": 368084766,
                "title": "女朋友刚刚接触编程，让她学Haskell是否合适？",
                "question_type": "normal",
                "created": 1580095715,
                "updated_time": 1581063207,
                "url": "https://www.zhihu.com/question/368084766",
                "is_deleted": false
            },
            "author": {
                "id": "2852689b889d934d1253784dfa997f6f",
                "url_token": "Rn8W0514",
                "name": "李欣宜",
                "use_default_avatar": false,
                "avatar_url": "https://picx.zhimg.com/v2-598c8c3f3d931d3b6bcc8eb531beb264_l.jpg?source=0df5f383",
                "avatar_url_template": "https://picx.zhimg.com/v2-598c8c3f3d931d3b6bcc8eb531beb264.jpg?source=0df5f383",
                "is_org": false,
                "type": "people",
                "url": "https://www.zhihu.com/people/2852689b889d934d1253784dfa997f6f",
                "user_type": "people",
                "headline": "天地悠久，共奏乃音",
                "gender": 0,
                "is_advertiser": false,
                "vip_info": {
                    "is_vip": false,
                    "rename_days": "",
                    "widget": {
                        "url": "",
                        "night_mode_url": ""
                    },
                    "vip_icon": {
                        "url": "",
                        "night_mode_url": ""
                    }
                },
                "badge_v2": {
                    "title": "",
                    "merged_badges": [],
                    "detail_badges": [],
                    "icon": "",
                    "night_icon": ""
                },
                "actived_at": 1522389321
            },
            "thumbnail": "",
            "is_collapsed": false,
            "is_copyable": true,
            "is_visible": true,
            "is_normal": true,
            "voteup_count": 64,
            "comment_count": 19,
            "thanks_count": 4,
            "is_mine": false,
            "comment_permission": "all",
            "reshipment_settings": "allowed",
            "content": "<p data-pid=\"EQ9mYF2W\">为啥大家都反对，说真的我认为挺可行的。虽然我不认为hs是最好的编程入门选择，但也算相对非常有优势的了。一来fp其实更接近人类直觉的思维模式，二来hs的很多标记还是相对继承数学notations system的，可以直接用unicode来表示很多关系（比如compose/arrow）。初学唯一比较坑的地方也就是默认的lazy eval了。</p><p data-pid=\"KCm9Y7bw\">另外还有相对来说网上和市面上和hs相关的文本资料质量都还不错。我个人最近晚上睡前一直在看的就是这本</p><a href=\"https://link.zhihu.com/?target=https%3A//github.com/hmemcpy/milewski-ctfp-pdf\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/hmemcpy/mile</span><span class=\"invisible\">wski-ctfp-pdf</span><span class=\"ellipsis\"></span></a><p data-pid=\"EuG0P2Ul\">名字比较夸张但其实我觉得零基础开始看这个问题也不大，讲的都挺直观的。</p>",
            "excerpt": "为啥大家都反对，说真的我认为挺可行的。虽然我不认为hs是最好的编程入门选择，但也算相对非常有优势的了。一来fp其实更接近人类直觉的思维模式，二来hs的很多标记还是相对继承数学notations system的，可以直接用unicode来表示很多关系（比如compose/arrow）。初学唯一比较坑的地方也就是默认的lazy eval了。 另外还有相对来说网上和市面上和hs相关的文本资料质量都还不错。我个人最近晚上睡前一直在看的就是这本 …",
            "suggest_edit": {
                "reason": "回答被建议修改：\n\n（已修改，评估中）",
                "status": true,
                "tip": "作者修改内容通过后，回答会重新显示恢复正常",
                "title": "",
                "unnormal_details": {
                    "status": "",
                    "description": "",
                    "reason": "",
                    "reason_id": 0,
                    "note": ""
                },
                "url": ""
            },
            "thumbnail_info": {
                "count": 0,
                "type": "",
                "thumbnails": []
            },
            "attached_info": "ogEPCAQQAxjW/frWAyDki4IVkgIkCgkyMDk2NDMyNzUSCTk4NzY3NjM3NBgEIgpJTUFHRV9URVhU",
            "relationship": {
                "is_author": false,
                "is_authorized": false,
                "is_nothelp": false,
                "is_thanked": false,
                "voting": 0
            },
            "attachment": {
                "type": "ANSWER",
                "attachment_id": ""
            },
            "is_deleted": false
        },
        "created": "2020-01-28T02:52:07+08:00"
    }
]